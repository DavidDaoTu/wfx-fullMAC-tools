
WF200_driver_F429ZI_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000130f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005759c  080132a8  080132a8  000232a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0806a844  0806a844  0007a844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0806a84c  0806a84c  0007a84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0806a850  0806a850  0007a850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002bc  20000000  0806a854  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000802bc  2**0
                  CONTENTS
  8 .bss          0000d5b4  200002bc  200002bc  000802bc  2**2
                  ALLOC
  9 ._user_heap_stack 00008000  2000d870  2000d870  000802bc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000802bc  2**0
                  CONTENTS, READONLY
 11 .debug_line   00018591  00000000  00000000  000802ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00062eaf  00000000  00000000  0009887d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a8bd  00000000  00000000  000fb72c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025b8  00000000  00000000  00105ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002b50  00000000  00000000  001085a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00021668  00000000  00000000  0010b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000da80  00000000  00000000  0012c760  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0013a1e0  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007818  00000000  00000000  0013a25c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002bc 	.word	0x200002bc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013290 	.word	0x08013290

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002c0 	.word	0x200002c0
 80001ec:	08013290 	.word	0x08013290

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b97a 	b.w	80005cc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	468c      	mov	ip, r1
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	9e08      	ldr	r6, [sp, #32]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d151      	bne.n	80003a4 <__udivmoddi4+0xb4>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d96d      	bls.n	80003e2 <__udivmoddi4+0xf2>
 8000306:	fab2 fe82 	clz	lr, r2
 800030a:	f1be 0f00 	cmp.w	lr, #0
 800030e:	d00b      	beq.n	8000328 <__udivmoddi4+0x38>
 8000310:	f1ce 0c20 	rsb	ip, lr, #32
 8000314:	fa01 f50e 	lsl.w	r5, r1, lr
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000320:	ea4c 0c05 	orr.w	ip, ip, r5
 8000324:	fa00 f40e 	lsl.w	r4, r0, lr
 8000328:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800032c:	0c25      	lsrs	r5, r4, #16
 800032e:	fbbc f8fa 	udiv	r8, ip, sl
 8000332:	fa1f f987 	uxth.w	r9, r7
 8000336:	fb0a cc18 	mls	ip, sl, r8, ip
 800033a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800033e:	fb08 f309 	mul.w	r3, r8, r9
 8000342:	42ab      	cmp	r3, r5
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x6c>
 8000346:	19ed      	adds	r5, r5, r7
 8000348:	f108 32ff 	add.w	r2, r8, #4294967295
 800034c:	f080 8123 	bcs.w	8000596 <__udivmoddi4+0x2a6>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f240 8120 	bls.w	8000596 <__udivmoddi4+0x2a6>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	443d      	add	r5, r7
 800035c:	1aed      	subs	r5, r5, r3
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb5 f0fa 	udiv	r0, r5, sl
 8000364:	fb0a 5510 	mls	r5, sl, r0, r5
 8000368:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800036c:	fb00 f909 	mul.w	r9, r0, r9
 8000370:	45a1      	cmp	r9, r4
 8000372:	d909      	bls.n	8000388 <__udivmoddi4+0x98>
 8000374:	19e4      	adds	r4, r4, r7
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	f080 810a 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800037e:	45a1      	cmp	r9, r4
 8000380:	f240 8107 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000384:	3802      	subs	r0, #2
 8000386:	443c      	add	r4, r7
 8000388:	eba4 0409 	sub.w	r4, r4, r9
 800038c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000390:	2100      	movs	r1, #0
 8000392:	2e00      	cmp	r6, #0
 8000394:	d061      	beq.n	800045a <__udivmoddi4+0x16a>
 8000396:	fa24 f40e 	lsr.w	r4, r4, lr
 800039a:	2300      	movs	r3, #0
 800039c:	6034      	str	r4, [r6, #0]
 800039e:	6073      	str	r3, [r6, #4]
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xc8>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d054      	beq.n	8000456 <__udivmoddi4+0x166>
 80003ac:	2100      	movs	r1, #0
 80003ae:	e886 0021 	stmia.w	r6, {r0, r5}
 80003b2:	4608      	mov	r0, r1
 80003b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b8:	fab3 f183 	clz	r1, r3
 80003bc:	2900      	cmp	r1, #0
 80003be:	f040 808e 	bne.w	80004de <__udivmoddi4+0x1ee>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xdc>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80fa 	bhi.w	80005c0 <__udivmoddi4+0x2d0>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb65 0503 	sbc.w	r5, r5, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	46ac      	mov	ip, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d03f      	beq.n	800045a <__udivmoddi4+0x16a>
 80003da:	e886 1010 	stmia.w	r6, {r4, ip}
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b912      	cbnz	r2, 80003ea <__udivmoddi4+0xfa>
 80003e4:	2701      	movs	r7, #1
 80003e6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ea:	fab7 fe87 	clz	lr, r7
 80003ee:	f1be 0f00 	cmp.w	lr, #0
 80003f2:	d134      	bne.n	800045e <__udivmoddi4+0x16e>
 80003f4:	1beb      	subs	r3, r5, r7
 80003f6:	0c3a      	lsrs	r2, r7, #16
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	2101      	movs	r1, #1
 80003fe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000402:	0c25      	lsrs	r5, r4, #16
 8000404:	fb02 3318 	mls	r3, r2, r8, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb0c f308 	mul.w	r3, ip, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x134>
 8000414:	19ed      	adds	r5, r5, r7
 8000416:	f108 30ff 	add.w	r0, r8, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x132>
 800041c:	42ab      	cmp	r3, r5
 800041e:	f200 80d1 	bhi.w	80005c4 <__udivmoddi4+0x2d4>
 8000422:	4680      	mov	r8, r0
 8000424:	1aed      	subs	r5, r5, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb5 f0f2 	udiv	r0, r5, r2
 800042c:	fb02 5510 	mls	r5, r2, r0, r5
 8000430:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000434:	fb0c fc00 	mul.w	ip, ip, r0
 8000438:	45a4      	cmp	ip, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x15c>
 800043c:	19e4      	adds	r4, r4, r7
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x15a>
 8000444:	45a4      	cmp	ip, r4
 8000446:	f200 80b8 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 040c 	sub.w	r4, r4, ip
 8000450:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000454:	e79d      	b.n	8000392 <__udivmoddi4+0xa2>
 8000456:	4631      	mov	r1, r6
 8000458:	4630      	mov	r0, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1ce 0420 	rsb	r4, lr, #32
 8000462:	fa05 f30e 	lsl.w	r3, r5, lr
 8000466:	fa07 f70e 	lsl.w	r7, r7, lr
 800046a:	fa20 f804 	lsr.w	r8, r0, r4
 800046e:	0c3a      	lsrs	r2, r7, #16
 8000470:	fa25 f404 	lsr.w	r4, r5, r4
 8000474:	ea48 0803 	orr.w	r8, r8, r3
 8000478:	fbb4 f1f2 	udiv	r1, r4, r2
 800047c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000480:	fb02 4411 	mls	r4, r2, r1, r4
 8000484:	fa1f fc87 	uxth.w	ip, r7
 8000488:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800048c:	fb01 f30c 	mul.w	r3, r1, ip
 8000490:	42ab      	cmp	r3, r5
 8000492:	fa00 f40e 	lsl.w	r4, r0, lr
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x1bc>
 8000498:	19ed      	adds	r5, r5, r7
 800049a:	f101 30ff 	add.w	r0, r1, #4294967295
 800049e:	f080 808a 	bcs.w	80005b6 <__udivmoddi4+0x2c6>
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	f240 8087 	bls.w	80005b6 <__udivmoddi4+0x2c6>
 80004a8:	3902      	subs	r1, #2
 80004aa:	443d      	add	r5, r7
 80004ac:	1aeb      	subs	r3, r5, r3
 80004ae:	fa1f f588 	uxth.w	r5, r8
 80004b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004b6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004be:	fb00 f30c 	mul.w	r3, r0, ip
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1e6>
 80004c6:	19ed      	adds	r5, r5, r7
 80004c8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004cc:	d26f      	bcs.n	80005ae <__udivmoddi4+0x2be>
 80004ce:	42ab      	cmp	r3, r5
 80004d0:	d96d      	bls.n	80005ae <__udivmoddi4+0x2be>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443d      	add	r5, r7
 80004d6:	1aeb      	subs	r3, r5, r3
 80004d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004dc:	e78f      	b.n	80003fe <__udivmoddi4+0x10e>
 80004de:	f1c1 0720 	rsb	r7, r1, #32
 80004e2:	fa22 f807 	lsr.w	r8, r2, r7
 80004e6:	408b      	lsls	r3, r1
 80004e8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ec:	ea48 0303 	orr.w	r3, r8, r3
 80004f0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004f8:	40fd      	lsrs	r5, r7
 80004fa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004fe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000502:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000506:	fb0c 5519 	mls	r5, ip, r9, r5
 800050a:	fa1f f883 	uxth.w	r8, r3
 800050e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000512:	fb09 f408 	mul.w	r4, r9, r8
 8000516:	42ac      	cmp	r4, r5
 8000518:	fa02 f201 	lsl.w	r2, r2, r1
 800051c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x244>
 8000522:	18ed      	adds	r5, r5, r3
 8000524:	f109 30ff 	add.w	r0, r9, #4294967295
 8000528:	d243      	bcs.n	80005b2 <__udivmoddi4+0x2c2>
 800052a:	42ac      	cmp	r4, r5
 800052c:	d941      	bls.n	80005b2 <__udivmoddi4+0x2c2>
 800052e:	f1a9 0902 	sub.w	r9, r9, #2
 8000532:	441d      	add	r5, r3
 8000534:	1b2d      	subs	r5, r5, r4
 8000536:	fa1f fe8e 	uxth.w	lr, lr
 800053a:	fbb5 f0fc 	udiv	r0, r5, ip
 800053e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000542:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000546:	fb00 f808 	mul.w	r8, r0, r8
 800054a:	45a0      	cmp	r8, r4
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x26e>
 800054e:	18e4      	adds	r4, r4, r3
 8000550:	f100 35ff 	add.w	r5, r0, #4294967295
 8000554:	d229      	bcs.n	80005aa <__udivmoddi4+0x2ba>
 8000556:	45a0      	cmp	r8, r4
 8000558:	d927      	bls.n	80005aa <__udivmoddi4+0x2ba>
 800055a:	3802      	subs	r0, #2
 800055c:	441c      	add	r4, r3
 800055e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000562:	eba4 0408 	sub.w	r4, r4, r8
 8000566:	fba0 8902 	umull	r8, r9, r0, r2
 800056a:	454c      	cmp	r4, r9
 800056c:	46c6      	mov	lr, r8
 800056e:	464d      	mov	r5, r9
 8000570:	d315      	bcc.n	800059e <__udivmoddi4+0x2ae>
 8000572:	d012      	beq.n	800059a <__udivmoddi4+0x2aa>
 8000574:	b156      	cbz	r6, 800058c <__udivmoddi4+0x29c>
 8000576:	ebba 030e 	subs.w	r3, sl, lr
 800057a:	eb64 0405 	sbc.w	r4, r4, r5
 800057e:	fa04 f707 	lsl.w	r7, r4, r7
 8000582:	40cb      	lsrs	r3, r1
 8000584:	431f      	orrs	r7, r3
 8000586:	40cc      	lsrs	r4, r1
 8000588:	6037      	str	r7, [r6, #0]
 800058a:	6074      	str	r4, [r6, #4]
 800058c:	2100      	movs	r1, #0
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	4618      	mov	r0, r3
 8000594:	e6f8      	b.n	8000388 <__udivmoddi4+0x98>
 8000596:	4690      	mov	r8, r2
 8000598:	e6e0      	b.n	800035c <__udivmoddi4+0x6c>
 800059a:	45c2      	cmp	sl, r8
 800059c:	d2ea      	bcs.n	8000574 <__udivmoddi4+0x284>
 800059e:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a2:	eb69 0503 	sbc.w	r5, r9, r3
 80005a6:	3801      	subs	r0, #1
 80005a8:	e7e4      	b.n	8000574 <__udivmoddi4+0x284>
 80005aa:	4628      	mov	r0, r5
 80005ac:	e7d7      	b.n	800055e <__udivmoddi4+0x26e>
 80005ae:	4640      	mov	r0, r8
 80005b0:	e791      	b.n	80004d6 <__udivmoddi4+0x1e6>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e7be      	b.n	8000534 <__udivmoddi4+0x244>
 80005b6:	4601      	mov	r1, r0
 80005b8:	e778      	b.n	80004ac <__udivmoddi4+0x1bc>
 80005ba:	3802      	subs	r0, #2
 80005bc:	443c      	add	r4, r7
 80005be:	e745      	b.n	800044c <__udivmoddi4+0x15c>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e708      	b.n	80003d6 <__udivmoddi4+0xe6>
 80005c4:	f1a8 0802 	sub.w	r8, r8, #2
 80005c8:	443d      	add	r5, r7
 80005ca:	e72b      	b.n	8000424 <__udivmoddi4+0x134>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80005d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000608 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005d6:	e003      	b.n	80005e0 <LoopCopyDataInit>

080005d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005de:	3104      	adds	r1, #4

080005e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005e8:	d3f6      	bcc.n	80005d8 <CopyDataInit>
  ldr  r2, =_sbss
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005ec:	e002      	b.n	80005f4 <LoopFillZerobss>

080005ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005f0:	f842 3b04 	str.w	r3, [r2], #4

080005f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005f8:	d3f9      	bcc.n	80005ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005fa:	f002 fb0f 	bl	8002c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005fe:	f011 fd3f 	bl	8012080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000602:	f001 fc0f 	bl	8001e24 <main>
  bx  lr    
 8000606:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000608:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800060c:	0806a854 	.word	0x0806a854
  ldr  r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000614:	200002bc 	.word	0x200002bc
  ldr  r2, =_sbss
 8000618:	200002bc 	.word	0x200002bc
  ldr  r3, = _ebss
 800061c:	2000d870 	.word	0x2000d870

08000620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC_IRQHandler>
	...

08000624 <prvUARTInputTask>:
  UARTInputTaskHandle = osThreadCreate(osThread(UARTInputTask), NULL);
}
/*-----------------------------------------------------------*/

static void prvUARTInputTask(void const * pvParameters )
{
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	b083      	sub	sp, #12
  char cRxedChar, cInputIndex = 0;
 8000628:	2500      	movs	r5, #0
  static char waiting = 0;
  ( void ) pvParameters;
  
  for( ;; )
  {
    xSemaphoreTake (uartInputSemaphore, portMAX_DELAY);
 800062a:	2300      	movs	r3, #0
 800062c:	f04f 32ff 	mov.w	r2, #4294967295
 8000630:	4619      	mov	r1, r3
 8000632:	484f      	ldr	r0, [pc, #316]	; (8000770 <prvUARTInputTask+0x14c>)
 8000634:	6800      	ldr	r0, [r0, #0]
 8000636:	f005 ffa7 	bl	8006588 <xQueueGenericReceive>
    waiting = 1;
 800063a:	2201      	movs	r2, #1
 800063c:	4b4d      	ldr	r3, [pc, #308]	; (8000774 <prvUARTInputTask+0x150>)
 800063e:	701a      	strb	r2, [r3, #0]
    while (waiting == 1)
 8000640:	e035      	b.n	80006ae <prvUARTInputTask+0x8a>
    {
      strcpy(string_output, "");
      /* Only interested in reading one character at a time. */
      if( xSemaphoreTake( uart3Semaphore, portMAX_DELAY ) == pdTRUE )
      {
        HAL_UART_Receive_IT(&huart3, (uint8_t *) &cRxedChar, sizeof( cRxedChar ) );
 8000642:	2201      	movs	r2, #1
 8000644:	f10d 0107 	add.w	r1, sp, #7
 8000648:	484b      	ldr	r0, [pc, #300]	; (8000778 <prvUARTInputTask+0x154>)
 800064a:	f003 ff3b 	bl	80044c4 <HAL_UART_Receive_IT>
 800064e:	e03e      	b.n	80006ce <prvUARTInputTask+0xaa>
      /*Wait for a character to be received*/
      while ((ulTaskNotifyTake( pdTRUE, WAIT_TIME_1MS ) == pdFALSE) && (stopWaiting == 0));
      
      if (stopWaiting)
      {
          xSemaphoreGive(uart3Semaphore);
 8000650:	2300      	movs	r3, #0
 8000652:	461a      	mov	r2, r3
 8000654:	4619      	mov	r1, r3
 8000656:	4849      	ldr	r0, [pc, #292]	; (800077c <prvUARTInputTask+0x158>)
 8000658:	6800      	ldr	r0, [r0, #0]
 800065a:	f005 fded 	bl	8006238 <xQueueGenericSend>
          stopWaiting = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	4a47      	ldr	r2, [pc, #284]	; (8000780 <prvUARTInputTask+0x15c>)
 8000662:	7013      	strb	r3, [r2, #0]
          waiting = 0;
 8000664:	4a43      	ldr	r2, [pc, #268]	; (8000774 <prvUARTInputTask+0x150>)
 8000666:	7013      	strb	r3, [r2, #0]
 8000668:	e03e      	b.n	80006e8 <prvUARTInputTask+0xc4>
        /* The input command string is complete.  Ensure the previous
        UART transmission has finished before sending any more data.
        This task will be held in the Blocked state while the Tx completes,
        if it has not already done so, so no CPU time will be wasted by
        polling. */
        strcat(string_output, ( char * ) pcNewLine);
 800066a:	4c46      	ldr	r4, [pc, #280]	; (8000784 <prvUARTInputTask+0x160>)
 800066c:	4620      	mov	r0, r4
 800066e:	f7ff fdc9 	bl	8000204 <strlen>
 8000672:	1902      	adds	r2, r0, r4
 8000674:	4b44      	ldr	r3, [pc, #272]	; (8000788 <prvUARTInputTask+0x164>)
 8000676:	8819      	ldrh	r1, [r3, #0]
 8000678:	789b      	ldrb	r3, [r3, #2]
 800067a:	5301      	strh	r1, [r0, r4]
 800067c:	7093      	strb	r3, [r2, #2]
      
        /* Pass the received string to the waiting task.  */
      
        xSemaphoreGive(stringRcvSemaphore);
 800067e:	2300      	movs	r3, #0
 8000680:	461a      	mov	r2, r3
 8000682:	4619      	mov	r1, r3
 8000684:	4841      	ldr	r0, [pc, #260]	; (800078c <prvUARTInputTask+0x168>)
 8000686:	6800      	ldr	r0, [r0, #0]
 8000688:	f005 fdd6 	bl	8006238 <xQueueGenericSend>
        waiting = 0;
 800068c:	2500      	movs	r5, #0
 800068e:	4b39      	ldr	r3, [pc, #228]	; (8000774 <prvUARTInputTask+0x150>)
 8000690:	701d      	strb	r5, [r3, #0]

        /* All the strings generated by the input command have been sent.
        Clear the input	string ready to receive the next command.  Remember
        the command that was just processed first in case it is to be
        processed again. */
        strcpy( ( char * ) cLastInputString, ( char * ) UART_Input_String );
 8000692:	4c3f      	ldr	r4, [pc, #252]	; (8000790 <prvUARTInputTask+0x16c>)
 8000694:	4621      	mov	r1, r4
 8000696:	483f      	ldr	r0, [pc, #252]	; (8000794 <prvUARTInputTask+0x170>)
 8000698:	f011 fe3b 	bl	8012312 <strcpy>
        cInputIndex = 0;
        memset( UART_Input_String, 0x00, INPUT_SIZE );
 800069c:	2232      	movs	r2, #50	; 0x32
 800069e:	4629      	mov	r1, r5
 80006a0:	4620      	mov	r0, r4
 80006a2:	f011 fd5a 	bl	801215a <memset>
            }
          }
        }
      }
      /*Send back the UART response, wait for the binary semaphore to be available*/
      if(strlen( ( char * ) string_output ) != 0){
 80006a6:	4b37      	ldr	r3, [pc, #220]	; (8000784 <prvUARTInputTask+0x160>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d14b      	bne.n	8000746 <prvUARTInputTask+0x122>
    while (waiting == 1)
 80006ae:	4b31      	ldr	r3, [pc, #196]	; (8000774 <prvUARTInputTask+0x150>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d1b9      	bne.n	800062a <prvUARTInputTask+0x6>
      strcpy(string_output, "");
 80006b6:	2100      	movs	r1, #0
 80006b8:	4b32      	ldr	r3, [pc, #200]	; (8000784 <prvUARTInputTask+0x160>)
 80006ba:	7019      	strb	r1, [r3, #0]
      if( xSemaphoreTake( uart3Semaphore, portMAX_DELAY ) == pdTRUE )
 80006bc:	460b      	mov	r3, r1
 80006be:	f04f 32ff 	mov.w	r2, #4294967295
 80006c2:	482e      	ldr	r0, [pc, #184]	; (800077c <prvUARTInputTask+0x158>)
 80006c4:	6800      	ldr	r0, [r0, #0]
 80006c6:	f005 ff5f 	bl	8006588 <xQueueGenericReceive>
 80006ca:	2801      	cmp	r0, #1
 80006cc:	d0b9      	beq.n	8000642 <prvUARTInputTask+0x1e>
      while ((ulTaskNotifyTake( pdTRUE, WAIT_TIME_1MS ) == pdFALSE) && (stopWaiting == 0));
 80006ce:	2101      	movs	r1, #1
 80006d0:	4608      	mov	r0, r1
 80006d2:	f006 fded 	bl	80072b0 <ulTaskNotifyTake>
 80006d6:	b918      	cbnz	r0, 80006e0 <prvUARTInputTask+0xbc>
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <prvUARTInputTask+0x15c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0f6      	beq.n	80006ce <prvUARTInputTask+0xaa>
      if (stopWaiting)
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <prvUARTInputTask+0x15c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1b3      	bne.n	8000650 <prvUARTInputTask+0x2c>
      if( cRxedChar != '\b' )
 80006e8:	f89d 4007 	ldrb.w	r4, [sp, #7]
 80006ec:	2c08      	cmp	r4, #8
 80006ee:	d008      	beq.n	8000702 <prvUARTInputTask+0xde>
        cToStr[0] = cRxedChar;
 80006f0:	f88d 4004 	strb.w	r4, [sp, #4]
        cToStr[1] = '\0';
 80006f4:	2300      	movs	r3, #0
 80006f6:	f88d 3005 	strb.w	r3, [sp, #5]
        strcat(string_output, ( char * ) (cToStr));
 80006fa:	a901      	add	r1, sp, #4
 80006fc:	4821      	ldr	r0, [pc, #132]	; (8000784 <prvUARTInputTask+0x160>)
 80006fe:	f011 fdeb 	bl	80122d8 <strcat>
      if( cRxedChar == '\r' )
 8000702:	2c0d      	cmp	r4, #13
 8000704:	d0b1      	beq.n	800066a <prvUARTInputTask+0x46>
        if( cRxedChar == '\n' )
 8000706:	2c0a      	cmp	r4, #10
 8000708:	d0cd      	beq.n	80006a6 <prvUARTInputTask+0x82>
        else if( cRxedChar == '\b' )
 800070a:	2c08      	cmp	r4, #8
 800070c:	d00b      	beq.n	8000726 <prvUARTInputTask+0x102>
          if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 800070e:	f1a4 0320 	sub.w	r3, r4, #32
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b5e      	cmp	r3, #94	; 0x5e
 8000716:	d8c6      	bhi.n	80006a6 <prvUARTInputTask+0x82>
            if( cInputIndex < INPUT_SIZE )
 8000718:	2d31      	cmp	r5, #49	; 0x31
 800071a:	d8c4      	bhi.n	80006a6 <prvUARTInputTask+0x82>
              UART_Input_String[ cInputIndex ] = cRxedChar;
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <prvUARTInputTask+0x16c>)
 800071e:	555c      	strb	r4, [r3, r5]
              cInputIndex++;
 8000720:	3501      	adds	r5, #1
 8000722:	b2ed      	uxtb	r5, r5
 8000724:	e7bf      	b.n	80006a6 <prvUARTInputTask+0x82>
          if( cInputIndex > 0 )
 8000726:	2d00      	cmp	r5, #0
 8000728:	d0bd      	beq.n	80006a6 <prvUARTInputTask+0x82>
            strcat(string_output, ( char * ) backspace);
 800072a:	4c16      	ldr	r4, [pc, #88]	; (8000784 <prvUARTInputTask+0x160>)
 800072c:	4620      	mov	r0, r4
 800072e:	f7ff fd69 	bl	8000204 <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	4a18      	ldr	r2, [pc, #96]	; (8000798 <prvUARTInputTask+0x174>)
 8000736:	6810      	ldr	r0, [r2, #0]
 8000738:	5118      	str	r0, [r3, r4]
            cInputIndex--;
 800073a:	3d01      	subs	r5, #1
 800073c:	b2ed      	uxtb	r5, r5
            UART_Input_String[ cInputIndex ] = '\0';
 800073e:	2200      	movs	r2, #0
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <prvUARTInputTask+0x16c>)
 8000742:	555a      	strb	r2, [r3, r5]
 8000744:	e7af      	b.n	80006a6 <prvUARTInputTask+0x82>
        if( xSemaphoreTake( uart3Semaphore, portMAX_DELAY ) == pdTRUE )
 8000746:	2300      	movs	r3, #0
 8000748:	f04f 32ff 	mov.w	r2, #4294967295
 800074c:	4619      	mov	r1, r3
 800074e:	480b      	ldr	r0, [pc, #44]	; (800077c <prvUARTInputTask+0x158>)
 8000750:	6800      	ldr	r0, [r0, #0]
 8000752:	f005 ff19 	bl	8006588 <xQueueGenericReceive>
 8000756:	2801      	cmp	r0, #1
 8000758:	d1a9      	bne.n	80006ae <prvUARTInputTask+0x8a>
        {
          HAL_UART_Transmit_IT(&huart3, (uint8_t *) string_output, strlen( ( char * ) string_output ) );
 800075a:	4c0a      	ldr	r4, [pc, #40]	; (8000784 <prvUARTInputTask+0x160>)
 800075c:	4620      	mov	r0, r4
 800075e:	f7ff fd51 	bl	8000204 <strlen>
 8000762:	b282      	uxth	r2, r0
 8000764:	4621      	mov	r1, r4
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <prvUARTInputTask+0x154>)
 8000768:	f003 fe88 	bl	800447c <HAL_UART_Transmit_IT>
 800076c:	e79f      	b.n	80006ae <prvUARTInputTask+0x8a>
 800076e:	bf00      	nop
 8000770:	20006f04 	.word	0x20006f04
 8000774:	2000030b 	.word	0x2000030b
 8000778:	20006f40 	.word	0x20006f40
 800077c:	20006f80 	.word	0x20006f80
 8000780:	2000030a 	.word	0x2000030a
 8000784:	20006e98 	.word	0x20006e98
 8000788:	08067648 	.word	0x08067648
 800078c:	20006e94 	.word	0x20006e94
 8000790:	20006ed0 	.word	0x20006ed0
 8000794:	200002d8 	.word	0x200002d8
 8000798:	080132f8 	.word	0x080132f8

0800079c <vUARTInputStop>:
  stopWaiting = 1;
 800079c:	2201      	movs	r2, #1
 800079e:	4b01      	ldr	r3, [pc, #4]	; (80007a4 <vUARTInputStop+0x8>)
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	4770      	bx	lr
 80007a4:	2000030a 	.word	0x2000030a

080007a8 <vUARTInputStart>:
{
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	b087      	sub	sp, #28
  stringRcvSemaphore = xSemaphoreCreateBinary();
 80007ac:	2203      	movs	r2, #3
 80007ae:	2100      	movs	r1, #0
 80007b0:	2001      	movs	r0, #1
 80007b2:	f005 fd1d 	bl	80061f0 <xQueueGenericCreate>
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <vUARTInputStart+0x3c>)
 80007b8:	6018      	str	r0, [r3, #0]
  uartInputSemaphore = xSemaphoreCreateBinary();
 80007ba:	2203      	movs	r2, #3
 80007bc:	2100      	movs	r1, #0
 80007be:	2001      	movs	r0, #1
 80007c0:	f005 fd16 	bl	80061f0 <xQueueGenericCreate>
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <vUARTInputStart+0x40>)
 80007c6:	6018      	str	r0, [r3, #0]
  osThreadDef(UARTInputTask, prvUARTInputTask, osPriorityLow, 0, 512);
 80007c8:	ac01      	add	r4, sp, #4
 80007ca:	4d08      	ldr	r5, [pc, #32]	; (80007ec <vUARTInputStart+0x44>)
 80007cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d0:	682b      	ldr	r3, [r5, #0]
 80007d2:	6023      	str	r3, [r4, #0]
  UARTInputTaskHandle = osThreadCreate(osThread(UARTInputTask), NULL);
 80007d4:	2100      	movs	r1, #0
 80007d6:	a801      	add	r0, sp, #4
 80007d8:	f004 ffef 	bl	80057ba <osThreadCreate>
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <vUARTInputStart+0x48>)
 80007de:	6018      	str	r0, [r3, #0]
}
 80007e0:	b007      	add	sp, #28
 80007e2:	bd30      	pop	{r4, r5, pc}
 80007e4:	20006e94 	.word	0x20006e94
 80007e8:	20006f04 	.word	0x20006f04
 80007ec:	080132a8 	.word	0x080132a8
 80007f0:	20006ecc 	.word	0x20006ecc

080007f4 <User_notification>:
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(int link_up) 
{
  if (link_up)
 80007f4:	b918      	cbnz	r0, 80007fe <User_notification+0xa>
    DHCP_state = DHCP_START;
  }
  else
  {  
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
 80007f6:	2205      	movs	r2, #5
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <User_notification+0x14>)
 80007fa:	701a      	strb	r2, [r3, #0]
 80007fc:	4770      	bx	lr
    DHCP_state = DHCP_START;
 80007fe:	2201      	movs	r2, #1
 8000800:	4b01      	ldr	r3, [pc, #4]	; (8000808 <User_notification+0x14>)
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	2000030c 	.word	0x2000030c

0800080c <DHCP_thread>:
  * @brief  DHCP Process
  * @param  argument: network interface
  * @retval None
  */
void DHCP_thread(void const * argument)
{
 800080c:	b510      	push	{r4, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	4604      	mov	r4, r0
 8000812:	e00f      	b.n	8000834 <DHCP_thread+0x28>
  {
    switch (DHCP_state)
    {
    case DHCP_START:
      {
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8000814:	2300      	movs	r3, #0
 8000816:	6063      	str	r3, [r4, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 8000818:	60a3      	str	r3, [r4, #8]
        ip_addr_set_zero_ip4(&netif->gw);  
 800081a:	60e3      	str	r3, [r4, #12]
        osDelay(5);
 800081c:	2005      	movs	r0, #5
 800081e:	f004 ffeb 	bl	80057f8 <osDelay>
        dhcp_start(netif);
 8000822:	4620      	mov	r0, r4
 8000824:	f009 ff42 	bl	800a6ac <dhcp_start>
        DHCP_state = DHCP_WAIT_ADDRESS;
 8000828:	2202      	movs	r2, #2
 800082a:	4b45      	ldr	r3, [pc, #276]	; (8000940 <DHCP_thread+0x134>)
 800082c:	701a      	strb	r2, [r3, #0]
    break;
    default: break;
    }
    
    /* wait 250 ms */
    osDelay(250);
 800082e:	20fa      	movs	r0, #250	; 0xfa
 8000830:	f004 ffe2 	bl	80057f8 <osDelay>
    switch (DHCP_state)
 8000834:	4b42      	ldr	r3, [pc, #264]	; (8000940 <DHCP_thread+0x134>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b02      	cmp	r3, #2
 800083c:	d004      	beq.n	8000848 <DHCP_thread+0x3c>
 800083e:	2b05      	cmp	r3, #5
 8000840:	d077      	beq.n	8000932 <DHCP_thread+0x126>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d1f3      	bne.n	800082e <DHCP_thread+0x22>
 8000846:	e7e5      	b.n	8000814 <DHCP_thread+0x8>
        if (dhcp_supplied_address(netif)) 
 8000848:	4620      	mov	r0, r4
 800084a:	f009 feb5 	bl	800a5b8 <dhcp_supplied_address>
 800084e:	2800      	cmp	r0, #0
 8000850:	d15f      	bne.n	8000912 <DHCP_thread+0x106>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 8000852:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (dhcp->tries > MAX_DHCP_TRIES)
 8000854:	799b      	ldrb	r3, [r3, #6]
 8000856:	2b04      	cmp	r3, #4
 8000858:	d9e9      	bls.n	800082e <DHCP_thread+0x22>
            DHCP_state = DHCP_TIMEOUT;
 800085a:	2204      	movs	r2, #4
 800085c:	4b38      	ldr	r3, [pc, #224]	; (8000940 <DHCP_thread+0x134>)
 800085e:	701a      	strb	r2, [r3, #0]
            dhcp_stop(netif);
 8000860:	4620      	mov	r0, r4
 8000862:	f00a f803 	bl	800a86c <dhcp_stop>
            IP_ADDR4(&ipaddr, ip_addr0 ,ip_addr1 , ip_addr2 , ip_addr3 );
 8000866:	4b37      	ldr	r3, [pc, #220]	; (8000944 <DHCP_thread+0x138>)
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	4b37      	ldr	r3, [pc, #220]	; (8000948 <DHCP_thread+0x13c>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	041b      	lsls	r3, r3, #16
 8000870:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000874:	4a35      	ldr	r2, [pc, #212]	; (800094c <DHCP_thread+0x140>)
 8000876:	7812      	ldrb	r2, [r2, #0]
 8000878:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800087c:	4a34      	ldr	r2, [pc, #208]	; (8000950 <DHCP_thread+0x144>)
 800087e:	7812      	ldrb	r2, [r2, #0]
 8000880:	4313      	orrs	r3, r2
 8000882:	021a      	lsls	r2, r3, #8
 8000884:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8000888:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800088c:	0a19      	lsrs	r1, r3, #8
 800088e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8000892:	430a      	orrs	r2, r1
 8000894:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 8000898:	9305      	str	r3, [sp, #20]
            IP_ADDR4(&netmask, netmask_addr0, netmask_addr1, netmask_addr2, netmask_addr3);
 800089a:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <DHCP_thread+0x148>)
 800089c:	781a      	ldrb	r2, [r3, #0]
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <DHCP_thread+0x14c>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	041b      	lsls	r3, r3, #16
 80008a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80008a8:	4a2c      	ldr	r2, [pc, #176]	; (800095c <DHCP_thread+0x150>)
 80008aa:	7812      	ldrb	r2, [r2, #0]
 80008ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80008b0:	4a2b      	ldr	r2, [pc, #172]	; (8000960 <DHCP_thread+0x154>)
 80008b2:	7812      	ldrb	r2, [r2, #0]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	021a      	lsls	r2, r3, #8
 80008b8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80008bc:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80008c0:	0a19      	lsrs	r1, r3, #8
 80008c2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80008c6:	430a      	orrs	r2, r1
 80008c8:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 80008cc:	9304      	str	r3, [sp, #16]
            IP_ADDR4(&gw, gw_addr0, gw_addr1, gw_addr2, gw_addr3);
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <DHCP_thread+0x158>)
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	4b25      	ldr	r3, [pc, #148]	; (8000968 <DHCP_thread+0x15c>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	041b      	lsls	r3, r3, #16
 80008d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80008dc:	4a23      	ldr	r2, [pc, #140]	; (800096c <DHCP_thread+0x160>)
 80008de:	7812      	ldrb	r2, [r2, #0]
 80008e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80008e4:	4a22      	ldr	r2, [pc, #136]	; (8000970 <DHCP_thread+0x164>)
 80008e6:	7812      	ldrb	r2, [r2, #0]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	021a      	lsls	r2, r3, #8
 80008ec:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80008f0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80008f4:	0a19      	lsrs	r1, r3, #8
 80008f6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80008fa:	430a      	orrs	r2, r1
 80008fc:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8000900:	ab06      	add	r3, sp, #24
 8000902:	f843 2d0c 	str.w	r2, [r3, #-12]!
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 8000906:	aa04      	add	r2, sp, #16
 8000908:	a905      	add	r1, sp, #20
 800090a:	4620      	mov	r0, r4
 800090c:	f00c f876 	bl	800c9fc <netif_set_addr>
 8000910:	e78d      	b.n	800082e <DHCP_thread+0x22>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;	
 8000912:	2203      	movs	r2, #3
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <DHCP_thread+0x134>)
 8000916:	701a      	strb	r2, [r3, #0]
                  gnetif.ip_addr.addr & 0xff,
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <DHCP_thread+0x168>)
 800091a:	6859      	ldr	r1, [r3, #4]
                  (gnetif.ip_addr.addr >> 24) & 0xff);
 800091c:	0e0b      	lsrs	r3, r1, #24
          printf("IP address : %3d.%3d.%3d.%3d\r\n",
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8000924:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8000928:	b2c9      	uxtb	r1, r1
 800092a:	4813      	ldr	r0, [pc, #76]	; (8000978 <DHCP_thread+0x16c>)
 800092c:	f011 fc1e 	bl	801216c <iprintf>
 8000930:	e77d      	b.n	800082e <DHCP_thread+0x22>
      dhcp_stop(netif);
 8000932:	4620      	mov	r0, r4
 8000934:	f009 ff9a 	bl	800a86c <dhcp_stop>
      DHCP_state = DHCP_OFF; 
 8000938:	2200      	movs	r2, #0
 800093a:	4b01      	ldr	r3, [pc, #4]	; (8000940 <DHCP_thread+0x134>)
 800093c:	701a      	strb	r2, [r3, #0]
    break;
 800093e:	e776      	b.n	800082e <DHCP_thread+0x22>
 8000940:	2000030c 	.word	0x2000030c
 8000944:	20000000 	.word	0x20000000
 8000948:	20000001 	.word	0x20000001
 800094c:	20000338 	.word	0x20000338
 8000950:	20000002 	.word	0x20000002
 8000954:	20000003 	.word	0x20000003
 8000958:	20000004 	.word	0x20000004
 800095c:	20000005 	.word	0x20000005
 8000960:	20000339 	.word	0x20000339
 8000964:	20000334 	.word	0x20000334
 8000968:	20000335 	.word	0x20000335
 800096c:	20000336 	.word	0x20000336
 8000970:	20000337 	.word	0x20000337
 8000974:	20006f08 	.word	0x20006f08
 8000978:	0801330c 	.word	0x0801330c

0800097c <dhcpserver_remove_mac>:

#define LEASE_TIME_1DAY     (86400)

static void dhcpserver_remove_mac(struct eth_addr *mac)
{
	for (uint32_t i = 0; i < MAX_CLIENT; ++i) {
 800097c:	2300      	movs	r3, #0
 800097e:	2b03      	cmp	r3, #3
 8000980:	d848      	bhi.n	8000a14 <dhcpserver_remove_mac+0x98>
{
 8000982:	b430      	push	{r4, r5}
 8000984:	e002      	b.n	800098c <dhcpserver_remove_mac+0x10>
	for (uint32_t i = 0; i < MAX_CLIENT; ++i) {
 8000986:	3301      	adds	r3, #1
 8000988:	2b03      	cmp	r3, #3
 800098a:	d841      	bhi.n	8000a10 <dhcpserver_remove_mac+0x94>
		if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1] &&
 800098c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000990:	004a      	lsls	r2, r1, #1
 8000992:	4921      	ldr	r1, [pc, #132]	; (8000a18 <dhcpserver_remove_mac+0x9c>)
 8000994:	5c89      	ldrb	r1, [r1, r2]
 8000996:	7802      	ldrb	r2, [r0, #0]
 8000998:	4291      	cmp	r1, r2
 800099a:	d1f4      	bne.n	8000986 <dhcpserver_remove_mac+0xa>
 800099c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80009a0:	0051      	lsls	r1, r2, #1
 80009a2:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <dhcpserver_remove_mac+0x9c>)
 80009a4:	440a      	add	r2, r1
 80009a6:	7851      	ldrb	r1, [r2, #1]
 80009a8:	7842      	ldrb	r2, [r0, #1]
 80009aa:	4291      	cmp	r1, r2
 80009ac:	d1eb      	bne.n	8000986 <dhcpserver_remove_mac+0xa>
				saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3] && 
 80009ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80009b2:	0051      	lsls	r1, r2, #1
 80009b4:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <dhcpserver_remove_mac+0x9c>)
 80009b6:	440a      	add	r2, r1
 80009b8:	7891      	ldrb	r1, [r2, #2]
 80009ba:	7882      	ldrb	r2, [r0, #2]
		if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1] &&
 80009bc:	4291      	cmp	r1, r2
 80009be:	d1e2      	bne.n	8000986 <dhcpserver_remove_mac+0xa>
				saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3] && 
 80009c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80009c4:	0051      	lsls	r1, r2, #1
 80009c6:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <dhcpserver_remove_mac+0x9c>)
 80009c8:	440a      	add	r2, r1
 80009ca:	78d1      	ldrb	r1, [r2, #3]
 80009cc:	78c2      	ldrb	r2, [r0, #3]
 80009ce:	4291      	cmp	r1, r2
 80009d0:	d1d9      	bne.n	8000986 <dhcpserver_remove_mac+0xa>
				saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 80009d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80009d6:	0051      	lsls	r1, r2, #1
 80009d8:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <dhcpserver_remove_mac+0x9c>)
 80009da:	440a      	add	r2, r1
 80009dc:	7911      	ldrb	r1, [r2, #4]
 80009de:	7902      	ldrb	r2, [r0, #4]
				saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3] && 
 80009e0:	4291      	cmp	r1, r2
 80009e2:	d1d0      	bne.n	8000986 <dhcpserver_remove_mac+0xa>
				saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 80009e4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80009e8:	0051      	lsls	r1, r2, #1
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <dhcpserver_remove_mac+0x9c>)
 80009ec:	440a      	add	r2, r1
 80009ee:	7951      	ldrb	r1, [r2, #5]
 80009f0:	7942      	ldrb	r2, [r0, #5]
 80009f2:	4291      	cmp	r1, r2
 80009f4:	d1c7      	bne.n	8000986 <dhcpserver_remove_mac+0xa>
			saved_mac[i].addr[0] = 0;
 80009f6:	4d08      	ldr	r5, [pc, #32]	; (8000a18 <dhcpserver_remove_mac+0x9c>)
 80009f8:	005a      	lsls	r2, r3, #1
 80009fa:	441a      	add	r2, r3
 80009fc:	0054      	lsls	r4, r2, #1
 80009fe:	1929      	adds	r1, r5, r4
 8000a00:	2200      	movs	r2, #0
 8000a02:	552a      	strb	r2, [r5, r4]
			saved_mac[i].addr[1] = 0;
 8000a04:	704a      	strb	r2, [r1, #1]
			saved_mac[i].addr[2] = 0;
 8000a06:	708a      	strb	r2, [r1, #2]
			saved_mac[i].addr[3] = 0;
 8000a08:	70ca      	strb	r2, [r1, #3]
			saved_mac[i].addr[4] = 0;
 8000a0a:	710a      	strb	r2, [r1, #4]
			saved_mac[i].addr[5] = 0;
 8000a0c:	714a      	strb	r2, [r1, #5]
 8000a0e:	e7ba      	b.n	8000986 <dhcpserver_remove_mac+0xa>
		}
	}
}
 8000a10:	bc30      	pop	{r4, r5}
 8000a12:	4770      	bx	lr
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000314 	.word	0x20000314

08000a1c <dhcpserver_save_mac>:

static void dhcpserver_save_mac(struct eth_addr *mac)
{
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	4604      	mov	r4, r0
	/* Remove previous listing of MAC. */
	dhcpserver_remove_mac(mac);
 8000a20:	f7ff ffac 	bl	800097c <dhcpserver_remove_mac>

	for (uint8_t i = 0; i < MAX_CLIENT; ++i) {
 8000a24:	2300      	movs	r3, #0
 8000a26:	e001      	b.n	8000a2c <dhcpserver_save_mac+0x10>
 8000a28:	3301      	adds	r3, #1
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d838      	bhi.n	8000aa2 <dhcpserver_save_mac+0x86>
		if (saved_mac[i].addr[0] == 0 && saved_mac[i].addr[1] == 0 &&
 8000a30:	4618      	mov	r0, r3
 8000a32:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000a36:	004a      	lsls	r2, r1, #1
 8000a38:	491a      	ldr	r1, [pc, #104]	; (8000aa4 <dhcpserver_save_mac+0x88>)
 8000a3a:	5c8a      	ldrb	r2, [r1, r2]
 8000a3c:	2a00      	cmp	r2, #0
 8000a3e:	d1f3      	bne.n	8000a28 <dhcpserver_save_mac+0xc>
 8000a40:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000a44:	0051      	lsls	r1, r2, #1
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <dhcpserver_save_mac+0x88>)
 8000a48:	440a      	add	r2, r1
 8000a4a:	7852      	ldrb	r2, [r2, #1]
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	d1eb      	bne.n	8000a28 <dhcpserver_save_mac+0xc>
				saved_mac[i].addr[2] == 0 && saved_mac[i].addr[3] == 0 && 
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <dhcpserver_save_mac+0x88>)
 8000a52:	440a      	add	r2, r1
 8000a54:	7892      	ldrb	r2, [r2, #2]
		if (saved_mac[i].addr[0] == 0 && saved_mac[i].addr[1] == 0 &&
 8000a56:	2a00      	cmp	r2, #0
 8000a58:	d1e6      	bne.n	8000a28 <dhcpserver_save_mac+0xc>
				saved_mac[i].addr[2] == 0 && saved_mac[i].addr[3] == 0 && 
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <dhcpserver_save_mac+0x88>)
 8000a5c:	440a      	add	r2, r1
 8000a5e:	78d2      	ldrb	r2, [r2, #3]
 8000a60:	2a00      	cmp	r2, #0
 8000a62:	d1e1      	bne.n	8000a28 <dhcpserver_save_mac+0xc>
				saved_mac[i].addr[4] == 0 && saved_mac[i].addr[5] == 0) {
 8000a64:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <dhcpserver_save_mac+0x88>)
 8000a66:	440a      	add	r2, r1
 8000a68:	7912      	ldrb	r2, [r2, #4]
				saved_mac[i].addr[2] == 0 && saved_mac[i].addr[3] == 0 && 
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	d1dc      	bne.n	8000a28 <dhcpserver_save_mac+0xc>
				saved_mac[i].addr[4] == 0 && saved_mac[i].addr[5] == 0) {
 8000a6e:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <dhcpserver_save_mac+0x88>)
 8000a70:	440a      	add	r2, r1
 8000a72:	7952      	ldrb	r2, [r2, #5]
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d1d7      	bne.n	8000a28 <dhcpserver_save_mac+0xc>
			saved_mac[i].addr[0] = mac->addr[0];
 8000a78:	7826      	ldrb	r6, [r4, #0]
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <dhcpserver_save_mac+0x88>)
 8000a7c:	0042      	lsls	r2, r0, #1
 8000a7e:	1811      	adds	r1, r2, r0
 8000a80:	004d      	lsls	r5, r1, #1
 8000a82:	1959      	adds	r1, r3, r5
 8000a84:	555e      	strb	r6, [r3, r5]
			saved_mac[i].addr[1] = mac->addr[1];
 8000a86:	7865      	ldrb	r5, [r4, #1]
 8000a88:	704d      	strb	r5, [r1, #1]
			saved_mac[i].addr[2] = mac->addr[2];
 8000a8a:	78a5      	ldrb	r5, [r4, #2]
 8000a8c:	708d      	strb	r5, [r1, #2]
			saved_mac[i].addr[3] = mac->addr[3];
 8000a8e:	78e5      	ldrb	r5, [r4, #3]
 8000a90:	70cd      	strb	r5, [r1, #3]
			saved_mac[i].addr[4] = mac->addr[4];
 8000a92:	7925      	ldrb	r5, [r4, #4]
 8000a94:	710d      	strb	r5, [r1, #4]
			saved_mac[i].addr[5] = mac->addr[5];
 8000a96:	7961      	ldrb	r1, [r4, #5]
 8000a98:	4410      	add	r0, r2
 8000a9a:	0042      	lsls	r2, r0, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	7159      	strb	r1, [r3, #5]
			break;
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
 8000aa2:	bd70      	pop	{r4, r5, r6, pc}
 8000aa4:	20000314 	.word	0x20000314

08000aa8 <dhcpserver_get_ip>:
 */
static ip_addr_t dhcpserver_get_ip(struct eth_addr *mac)
{
	ip_addr_t offer_ip;

	for (uint32_t i = 0; i < MAX_CLIENT; ++i) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e000      	b.n	8000aae <dhcpserver_get_ip+0x6>
 8000aac:	3301      	adds	r3, #1
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d842      	bhi.n	8000b38 <dhcpserver_get_ip+0x90>
		if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1] &&
 8000ab2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000ab6:	4921      	ldr	r1, [pc, #132]	; (8000b3c <dhcpserver_get_ip+0x94>)
 8000ab8:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8000abc:	7802      	ldrb	r2, [r0, #0]
 8000abe:	4291      	cmp	r1, r2
 8000ac0:	d1f4      	bne.n	8000aac <dhcpserver_get_ip+0x4>
 8000ac2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000ac6:	491d      	ldr	r1, [pc, #116]	; (8000b3c <dhcpserver_get_ip+0x94>)
 8000ac8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8000acc:	7851      	ldrb	r1, [r2, #1]
 8000ace:	7842      	ldrb	r2, [r0, #1]
 8000ad0:	4291      	cmp	r1, r2
 8000ad2:	d1eb      	bne.n	8000aac <dhcpserver_get_ip+0x4>
				saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3] && 
 8000ad4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000ad8:	4918      	ldr	r1, [pc, #96]	; (8000b3c <dhcpserver_get_ip+0x94>)
 8000ada:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8000ade:	7891      	ldrb	r1, [r2, #2]
 8000ae0:	7882      	ldrb	r2, [r0, #2]
		if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1] &&
 8000ae2:	4291      	cmp	r1, r2
 8000ae4:	d1e2      	bne.n	8000aac <dhcpserver_get_ip+0x4>
				saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3] && 
 8000ae6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000aea:	4914      	ldr	r1, [pc, #80]	; (8000b3c <dhcpserver_get_ip+0x94>)
 8000aec:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8000af0:	78d1      	ldrb	r1, [r2, #3]
 8000af2:	78c2      	ldrb	r2, [r0, #3]
 8000af4:	4291      	cmp	r1, r2
 8000af6:	d1d9      	bne.n	8000aac <dhcpserver_get_ip+0x4>
				saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8000af8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000afc:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <dhcpserver_get_ip+0x94>)
 8000afe:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8000b02:	7911      	ldrb	r1, [r2, #4]
 8000b04:	7902      	ldrb	r2, [r0, #4]
				saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3] && 
 8000b06:	4291      	cmp	r1, r2
 8000b08:	d1d0      	bne.n	8000aac <dhcpserver_get_ip+0x4>
				saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8000b0a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <dhcpserver_get_ip+0x94>)
 8000b10:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8000b14:	7951      	ldrb	r1, [r2, #5]
 8000b16:	7942      	ldrb	r2, [r0, #5]
 8000b18:	4291      	cmp	r1, r2
 8000b1a:	d1c7      	bne.n	8000aac <dhcpserver_get_ip+0x4>

			/* index is used to increment IP address. */
			offer_ip.addr = ((10 + i) << 24) + ip_addr0 + (ip_addr1<<8) + (ip_addr2<<16);
 8000b1c:	330a      	adds	r3, #10
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <dhcpserver_get_ip+0x98>)
 8000b20:	7810      	ldrb	r0, [r2, #0]
 8000b22:	eb00 6303 	add.w	r3, r0, r3, lsl #24
 8000b26:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <dhcpserver_get_ip+0x9c>)
 8000b28:	7810      	ldrb	r0, [r2, #0]
 8000b2a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <dhcpserver_get_ip+0xa0>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
			return offer_ip;
 8000b32:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 8000b36:	4770      	bx	lr
		}
	}

	return offer_ip;
 8000b38:	2000      	movs	r0, #0
}
 8000b3a:	4770      	bx	lr
 8000b3c:	20000314 	.word	0x20000314
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000001 	.word	0x20000001
 8000b48:	20000338 	.word	0x20000338

08000b4c <dhcpserver_start_prv>:

/**
 * \brief Start DHCP server callback. 
 */
static void dhcpserver_start_prv(void * arg)
{
 8000b4c:	b510      	push	{r4, lr}
  //clear saved mac addresses
	for (uint32_t i = 0; i < MAX_CLIENT; ++i) {
 8000b4e:	2100      	movs	r1, #0
 8000b50:	e00c      	b.n	8000b6c <dhcpserver_start_prv+0x20>
		saved_mac[i].addr[0] = 0;
 8000b52:	4c12      	ldr	r4, [pc, #72]	; (8000b9c <dhcpserver_start_prv+0x50>)
 8000b54:	004b      	lsls	r3, r1, #1
 8000b56:	440b      	add	r3, r1
 8000b58:	0058      	lsls	r0, r3, #1
 8000b5a:	1822      	adds	r2, r4, r0
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	5423      	strb	r3, [r4, r0]
                saved_mac[i].addr[1] = 0;
 8000b60:	7053      	strb	r3, [r2, #1]
                saved_mac[i].addr[2] = 0;
 8000b62:	7093      	strb	r3, [r2, #2]
                saved_mac[i].addr[3] = 0;
 8000b64:	70d3      	strb	r3, [r2, #3]
                saved_mac[i].addr[4] = 0;
 8000b66:	7113      	strb	r3, [r2, #4]
                saved_mac[i].addr[5] = 0;
 8000b68:	7153      	strb	r3, [r2, #5]
	for (uint32_t i = 0; i < MAX_CLIENT; ++i) {
 8000b6a:	3101      	adds	r1, #1
 8000b6c:	2903      	cmp	r1, #3
 8000b6e:	d9f0      	bls.n	8000b52 <dhcpserver_start_prv+0x6>
	}

    if(NULL == dhcp_pcb) {
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <dhcpserver_start_prv+0x54>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	b103      	cbz	r3, 8000b78 <dhcpserver_start_prv+0x2c>
 8000b76:	bd10      	pop	{r4, pc}
        dhcp_pcb = udp_new();
 8000b78:	f011 f8e6 	bl	8011d48 <udp_new>
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <dhcpserver_start_prv+0x54>)
 8000b7e:	6018      	str	r0, [r3, #0]
        if(NULL == dhcp_pcb) {
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d0f8      	beq.n	8000b76 <dhcpserver_start_prv+0x2a>
            return;
        }

        udp_bind(dhcp_pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 8000b84:	2243      	movs	r2, #67	; 0x43
 8000b86:	4907      	ldr	r1, [pc, #28]	; (8000ba4 <dhcpserver_start_prv+0x58>)
 8000b88:	f010 fe7c 	bl	8011884 <udp_bind>
        udp_recv(dhcp_pcb, dhcpserver_fn, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4906      	ldr	r1, [pc, #24]	; (8000ba8 <dhcpserver_start_prv+0x5c>)
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <dhcpserver_start_prv+0x54>)
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	f011 f89a 	bl	8011ccc <udp_recv>
 8000b98:	e7ed      	b.n	8000b76 <dhcpserver_start_prv+0x2a>
 8000b9a:	bf00      	nop
 8000b9c:	20000314 	.word	0x20000314
 8000ba0:	20000310 	.word	0x20000310
 8000ba4:	080684a4 	.word	0x080684a4
 8000ba8:	08000c0d 	.word	0x08000c0d

08000bac <dhcpserver_find_requested_ip>:
{
 8000bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bb0:	4605      	mov	r5, r0
 8000bb2:	460f      	mov	r7, r1
    uint8_t val = 0;
 8000bb4:	2600      	movs	r6, #0
    uint16_t found = 0;
 8000bb6:	46b0      	mov	r8, r6
    uint32_t index = UDP_DHCP_OPTIONS_OFS;
 8000bb8:	24f0      	movs	r4, #240	; 0xf0
    while((val != 0xff) && (index < pbuf_in->tot_len)) {
 8000bba:	e006      	b.n	8000bca <dhcpserver_find_requested_ip+0x1e>
        index++;
 8000bbc:	3401      	adds	r4, #1
        index += ((pbuf_get_at(pbuf_in, index)) + 1);
 8000bbe:	b2a1      	uxth	r1, r4
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f00c fc4e 	bl	800d462 <pbuf_get_at>
 8000bc6:	3001      	adds	r0, #1
 8000bc8:	4404      	add	r4, r0
    while((val != 0xff) && (index < pbuf_in->tot_len)) {
 8000bca:	2eff      	cmp	r6, #255	; 0xff
 8000bcc:	d01a      	beq.n	8000c04 <dhcpserver_find_requested_ip+0x58>
 8000bce:	892b      	ldrh	r3, [r5, #8]
 8000bd0:	429c      	cmp	r4, r3
 8000bd2:	d217      	bcs.n	8000c04 <dhcpserver_find_requested_ip+0x58>
        val = pbuf_get_at(pbuf_in, index);
 8000bd4:	b2a1      	uxth	r1, r4
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	f00c fc43 	bl	800d462 <pbuf_get_at>
 8000bdc:	4606      	mov	r6, r0
        if(val == optionID) {
 8000bde:	2832      	cmp	r0, #50	; 0x32
 8000be0:	d1ec      	bne.n	8000bbc <dhcpserver_find_requested_ip+0x10>
            index++;
 8000be2:	1c61      	adds	r1, r4, #1
            size = pbuf_get_at(pbuf_in, index);
 8000be4:	b289      	uxth	r1, r1
 8000be6:	4628      	mov	r0, r5
 8000be8:	f00c fc3b 	bl	800d462 <pbuf_get_at>
 8000bec:	4680      	mov	r8, r0
            index++;
 8000bee:	3402      	adds	r4, #2
            pbuf_copy_partial(pbuf_in, ipaddr, size, index);
 8000bf0:	b2a3      	uxth	r3, r4
 8000bf2:	b282      	uxth	r2, r0
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	4628      	mov	r0, r5
 8000bf8:	f00c fbb6 	bl	800d368 <pbuf_copy_partial>
            index += size;
 8000bfc:	4444      	add	r4, r8
            found = 1;
 8000bfe:	f04f 0801 	mov.w	r8, #1
 8000c02:	e7db      	b.n	8000bbc <dhcpserver_find_requested_ip+0x10>
}
 8000c04:	4640      	mov	r0, r8
 8000c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000c0c <dhcpserver_fn>:
{
 8000c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c10:	b085      	sub	sp, #20
    uint32_t client_requested_addr = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	9301      	str	r3, [sp, #4]
    if ((NULL == pbuf_in) || (( pbuf_in->tot_len) <= UDP_DHCP_OPTIONS_OFS)) {
 8000c16:	4614      	mov	r4, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f000 833d 	beq.w	8001298 <dhcpserver_fn+0x68c>
 8000c1e:	8913      	ldrh	r3, [r2, #8]
 8000c20:	2bf0      	cmp	r3, #240	; 0xf0
 8000c22:	d80a      	bhi.n	8000c3a <dhcpserver_fn+0x2e>
    struct pbuf * pbuf_out = 0;
 8000c24:	2500      	movs	r5, #0
	if (pbuf_out) {
 8000c26:	b115      	cbz	r5, 8000c2e <dhcpserver_fn+0x22>
	   pbuf_free(pbuf_out);
 8000c28:	4628      	mov	r0, r5
 8000c2a:	f00c f935 	bl	800ce98 <pbuf_free>
	pbuf_free(pbuf_in);
 8000c2e:	4620      	mov	r0, r4
 8000c30:	f00c f932 	bl	800ce98 <pbuf_free>
}
 8000c34:	b005      	add	sp, #20
 8000c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbuf_out = pbuf_alloc(PBUF_TRANSPORT, DHCP_RESPONSE_DEFAULT_SIZE, PBUF_POOL);
 8000c3a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c42:	2036      	movs	r0, #54	; 0x36
 8000c44:	f00c f992 	bl	800cf6c <pbuf_alloc>
    if ((NULL == pbuf_out) || ((pbuf_out->tot_len) < UDP_DHCP_OPTIONS_OFS)) {
 8000c48:	4605      	mov	r5, r0
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	d0eb      	beq.n	8000c26 <dhcpserver_fn+0x1a>
 8000c4e:	8903      	ldrh	r3, [r0, #8]
 8000c50:	2bef      	cmp	r3, #239	; 0xef
 8000c52:	d9e8      	bls.n	8000c26 <dhcpserver_fn+0x1a>
    pbuf_copy(pbuf_out, pbuf_in);
 8000c54:	4621      	mov	r1, r4
 8000c56:	f00c faf1 	bl	800d23c <pbuf_copy>
	for (i = 0; i < 6; ++i) {
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	e00a      	b.n	8000c74 <dhcpserver_fn+0x68>
		val = pbuf_get_at(pbuf_in, DHCP_CHADDR_OFS+i);
 8000c5e:	f106 011c 	add.w	r1, r6, #28
 8000c62:	b289      	uxth	r1, r1
 8000c64:	4620      	mov	r0, r4
 8000c66:	f00c fbfc 	bl	800d462 <pbuf_get_at>
                ethaddr.addr[i] = val;
 8000c6a:	ab04      	add	r3, sp, #16
 8000c6c:	4433      	add	r3, r6
 8000c6e:	f803 0c08 	strb.w	r0, [r3, #-8]
	for (i = 0; i < 6; ++i) {
 8000c72:	3601      	adds	r6, #1
 8000c74:	2e05      	cmp	r6, #5
 8000c76:	d9f2      	bls.n	8000c5e <dhcpserver_fn+0x52>
	dhcpserver_save_mac(&ethaddr);
 8000c78:	a802      	add	r0, sp, #8
 8000c7a:	f7ff fecf 	bl	8000a1c <dhcpserver_save_mac>
	client_ip_addr = dhcpserver_get_ip(&ethaddr);
 8000c7e:	a802      	add	r0, sp, #8
 8000c80:	f7ff ff12 	bl	8000aa8 <dhcpserver_get_ip>
 8000c84:	9000      	str	r0, [sp, #0]
	if (0 == client_ip_addr.addr) {
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d0cd      	beq.n	8000c26 <dhcpserver_fn+0x1a>
    etharp_add_static_entry(&client_ip_addr, &ethaddr); //add ARP table entry	
 8000c8a:	a902      	add	r1, sp, #8
 8000c8c:	4668      	mov	r0, sp
 8000c8e:	f009 fff9 	bl	800ac84 <etharp_add_static_entry>
    val = pbuf_get_at(pbuf_in, UDP_DHCP_OPTIONS_OFS+2);
 8000c92:	21f2      	movs	r1, #242	; 0xf2
 8000c94:	4620      	mov	r0, r4
 8000c96:	f00c fbe4 	bl	800d462 <pbuf_get_at>
    switch (val) {
 8000c9a:	2801      	cmp	r0, #1
 8000c9c:	d05c      	beq.n	8000d58 <dhcpserver_fn+0x14c>
 8000c9e:	2803      	cmp	r0, #3
 8000ca0:	d1c1      	bne.n	8000c26 <dhcpserver_fn+0x1a>
            pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	f00c fbe4 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2108      	movs	r1, #8
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	f00c fbdf 	bl	800d474 <pbuf_put_at>
            flags = pbuf_get_at(pbuf_in, DHCP_FLAGS_OFS);
 8000cb6:	210a      	movs	r1, #10
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f00c fbd2 	bl	800d462 <pbuf_get_at>
            if(flags & 0x80) {
 8000cbe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000cc2:	f040 819b 	bne.w	8000ffc <dhcpserver_fn+0x3f0>
                flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 8000cc6:	210a      	movs	r1, #10
 8000cc8:	4628      	mov	r0, r5
 8000cca:	f00c fbca 	bl	800d462 <pbuf_get_at>
                pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 8000cce:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8000cd2:	210a      	movs	r1, #10
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	f00c fbcd 	bl	800d474 <pbuf_put_at>
            if (0 == dhcpserver_find_requested_ip(pbuf_in, (uint8_t *)&client_requested_addr)) {
 8000cda:	a901      	add	r1, sp, #4
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f7ff ff65 	bl	8000bac <dhcpserver_find_requested_ip>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	d09f      	beq.n	8000c26 <dhcpserver_fn+0x1a>
            if (client_requested_addr == client_ip_addr.addr) {
 8000ce6:	9a00      	ldr	r2, [sp, #0]
 8000ce8:	9b01      	ldr	r3, [sp, #4]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	f000 81a4 	beq.w	8001038 <dhcpserver_fn+0x42c>
                pbuf_put_at(pbuf_out,DHCP_COOKIE_OFS,(DHCP_MAGIC_COOKIE >> 24)&0xff);
 8000cf0:	2263      	movs	r2, #99	; 0x63
 8000cf2:	21ec      	movs	r1, #236	; 0xec
 8000cf4:	4628      	mov	r0, r5
 8000cf6:	f00c fbbd 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,DHCP_COOKIE_OFS+1,(DHCP_MAGIC_COOKIE >> 16)&0xff);
 8000cfa:	2282      	movs	r2, #130	; 0x82
 8000cfc:	21ed      	movs	r1, #237	; 0xed
 8000cfe:	4628      	mov	r0, r5
 8000d00:	f00c fbb8 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,DHCP_COOKIE_OFS+2,(DHCP_MAGIC_COOKIE >> 8)&0xff);
 8000d04:	2253      	movs	r2, #83	; 0x53
 8000d06:	21ee      	movs	r1, #238	; 0xee
 8000d08:	4628      	mov	r0, r5
 8000d0a:	f00c fbb3 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,DHCP_COOKIE_OFS+3,(DHCP_MAGIC_COOKIE)&0xff);
 8000d0e:	2263      	movs	r2, #99	; 0x63
 8000d10:	21ef      	movs	r1, #239	; 0xef
 8000d12:	4628      	mov	r0, r5
 8000d14:	f00c fbae 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8000d18:	2235      	movs	r2, #53	; 0x35
 8000d1a:	21f0      	movs	r1, #240	; 0xf0
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	f00c fba9 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	21f1      	movs	r1, #241	; 0xf1
 8000d26:	4628      	mov	r0, r5
 8000d28:	f00c fba4 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, DHCP_NAK);
 8000d2c:	2206      	movs	r2, #6
 8000d2e:	21f2      	movs	r1, #242	; 0xf2
 8000d30:	4628      	mov	r0, r5
 8000d32:	f00c fb9f 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8000d36:	22ff      	movs	r2, #255	; 0xff
 8000d38:	21f3      	movs	r1, #243	; 0xf3
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	f00c fb9a 	bl	800d474 <pbuf_put_at>
                options_offset++;
 8000d40:	21f4      	movs	r1, #244	; 0xf4
            pbuf_realloc(pbuf_out, options_offset);
 8000d42:	4628      	mov	r0, r5
 8000d44:	f00c f9be 	bl	800d0c4 <pbuf_realloc>
            if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8000d48:	2344      	movs	r3, #68	; 0x44
 8000d4a:	466a      	mov	r2, sp
 8000d4c:	4629      	mov	r1, r5
 8000d4e:	48b1      	ldr	r0, [pc, #708]	; (8001014 <dhcpserver_fn+0x408>)
 8000d50:	6800      	ldr	r0, [r0, #0]
 8000d52:	f010 ff17 	bl	8011b84 <udp_sendto>
 8000d56:	e766      	b.n	8000c26 <dhcpserver_fn+0x1a>
            pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 8000d58:	2202      	movs	r2, #2
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f00c fb89 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2108      	movs	r1, #8
 8000d66:	4628      	mov	r0, r5
 8000d68:	f00c fb84 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, 0x0); //unicast
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	210a      	movs	r1, #10
 8000d70:	4628      	mov	r0, r5
 8000d72:	f00c fb7f 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,DHCP_YIADDR_OFS,client_ip_addr.addr&0xff);
 8000d76:	f89d 2000 	ldrb.w	r2, [sp]
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	4628      	mov	r0, r5
 8000d7e:	f00c fb79 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,DHCP_YIADDR_OFS+1,(client_ip_addr.addr>>8)&0xff);
 8000d82:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8000d86:	2111      	movs	r1, #17
 8000d88:	4628      	mov	r0, r5
 8000d8a:	f00c fb73 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,DHCP_YIADDR_OFS+2,(client_ip_addr.addr>>16)&0xff);
 8000d8e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8000d92:	2112      	movs	r1, #18
 8000d94:	4628      	mov	r0, r5
 8000d96:	f00c fb6d 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,DHCP_YIADDR_OFS+3,(client_ip_addr.addr>>24)&0xff);
 8000d9a:	af04      	add	r7, sp, #16
 8000d9c:	f857 2d10 	ldr.w	r2, [r7, #-16]!
 8000da0:	0e12      	lsrs	r2, r2, #24
 8000da2:	2113      	movs	r1, #19
 8000da4:	4628      	mov	r0, r5
 8000da6:	f00c fb65 	bl	800d474 <pbuf_put_at>
             pbuf_put_at(pbuf_out,DHCP_SIADDR_OFS,0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2114      	movs	r1, #20
 8000dae:	4628      	mov	r0, r5
 8000db0:	f00c fb60 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,DHCP_SIADDR_OFS+1,0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2115      	movs	r1, #21
 8000db8:	4628      	mov	r0, r5
 8000dba:	f00c fb5b 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,DHCP_SIADDR_OFS+2,0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2116      	movs	r1, #22
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	f00c fb56 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,DHCP_SIADDR_OFS+3,0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2117      	movs	r1, #23
 8000dcc:	4628      	mov	r0, r5
 8000dce:	f00c fb51 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,DHCP_COOKIE_OFS,(DHCP_MAGIC_COOKIE >> 24)&0xff);
 8000dd2:	2263      	movs	r2, #99	; 0x63
 8000dd4:	21ec      	movs	r1, #236	; 0xec
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	f00c fb4c 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,DHCP_COOKIE_OFS+1,(DHCP_MAGIC_COOKIE >> 16)&0xff);
 8000ddc:	2282      	movs	r2, #130	; 0x82
 8000dde:	21ed      	movs	r1, #237	; 0xed
 8000de0:	4628      	mov	r0, r5
 8000de2:	f00c fb47 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,DHCP_COOKIE_OFS+2,(DHCP_MAGIC_COOKIE >> 8)&0xff);
 8000de6:	2253      	movs	r2, #83	; 0x53
 8000de8:	21ee      	movs	r1, #238	; 0xee
 8000dea:	4628      	mov	r0, r5
 8000dec:	f00c fb42 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,DHCP_COOKIE_OFS+3,(DHCP_MAGIC_COOKIE)&0xff);
 8000df0:	2263      	movs	r2, #99	; 0x63
 8000df2:	21ef      	movs	r1, #239	; 0xef
 8000df4:	4628      	mov	r0, r5
 8000df6:	f00c fb3d 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8000dfa:	2235      	movs	r2, #53	; 0x35
 8000dfc:	21f0      	movs	r1, #240	; 0xf0
 8000dfe:	4628      	mov	r0, r5
 8000e00:	f00c fb38 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, options_offset, 1 );
 8000e04:	2201      	movs	r2, #1
 8000e06:	21f1      	movs	r1, #241	; 0xf1
 8000e08:	4628      	mov	r0, r5
 8000e0a:	f00c fb33 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, options_offset, DHCP_OFFER);
 8000e0e:	2202      	movs	r2, #2
 8000e10:	21f2      	movs	r1, #242	; 0xf2
 8000e12:	4628      	mov	r0, r5
 8000e14:	f00c fb2e 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	21f3      	movs	r1, #243	; 0xf3
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	f00c fb29 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, options_offset, 4);
 8000e22:	2204      	movs	r2, #4
 8000e24:	21f4      	movs	r1, #244	; 0xf4
 8000e26:	4628      	mov	r0, r5
 8000e28:	f00c fb24 	bl	800d474 <pbuf_put_at>
            IP4_ADDR(&r, netmask_addr0, netmask_addr1, netmask_addr2, netmask_addr3);
 8000e2c:	4b7a      	ldr	r3, [pc, #488]	; (8001018 <dhcpserver_fn+0x40c>)
 8000e2e:	781a      	ldrb	r2, [r3, #0]
 8000e30:	4b7a      	ldr	r3, [pc, #488]	; (800101c <dhcpserver_fn+0x410>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	041b      	lsls	r3, r3, #16
 8000e36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000e3a:	4a79      	ldr	r2, [pc, #484]	; (8001020 <dhcpserver_fn+0x414>)
 8000e3c:	7812      	ldrb	r2, [r2, #0]
 8000e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000e42:	4a78      	ldr	r2, [pc, #480]	; (8001024 <dhcpserver_fn+0x418>)
 8000e44:	7816      	ldrb	r6, [r2, #0]
 8000e46:	4333      	orrs	r3, r6
 8000e48:	021e      	lsls	r6, r3, #8
 8000e4a:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8000e4e:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 8000e52:	0a1a      	lsrs	r2, r3, #8
 8000e54:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8000e58:	4316      	orrs	r6, r2
 8000e5a:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
            pbuf_put_at(pbuf_out,options_offset,r.addr&0xff);
 8000e5e:	b2f2      	uxtb	r2, r6
 8000e60:	21f5      	movs	r1, #245	; 0xf5
 8000e62:	4628      	mov	r0, r5
 8000e64:	f00c fb06 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,options_offset+1,(r.addr>>8)&0xff);
 8000e68:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8000e6c:	21f6      	movs	r1, #246	; 0xf6
 8000e6e:	4628      	mov	r0, r5
 8000e70:	f00c fb00 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,options_offset+2,(r.addr>>16)&0xff);
 8000e74:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8000e78:	21f7      	movs	r1, #247	; 0xf7
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	f00c fafa 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,options_offset+3,(r.addr>>24)&0xff);
 8000e80:	0e32      	lsrs	r2, r6, #24
 8000e82:	21f8      	movs	r1, #248	; 0xf8
 8000e84:	4628      	mov	r0, r5
 8000e86:	f00c faf5 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	21f9      	movs	r1, #249	; 0xf9
 8000e8e:	4628      	mov	r0, r5
 8000e90:	f00c faf0 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, options_offset, 4);
 8000e94:	2204      	movs	r2, #4
 8000e96:	21fa      	movs	r1, #250	; 0xfa
 8000e98:	4628      	mov	r0, r5
 8000e9a:	f00c faeb 	bl	800d474 <pbuf_put_at>
            IP4_ADDR(&r, ip_addr0, ip_addr1, ip_addr2, ip_addr3);
 8000e9e:	f8df b18c 	ldr.w	fp, [pc, #396]	; 800102c <dhcpserver_fn+0x420>
 8000ea2:	f89b 2000 	ldrb.w	r2, [fp]
 8000ea6:	f8df a188 	ldr.w	sl, [pc, #392]	; 8001030 <dhcpserver_fn+0x424>
 8000eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8000eae:	041b      	lsls	r3, r3, #16
 8000eb0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000eb4:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8001034 <dhcpserver_fn+0x428>
 8000eb8:	f898 2000 	ldrb.w	r2, [r8]
 8000ebc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000ec0:	4e59      	ldr	r6, [pc, #356]	; (8001028 <dhcpserver_fn+0x41c>)
 8000ec2:	f896 9000 	ldrb.w	r9, [r6]
 8000ec6:	ea43 0309 	orr.w	r3, r3, r9
 8000eca:	ea4f 2903 	mov.w	r9, r3, lsl #8
 8000ece:	f409 097f 	and.w	r9, r9, #16711680	; 0xff0000
 8000ed2:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
 8000ed6:	0a1a      	lsrs	r2, r3, #8
 8000ed8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8000edc:	ea49 0902 	orr.w	r9, r9, r2
 8000ee0:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
            pbuf_put_at(pbuf_out,options_offset,r.addr&0xff);
 8000ee4:	fa5f f289 	uxtb.w	r2, r9
 8000ee8:	21fb      	movs	r1, #251	; 0xfb
 8000eea:	4628      	mov	r0, r5
 8000eec:	f00c fac2 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,options_offset+1,(r.addr>>8)&0xff);
 8000ef0:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8000ef4:	21fc      	movs	r1, #252	; 0xfc
 8000ef6:	4628      	mov	r0, r5
 8000ef8:	f00c fabc 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,options_offset+2,(r.addr>>16)&0xff);
 8000efc:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8000f00:	21fd      	movs	r1, #253	; 0xfd
 8000f02:	4628      	mov	r0, r5
 8000f04:	f00c fab6 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,options_offset+3,(r.addr>>24)&0xff);
 8000f08:	ea4f 6219 	mov.w	r2, r9, lsr #24
 8000f0c:	21fe      	movs	r1, #254	; 0xfe
 8000f0e:	4628      	mov	r0, r5
 8000f10:	f00c fab0 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8000f14:	2233      	movs	r2, #51	; 0x33
 8000f16:	21ff      	movs	r1, #255	; 0xff
 8000f18:	4628      	mov	r0, r5
 8000f1a:	f00c faab 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, options_offset, 4);
 8000f1e:	2204      	movs	r2, #4
 8000f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f24:	4628      	mov	r0, r5
 8000f26:	f00c faa5 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,options_offset,(LEASE_TIME_1DAY >> 24)&0xff);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f240 1101 	movw	r1, #257	; 0x101
 8000f30:	4628      	mov	r0, r5
 8000f32:	f00c fa9f 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,options_offset+1,(LEASE_TIME_1DAY >> 16)&0xff);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	f00c fa99 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,options_offset+2,(LEASE_TIME_1DAY >> 8)&0xff);
 8000f42:	2251      	movs	r2, #81	; 0x51
 8000f44:	f240 1103 	movw	r1, #259	; 0x103
 8000f48:	4628      	mov	r0, r5
 8000f4a:	f00c fa93 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,options_offset+3,(LEASE_TIME_1DAY)&0xff);
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000f54:	4628      	mov	r0, r5
 8000f56:	f00c fa8d 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 8000f5a:	2236      	movs	r2, #54	; 0x36
 8000f5c:	f240 1105 	movw	r1, #261	; 0x105
 8000f60:	4628      	mov	r0, r5
 8000f62:	f00c fa87 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, options_offset, 4);
 8000f66:	2204      	movs	r2, #4
 8000f68:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	f00c fa81 	bl	800d474 <pbuf_put_at>
            IP4_ADDR(&r, ip_addr0, ip_addr1, ip_addr2, ip_addr3);
 8000f72:	f89b 2000 	ldrb.w	r2, [fp]
 8000f76:	f89a 3000 	ldrb.w	r3, [sl]
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f80:	f898 2000 	ldrb.w	r2, [r8]
 8000f84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f88:	7836      	ldrb	r6, [r6, #0]
 8000f8a:	4333      	orrs	r3, r6
 8000f8c:	021e      	lsls	r6, r3, #8
 8000f8e:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8000f92:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 8000f96:	0a1a      	lsrs	r2, r3, #8
 8000f98:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8000f9c:	4316      	orrs	r6, r2
 8000f9e:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
            pbuf_put_at(pbuf_out,options_offset,r.addr&0xff);
 8000fa2:	b2f2      	uxtb	r2, r6
 8000fa4:	f240 1107 	movw	r1, #263	; 0x107
 8000fa8:	4628      	mov	r0, r5
 8000faa:	f00c fa63 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,options_offset+1,(r.addr>>8)&0xff);
 8000fae:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8000fb2:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	f00c fa5c 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,options_offset+2,(r.addr>>16)&0xff);
 8000fbc:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8000fc0:	f240 1109 	movw	r1, #265	; 0x109
 8000fc4:	4628      	mov	r0, r5
 8000fc6:	f00c fa55 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out,options_offset+3,(r.addr>>24)&0xff);
 8000fca:	0e32      	lsrs	r2, r6, #24
 8000fcc:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f00c fa4f 	bl	800d474 <pbuf_put_at>
            pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8000fd6:	22ff      	movs	r2, #255	; 0xff
 8000fd8:	f240 110b 	movw	r1, #267	; 0x10b
 8000fdc:	4628      	mov	r0, r5
 8000fde:	f00c fa49 	bl	800d474 <pbuf_put_at>
            pbuf_realloc(pbuf_out, options_offset);
 8000fe2:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	f00c f86c 	bl	800d0c4 <pbuf_realloc>
            if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8000fec:	2344      	movs	r3, #68	; 0x44
 8000fee:	463a      	mov	r2, r7
 8000ff0:	4629      	mov	r1, r5
 8000ff2:	4808      	ldr	r0, [pc, #32]	; (8001014 <dhcpserver_fn+0x408>)
 8000ff4:	6800      	ldr	r0, [r0, #0]
 8000ff6:	f010 fdc5 	bl	8011b84 <udp_sendto>
 8000ffa:	e614      	b.n	8000c26 <dhcpserver_fn+0x1a>
                flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 8000ffc:	210a      	movs	r1, #10
 8000ffe:	4628      	mov	r0, r5
 8001000:	f00c fa2f 	bl	800d462 <pbuf_get_at>
                flags |= 0x80;
 8001004:	f060 027f 	orn	r2, r0, #127	; 0x7f
                pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	210a      	movs	r1, #10
 800100c:	4628      	mov	r0, r5
 800100e:	f00c fa31 	bl	800d474 <pbuf_put_at>
 8001012:	e662      	b.n	8000cda <dhcpserver_fn+0xce>
 8001014:	20000310 	.word	0x20000310
 8001018:	20000003 	.word	0x20000003
 800101c:	20000004 	.word	0x20000004
 8001020:	20000005 	.word	0x20000005
 8001024:	20000339 	.word	0x20000339
 8001028:	20000002 	.word	0x20000002
 800102c:	20000000 	.word	0x20000000
 8001030:	20000001 	.word	0x20000001
 8001034:	20000338 	.word	0x20000338
                pbuf_put_at(pbuf_out,DHCP_YIADDR_OFS,client_ip_addr.addr&0xff);
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	2110      	movs	r1, #16
 800103c:	4628      	mov	r0, r5
 800103e:	f00c fa19 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,DHCP_YIADDR_OFS+1,(client_ip_addr.addr>>8)&0xff);
 8001042:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001046:	2111      	movs	r1, #17
 8001048:	4628      	mov	r0, r5
 800104a:	f00c fa13 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,DHCP_YIADDR_OFS+2,(client_ip_addr.addr>>16)&0xff);
 800104e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001052:	2112      	movs	r1, #18
 8001054:	4628      	mov	r0, r5
 8001056:	f00c fa0d 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,DHCP_YIADDR_OFS+3,(client_ip_addr.addr>>24)&0xff);
 800105a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800105e:	2113      	movs	r1, #19
 8001060:	4628      	mov	r0, r5
 8001062:	f00c fa07 	bl	800d474 <pbuf_put_at>
                 pbuf_put_at(pbuf_out,DHCP_SIADDR_OFS,0);
 8001066:	2200      	movs	r2, #0
 8001068:	2114      	movs	r1, #20
 800106a:	4628      	mov	r0, r5
 800106c:	f00c fa02 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,DHCP_SIADDR_OFS+1,0);
 8001070:	2200      	movs	r2, #0
 8001072:	2115      	movs	r1, #21
 8001074:	4628      	mov	r0, r5
 8001076:	f00c f9fd 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,DHCP_SIADDR_OFS+2,0);
 800107a:	2200      	movs	r2, #0
 800107c:	2116      	movs	r1, #22
 800107e:	4628      	mov	r0, r5
 8001080:	f00c f9f8 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,DHCP_SIADDR_OFS+3,0);
 8001084:	2200      	movs	r2, #0
 8001086:	2117      	movs	r1, #23
 8001088:	4628      	mov	r0, r5
 800108a:	f00c f9f3 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,DHCP_COOKIE_OFS,(DHCP_MAGIC_COOKIE >> 24)&0xff);
 800108e:	2263      	movs	r2, #99	; 0x63
 8001090:	21ec      	movs	r1, #236	; 0xec
 8001092:	4628      	mov	r0, r5
 8001094:	f00c f9ee 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,DHCP_COOKIE_OFS+1,(DHCP_MAGIC_COOKIE >> 16)&0xff);
 8001098:	2282      	movs	r2, #130	; 0x82
 800109a:	21ed      	movs	r1, #237	; 0xed
 800109c:	4628      	mov	r0, r5
 800109e:	f00c f9e9 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,DHCP_COOKIE_OFS+2,(DHCP_MAGIC_COOKIE >> 8)&0xff);
 80010a2:	2253      	movs	r2, #83	; 0x53
 80010a4:	21ee      	movs	r1, #238	; 0xee
 80010a6:	4628      	mov	r0, r5
 80010a8:	f00c f9e4 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,DHCP_COOKIE_OFS+3,(DHCP_MAGIC_COOKIE)&0xff);
 80010ac:	2263      	movs	r2, #99	; 0x63
 80010ae:	21ef      	movs	r1, #239	; 0xef
 80010b0:	4628      	mov	r0, r5
 80010b2:	f00c f9df 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 80010b6:	2235      	movs	r2, #53	; 0x35
 80010b8:	21f0      	movs	r1, #240	; 0xf0
 80010ba:	4628      	mov	r0, r5
 80010bc:	f00c f9da 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, 1 );
 80010c0:	2201      	movs	r2, #1
 80010c2:	21f1      	movs	r1, #241	; 0xf1
 80010c4:	4628      	mov	r0, r5
 80010c6:	f00c f9d5 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, DHCP_ACK);
 80010ca:	2205      	movs	r2, #5
 80010cc:	21f2      	movs	r1, #242	; 0xf2
 80010ce:	4628      	mov	r0, r5
 80010d0:	f00c f9d0 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 80010d4:	2201      	movs	r2, #1
 80010d6:	21f3      	movs	r1, #243	; 0xf3
 80010d8:	4628      	mov	r0, r5
 80010da:	f00c f9cb 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, 4);
 80010de:	2204      	movs	r2, #4
 80010e0:	21f4      	movs	r1, #244	; 0xf4
 80010e2:	4628      	mov	r0, r5
 80010e4:	f00c f9c6 	bl	800d474 <pbuf_put_at>
                IP4_ADDR(&r, netmask_addr0, netmask_addr1, netmask_addr2, netmask_addr3);
 80010e8:	4b6c      	ldr	r3, [pc, #432]	; (800129c <dhcpserver_fn+0x690>)
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	4b6c      	ldr	r3, [pc, #432]	; (80012a0 <dhcpserver_fn+0x694>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	041b      	lsls	r3, r3, #16
 80010f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010f6:	4a6b      	ldr	r2, [pc, #428]	; (80012a4 <dhcpserver_fn+0x698>)
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80010fe:	4a6a      	ldr	r2, [pc, #424]	; (80012a8 <dhcpserver_fn+0x69c>)
 8001100:	7816      	ldrb	r6, [r2, #0]
 8001102:	4333      	orrs	r3, r6
 8001104:	021e      	lsls	r6, r3, #8
 8001106:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 800110a:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 800110e:	0a1a      	lsrs	r2, r3, #8
 8001110:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8001114:	4316      	orrs	r6, r2
 8001116:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
                pbuf_put_at(pbuf_out,options_offset,r.addr&0xff);
 800111a:	b2f2      	uxtb	r2, r6
 800111c:	21f5      	movs	r1, #245	; 0xf5
 800111e:	4628      	mov	r0, r5
 8001120:	f00c f9a8 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,options_offset+1,(r.addr>>8)&0xff);
 8001124:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8001128:	21f6      	movs	r1, #246	; 0xf6
 800112a:	4628      	mov	r0, r5
 800112c:	f00c f9a2 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,options_offset+2,(r.addr>>16)&0xff);
 8001130:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8001134:	21f7      	movs	r1, #247	; 0xf7
 8001136:	4628      	mov	r0, r5
 8001138:	f00c f99c 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,options_offset+3,(r.addr>>24)&0xff);
 800113c:	0e32      	lsrs	r2, r6, #24
 800113e:	21f8      	movs	r1, #248	; 0xf8
 8001140:	4628      	mov	r0, r5
 8001142:	f00c f997 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8001146:	2203      	movs	r2, #3
 8001148:	21f9      	movs	r1, #249	; 0xf9
 800114a:	4628      	mov	r0, r5
 800114c:	f00c f992 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, 4);
 8001150:	2204      	movs	r2, #4
 8001152:	21fa      	movs	r1, #250	; 0xfa
 8001154:	4628      	mov	r0, r5
 8001156:	f00c f98d 	bl	800d474 <pbuf_put_at>
                IP4_ADDR(&r, ip_addr0, ip_addr1, ip_addr2, ip_addr3);
 800115a:	f8df a154 	ldr.w	sl, [pc, #340]	; 80012b0 <dhcpserver_fn+0x6a4>
 800115e:	f89a 2000 	ldrb.w	r2, [sl]
 8001162:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80012b4 <dhcpserver_fn+0x6a8>
 8001166:	f899 3000 	ldrb.w	r3, [r9]
 800116a:	041b      	lsls	r3, r3, #16
 800116c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001170:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80012b8 <dhcpserver_fn+0x6ac>
 8001174:	f898 2000 	ldrb.w	r2, [r8]
 8001178:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800117c:	4f4b      	ldr	r7, [pc, #300]	; (80012ac <dhcpserver_fn+0x6a0>)
 800117e:	783e      	ldrb	r6, [r7, #0]
 8001180:	4333      	orrs	r3, r6
 8001182:	021e      	lsls	r6, r3, #8
 8001184:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8001188:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 800118c:	0a1a      	lsrs	r2, r3, #8
 800118e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8001192:	4316      	orrs	r6, r2
 8001194:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
                pbuf_put_at(pbuf_out,options_offset,r.addr&0xff);
 8001198:	b2f2      	uxtb	r2, r6
 800119a:	21fb      	movs	r1, #251	; 0xfb
 800119c:	4628      	mov	r0, r5
 800119e:	f00c f969 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,options_offset+1,(r.addr>>8)&0xff);
 80011a2:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80011a6:	21fc      	movs	r1, #252	; 0xfc
 80011a8:	4628      	mov	r0, r5
 80011aa:	f00c f963 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,options_offset+2,(r.addr>>16)&0xff);
 80011ae:	f3c6 4207 	ubfx	r2, r6, #16, #8
 80011b2:	21fd      	movs	r1, #253	; 0xfd
 80011b4:	4628      	mov	r0, r5
 80011b6:	f00c f95d 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,options_offset+3,(r.addr>>24)&0xff);
 80011ba:	0e32      	lsrs	r2, r6, #24
 80011bc:	21fe      	movs	r1, #254	; 0xfe
 80011be:	4628      	mov	r0, r5
 80011c0:	f00c f958 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 80011c4:	2233      	movs	r2, #51	; 0x33
 80011c6:	21ff      	movs	r1, #255	; 0xff
 80011c8:	4628      	mov	r0, r5
 80011ca:	f00c f953 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, 4);
 80011ce:	2204      	movs	r2, #4
 80011d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d4:	4628      	mov	r0, r5
 80011d6:	f00c f94d 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,options_offset,(LEASE_TIME_1DAY >> 24)&0xff);
 80011da:	2200      	movs	r2, #0
 80011dc:	f240 1101 	movw	r1, #257	; 0x101
 80011e0:	4628      	mov	r0, r5
 80011e2:	f00c f947 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,options_offset+1,(LEASE_TIME_1DAY >> 16)&0xff);
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 7181 	mov.w	r1, #258	; 0x102
 80011ec:	4628      	mov	r0, r5
 80011ee:	f00c f941 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,options_offset+2,(LEASE_TIME_1DAY >> 8)&0xff);
 80011f2:	2251      	movs	r2, #81	; 0x51
 80011f4:	f240 1103 	movw	r1, #259	; 0x103
 80011f8:	4628      	mov	r0, r5
 80011fa:	f00c f93b 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,options_offset+3,(LEASE_TIME_1DAY)&0xff);
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001204:	4628      	mov	r0, r5
 8001206:	f00c f935 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 800120a:	2236      	movs	r2, #54	; 0x36
 800120c:	f240 1105 	movw	r1, #261	; 0x105
 8001210:	4628      	mov	r0, r5
 8001212:	f00c f92f 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, 4);
 8001216:	2204      	movs	r2, #4
 8001218:	f44f 7183 	mov.w	r1, #262	; 0x106
 800121c:	4628      	mov	r0, r5
 800121e:	f00c f929 	bl	800d474 <pbuf_put_at>
                IP4_ADDR(&r, ip_addr0, ip_addr1, ip_addr2, ip_addr3);
 8001222:	f89a 2000 	ldrb.w	r2, [sl]
 8001226:	f899 3000 	ldrb.w	r3, [r9]
 800122a:	041b      	lsls	r3, r3, #16
 800122c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001230:	f898 2000 	ldrb.w	r2, [r8]
 8001234:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001238:	783e      	ldrb	r6, [r7, #0]
 800123a:	4333      	orrs	r3, r6
 800123c:	021e      	lsls	r6, r3, #8
 800123e:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8001242:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 8001246:	0a1a      	lsrs	r2, r3, #8
 8001248:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800124c:	4316      	orrs	r6, r2
 800124e:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
                pbuf_put_at(pbuf_out,options_offset,r.addr&0xff);
 8001252:	b2f2      	uxtb	r2, r6
 8001254:	f240 1107 	movw	r1, #263	; 0x107
 8001258:	4628      	mov	r0, r5
 800125a:	f00c f90b 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,options_offset+1,(r.addr>>8)&0xff);
 800125e:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8001262:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001266:	4628      	mov	r0, r5
 8001268:	f00c f904 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,options_offset+2,(r.addr>>16)&0xff);
 800126c:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8001270:	f240 1109 	movw	r1, #265	; 0x109
 8001274:	4628      	mov	r0, r5
 8001276:	f00c f8fd 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out,options_offset+3,(r.addr>>24)&0xff);
 800127a:	0e32      	lsrs	r2, r6, #24
 800127c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001280:	4628      	mov	r0, r5
 8001282:	f00c f8f7 	bl	800d474 <pbuf_put_at>
                pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8001286:	22ff      	movs	r2, #255	; 0xff
 8001288:	f240 110b 	movw	r1, #267	; 0x10b
 800128c:	4628      	mov	r0, r5
 800128e:	f00c f8f1 	bl	800d474 <pbuf_put_at>
                options_offset++;
 8001292:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8001296:	e554      	b.n	8000d42 <dhcpserver_fn+0x136>
    struct pbuf * pbuf_out = 0;
 8001298:	4615      	mov	r5, r2
 800129a:	e4c4      	b.n	8000c26 <dhcpserver_fn+0x1a>
 800129c:	20000003 	.word	0x20000003
 80012a0:	20000004 	.word	0x20000004
 80012a4:	20000005 	.word	0x20000005
 80012a8:	20000339 	.word	0x20000339
 80012ac:	20000002 	.word	0x20000002
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000001 	.word	0x20000001
 80012b8:	20000338 	.word	0x20000338

080012bc <dhcpserver_stop_prv>:
/**
 * \brief Stop DHCP server callback. 
 */
static void dhcpserver_stop_prv(void * arg)
{
    if(dhcp_pcb != NULL) {
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <dhcpserver_stop_prv+0x1c>)
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	b148      	cbz	r0, 80012d6 <dhcpserver_stop_prv+0x1a>
{
 80012c2:	b510      	push	{r4, lr}
        udp_disconnect(dhcp_pcb);
 80012c4:	f010 fce8 	bl	8011c98 <udp_disconnect>
        udp_remove(dhcp_pcb);
 80012c8:	4c03      	ldr	r4, [pc, #12]	; (80012d8 <dhcpserver_stop_prv+0x1c>)
 80012ca:	6820      	ldr	r0, [r4, #0]
 80012cc:	f010 fd12 	bl	8011cf4 <udp_remove>
        dhcp_pcb = NULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	6023      	str	r3, [r4, #0]
 80012d4:	bd10      	pop	{r4, pc}
 80012d6:	4770      	bx	lr
 80012d8:	20000310 	.word	0x20000310

080012dc <dhcpserver_start>:
{
 80012dc:	b508      	push	{r3, lr}
    tcpip_callback(dhcpserver_start_prv, 0);
 80012de:	2100      	movs	r1, #0
 80012e0:	4801      	ldr	r0, [pc, #4]	; (80012e8 <dhcpserver_start+0xc>)
 80012e2:	f006 f975 	bl	80075d0 <tcpip_callback>
 80012e6:	bd08      	pop	{r3, pc}
 80012e8:	08000b4d 	.word	0x08000b4d

080012ec <dhcpserver_stop>:

/**
 * \brief Stop DHCP server. 
*/
void dhcpserver_stop(void)
{
 80012ec:	b508      	push	{r3, lr}
    tcpip_callback(dhcpserver_stop_prv, 0);
 80012ee:	2100      	movs	r1, #0
 80012f0:	4801      	ldr	r0, [pc, #4]	; (80012f8 <dhcpserver_stop+0xc>)
 80012f2:	f006 f96d 	bl	80075d0 <tcpip_callback>
 80012f6:	bd08      	pop	{r3, pc}
 80012f8:	080012bd 	.word	0x080012bd

080012fc <low_level_input>:
 *
 * @return
 *    LwIP pbuf filled with received packet, or NULL on error
 ******************************************************************************/
static struct pbuf * low_level_input(struct netif *netif, wf200_ethernet_frame_t* rx_buffer)
{
 80012fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t payloadoffset = 0;
  uint32_t byteslefttocopy = 0;
  /* get received frame */
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = rx_buffer->frame_length-rx_buffer->frame_padding;
 8001300:	88cb      	ldrh	r3, [r1, #6]
 8001302:	794f      	ldrb	r7, [r1, #5]
 8001304:	1bdb      	subs	r3, r3, r7
 8001306:	b29b      	uxth	r3, r3
  buffer = (uint8_t *)&(rx_buffer->padding_and_data[rx_buffer->frame_padding]);
 8001308:	3708      	adds	r7, #8
 800130a:	440f      	add	r7, r1
 
  if (len > 0)
 800130c:	b163      	cbz	r3, 8001328 <low_level_input+0x2c>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800130e:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001312:	4619      	mov	r1, r3
 8001314:	2000      	movs	r0, #0
 8001316:	f00b fe29 	bl	800cf6c <pbuf_alloc>
 800131a:	4680      	mov	r8, r0
  }
  
  if (p != NULL)
 800131c:	f1b8 0f00 	cmp.w	r8, #0
 8001320:	d00f      	beq.n	8001342 <low_level_input+0x46>
 8001322:	4644      	mov	r4, r8
 8001324:	2500      	movs	r5, #0
 8001326:	e00a      	b.n	800133e <low_level_input+0x42>
  struct pbuf *p = NULL;
 8001328:	f04f 0800 	mov.w	r8, #0
 800132c:	e7f6      	b.n	800131c <low_level_input+0x20>
  {
    bufferoffset = 0;
    for(q = p; q != NULL; q = q->next)
    {
      byteslefttocopy = q->len;
 800132e:	8966      	ldrh	r6, [r4, #10]
      payloadoffset = 0;
      
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8001330:	4632      	mov	r2, r6
 8001332:	1979      	adds	r1, r7, r5
 8001334:	6860      	ldr	r0, [r4, #4]
 8001336:	f010 feeb 	bl	8012110 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800133a:	4435      	add	r5, r6
    for(q = p; q != NULL; q = q->next)
 800133c:	6824      	ldr	r4, [r4, #0]
 800133e:	2c00      	cmp	r4, #0
 8001340:	d1f5      	bne.n	800132e <low_level_input+0x32>
    }
  }  
  
   
  return p;
}
 8001342:	4640      	mov	r0, r8
 8001344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001348 <low_level_output>:
{
 8001348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	460c      	mov	r4, r1
  for(q = p; q != NULL; q = q->next)
 8001350:	460b      	mov	r3, r1
  uint32_t framelength = 0;
 8001352:	2500      	movs	r5, #0
  for(q = p; q != NULL; q = q->next)
 8001354:	e002      	b.n	800135c <low_level_output+0x14>
      framelength = framelength + q->len;
 8001356:	895a      	ldrh	r2, [r3, #10]
 8001358:	4415      	add	r5, r2
  for(q = p; q != NULL; q = q->next)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1fa      	bne.n	8001356 <low_level_output+0xe>
  if (framelength < 60)
 8001360:	2d3b      	cmp	r5, #59	; 0x3b
 8001362:	d81d      	bhi.n	80013a0 <low_level_output+0x58>
    padding = 60 - framelength;
 8001364:	f1c5 063c 	rsb	r6, r5, #60	; 0x3c
  if( xSemaphoreTake( s_xDriverSemaphore, ( osWaitForever ) ) == pdTRUE )
 8001368:	2300      	movs	r3, #0
 800136a:	f04f 32ff 	mov.w	r2, #4294967295
 800136e:	4619      	mov	r1, r3
 8001370:	4827      	ldr	r0, [pc, #156]	; (8001410 <low_level_output+0xc8>)
 8001372:	6800      	ldr	r0, [r0, #0]
 8001374:	f005 f908 	bl	8006588 <xQueueGenericReceive>
 8001378:	2801      	cmp	r0, #1
 800137a:	d145      	bne.n	8001408 <low_level_output+0xc0>
    wf200_host_allocate_buffer ((wf200_buffer_t**)(&tx_buffer),WF200_TX_FRAME_BUFFER,ROUND_UP( framelength+padding, 64 )+sizeof(wf200_frame_t),0); //12 is size of other data in buffer struct, user shouldn't have to care about this?
 800137c:	4435      	add	r5, r6
 800137e:	f015 0f3f 	tst.w	r5, #63	; 0x3f
 8001382:	d00f      	beq.n	80013a4 <low_level_output+0x5c>
 8001384:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001388:	f105 024c 	add.w	r2, r5, #76	; 0x4c
 800138c:	2300      	movs	r3, #0
 800138e:	4619      	mov	r1, r3
 8001390:	a801      	add	r0, sp, #4
 8001392:	f001 f83a 	bl	800240a <wf200_host_allocate_buffer>
    buffer = tx_buffer->data;
 8001396:	9b01      	ldr	r3, [sp, #4]
 8001398:	f103 080c 	add.w	r8, r3, #12
    framelength = 0;
 800139c:	2500      	movs	r5, #0
    for(q = p; q != NULL; q = q->next)
 800139e:	e00d      	b.n	80013bc <low_level_output+0x74>
    padding = 0;
 80013a0:	2600      	movs	r6, #0
 80013a2:	e7e1      	b.n	8001368 <low_level_output+0x20>
    wf200_host_allocate_buffer ((wf200_buffer_t**)(&tx_buffer),WF200_TX_FRAME_BUFFER,ROUND_UP( framelength+padding, 64 )+sizeof(wf200_frame_t),0); //12 is size of other data in buffer struct, user shouldn't have to care about this?
 80013a4:	f105 020c 	add.w	r2, r5, #12
 80013a8:	e7f0      	b.n	800138c <low_level_output+0x44>
        byteslefttocopy = q->len;
 80013aa:	8967      	ldrh	r7, [r4, #10]
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload), byteslefttocopy );
 80013ac:	463a      	mov	r2, r7
 80013ae:	6861      	ldr	r1, [r4, #4]
 80013b0:	eb08 0005 	add.w	r0, r8, r5
 80013b4:	f010 feac 	bl	8012110 <memcpy>
        bufferoffset = bufferoffset + byteslefttocopy;
 80013b8:	443d      	add	r5, r7
    for(q = p; q != NULL; q = q->next)
 80013ba:	6824      	ldr	r4, [r4, #0]
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d1f4      	bne.n	80013aa <low_level_output+0x62>
 80013c0:	462b      	mov	r3, r5
 80013c2:	e003      	b.n	80013cc <low_level_output+0x84>
       buffer[i] = 0;
 80013c4:	2200      	movs	r2, #0
 80013c6:	f808 2003 	strb.w	r2, [r8, r3]
     for (i=framelength;i< framelength+padding;i++)
 80013ca:	3301      	adds	r3, #1
 80013cc:	19a9      	adds	r1, r5, r6
 80013ce:	428b      	cmp	r3, r1
 80013d0:	d3f8      	bcc.n	80013c4 <low_level_output+0x7c>
if (soft_ap_mode)
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <low_level_output+0xcc>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b193      	cbz	r3, 80013fe <low_level_output+0xb6>
    wf200_send_ethernet_frame(tx_buffer, framelength + padding, WF200_SOFTAP_INTERFACE);
 80013d8:	2201      	movs	r2, #1
 80013da:	9801      	ldr	r0, [sp, #4]
 80013dc:	f003 fe1a 	bl	8005014 <wf200_send_ethernet_frame>
    wf200_host_free_buffer( (wf200_buffer_t*)tx_buffer, WF200_TX_FRAME_BUFFER );
 80013e0:	2100      	movs	r1, #0
 80013e2:	9801      	ldr	r0, [sp, #4]
 80013e4:	f001 f819 	bl	800241a <wf200_host_free_buffer>
    xSemaphoreGive( s_xDriverSemaphore );
 80013e8:	2300      	movs	r3, #0
 80013ea:	461a      	mov	r2, r3
 80013ec:	4619      	mov	r1, r3
 80013ee:	4808      	ldr	r0, [pc, #32]	; (8001410 <low_level_output+0xc8>)
 80013f0:	6800      	ldr	r0, [r0, #0]
 80013f2:	f004 ff21 	bl	8006238 <xQueueGenericSend>
    errval = ERR_OK;
 80013f6:	2000      	movs	r0, #0
}
 80013f8:	b002      	add	sp, #8
 80013fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    wf200_send_ethernet_frame(tx_buffer, framelength + padding, WF200_STA_INTERFACE);
 80013fe:	2200      	movs	r2, #0
 8001400:	9801      	ldr	r0, [sp, #4]
 8001402:	f003 fe07 	bl	8005014 <wf200_send_ethernet_frame>
 8001406:	e7eb      	b.n	80013e0 <low_level_output+0x98>
    errval = ERR_TIMEOUT;
 8001408:	f06f 0002 	mvn.w	r0, #2
 800140c:	e7f4      	b.n	80013f8 <low_level_output+0xb0>
 800140e:	bf00      	nop
 8001410:	20000330 	.word	0x20000330
 8001414:	2000033c 	.word	0x2000033c

08001418 <low_level_init>:
{
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141a:	b085      	sub	sp, #20
  WfmHiConnectInd_t* reply = NULL;
 800141c:	2300      	movs	r3, #0
 800141e:	9303      	str	r3, [sp, #12]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8001420:	2306      	movs	r3, #6
 8001422:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
if (soft_ap_mode)
 8001426:	4b3c      	ldr	r3, [pc, #240]	; (8001518 <low_level_init+0x100>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d045      	beq.n	80014ba <low_level_init+0xa2>
  netif->hwaddr[0] =  wifi.mac_addr_1.octet[0];
 800142e:	4b3b      	ldr	r3, [pc, #236]	; (800151c <low_level_init+0x104>)
 8001430:	7f1a      	ldrb	r2, [r3, #28]
 8001432:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
  netif->hwaddr[1] =  wifi.mac_addr_1.octet[1];
 8001436:	7f5a      	ldrb	r2, [r3, #29]
 8001438:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
  netif->hwaddr[2] =  wifi.mac_addr_1.octet[2];
 800143c:	7f9a      	ldrb	r2, [r3, #30]
 800143e:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
  netif->hwaddr[3] =  wifi.mac_addr_1.octet[3];
 8001442:	7fda      	ldrb	r2, [r3, #31]
 8001444:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
  netif->hwaddr[4] =  wifi.mac_addr_1.octet[4];
 8001448:	f893 2020 	ldrb.w	r2, [r3, #32]
 800144c:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
  netif->hwaddr[5] =  wifi.mac_addr_1.octet[5];
 8001450:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001454:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
  netif->mtu = 1500;
 8001458:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800145c:	8503      	strh	r3, [r0, #40]	; 0x28
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800145e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8001462:	f043 030a 	orr.w	r3, r3, #10
 8001466:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
  s_xDriverSemaphore = xSemaphoreCreateMutex();
 800146a:	2001      	movs	r0, #1
 800146c:	f004 ffb4 	bl	80063d8 <xQueueCreateMutex>
 8001470:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <low_level_init+0x108>)
 8001472:	6018      	str	r0, [r3, #0]
if (soft_ap_mode)
 8001474:	4b28      	ldr	r3, [pc, #160]	; (8001518 <low_level_init+0x100>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d032      	beq.n	80014e2 <low_level_init+0xca>
  wf200_start_ap_command(softap_channel, (uint8_t*) softap_ssid, strlen(softap_ssid), softap_security, (uint8_t*) softap_passkey, strlen(softap_passkey));
 800147c:	4c29      	ldr	r4, [pc, #164]	; (8001524 <low_level_init+0x10c>)
 800147e:	4620      	mov	r0, r4
 8001480:	f7fe fec0 	bl	8000204 <strlen>
 8001484:	4607      	mov	r7, r0
 8001486:	4d28      	ldr	r5, [pc, #160]	; (8001528 <low_level_init+0x110>)
 8001488:	4628      	mov	r0, r5
 800148a:	f7fe febb 	bl	8000204 <strlen>
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <low_level_init+0x114>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4a27      	ldr	r2, [pc, #156]	; (8001530 <low_level_init+0x118>)
 8001494:	7816      	ldrb	r6, [r2, #0]
 8001496:	b2c0      	uxtb	r0, r0
 8001498:	9001      	str	r0, [sp, #4]
 800149a:	9500      	str	r5, [sp, #0]
 800149c:	463a      	mov	r2, r7
 800149e:	4621      	mov	r1, r4
 80014a0:	4630      	mov	r0, r6
 80014a2:	f003 fe64 	bl	800516e <wf200_start_ap_command>
  wf200_host_setup_waited_event( WFM_HI_START_AP_IND_ID );
 80014a6:	20c5      	movs	r0, #197	; 0xc5
 80014a8:	f000 ffc2 	bl	8002430 <wf200_host_setup_waited_event>
  if(wf200_host_wait_for_confirmation(WF200_DEFAULT_REQUEST_TIMEOUT, (void**)&reply) == SL_TIMEOUT)
 80014ac:	a903      	add	r1, sp, #12
 80014ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80014b2:	f000 ff7f 	bl	80023b4 <wf200_host_wait_for_confirmation>
}
 80014b6:	b005      	add	sp, #20
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  netif->hwaddr[0] =  wifi.mac_addr_0.octet[0];
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <low_level_init+0x104>)
 80014bc:	7d9a      	ldrb	r2, [r3, #22]
 80014be:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
  netif->hwaddr[1] =  wifi.mac_addr_0.octet[1];
 80014c2:	7dda      	ldrb	r2, [r3, #23]
 80014c4:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
  netif->hwaddr[2] =  wifi.mac_addr_0.octet[2];
 80014c8:	7e1a      	ldrb	r2, [r3, #24]
 80014ca:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
  netif->hwaddr[3] =  wifi.mac_addr_0.octet[3];
 80014ce:	7e5a      	ldrb	r2, [r3, #25]
 80014d0:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
  netif->hwaddr[4] =  wifi.mac_addr_0.octet[4];
 80014d4:	7e9a      	ldrb	r2, [r3, #26]
 80014d6:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
  netif->hwaddr[5] =  wifi.mac_addr_0.octet[5];
 80014da:	7edb      	ldrb	r3, [r3, #27]
 80014dc:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
 80014e0:	e7ba      	b.n	8001458 <low_level_init+0x40>
  wf200_send_join_command((uint8_t*) wlan_ssid, strlen(wlan_ssid), wlan_security, (uint8_t*) wlan_passkey, strlen(wlan_passkey));
 80014e2:	4c14      	ldr	r4, [pc, #80]	; (8001534 <low_level_init+0x11c>)
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7fe fe8d 	bl	8000204 <strlen>
 80014ea:	4606      	mov	r6, r0
 80014ec:	4d12      	ldr	r5, [pc, #72]	; (8001538 <low_level_init+0x120>)
 80014ee:	4628      	mov	r0, r5
 80014f0:	f7fe fe88 	bl	8000204 <strlen>
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <low_level_init+0x124>)
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	9000      	str	r0, [sp, #0]
 80014fa:	462b      	mov	r3, r5
 80014fc:	4631      	mov	r1, r6
 80014fe:	4620      	mov	r0, r4
 8001500:	f003 fd1c 	bl	8004f3c <wf200_send_join_command>
  wf200_host_setup_waited_event( WFM_HI_CONNECT_IND_ID );
 8001504:	20c3      	movs	r0, #195	; 0xc3
 8001506:	f000 ff93 	bl	8002430 <wf200_host_setup_waited_event>
  if(wf200_host_wait_for_confirmation(WF200_DEFAULT_REQUEST_TIMEOUT, (void**)&reply) == SL_TIMEOUT)
 800150a:	a903      	add	r1, sp, #12
 800150c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001510:	f000 ff50 	bl	80023b4 <wf200_host_wait_for_confirmation>
 8001514:	e7cf      	b.n	80014b6 <low_level_init+0x9e>
 8001516:	bf00      	nop
 8001518:	2000033c 	.word	0x2000033c
 800151c:	20007098 	.word	0x20007098
 8001520:	20000330 	.word	0x20000330
 8001524:	20000054 	.word	0x20000054
 8001528:	20000010 	.word	0x20000010
 800152c:	20000050 	.word	0x20000050
 8001530:	2000000c 	.word	0x2000000c
 8001534:	200000b8 	.word	0x200000b8
 8001538:	20000074 	.word	0x20000074
 800153c:	200000b4 	.word	0x200000b4

08001540 <wf200_host_received_frame_callback>:
 *
 * @return
 *    None
 ******************************************************************************/
void wf200_host_received_frame_callback( wf200_ethernet_frame_t* rx_buffer )
{
 8001540:	b538      	push	{r3, r4, r5, lr}
    struct pbuf *p;
    struct netif *netif = netifGbl;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <wf200_host_received_frame_callback+0x24>)
 8001544:	681c      	ldr	r4, [r3, #0]
    if (netif != NULL)
 8001546:	b144      	cbz	r4, 800155a <wf200_host_received_frame_callback+0x1a>
 8001548:	4601      	mov	r1, r0
    {
        p = low_level_input( netif , rx_buffer);
 800154a:	4620      	mov	r0, r4
 800154c:	f7ff fed6 	bl	80012fc <low_level_input>
 8001550:	4605      	mov	r5, r0
        if (netif->input( p, netif) != ERR_OK )
 8001552:	6923      	ldr	r3, [r4, #16]
 8001554:	4621      	mov	r1, r4
 8001556:	4798      	blx	r3
 8001558:	b900      	cbnz	r0, 800155c <wf200_host_received_frame_callback+0x1c>
 800155a:	bd38      	pop	{r3, r4, r5, pc}
        {
            pbuf_free(p);
 800155c:	4628      	mov	r0, r5
 800155e:	f00b fc9b 	bl	800ce98 <pbuf_free>
        }
        
    }
    //wf200_host_free_buffer( (wf200_buffer_t*)rx_buffer, WF200_RX_FRAME_BUFFER );
}
 8001562:	e7fa      	b.n	800155a <wf200_host_received_frame_callback+0x1a>
 8001564:	2000032c 	.word	0x2000032c

08001568 <ethernetif_init>:
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
err_t ethernetif_init(struct netif *netif)
{
 8001568:	b510      	push	{r4, lr}
  sl_status_t status;
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800156a:	4604      	mov	r4, r0
 800156c:	b1b8      	cbz	r0, 800159e <ethernetif_init+0x36>
  /* configure WiFi */
  status = wf200_init( &wifi );
 800156e:	4813      	ldr	r0, [pc, #76]	; (80015bc <ethernetif_init+0x54>)
 8001570:	f003 fece 	bl	8005310 <wf200_init>
  if ( status != SL_SUCCESS )
 8001574:	b9d8      	cbnz	r0, 80015ae <ethernetif_init+0x46>
  {
    printf("Failed to init WF200\r\n");
    return ERR_IF;
  }else{
    printf("WF200 init successful\r\n");
 8001576:	4812      	ldr	r0, [pc, #72]	; (80015c0 <ethernetif_init+0x58>)
 8001578:	f010 fe6c 	bl	8012254 <puts>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800157c:	2373      	movs	r3, #115	; 0x73
 800157e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8001582:	236c      	movs	r3, #108	; 0x6c
 8001584:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33

  netif->output = etharp_output;
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <ethernetif_init+0x5c>)
 800158a:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <ethernetif_init+0x60>)
 800158e:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8001590:	4620      	mov	r0, r4
 8001592:	f7ff ff41 	bl	8001418 <low_level_init>
  netifGbl = netif;
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <ethernetif_init+0x64>)
 8001598:	601c      	str	r4, [r3, #0]
  
  return ERR_OK;
 800159a:	2000      	movs	r0, #0
}
 800159c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <ethernetif_init+0x68>)
 80015a0:	f240 1227 	movw	r2, #295	; 0x127
 80015a4:	490b      	ldr	r1, [pc, #44]	; (80015d4 <ethernetif_init+0x6c>)
 80015a6:	480c      	ldr	r0, [pc, #48]	; (80015d8 <ethernetif_init+0x70>)
 80015a8:	f010 fde0 	bl	801216c <iprintf>
 80015ac:	e7df      	b.n	800156e <ethernetif_init+0x6>
    printf("Failed to init WF200\r\n");
 80015ae:	480b      	ldr	r0, [pc, #44]	; (80015dc <ethernetif_init+0x74>)
 80015b0:	f010 fe50 	bl	8012254 <puts>
    return ERR_IF;
 80015b4:	f06f 000b 	mvn.w	r0, #11
 80015b8:	bd10      	pop	{r4, pc}
 80015ba:	bf00      	nop
 80015bc:	20007098 	.word	0x20007098
 80015c0:	0801339c 	.word	0x0801339c
 80015c4:	0800b0cd 	.word	0x0800b0cd
 80015c8:	08001349 	.word	0x08001349
 80015cc:	2000032c 	.word	0x2000032c
 80015d0:	0801332c 	.word	0x0801332c
 80015d4:	0801334c 	.word	0x0801334c
 80015d8:	0801335c 	.word	0x0801335c
 80015dc:	08013384 	.word	0x08013384

080015e0 <sys_now>:

u32_t sys_now(void)
{
 80015e0:	b508      	push	{r3, lr}
  return HAL_GetTick();
 80015e2:	f001 fb67 	bl	8002cb4 <HAL_GetTick>
}
 80015e6:	bd08      	pop	{r3, pc}

080015e8 <lwip_iperf_results>:
 * @brief Function to handle iperf results report
 ******************************************************************************/
static void lwip_iperf_results (void *arg, enum lwiperf_report_type report_type,
  const ip_addr_t* local_addr, u16_t local_port, const ip_addr_t* remote_addr, u16_t remote_port,
  u32_t bytes_transferred, u32_t ms_duration, u32_t bandwidth_kbitpsec)
{
 80015e8:	b508      	push	{r3, lr}
  printf("\r\nIperf Server Report:\r\n" );
 80015ea:	4808      	ldr	r0, [pc, #32]	; (800160c <lwip_iperf_results+0x24>)
 80015ec:	f010 fe32 	bl	8012254 <puts>
  printf("Duration %dms\r\n",ms_duration);
 80015f0:	9905      	ldr	r1, [sp, #20]
 80015f2:	4807      	ldr	r0, [pc, #28]	; (8001610 <lwip_iperf_results+0x28>)
 80015f4:	f010 fdba 	bl	801216c <iprintf>
  printf("Bytes transferred %d\r\n",bytes_transferred);
 80015f8:	9904      	ldr	r1, [sp, #16]
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <lwip_iperf_results+0x2c>)
 80015fc:	f010 fdb6 	bl	801216c <iprintf>
  printf("%d kbit/s\r\n\r\n",bandwidth_kbitpsec);
 8001600:	9906      	ldr	r1, [sp, #24]
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <lwip_iperf_results+0x30>)
 8001604:	f010 fdb2 	bl	801216c <iprintf>
 8001608:	bd08      	pop	{r3, pc}
 800160a:	bf00      	nop
 800160c:	08013560 	.word	0x08013560
 8001610:	08013578 	.word	0x08013578
 8001614:	08013588 	.word	0x08013588
 8001618:	080135a0 	.word	0x080135a0

0800161c <waitForString>:
}

#endif

static uint32_t  waitForString (TickType_t waitTime)
{
 800161c:	b510      	push	{r4, lr}
 800161e:	4604      	mov	r4, r0
  //start receive loop
  xSemaphoreGive (uartInputSemaphore);
 8001620:	2300      	movs	r3, #0
 8001622:	461a      	mov	r2, r3
 8001624:	4619      	mov	r1, r3
 8001626:	4809      	ldr	r0, [pc, #36]	; (800164c <waitForString+0x30>)
 8001628:	6800      	ldr	r0, [r0, #0]
 800162a:	f004 fe05 	bl	8006238 <xQueueGenericSend>
  //wait for data 
  if (xSemaphoreTake(stringRcvSemaphore,waitTime) == pdFALSE)
 800162e:	2300      	movs	r3, #0
 8001630:	4622      	mov	r2, r4
 8001632:	4619      	mov	r1, r3
 8001634:	4806      	ldr	r0, [pc, #24]	; (8001650 <waitForString+0x34>)
 8001636:	6800      	ldr	r0, [r0, #0]
 8001638:	f004 ffa6 	bl	8006588 <xQueueGenericReceive>
 800163c:	b108      	cbz	r0, 8001642 <waitForString+0x26>
  {
    vUARTInputStop();
    return 0;
  }
  return 1;
 800163e:	2001      	movs	r0, #1
}
 8001640:	bd10      	pop	{r4, pc}
    vUARTInputStop();
 8001642:	f7ff f8ab 	bl	800079c <vUARTInputStop>
    return 0;
 8001646:	2000      	movs	r0, #0
 8001648:	bd10      	pop	{r4, pc}
 800164a:	bf00      	nop
 800164c:	20006f04 	.word	0x20006f04
 8001650:	20006e94 	.word	0x20006e94

08001654 <getUserInput>:


static void getUserInput (void)
{
 8001654:	b500      	push	{lr}
 8001656:	b083      	sub	sp, #12
  printf ("Press enter within 5 seconds to configure the demo...\r\n\r\n");
 8001658:	485a      	ldr	r0, [pc, #360]	; (80017c4 <getUserInput+0x170>)
 800165a:	f010 fdfb 	bl	8012254 <puts>
  if (waitForString(WAIT_TIME_FOR_INPUT) == pdTRUE )
 800165e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001662:	f7ff ffdb 	bl	800161c <waitForString>
 8001666:	2801      	cmp	r0, #1
 8001668:	d015      	beq.n	8001696 <getUserInput+0x42>
        break;
      }
    }
  }
  
  printf ("\r\n\r\nStarting demo...\r\n");
 800166a:	4857      	ldr	r0, [pc, #348]	; (80017c8 <getUserInput+0x174>)
 800166c:	f010 fdf2 	bl	8012254 <puts>
  if (soft_ap_mode)
 8001670:	4b56      	ldr	r3, [pc, #344]	; (80017cc <getUserInput+0x178>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	f040 808d 	bne.w	8001794 <getUserInput+0x140>
                  ip_addr2,
                  ip_addr3);
  }
  else
  {
    printf ("Station mode\r\n");
 800167a:	4855      	ldr	r0, [pc, #340]	; (80017d0 <getUserInput+0x17c>)
 800167c:	f010 fdea 	bl	8012254 <puts>
    printf ("SSID = %s\r\n",wlan_ssid);
 8001680:	4954      	ldr	r1, [pc, #336]	; (80017d4 <getUserInput+0x180>)
 8001682:	4855      	ldr	r0, [pc, #340]	; (80017d8 <getUserInput+0x184>)
 8001684:	f010 fd72 	bl	801216c <iprintf>
    printf ("Passkey = %s\r\n",wlan_passkey);
 8001688:	4954      	ldr	r1, [pc, #336]	; (80017dc <getUserInput+0x188>)
 800168a:	4855      	ldr	r0, [pc, #340]	; (80017e0 <getUserInput+0x18c>)
 800168c:	f010 fd6e 	bl	801216c <iprintf>
  }
            
}
 8001690:	b003      	add	sp, #12
 8001692:	f85d fb04 	ldr.w	pc, [sp], #4
    printf ("Choose mode:\r\n1. Station\r\n2. AP\r\nType 1 or 2:\r\n");
 8001696:	4853      	ldr	r0, [pc, #332]	; (80017e4 <getUserInput+0x190>)
 8001698:	f010 fddc 	bl	8012254 <puts>
    waitForString(portMAX_DELAY);
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ffbc 	bl	800161c <waitForString>
    if (UART_Input_String[0] == '2')
 80016a4:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <getUserInput+0x194>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b32      	cmp	r3, #50	; 0x32
 80016aa:	d03b      	beq.n	8001724 <getUserInput+0xd0>
       soft_ap_mode = 0;
 80016ac:	2200      	movs	r2, #0
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <getUserInput+0x178>)
 80016b0:	601a      	str	r2, [r3, #0]
       use_dhcp_client = 1;
 80016b2:	2201      	movs	r2, #1
 80016b4:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <getUserInput+0x198>)
 80016b6:	601a      	str	r2, [r3, #0]
       printf ("\r\n Station mode selected\r\n");
 80016b8:	484d      	ldr	r0, [pc, #308]	; (80017f0 <getUserInput+0x19c>)
 80016ba:	f010 fdcb 	bl	8012254 <puts>
    printf ("\r\nEnter SSID:\r\n");
 80016be:	484d      	ldr	r0, [pc, #308]	; (80017f4 <getUserInput+0x1a0>)
 80016c0:	f010 fdc8 	bl	8012254 <puts>
    waitForString(portMAX_DELAY);
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ffa8 	bl	800161c <waitForString>
    if (soft_ap_mode)
 80016cc:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <getUserInput+0x178>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d031      	beq.n	8001738 <getUserInput+0xe4>
      strcpy(softap_ssid,UART_Input_String);
 80016d4:	4944      	ldr	r1, [pc, #272]	; (80017e8 <getUserInput+0x194>)
 80016d6:	4848      	ldr	r0, [pc, #288]	; (80017f8 <getUserInput+0x1a4>)
 80016d8:	f010 fe1b 	bl	8012312 <strcpy>
    printf ("\r\n\r\nEnter passkey:\r\n");
 80016dc:	4847      	ldr	r0, [pc, #284]	; (80017fc <getUserInput+0x1a8>)
 80016de:	f010 fdb9 	bl	8012254 <puts>
    waitForString(portMAX_DELAY);
 80016e2:	f04f 30ff 	mov.w	r0, #4294967295
 80016e6:	f7ff ff99 	bl	800161c <waitForString>
    if (soft_ap_mode)
 80016ea:	4b38      	ldr	r3, [pc, #224]	; (80017cc <getUserInput+0x178>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	b343      	cbz	r3, 8001742 <getUserInput+0xee>
      strcpy(softap_passkey,UART_Input_String);
 80016f0:	493d      	ldr	r1, [pc, #244]	; (80017e8 <getUserInput+0x194>)
 80016f2:	4843      	ldr	r0, [pc, #268]	; (8001800 <getUserInput+0x1ac>)
 80016f4:	f010 fe0d 	bl	8012312 <strcpy>
    printf ("\r\n\r\nChoose security mode:\r\n1. OPEN\r\n2. WEP\r\n3. WPA2 WPA1 PSK\r\n4. WPA2 PSK\r\n");
 80016f8:	4842      	ldr	r0, [pc, #264]	; (8001804 <getUserInput+0x1b0>)
 80016fa:	f010 fdab 	bl	8012254 <puts>
    waitForString(portMAX_DELAY);
 80016fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001702:	f7ff ff8b 	bl	800161c <waitForString>
    if (soft_ap_mode)
 8001706:	4b31      	ldr	r3, [pc, #196]	; (80017cc <getUserInput+0x178>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b35b      	cbz	r3, 8001764 <getUserInput+0x110>
      switch (UART_Input_String[0]) {
 800170c:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <getUserInput+0x194>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b32      	cmp	r3, #50	; 0x32
 8001712:	d01f      	beq.n	8001754 <getUserInput+0x100>
 8001714:	2b33      	cmp	r3, #51	; 0x33
 8001716:	d021      	beq.n	800175c <getUserInput+0x108>
 8001718:	2b31      	cmp	r3, #49	; 0x31
 800171a:	d017      	beq.n	800174c <getUserInput+0xf8>
        softap_security = WFM_SECURITY_MODE_WPA2_PSK;
 800171c:	2204      	movs	r2, #4
 800171e:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <getUserInput+0x1b4>)
 8001720:	701a      	strb	r2, [r3, #0]
        break;
 8001722:	e7a2      	b.n	800166a <getUserInput+0x16>
       soft_ap_mode = 1;
 8001724:	2201      	movs	r2, #1
 8001726:	4b29      	ldr	r3, [pc, #164]	; (80017cc <getUserInput+0x178>)
 8001728:	601a      	str	r2, [r3, #0]
       use_dhcp_client = 0;
 800172a:	2200      	movs	r2, #0
 800172c:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <getUserInput+0x198>)
 800172e:	601a      	str	r2, [r3, #0]
       printf ("\r\n AP mode selected\r\n");
 8001730:	4836      	ldr	r0, [pc, #216]	; (800180c <getUserInput+0x1b8>)
 8001732:	f010 fd8f 	bl	8012254 <puts>
 8001736:	e7c2      	b.n	80016be <getUserInput+0x6a>
      strcpy(wlan_ssid,UART_Input_String);
 8001738:	492b      	ldr	r1, [pc, #172]	; (80017e8 <getUserInput+0x194>)
 800173a:	4826      	ldr	r0, [pc, #152]	; (80017d4 <getUserInput+0x180>)
 800173c:	f010 fde9 	bl	8012312 <strcpy>
 8001740:	e7cc      	b.n	80016dc <getUserInput+0x88>
      strcpy(wlan_passkey,UART_Input_String);
 8001742:	4929      	ldr	r1, [pc, #164]	; (80017e8 <getUserInput+0x194>)
 8001744:	4825      	ldr	r0, [pc, #148]	; (80017dc <getUserInput+0x188>)
 8001746:	f010 fde4 	bl	8012312 <strcpy>
 800174a:	e7d5      	b.n	80016f8 <getUserInput+0xa4>
        softap_security = WFM_SECURITY_MODE_OPEN;
 800174c:	2200      	movs	r2, #0
 800174e:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <getUserInput+0x1b4>)
 8001750:	701a      	strb	r2, [r3, #0]
        break;
 8001752:	e78a      	b.n	800166a <getUserInput+0x16>
        softap_security = WFM_SECURITY_MODE_WEP;
 8001754:	2201      	movs	r2, #1
 8001756:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <getUserInput+0x1b4>)
 8001758:	701a      	strb	r2, [r3, #0]
        break;
 800175a:	e786      	b.n	800166a <getUserInput+0x16>
        softap_security = WFM_SECURITY_MODE_WPA2_WPA1_PSK;
 800175c:	2202      	movs	r2, #2
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <getUserInput+0x1b4>)
 8001760:	701a      	strb	r2, [r3, #0]
        break;
 8001762:	e782      	b.n	800166a <getUserInput+0x16>
      switch (UART_Input_String[0]) {
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <getUserInput+0x194>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b32      	cmp	r3, #50	; 0x32
 800176a:	d00b      	beq.n	8001784 <getUserInput+0x130>
 800176c:	2b33      	cmp	r3, #51	; 0x33
 800176e:	d00d      	beq.n	800178c <getUserInput+0x138>
 8001770:	2b31      	cmp	r3, #49	; 0x31
 8001772:	d003      	beq.n	800177c <getUserInput+0x128>
        wlan_security = WFM_SECURITY_MODE_WPA2_PSK;
 8001774:	2204      	movs	r2, #4
 8001776:	4b26      	ldr	r3, [pc, #152]	; (8001810 <getUserInput+0x1bc>)
 8001778:	701a      	strb	r2, [r3, #0]
        break;
 800177a:	e776      	b.n	800166a <getUserInput+0x16>
        wlan_security = WFM_SECURITY_MODE_OPEN;
 800177c:	2200      	movs	r2, #0
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <getUserInput+0x1bc>)
 8001780:	701a      	strb	r2, [r3, #0]
        break;
 8001782:	e772      	b.n	800166a <getUserInput+0x16>
        wlan_security = WFM_SECURITY_MODE_WEP;
 8001784:	2201      	movs	r2, #1
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <getUserInput+0x1bc>)
 8001788:	701a      	strb	r2, [r3, #0]
        break;
 800178a:	e76e      	b.n	800166a <getUserInput+0x16>
        wlan_security = WFM_SECURITY_MODE_WPA2_WPA1_PSK;
 800178c:	2202      	movs	r2, #2
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <getUserInput+0x1bc>)
 8001790:	701a      	strb	r2, [r3, #0]
        break;
 8001792:	e76a      	b.n	800166a <getUserInput+0x16>
    printf ("AP mode\r\n");
 8001794:	481f      	ldr	r0, [pc, #124]	; (8001814 <getUserInput+0x1c0>)
 8001796:	f010 fd5d 	bl	8012254 <puts>
    printf ("SSID = %s\r\n",softap_ssid);
 800179a:	4917      	ldr	r1, [pc, #92]	; (80017f8 <getUserInput+0x1a4>)
 800179c:	480e      	ldr	r0, [pc, #56]	; (80017d8 <getUserInput+0x184>)
 800179e:	f010 fce5 	bl	801216c <iprintf>
    printf ("Passkey = %s\r\n",softap_passkey);
 80017a2:	4917      	ldr	r1, [pc, #92]	; (8001800 <getUserInput+0x1ac>)
 80017a4:	480e      	ldr	r0, [pc, #56]	; (80017e0 <getUserInput+0x18c>)
 80017a6:	f010 fce1 	bl	801216c <iprintf>
    printf ("IP address = %d.%d.%d.%d\r\n",
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <getUserInput+0x1c4>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	4a1b      	ldr	r2, [pc, #108]	; (800181c <getUserInput+0x1c8>)
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	491b      	ldr	r1, [pc, #108]	; (8001820 <getUserInput+0x1cc>)
 80017b4:	7809      	ldrb	r1, [r1, #0]
 80017b6:	481b      	ldr	r0, [pc, #108]	; (8001824 <getUserInput+0x1d0>)
 80017b8:	7800      	ldrb	r0, [r0, #0]
 80017ba:	9000      	str	r0, [sp, #0]
 80017bc:	481a      	ldr	r0, [pc, #104]	; (8001828 <getUserInput+0x1d4>)
 80017be:	f010 fcd5 	bl	801216c <iprintf>
 80017c2:	e765      	b.n	8001690 <getUserInput+0x3c>
 80017c4:	080133e4 	.word	0x080133e4
 80017c8:	080134f4 	.word	0x080134f4
 80017cc:	2000033c 	.word	0x2000033c
 80017d0:	08013550 	.word	0x08013550
 80017d4:	200000b8 	.word	0x200000b8
 80017d8:	08013518 	.word	0x08013518
 80017dc:	20000074 	.word	0x20000074
 80017e0:	08013524 	.word	0x08013524
 80017e4:	08013420 	.word	0x08013420
 80017e8:	20006ed0 	.word	0x20006ed0
 80017ec:	20000008 	.word	0x20000008
 80017f0:	08013468 	.word	0x08013468
 80017f4:	08013484 	.word	0x08013484
 80017f8:	20000054 	.word	0x20000054
 80017fc:	08013494 	.word	0x08013494
 8001800:	20000010 	.word	0x20000010
 8001804:	080134a8 	.word	0x080134a8
 8001808:	20000050 	.word	0x20000050
 800180c:	08013450 	.word	0x08013450
 8001810:	200000b4 	.word	0x200000b4
 8001814:	0801350c 	.word	0x0801350c
 8001818:	20000338 	.word	0x20000338
 800181c:	20000001 	.word	0x20000001
 8001820:	20000000 	.word	0x20000000
 8001824:	20000002 	.word	0x20000002
 8001828:	08013534 	.word	0x08013534

0800182c <Netif_Config>:
 *
 * @return
 *    none
 ******************************************************************************/
static void Netif_Config(void)
{
 800182c:	b510      	push	{r4, lr}
 800182e:	b088      	sub	sp, #32
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;
	
if (use_dhcp_client)
 8001830:	4b39      	ldr	r3, [pc, #228]	; (8001918 <Netif_Config+0xec>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b1cb      	cbz	r3, 800186a <Netif_Config+0x3e>
{
  ip_addr_set_zero_ip4(&ipaddr);
 8001836:	2300      	movs	r3, #0
 8001838:	9307      	str	r3, [sp, #28]
  ip_addr_set_zero_ip4(&netmask);
 800183a:	9306      	str	r3, [sp, #24]
  ip_addr_set_zero_ip4(&gw);
 800183c:	9305      	str	r3, [sp, #20]
  IP_ADDR4(&ipaddr,ip_addr0,ip_addr1,ip_addr2,ip_addr3);
  IP_ADDR4(&netmask,netmask_addr0,netmask_addr1,netmask_addr2,netmask_addr3);
  IP_ADDR4(&gw,gw_addr0,gw_addr1,gw_addr2,gw_addr3);
}
    
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800183e:	4c37      	ldr	r4, [pc, #220]	; (800191c <Netif_Config+0xf0>)
 8001840:	4b37      	ldr	r3, [pc, #220]	; (8001920 <Netif_Config+0xf4>)
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	4b37      	ldr	r3, [pc, #220]	; (8001924 <Netif_Config+0xf8>)
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	ab05      	add	r3, sp, #20
 800184e:	aa06      	add	r2, sp, #24
 8001850:	a907      	add	r1, sp, #28
 8001852:	4620      	mov	r0, r4
 8001854:	f00b f908 	bl	800ca68 <netif_add>
  
  /*  Registers the default network interface. */
  netif_set_default(&gnetif);  
 8001858:	4620      	mov	r0, r4
 800185a:	f00b f997 	bl	800cb8c <netif_set_default>
  if (soft_ap_mode)
 800185e:	4b32      	ldr	r3, [pc, #200]	; (8001928 <Netif_Config+0xfc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d150      	bne.n	8001908 <Netif_Config+0xdc>
  {
    netif_set_link_up(&gnetif);  
    netif_set_up(&gnetif);  
  }
}
 8001866:	b008      	add	sp, #32
 8001868:	bd10      	pop	{r4, pc}
  IP_ADDR4(&ipaddr,ip_addr0,ip_addr1,ip_addr2,ip_addr3);
 800186a:	4b30      	ldr	r3, [pc, #192]	; (800192c <Netif_Config+0x100>)
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	4b30      	ldr	r3, [pc, #192]	; (8001930 <Netif_Config+0x104>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	041b      	lsls	r3, r3, #16
 8001874:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001878:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <Netif_Config+0x108>)
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001880:	4a2d      	ldr	r2, [pc, #180]	; (8001938 <Netif_Config+0x10c>)
 8001882:	7812      	ldrb	r2, [r2, #0]
 8001884:	4313      	orrs	r3, r2
 8001886:	021a      	lsls	r2, r3, #8
 8001888:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800188c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8001890:	0a19      	lsrs	r1, r3, #8
 8001892:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8001896:	430a      	orrs	r2, r1
 8001898:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800189c:	9307      	str	r3, [sp, #28]
  IP_ADDR4(&netmask,netmask_addr0,netmask_addr1,netmask_addr2,netmask_addr3);
 800189e:	4b27      	ldr	r3, [pc, #156]	; (800193c <Netif_Config+0x110>)
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	4b27      	ldr	r3, [pc, #156]	; (8001940 <Netif_Config+0x114>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	041b      	lsls	r3, r3, #16
 80018a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018ac:	4a25      	ldr	r2, [pc, #148]	; (8001944 <Netif_Config+0x118>)
 80018ae:	7812      	ldrb	r2, [r2, #0]
 80018b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018b4:	4a24      	ldr	r2, [pc, #144]	; (8001948 <Netif_Config+0x11c>)
 80018b6:	7812      	ldrb	r2, [r2, #0]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	021a      	lsls	r2, r3, #8
 80018bc:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80018c0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80018c4:	0a19      	lsrs	r1, r3, #8
 80018c6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80018ca:	430a      	orrs	r2, r1
 80018cc:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 80018d0:	9306      	str	r3, [sp, #24]
  IP_ADDR4(&gw,gw_addr0,gw_addr1,gw_addr2,gw_addr3);
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <Netif_Config+0x120>)
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <Netif_Config+0x124>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	041b      	lsls	r3, r3, #16
 80018dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018e0:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <Netif_Config+0x128>)
 80018e2:	7812      	ldrb	r2, [r2, #0]
 80018e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018e8:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <Netif_Config+0x12c>)
 80018ea:	7812      	ldrb	r2, [r2, #0]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	021a      	lsls	r2, r3, #8
 80018f0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80018f4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80018f8:	0a19      	lsrs	r1, r3, #8
 80018fa:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80018fe:	430a      	orrs	r2, r1
 8001900:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 8001904:	9305      	str	r3, [sp, #20]
 8001906:	e79a      	b.n	800183e <Netif_Config+0x12>
    netif_set_link_up(&gnetif);  
 8001908:	4620      	mov	r0, r4
 800190a:	f00b f983 	bl	800cc14 <netif_set_link_up>
    netif_set_up(&gnetif);  
 800190e:	4620      	mov	r0, r4
 8001910:	f00b f942 	bl	800cb98 <netif_set_up>
}
 8001914:	e7a7      	b.n	8001866 <Netif_Config+0x3a>
 8001916:	bf00      	nop
 8001918:	20000008 	.word	0x20000008
 800191c:	20006f08 	.word	0x20006f08
 8001920:	080075ad 	.word	0x080075ad
 8001924:	08001569 	.word	0x08001569
 8001928:	2000033c 	.word	0x2000033c
 800192c:	20000000 	.word	0x20000000
 8001930:	20000001 	.word	0x20000001
 8001934:	20000338 	.word	0x20000338
 8001938:	20000002 	.word	0x20000002
 800193c:	20000003 	.word	0x20000003
 8001940:	20000004 	.word	0x20000004
 8001944:	20000005 	.word	0x20000005
 8001948:	20000339 	.word	0x20000339
 800194c:	20000334 	.word	0x20000334
 8001950:	20000335 	.word	0x20000335
 8001954:	20000336 	.word	0x20000336
 8001958:	20000337 	.word	0x20000337

0800195c <myCGIinit>:
{
 800195c:	b508      	push	{r3, lr}
    theCGItable[0] = LedCGI;
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <myCGIinit+0x18>)
 8001960:	4a05      	ldr	r2, [pc, #20]	; (8001978 <myCGIinit+0x1c>)
 8001962:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001966:	e883 0003 	stmia.w	r3, {r0, r1}
    http_set_cgi_handlers(theCGItable, 1);
 800196a:	2101      	movs	r1, #1
 800196c:	4618      	mov	r0, r3
 800196e:	f006 ff5d 	bl	800882c <http_set_cgi_handlers>
 8001972:	bd08      	pop	{r3, pc}
 8001974:	20000340 	.word	0x20000340
 8001978:	080133b4 	.word	0x080133b4

0800197c <StartThread>:
{
 800197c:	b500      	push	{lr}
 800197e:	b087      	sub	sp, #28
  getUserInput ();
 8001980:	f7ff fe68 	bl	8001654 <getUserInput>
  tcpip_init(NULL, NULL);
 8001984:	2100      	movs	r1, #0
 8001986:	4608      	mov	r0, r1
 8001988:	f005 fe5c 	bl	8007644 <tcpip_init>
  Netif_Config();
 800198c:	f7ff ff4e 	bl	800182c <Netif_Config>
  httpd_init();
 8001990:	f006 ff32 	bl	80087f8 <httpd_init>
  myCGIinit();
 8001994:	f7ff ffe2 	bl	800195c <myCGIinit>
  lwiperf_start_tcp_server_default(lwip_iperf_results,0);
 8001998:	2100      	movs	r1, #0
 800199a:	480d      	ldr	r0, [pc, #52]	; (80019d0 <StartThread+0x54>)
 800199c:	f007 fbc0 	bl	8009120 <lwiperf_start_tcp_server_default>
if (use_dhcp_client)
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <StartThread+0x58>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	b933      	cbnz	r3, 80019b4 <StartThread+0x38>
if (soft_ap_mode)
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <StartThread+0x5c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b973      	cbnz	r3, 80019ca <StartThread+0x4e>
    osThreadTerminate(NULL);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f003 ff1e 	bl	80057ee <osThreadTerminate>
 80019b2:	e7fb      	b.n	80019ac <StartThread+0x30>
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80019b4:	ac01      	add	r4, sp, #4
 80019b6:	4d09      	ldr	r5, [pc, #36]	; (80019dc <StartThread+0x60>)
 80019b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019bc:	682b      	ldr	r3, [r5, #0]
 80019be:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <StartThread+0x64>)
 80019c2:	a801      	add	r0, sp, #4
 80019c4:	f003 fef9 	bl	80057ba <osThreadCreate>
 80019c8:	e7ed      	b.n	80019a6 <StartThread+0x2a>
    dhcpserver_start();
 80019ca:	f7ff fc87 	bl	80012dc <dhcpserver_start>
 80019ce:	e7ed      	b.n	80019ac <StartThread+0x30>
 80019d0:	080015e9 	.word	0x080015e9
 80019d4:	20000008 	.word	0x20000008
 80019d8:	2000033c 	.word	0x2000033c
 80019dc:	080132bc 	.word	0x080132bc
 80019e0:	20006f08 	.word	0x20006f08

080019e4 <LedCGIhandler>:
if (iIndex == 0)
 80019e4:	b108      	cbz	r0, 80019ea <LedCGIhandler+0x6>
} //LedCGIhandler
 80019e6:	482b      	ldr	r0, [pc, #172]	; (8001a94 <LedCGIhandler+0xb0>)
 80019e8:	4770      	bx	lr
{
 80019ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019ee:	461e      	mov	r6, r3
 80019f0:	4690      	mov	r8, r2
 80019f2:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019f4:	4c28      	ldr	r4, [pc, #160]	; (8001a98 <LedCGIhandler+0xb4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	4620      	mov	r0, r4
 80019fc:	f001 fdd4 	bl	80035a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WF200_LED1_PORT, WF200_LED1_GPIO, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2108      	movs	r1, #8
 8001a04:	4825      	ldr	r0, [pc, #148]	; (8001a9c <LedCGIhandler+0xb8>)
 8001a06:	f001 fdcf 	bl	80035a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a10:	4620      	mov	r0, r4
 8001a12:	f001 fdc9 	bl	80035a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WF200_LED2_PORT, WF200_LED2_GPIO, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4821      	ldr	r0, [pc, #132]	; (8001aa0 <LedCGIhandler+0xbc>)
 8001a1c:	f001 fdc4 	bl	80035a8 <HAL_GPIO_WritePin>
    for (i=0; i<iNumParams; i++)
 8001a20:	2400      	movs	r4, #0
 8001a22:	e00d      	b.n	8001a40 <LedCGIhandler+0x5c>
               HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001a24:	2201      	movs	r2, #1
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001a2c:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8001a30:	f001 fdba 	bl	80035a8 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(WF200_LED1_PORT, WF200_LED1_GPIO, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2108      	movs	r1, #8
 8001a38:	4818      	ldr	r0, [pc, #96]	; (8001a9c <LedCGIhandler+0xb8>)
 8001a3a:	f001 fdb5 	bl	80035a8 <HAL_GPIO_WritePin>
    for (i=0; i<iNumParams; i++)
 8001a3e:	3401      	adds	r4, #1
 8001a40:	42ac      	cmp	r4, r5
 8001a42:	d223      	bcs.n	8001a8c <LedCGIhandler+0xa8>
       if(strcmp(pcValue[i], "on") == 0)
 8001a44:	4917      	ldr	r1, [pc, #92]	; (8001aa4 <LedCGIhandler+0xc0>)
 8001a46:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001a4a:	f7fe fbd1 	bl	80001f0 <strcmp>
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	d1f5      	bne.n	8001a3e <LedCGIhandler+0x5a>
            if (strcmp(pcParam[i], "btn_led0") == 0)
 8001a52:	f858 7024 	ldr.w	r7, [r8, r4, lsl #2]
 8001a56:	4914      	ldr	r1, [pc, #80]	; (8001aa8 <LedCGIhandler+0xc4>)
 8001a58:	4638      	mov	r0, r7
 8001a5a:	f7fe fbc9 	bl	80001f0 <strcmp>
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d0e0      	beq.n	8001a24 <LedCGIhandler+0x40>
            else if (strcmp(pcParam[i], "btn_led1") == 0)
 8001a62:	4912      	ldr	r1, [pc, #72]	; (8001aac <LedCGIhandler+0xc8>)
 8001a64:	4638      	mov	r0, r7
 8001a66:	f7fe fbc3 	bl	80001f0 <strcmp>
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	d1e7      	bne.n	8001a3e <LedCGIhandler+0x5a>
              HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a74:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001a78:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8001a7c:	f001 fd94 	bl	80035a8 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(WF200_LED2_PORT, WF200_LED2_GPIO, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	4611      	mov	r1, r2
 8001a84:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <LedCGIhandler+0xbc>)
 8001a86:	f001 fd8f 	bl	80035a8 <HAL_GPIO_WritePin>
 8001a8a:	e7d8      	b.n	8001a3e <LedCGIhandler+0x5a>
} //LedCGIhandler
 8001a8c:	4801      	ldr	r0, [pc, #4]	; (8001a94 <LedCGIhandler+0xb0>)
 8001a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a92:	bf00      	nop
 8001a94:	080133d8 	.word	0x080133d8
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020800 	.word	0x40020800
 8001aa4:	080133bc 	.word	0x080133bc
 8001aa8:	080133c0 	.word	0x080133c0
 8001aac:	080133cc 	.word	0x080133cc

08001ab0 <lwip_set_link_up>:
{
 8001ab0:	b510      	push	{r4, lr}
  netifapi_netif_set_link_up(&gnetif);
 8001ab2:	4c0c      	ldr	r4, [pc, #48]	; (8001ae4 <lwip_set_link_up+0x34>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	490c      	ldr	r1, [pc, #48]	; (8001ae8 <lwip_set_link_up+0x38>)
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f005 fca9 	bl	8007410 <netifapi_netif_common>
  netifapi_netif_set_up(&gnetif);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	490a      	ldr	r1, [pc, #40]	; (8001aec <lwip_set_link_up+0x3c>)
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f005 fca4 	bl	8007410 <netifapi_netif_common>
  if (use_dhcp_client)
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <lwip_set_link_up+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	b91b      	cbnz	r3, 8001ad6 <lwip_set_link_up+0x26>
  if (soft_ap_mode)
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <lwip_set_link_up+0x44>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	b923      	cbnz	r3, 8001ade <lwip_set_link_up+0x2e>
 8001ad4:	bd10      	pop	{r4, pc}
    User_notification(1);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7fe fe8c 	bl	80007f4 <User_notification>
 8001adc:	e7f7      	b.n	8001ace <lwip_set_link_up+0x1e>
    dhcpserver_start();
 8001ade:	f7ff fbfd 	bl	80012dc <dhcpserver_start>
}
 8001ae2:	e7f7      	b.n	8001ad4 <lwip_set_link_up+0x24>
 8001ae4:	20006f08 	.word	0x20006f08
 8001ae8:	0800cc15 	.word	0x0800cc15
 8001aec:	0800cb99 	.word	0x0800cb99
 8001af0:	20000008 	.word	0x20000008
 8001af4:	2000033c 	.word	0x2000033c

08001af8 <lwip_set_link_down>:
{
 8001af8:	b510      	push	{r4, lr}
  if (soft_ap_mode)
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <lwip_set_link_down+0x34>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b973      	cbnz	r3, 8001b1e <lwip_set_link_down+0x26>
  netifapi_netif_set_down(&gnetif);
 8001b00:	4c0b      	ldr	r4, [pc, #44]	; (8001b30 <lwip_set_link_down+0x38>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	490b      	ldr	r1, [pc, #44]	; (8001b34 <lwip_set_link_down+0x3c>)
 8001b06:	4620      	mov	r0, r4
 8001b08:	f005 fc82 	bl	8007410 <netifapi_netif_common>
  netifapi_netif_set_link_down(&gnetif);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	490a      	ldr	r1, [pc, #40]	; (8001b38 <lwip_set_link_down+0x40>)
 8001b10:	4620      	mov	r0, r4
 8001b12:	f005 fc7d 	bl	8007410 <netifapi_netif_common>
  if (use_dhcp_client)
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <lwip_set_link_down+0x44>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	b91b      	cbnz	r3, 8001b24 <lwip_set_link_down+0x2c>
 8001b1c:	bd10      	pop	{r4, pc}
    dhcpserver_stop();
 8001b1e:	f7ff fbe5 	bl	80012ec <dhcpserver_stop>
 8001b22:	e7ed      	b.n	8001b00 <lwip_set_link_down+0x8>
    User_notification(0);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7fe fe65 	bl	80007f4 <User_notification>
}
 8001b2a:	e7f7      	b.n	8001b1c <lwip_set_link_down+0x24>
 8001b2c:	2000033c 	.word	0x2000033c
 8001b30:	20006f08 	.word	0x20006f08
 8001b34:	0800cbd5 	.word	0x0800cbd5
 8001b38:	0800cc65 	.word	0x0800cc65
 8001b3c:	20000008 	.word	0x20000008

08001b40 <lwip_start>:
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_start (void)
{
 8001b40:	b530      	push	{r4, r5, lr}
 8001b42:	b087      	sub	sp, #28
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001b44:	ac01      	add	r4, sp, #4
 8001b46:	4d05      	ldr	r5, [pc, #20]	; (8001b5c <lwip_start+0x1c>)
 8001b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b4c:	682b      	ldr	r3, [r5, #0]
 8001b4e:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8001b50:	2100      	movs	r1, #0
 8001b52:	a801      	add	r0, sp, #4
 8001b54:	f003 fe31 	bl	80057ba <osThreadCreate>
}
 8001b58:	b007      	add	sp, #28
 8001b5a:	bd30      	pop	{r4, r5, pc}
 8001b5c:	080132d0 	.word	0x080132d0

08001b60 <MX_GPIO_Init>:
}

/** Configure pins as 
*/
static void MX_GPIO_Init(void)
{
 8001b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b64:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2400      	movs	r4, #0
 8001b68:	9401      	str	r4, [sp, #4]
 8001b6a:	4b57      	ldr	r3, [pc, #348]	; (8001cc8 <MX_GPIO_Init+0x168>)
 8001b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
 8001b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b76:	f002 0201 	and.w	r2, r2, #1
 8001b7a:	9201      	str	r2, [sp, #4]
 8001b7c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	9402      	str	r4, [sp, #8]
 8001b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b82:	f042 0202 	orr.w	r2, r2, #2
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
 8001b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b8a:	f002 0202 	and.w	r2, r2, #2
 8001b8e:	9202      	str	r2, [sp, #8]
 8001b90:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b92:	9403      	str	r4, [sp, #12]
 8001b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b96:	f042 0204 	orr.w	r2, r2, #4
 8001b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b9e:	f002 0204 	and.w	r2, r2, #4
 8001ba2:	9203      	str	r2, [sp, #12]
 8001ba4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba6:	9404      	str	r4, [sp, #16]
 8001ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001baa:	f042 0208 	orr.w	r2, r2, #8
 8001bae:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb2:	f002 0208 	and.w	r2, r2, #8
 8001bb6:	9204      	str	r2, [sp, #16]
 8001bb8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bba:	9405      	str	r4, [sp, #20]
 8001bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bbe:	f042 0210 	orr.w	r2, r2, #16
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc6:	f002 0210 	and.w	r2, r2, #16
 8001bca:	9205      	str	r2, [sp, #20]
 8001bcc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bce:	9406      	str	r4, [sp, #24]
 8001bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd2:	f042 0220 	orr.w	r2, r2, #32
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bda:	f002 0220 	and.w	r2, r2, #32
 8001bde:	9206      	str	r2, [sp, #24]
 8001be0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001be2:	9407      	str	r4, [sp, #28]
 8001be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
 8001bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bee:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001bf2:	9207      	str	r2, [sp, #28]
 8001bf4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf6:	9408      	str	r4, [sp, #32]
 8001bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c06:	9308      	str	r3, [sp, #32]
 8001c08:	9b08      	ldr	r3, [sp, #32]
  
  HAL_GPIO_WritePin(WF200_RESET_PORT, WF200_RESET_GPIO, GPIO_PIN_SET);
 8001c0a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8001ce0 <MX_GPIO_Init+0x180>
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c14:	4648      	mov	r0, r9
 8001c16:	f001 fcc7 	bl	80035a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WF200_WUP_PORT, WF200_WUP_GPIO, GPIO_PIN_RESET);
 8001c1a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8001ce4 <MX_GPIO_Init+0x184>
 8001c1e:	4622      	mov	r2, r4
 8001c20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c24:	4640      	mov	r0, r8
 8001c26:	f001 fcbf 	bl	80035a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WF200_CS_PORT_SPI, WF200_CS_GPIO_SPI, GPIO_PIN_SET);
 8001c2a:	4e28      	ldr	r6, [pc, #160]	; (8001ccc <MX_GPIO_Init+0x16c>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c32:	4630      	mov	r0, r6
 8001c34:	f001 fcb8 	bl	80035a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c38:	4f25      	ldr	r7, [pc, #148]	; (8001cd0 <MX_GPIO_Init+0x170>)
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001c40:	4638      	mov	r0, r7
 8001c42:	f001 fcb1 	bl	80035a8 <HAL_GPIO_WritePin>

  /* Configure WF200 Reset */
  GPIO_InitStruct.Pin = WF200_RESET_GPIO;
 8001c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c4a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2501      	movs	r5, #1
 8001c4e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(WF200_RESET_PORT, &GPIO_InitStruct);
 8001c54:	a909      	add	r1, sp, #36	; 0x24
 8001c56:	4648      	mov	r0, r9
 8001c58:	f001 fb16 	bl	8003288 <HAL_GPIO_Init>

  /* Configure WF200 Wake-up pin */
  GPIO_InitStruct.Pin = WF200_WUP_GPIO;
 8001c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c60:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c62:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(WF200_WUP_PORT, &GPIO_InitStruct);
 8001c68:	a909      	add	r1, sp, #36	; 0x24
 8001c6a:	4640      	mov	r0, r8
 8001c6c:	f001 fb0c 	bl	8003288 <HAL_GPIO_Init>
  
  /* Configure WF200 SPI CS */
  GPIO_InitStruct.Pin = WF200_CS_GPIO_SPI;
 8001c70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c74:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c76:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(WF200_CS_PORT_SPI, &GPIO_InitStruct);
 8001c7c:	a909      	add	r1, sp, #36	; 0x24
 8001c7e:	4630      	mov	r0, r6
 8001c80:	f001 fb02 	bl	8003288 <HAL_GPIO_Init>

  /* Configure WF200 SPI interrupt */
  GPIO_InitStruct.Pin = WF200_IRQ_GPIO_SPI;
 8001c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c88:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <MX_GPIO_Init+0x174>)
 8001c8c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(WF200_IRQ_PORT_SPI, &GPIO_InitStruct);
 8001c90:	a909      	add	r1, sp, #36	; 0x24
 8001c92:	4630      	mov	r0, r6
 8001c94:	f001 faf8 	bl	8003288 <HAL_GPIO_Init>

  /* Configure LEDs */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001c98:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001c9c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	a909      	add	r1, sp, #36	; 0x24
 8001ca6:	4638      	mov	r0, r7
 8001ca8:	f001 faee 	bl	8003288 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WF200_LED1_GPIO;
 8001cac:	2308      	movs	r3, #8
 8001cae:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(WF200_LED1_PORT, &GPIO_InitStruct);
 8001cb0:	a909      	add	r1, sp, #36	; 0x24
 8001cb2:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <MX_GPIO_Init+0x178>)
 8001cb4:	f001 fae8 	bl	8003288 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WF200_LED2_GPIO;
 8001cb8:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(WF200_LED2_PORT, &GPIO_InitStruct);
 8001cba:	a909      	add	r1, sp, #36	; 0x24
 8001cbc:	4807      	ldr	r0, [pc, #28]	; (8001cdc <MX_GPIO_Init+0x17c>)
 8001cbe:	f001 fae3 	bl	8003288 <HAL_GPIO_Init>
}
 8001cc2:	b00f      	add	sp, #60	; 0x3c
 8001cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020c00 	.word	0x40020c00
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	10110000 	.word	0x10110000
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40021400 	.word	0x40021400
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001cea:	6802      	ldr	r2, [r0, #0]
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d000      	beq.n	8001cf4 <HAL_TIM_PeriodElapsedCallback+0xc>
 8001cf2:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001cf4:	f000 ffd2 	bl	8002c9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cf8:	e7fb      	b.n	8001cf2 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001cfa:	bf00      	nop
 8001cfc:	40010000 	.word	0x40010000

08001d00 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001d00:	e7fe      	b.n	8001d00 <_Error_Handler>
	...

08001d04 <MX_USART3_UART_Init>:
{
 8001d04:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8001d06:	4811      	ldr	r0, [pc, #68]	; (8001d4c <MX_USART3_UART_Init+0x48>)
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_USART3_UART_Init+0x4c>)
 8001d0a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8001d0c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d10:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d12:	2300      	movs	r3, #0
 8001d14:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d16:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d18:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d22:	f002 fb0b 	bl	800433c <HAL_UART_Init>
 8001d26:	b960      	cbnz	r0, 8001d42 <MX_USART3_UART_Init+0x3e>
  uart3Semaphore = xSemaphoreCreateBinary();
 8001d28:	2203      	movs	r2, #3
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f004 fa5f 	bl	80061f0 <xQueueGenericCreate>
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <MX_USART3_UART_Init+0x50>)
 8001d34:	6018      	str	r0, [r3, #0]
  xSemaphoreGive(uart3Semaphore);    
 8001d36:	2300      	movs	r3, #0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f004 fa7c 	bl	8006238 <xQueueGenericSend>
 8001d40:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001d42:	21b9      	movs	r1, #185	; 0xb9
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <MX_USART3_UART_Init+0x54>)
 8001d46:	f7ff ffdb 	bl	8001d00 <_Error_Handler>
 8001d4a:	bf00      	nop
 8001d4c:	20006f40 	.word	0x20006f40
 8001d50:	40004800 	.word	0x40004800
 8001d54:	20006f80 	.word	0x20006f80
 8001d58:	080135cc 	.word	0x080135cc

08001d5c <SystemClock_Config>:
{
 8001d5c:	b500      	push	{lr}
 8001d5e:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d60:	2100      	movs	r1, #0
 8001d62:	9101      	str	r1, [sp, #4]
 8001d64:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <SystemClock_Config+0xb8>)
 8001d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d78:	9102      	str	r1, [sp, #8]
 8001d7a:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <SystemClock_Config+0xbc>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d8a:	9302      	str	r3, [sp, #8]
 8001d8c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d92:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d96:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001da0:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001da2:	2204      	movs	r2, #4
 8001da4:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001da6:	22a8      	movs	r2, #168	; 0xa8
 8001da8:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001daa:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001dac:	2307      	movs	r3, #7
 8001dae:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db0:	a808      	add	r0, sp, #32
 8001db2:	f001 fc0f 	bl	80035d4 <HAL_RCC_OscConfig>
 8001db6:	bb20      	cbnz	r0, 8001e02 <SystemClock_Config+0xa6>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db8:	230f      	movs	r3, #15
 8001dba:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dc8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dce:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dd0:	2105      	movs	r1, #5
 8001dd2:	a803      	add	r0, sp, #12
 8001dd4:	f001 fe34 	bl	8003a40 <HAL_RCC_ClockConfig>
 8001dd8:	b9b8      	cbnz	r0, 8001e0a <SystemClock_Config+0xae>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001dda:	f001 fedd 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <SystemClock_Config+0xc0>)
 8001de0:	fba3 3000 	umull	r3, r0, r3, r0
 8001de4:	0980      	lsrs	r0, r0, #6
 8001de6:	f000 ffdd 	bl	8002da4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001dea:	2004      	movs	r0, #4
 8001dec:	f000 fff0 	bl	8002dd0 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f000 ff88 	bl	8002d0c <HAL_NVIC_SetPriority>
}
 8001dfc:	b015      	add	sp, #84	; 0x54
 8001dfe:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001e02:	218e      	movs	r1, #142	; 0x8e
 8001e04:	4806      	ldr	r0, [pc, #24]	; (8001e20 <SystemClock_Config+0xc4>)
 8001e06:	f7ff ff7b 	bl	8001d00 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001e0a:	219c      	movs	r1, #156	; 0x9c
 8001e0c:	4804      	ldr	r0, [pc, #16]	; (8001e20 <SystemClock_Config+0xc4>)
 8001e0e:	f7ff ff77 	bl	8001d00 <_Error_Handler>
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	10624dd3 	.word	0x10624dd3
 8001e20:	080135cc 	.word	0x080135cc

08001e24 <main>:
{
 8001e24:	b508      	push	{r3, lr}
  HAL_Init();
 8001e26:	f000 ff1f 	bl	8002c68 <HAL_Init>
  SystemClock_Config();
 8001e2a:	f7ff ff97 	bl	8001d5c <SystemClock_Config>
  MX_GPIO_Init();
 8001e2e:	f7ff fe97 	bl	8001b60 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001e32:	f7ff ff67 	bl	8001d04 <MX_USART3_UART_Init>
  vBusCommStart();
 8001e36:	f000 fedd 	bl	8002bf4 <vBusCommStart>
  vUARTInputStart(); 
 8001e3a:	f7fe fcb5 	bl	80007a8 <vUARTInputStart>
  lwip_start ();
 8001e3e:	f7ff fe7f 	bl	8001b40 <lwip_start>
  osKernelStart();
 8001e42:	f003 fcab 	bl	800579c <osKernelStart>
 8001e46:	e7fe      	b.n	8001e46 <main+0x22>

08001e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e48:	b510      	push	{r4, lr}
 8001e4a:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4c:	2400      	movs	r4, #0
 8001e4e:	9400      	str	r4, [sp, #0]
 8001e50:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <HAL_MspInit+0x90>)
 8001e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e58:	645a      	str	r2, [r3, #68]	; 0x44
 8001e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e5c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e60:	9200      	str	r2, [sp, #0]
 8001e62:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	9401      	str	r4, [sp, #4]
 8001e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f000 ff35 	bl	8002ce8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001e7e:	4622      	mov	r2, r4
 8001e80:	4621      	mov	r1, r4
 8001e82:	f06f 000b 	mvn.w	r0, #11
 8001e86:	f000 ff41 	bl	8002d0c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	f06f 000a 	mvn.w	r0, #10
 8001e92:	f000 ff3b 	bl	8002d0c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001e96:	4622      	mov	r2, r4
 8001e98:	4621      	mov	r1, r4
 8001e9a:	f06f 0009 	mvn.w	r0, #9
 8001e9e:	f000 ff35 	bl	8002d0c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001ea2:	4622      	mov	r2, r4
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	f06f 0004 	mvn.w	r0, #4
 8001eaa:	f000 ff2f 	bl	8002d0c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001eae:	4622      	mov	r2, r4
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	f06f 0003 	mvn.w	r0, #3
 8001eb6:	f000 ff29 	bl	8002d0c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eba:	4622      	mov	r2, r4
 8001ebc:	210f      	movs	r1, #15
 8001ebe:	f06f 0001 	mvn.w	r0, #1
 8001ec2:	f000 ff23 	bl	8002d0c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001ec6:	4622      	mov	r2, r4
 8001ec8:	210f      	movs	r1, #15
 8001eca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ece:	f000 ff1d 	bl	8002d0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	b002      	add	sp, #8
 8001ed4:	bd10      	pop	{r4, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <HAL_SDIO_MspInit>:

#ifdef WF200_USE_SDIO
void HAL_SDIO_MspInit(void)
{
 8001edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ee0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	2400      	movs	r4, #0
 8001ee4:	9405      	str	r4, [sp, #20]
 8001ee6:	9406      	str	r4, [sp, #24]
 8001ee8:	9407      	str	r4, [sp, #28]
 8001eea:	9408      	str	r4, [sp, #32]
 8001eec:	9409      	str	r4, [sp, #36]	; 0x24
  /* USER CODE BEGIN SDIO_MspInit 0 */
  
  /* USER CODE END SDIO_MspInit 0 */
  /* Peripheral clock enable */
  __HAL_RCC_SDIO_CLK_ENABLE();
 8001eee:	9401      	str	r4, [sp, #4]
 8001ef0:	4b59      	ldr	r3, [pc, #356]	; (8002058 <HAL_SDIO_MspInit+0x17c>)
 8001ef2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44
 8001efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001efc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f00:	9201      	str	r2, [sp, #4]
 8001f02:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f04:	9402      	str	r4, [sp, #8]
 8001f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f08:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f10:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001f14:	9202      	str	r2, [sp, #8]
 8001f16:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f18:	9403      	str	r4, [sp, #12]
 8001f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1c:	f042 0204 	orr.w	r2, r2, #4
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
 8001f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f24:	f002 0204 	and.w	r2, r2, #4
 8001f28:	9203      	str	r2, [sp, #12]
 8001f2a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2c:	9404      	str	r4, [sp, #16]
 8001f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f30:	f042 0208 	orr.w	r2, r2, #8
 8001f34:	631a      	str	r2, [r3, #48]	; 0x30
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	9304      	str	r3, [sp, #16]
 8001f3e:	9b04      	ldr	r3, [sp, #16]
  PC10     ------> SDIO_D2
  PC11     ------> SDIO_D3
  PC12     ------> SDIO_CK
  PD2     ------> SDIO_CMD 
  */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001f40:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f44:	9305      	str	r3, [sp, #20]
    |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	f04f 0902 	mov.w	r9, #2
 8001f4a:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f4e:	f04f 0801 	mov.w	r8, #1
 8001f52:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2503      	movs	r5, #3
 8001f58:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f5a:	270c      	movs	r7, #12
 8001f5c:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5e:	a905      	add	r1, sp, #20
 8001f60:	483e      	ldr	r0, [pc, #248]	; (800205c <HAL_SDIO_MspInit+0x180>)
 8001f62:	f001 f991 	bl	8003288 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f66:	2604      	movs	r6, #4
 8001f68:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f6e:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f74:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f76:	a905      	add	r1, sp, #20
 8001f78:	4839      	ldr	r0, [pc, #228]	; (8002060 <HAL_SDIO_MspInit+0x184>)
 8001f7a:	f001 f985 	bl	8003288 <HAL_GPIO_Init>
  
  /* SDIO DMA Init */
  /* SDIO_RX Init */
  hdma_sdio_rx.Instance = DMA2_Stream3;
 8001f7e:	4839      	ldr	r0, [pc, #228]	; (8002064 <HAL_SDIO_MspInit+0x188>)
 8001f80:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_SDIO_MspInit+0x18c>)
 8001f82:	6003      	str	r3, [r0, #0]
  hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001f84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f88:	6043      	str	r3, [r0, #4]
  hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f8a:	6084      	str	r4, [r0, #8]
  hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f8c:	60c4      	str	r4, [r0, #12]
  hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f92:	6103      	str	r3, [r0, #16]
  hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f98:	6143      	str	r3, [r0, #20]
  hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f9e:	6183      	str	r3, [r0, #24]
  hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	61c3      	str	r3, [r0, #28]
  hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001fa4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001fa8:	6203      	str	r3, [r0, #32]
  hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001faa:	6246      	str	r6, [r0, #36]	; 0x24
  hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001fac:	6285      	str	r5, [r0, #40]	; 0x28
  hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001fae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001fb2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001fb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fb8:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001fba:	f000 ff95 	bl	8002ee8 <HAL_DMA_Init>
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d13f      	bne.n	8002042 <HAL_SDIO_MspInit+0x166>
  {
    Error_Handler();
  }
  
  /* SDIO_TX Init */
  hdma_sdio_tx.Instance = DMA2_Stream6;
 8001fc2:	482a      	ldr	r0, [pc, #168]	; (800206c <HAL_SDIO_MspInit+0x190>)
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_SDIO_MspInit+0x194>)
 8001fc6:	6003      	str	r3, [r0, #0]
  hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001fc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001fcc:	6043      	str	r3, [r0, #4]
  hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fce:	2340      	movs	r3, #64	; 0x40
 8001fd0:	6083      	str	r3, [r0, #8]
  hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60c3      	str	r3, [r0, #12]
  hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fda:	6103      	str	r3, [r0, #16]
  hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe0:	6143      	str	r3, [r0, #20]
  hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fe2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fe6:	6183      	str	r3, [r0, #24]
  hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	61c3      	str	r3, [r0, #28]
  hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001fec:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001ff0:	6203      	str	r3, [r0, #32]
  hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	6243      	str	r3, [r0, #36]	; 0x24
  hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	6283      	str	r3, [r0, #40]	; 0x28
  hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001ffa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001ffe:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002000:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002004:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002006:	f000 ff6f 	bl	8002ee8 <HAL_DMA_Init>
 800200a:	b9f8      	cbnz	r0, 800204c <HAL_SDIO_MspInit+0x170>
    Error_Handler();
  }
  
  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 11, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	210b      	movs	r1, #11
 8002010:	203b      	movs	r0, #59	; 0x3b
 8002012:	f000 fe7b 	bl	8002d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002016:	203b      	movs	r0, #59	; 0x3b
 8002018:	f000 feaa 	bl	8002d70 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 11, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	210b      	movs	r1, #11
 8002020:	2045      	movs	r0, #69	; 0x45
 8002022:	f000 fe73 	bl	8002d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002026:	2045      	movs	r0, #69	; 0x45
 8002028:	f000 fea2 	bl	8002d70 <HAL_NVIC_EnableIRQ>
  
  /* SDIO interrupt Init */
  HAL_NVIC_SetPriority(SDIO_IRQn, 10, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	210a      	movs	r1, #10
 8002030:	2031      	movs	r0, #49	; 0x31
 8002032:	f000 fe6b 	bl	8002d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002036:	2031      	movs	r0, #49	; 0x31
 8002038:	f000 fe9a 	bl	8002d70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */
  
  /* USER CODE END SDIO_MspInit 1 */
}
 800203c:	b00b      	add	sp, #44	; 0x2c
 800203e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 8002042:	21a1      	movs	r1, #161	; 0xa1
 8002044:	480b      	ldr	r0, [pc, #44]	; (8002074 <HAL_SDIO_MspInit+0x198>)
 8002046:	f7ff fe5b 	bl	8001d00 <_Error_Handler>
 800204a:	e7ba      	b.n	8001fc2 <HAL_SDIO_MspInit+0xe6>
    Error_Handler();
 800204c:	21b4      	movs	r1, #180	; 0xb4
 800204e:	4809      	ldr	r0, [pc, #36]	; (8002074 <HAL_SDIO_MspInit+0x198>)
 8002050:	f7ff fe56 	bl	8001d00 <_Error_Handler>
 8002054:	e7da      	b.n	800200c <HAL_SDIO_MspInit+0x130>
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40020800 	.word	0x40020800
 8002060:	40020c00 	.word	0x40020c00
 8002064:	20006fcc 	.word	0x20006fcc
 8002068:	40026458 	.word	0x40026458
 800206c:	20007030 	.word	0x20007030
 8002070:	400264a0 	.word	0x400264a0
 8002074:	080135e4 	.word	0x080135e4

08002078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 8002078:	6802      	ldr	r2, [r0, #0]
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_UART_MspInit+0x5c>)
 800207c:	429a      	cmp	r2, r3
 800207e:	d000      	beq.n	8002082 <HAL_UART_MspInit+0xa>
 8002080:	4770      	bx	lr
{
 8002082:	b530      	push	{r4, r5, lr}
 8002084:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002086:	2500      	movs	r5, #0
 8002088:	9500      	str	r5, [sp, #0]
 800208a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800208e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002090:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	9b00      	ldr	r3, [sp, #0]
  
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020aa:	2301      	movs	r3, #1
 80020ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020b2:	2407      	movs	r4, #7
 80020b4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b6:	a901      	add	r1, sp, #4
 80020b8:	4807      	ldr	r0, [pc, #28]	; (80020d8 <HAL_UART_MspInit+0x60>)
 80020ba:	f001 f8e5 	bl	8003288 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 7, 0);
 80020be:	462a      	mov	r2, r5
 80020c0:	4621      	mov	r1, r4
 80020c2:	2027      	movs	r0, #39	; 0x27
 80020c4:	f000 fe22 	bl	8002d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020c8:	2027      	movs	r0, #39	; 0x27
 80020ca:	f000 fe51 	bl	8002d70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020ce:	b007      	add	sp, #28
 80020d0:	bd30      	pop	{r4, r5, pc}
 80020d2:	bf00      	nop
 80020d4:	40004800 	.word	0x40004800
 80020d8:	40020c00 	.word	0x40020c00

080020dc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80020dc:	b500      	push	{lr}
 80020de:	b083      	sub	sp, #12
 80020e0:	9001      	str	r0, [sp, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  if( xSemaphoreTake( uart3Semaphore, portMAX_DELAY ) == pdTRUE )
 80020e2:	2300      	movs	r3, #0
 80020e4:	f04f 32ff 	mov.w	r2, #4294967295
 80020e8:	4619      	mov	r1, r3
 80020ea:	480c      	ldr	r0, [pc, #48]	; (800211c <__io_putchar+0x40>)
 80020ec:	6800      	ldr	r0, [r0, #0]
 80020ee:	f004 fa4b 	bl	8006588 <xQueueGenericReceive>
 80020f2:	2801      	cmp	r0, #1
 80020f4:	d003      	beq.n	80020fe <__io_putchar+0x22>
  {
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
    xSemaphoreGive(uart3Semaphore);
  }
  return ch;
}
 80020f6:	9801      	ldr	r0, [sp, #4]
 80020f8:	b003      	add	sp, #12
 80020fa:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80020fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002102:	2201      	movs	r2, #1
 8002104:	a901      	add	r1, sp, #4
 8002106:	4806      	ldr	r0, [pc, #24]	; (8002120 <__io_putchar+0x44>)
 8002108:	f002 f947 	bl	800439a <HAL_UART_Transmit>
    xSemaphoreGive(uart3Semaphore);
 800210c:	2300      	movs	r3, #0
 800210e:	461a      	mov	r2, r3
 8002110:	4619      	mov	r1, r3
 8002112:	4802      	ldr	r0, [pc, #8]	; (800211c <__io_putchar+0x40>)
 8002114:	6800      	ldr	r0, [r0, #0]
 8002116:	f004 f88f 	bl	8006238 <xQueueGenericSend>
 800211a:	e7ec      	b.n	80020f6 <__io_putchar+0x1a>
 800211c:	20006f80 	.word	0x20006f80
 8002120:	20006f40 	.word	0x20006f40

08002124 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002124:	b510      	push	{r4, lr}
 8002126:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002128:	2200      	movs	r2, #0
 800212a:	4601      	mov	r1, r0
 800212c:	2019      	movs	r0, #25
 800212e:	f000 fded 	bl	8002d0c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8002132:	2019      	movs	r0, #25
 8002134:	f000 fe1c 	bl	8002d70 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002138:	2400      	movs	r4, #0
 800213a:	9401      	str	r4, [sp, #4]
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <HAL_InitTick+0x6c>)
 800213e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
 8002146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002150:	a902      	add	r1, sp, #8
 8002152:	a803      	add	r0, sp, #12
 8002154:	f001 fd46 	bl	8003be4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002158:	f001 fd34 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 800215c:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800215e:	480d      	ldr	r0, [pc, #52]	; (8002194 <HAL_InitTick+0x70>)
 8002160:	fba0 2303 	umull	r2, r3, r0, r3
 8002164:	0c9b      	lsrs	r3, r3, #18
 8002166:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002168:	480b      	ldr	r0, [pc, #44]	; (8002198 <HAL_InitTick+0x74>)
 800216a:	4a0c      	ldr	r2, [pc, #48]	; (800219c <HAL_InitTick+0x78>)
 800216c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800216e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002172:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002174:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8002176:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002178:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800217a:	f001 fead 	bl	8003ed8 <HAL_TIM_Base_Init>
 800217e:	b110      	cbz	r0, 8002186 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002180:	2001      	movs	r0, #1
}
 8002182:	b008      	add	sp, #32
 8002184:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8002186:	4804      	ldr	r0, [pc, #16]	; (8002198 <HAL_InitTick+0x74>)
 8002188:	f001 fd4b 	bl	8003c22 <HAL_TIM_Base_Start_IT>
 800218c:	e7f9      	b.n	8002182 <HAL_InitTick+0x5e>
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	431bde83 	.word	0x431bde83
 8002198:	20006f84 	.word	0x20006f84
 800219c:	40010000 	.word	0x40010000

080021a0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80021a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80021a2:	f003 fc2b 	bl	80059fc <osSystickHandler>
 80021a6:	bd08      	pop	{r3, pc}

080021a8 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021aa:	4802      	ldr	r0, [pc, #8]	; (80021b4 <TIM1_UP_TIM10_IRQHandler+0xc>)
 80021ac:	f001 fd49 	bl	8003c42 <HAL_TIM_IRQHandler>
 80021b0:	bd08      	pop	{r3, pc}
 80021b2:	bf00      	nop
 80021b4:	20006f84 	.word	0x20006f84

080021b8 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80021b8:	b500      	push	{lr}
 80021ba:	b083      	sub	sp, #12
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80021bc:	2300      	movs	r3, #0
 80021be:	9301      	str	r3, [sp, #4]
  if (__HAL_GPIO_EXTI_GET_IT(WF200_IRQ_GPIO_SPI) != RESET) {
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <EXTI15_10_IRQHandler+0x48>)
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80021c8:	d114      	bne.n	80021f4 <EXTI15_10_IRQHandler+0x3c>
    vTaskNotifyGiveFromISR( busCommTaskHandle, &xHigherPriorityTaskWoken );
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021ce:	f001 f9f3 	bl	80035b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(WF200_IRQ_GPIO_SPI);
 80021d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021d6:	f001 f9ef 	bl	80035b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80021da:	9b01      	ldr	r3, [sp, #4]
 80021dc:	b13b      	cbz	r3, 80021ee <EXTI15_10_IRQHandler+0x36>
 80021de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <EXTI15_10_IRQHandler+0x4c>)
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	f3bf 8f4f 	dsb	sy
 80021ea:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021ee:	b003      	add	sp, #12
 80021f0:	f85d fb04 	ldr.w	pc, [sp], #4
    vTaskNotifyGiveFromISR( busCommTaskHandle, &xHigherPriorityTaskWoken );
 80021f4:	a901      	add	r1, sp, #4
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <EXTI15_10_IRQHandler+0x50>)
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	f005 f895 	bl	8007328 <vTaskNotifyGiveFromISR>
 80021fe:	e7e4      	b.n	80021ca <EXTI15_10_IRQHandler+0x12>
 8002200:	40013c00 	.word	0x40013c00
 8002204:	e000ed04 	.word	0xe000ed04
 8002208:	20007094 	.word	0x20007094

0800220c <SDIO_IRQHandler>:
#ifdef WF200_USE_SDIO
/**
* @brief This function handles SDIO global interrupt.
*/
void SDIO_IRQHandler(void)
{
 800220c:	b500      	push	{lr}
 800220e:	b083      	sub	sp, #12
  /* USER CODE BEGIN SDIO_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002210:	2300      	movs	r3, #0
 8002212:	9301      	str	r3, [sp, #4]
  if(__SDIO_GET_FLAG(SDIO, SDIO_IT_SDIOIT)){
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <SDIO_IRQHandler+0x60>)
 8002216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002218:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800221c:	d111      	bne.n	8002242 <SDIO_IRQHandler+0x36>
    /*Receive SDIO interrupt on SDIO_DAT1 from Ineo*/
    __SDIO_CLEAR_FLAG(SDIO, SDIO_FLAG_SDIOIT);
    vTaskNotifyGiveFromISR( busCommTaskHandle, &xHigherPriorityTaskWoken );
  }
  if(__SDIO_GET_FLAG(SDIO, SDIO_IT_DATAEND)){
 800221e:	4b13      	ldr	r3, [pc, #76]	; (800226c <SDIO_IRQHandler+0x60>)
 8002220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002222:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002226:	d116      	bne.n	8002256 <SDIO_IRQHandler+0x4a>
    /*SDIO transfer over*/
    __SDIO_CLEAR_FLAG(SDIO, SDIO_IT_DATAEND);
    xSemaphoreGiveFromISR( sdioDMASemaphore, &xHigherPriorityTaskWoken );
  }
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002228:	9b01      	ldr	r3, [sp, #4]
 800222a:	b13b      	cbz	r3, 800223c <SDIO_IRQHandler+0x30>
 800222c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <SDIO_IRQHandler+0x64>)
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	f3bf 8f6f 	isb	sy
  /* USER CODE END SDIO_IRQn 1 */
}
 800223c:	b003      	add	sp, #12
 800223e:	f85d fb04 	ldr.w	pc, [sp], #4
    __SDIO_CLEAR_FLAG(SDIO, SDIO_FLAG_SDIOIT);
 8002242:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <SDIO_IRQHandler+0x60>)
 8002248:	639a      	str	r2, [r3, #56]	; 0x38
    vTaskNotifyGiveFromISR( busCommTaskHandle, &xHigherPriorityTaskWoken );
 800224a:	a901      	add	r1, sp, #4
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <SDIO_IRQHandler+0x68>)
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	f005 f86a 	bl	8007328 <vTaskNotifyGiveFromISR>
 8002254:	e7e3      	b.n	800221e <SDIO_IRQHandler+0x12>
    __SDIO_CLEAR_FLAG(SDIO, SDIO_IT_DATAEND);
 8002256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <SDIO_IRQHandler+0x60>)
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
    xSemaphoreGiveFromISR( sdioDMASemaphore, &xHigherPriorityTaskWoken );
 800225e:	a901      	add	r1, sp, #4
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <SDIO_IRQHandler+0x6c>)
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	f004 f932 	bl	80064cc <xQueueGiveFromISR>
 8002268:	e7de      	b.n	8002228 <SDIO_IRQHandler+0x1c>
 800226a:	bf00      	nop
 800226c:	40012c00 	.word	0x40012c00
 8002270:	e000ed04 	.word	0xe000ed04
 8002274:	20007094 	.word	0x20007094
 8002278:	2000702c 	.word	0x2000702c

0800227c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800227c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800227e:	4802      	ldr	r0, [pc, #8]	; (8002288 <DMA2_Stream3_IRQHandler+0xc>)
 8002280:	f000 ff14 	bl	80030ac <HAL_DMA_IRQHandler>
 8002284:	bd08      	pop	{r3, pc}
 8002286:	bf00      	nop
 8002288:	20006fcc 	.word	0x20006fcc

0800228c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800228c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800228e:	4802      	ldr	r0, [pc, #8]	; (8002298 <DMA2_Stream6_IRQHandler+0xc>)
 8002290:	f000 ff0c 	bl	80030ac <HAL_DMA_IRQHandler>
 8002294:	bd08      	pop	{r3, pc}
 8002296:	bf00      	nop
 8002298:	20007030 	.word	0x20007030

0800229c <USART3_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles USART3 global interrupt.
*/
void USART3_IRQHandler(void)
{
 800229c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */
  uint32_t isrflags   = READ_REG(huart3.Instance->SR);
 800229e:	4807      	ldr	r0, [pc, #28]	; (80022bc <USART3_IRQHandler+0x20>)
 80022a0:	6803      	ldr	r3, [r0, #0]
 80022a2:	681c      	ldr	r4, [r3, #0]

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022a4:	f002 f990 	bl	80045c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  /*Character received*/
  if((isrflags & USART_SR_RXNE) != RESET)
 80022a8:	f014 0f20 	tst.w	r4, #32
 80022ac:	d100      	bne.n	80022b0 <USART3_IRQHandler+0x14>
 80022ae:	bd10      	pop	{r4, pc}
  {
    /*Notify UARTCmdTask that data is available*/
    vTaskNotifyGiveFromISR( UARTInputTaskHandle, pdFALSE );
 80022b0:	2100      	movs	r1, #0
 80022b2:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <USART3_IRQHandler+0x24>)
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	f005 f837 	bl	8007328 <vTaskNotifyGiveFromISR>
  }
  /* USER CODE END USART3_IRQn 1 */
}
 80022ba:	e7f8      	b.n	80022ae <USART3_IRQHandler+0x12>
 80022bc:	20006f40 	.word	0x20006f40
 80022c0:	20006ecc 	.word	0x20006ecc

080022c4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80022c4:	b508      	push	{r3, lr}
  /*Release the UART binary semaphore*/
  xSemaphoreGiveFromISR(uart3Semaphore, pdFALSE);  
 80022c6:	2100      	movs	r1, #0
 80022c8:	4b02      	ldr	r3, [pc, #8]	; (80022d4 <HAL_UART_TxCpltCallback+0x10>)
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	f004 f8fe 	bl	80064cc <xQueueGiveFromISR>
 80022d0:	bd08      	pop	{r3, pc}
 80022d2:	bf00      	nop
 80022d4:	20006f80 	.word	0x20006f80

080022d8 <HAL_UART_RxCpltCallback>:
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022d8:	b508      	push	{r3, lr}
  /*Release the UART binary semaphore*/
  xSemaphoreGiveFromISR(uart3Semaphore, pdFALSE);  
 80022da:	2100      	movs	r1, #0
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <HAL_UART_RxCpltCallback+0x10>)
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	f004 f8f4 	bl	80064cc <xQueueGiveFromISR>
 80022e4:	bd08      	pop	{r3, pc}
 80022e6:	bf00      	nop
 80022e8:	20006f80 	.word	0x20006f80

080022ec <wf200_host_init>:
    uint32_t wf200_firmware_download_progress;
} host_context;

/* Initialization phase*/
sl_status_t wf200_host_init( void )
{
 80022ec:	b510      	push	{r4, lr}
  host_context.wf200_firmware_download_progress = 0;
 80022ee:	2400      	movs	r4, #0
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <wf200_host_init+0x30>)
 80022f2:	601c      	str	r4, [r3, #0]
  eventQueue = xQueueCreate( 1, sizeof( uint32_t ) );
 80022f4:	4622      	mov	r2, r4
 80022f6:	2104      	movs	r1, #4
 80022f8:	2001      	movs	r0, #1
 80022fa:	f003 ff79 	bl	80061f0 <xQueueGenericCreate>
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <wf200_host_init+0x34>)
 8002300:	6018      	str	r0, [r3, #0]
  eventMutex = xSemaphoreCreateMutex();
 8002302:	2001      	movs	r0, #1
 8002304:	f004 f868 	bl	80063d8 <xQueueCreateMutex>
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <wf200_host_init+0x38>)
 800230a:	6018      	str	r0, [r3, #0]
  xSemaphoreGive( eventMutex );
 800230c:	4623      	mov	r3, r4
 800230e:	4622      	mov	r2, r4
 8002310:	4621      	mov	r1, r4
 8002312:	f003 ff91 	bl	8006238 <xQueueGenericSend>
  return SL_SUCCESS;
}
 8002316:	4620      	mov	r0, r4
 8002318:	bd10      	pop	{r4, pc}
 800231a:	bf00      	nop
 800231c:	20006fc4 	.word	0x20006fc4
 8002320:	20006fc0 	.word	0x20006fc0
 8002324:	20006fc8 	.word	0x20006fc8

08002328 <wf200_host_get_firmware_data>:

sl_status_t wf200_host_get_firmware_data( const uint8_t** data, uint32_t data_size )
{
 8002328:	b410      	push	{r4}
  *data = &wf200_firmware[host_context.wf200_firmware_download_progress];
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <wf200_host_get_firmware_data+0x1c>)
 800232c:	681c      	ldr	r4, [r3, #0]
 800232e:	4a06      	ldr	r2, [pc, #24]	; (8002348 <wf200_host_get_firmware_data+0x20>)
 8002330:	4422      	add	r2, r4
 8002332:	6002      	str	r2, [r0, #0]
  host_context.wf200_firmware_download_progress += data_size;
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4411      	add	r1, r2
 8002338:	6019      	str	r1, [r3, #0]
  return SL_SUCCESS;
}
 800233a:	2000      	movs	r0, #0
 800233c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20006fc4 	.word	0x20006fc4
 8002348:	0801366c 	.word	0x0801366c

0800234c <wf200_host_get_firmware_size>:
{
#ifdef DEBUG
  printf("Firmware version : %s\r\n", FIRMWARE_VERSION);
  printf("Firmware size    : %d kB\r\n", wf200_firmware_size);    
#endif
  *firmware_size = sizeof(wf200_firmware);
 800234c:	4b01      	ldr	r3, [pc, #4]	; (8002354 <wf200_host_get_firmware_size+0x8>)
 800234e:	6003      	str	r3, [r0, #0]
  return SL_SUCCESS;
}
 8002350:	2000      	movs	r0, #0
 8002352:	4770      	bx	lr
 8002354:	0004ac50 	.word	0x0004ac50

08002358 <wf200_host_deinit>:

sl_status_t wf200_host_deinit( void )
{
  return SL_SUCCESS;
}
 8002358:	2000      	movs	r0, #0
 800235a:	4770      	bx	lr

0800235c <wf200_host_reset_chip>:

/* GPIO interface */
sl_status_t wf200_host_reset_chip( void )
{
 800235c:	b510      	push	{r4, lr}
  // hold pin high to get chip out of reset
  HAL_GPIO_WritePin(WF200_RESET_PORT, WF200_RESET_GPIO, GPIO_PIN_RESET);
 800235e:	4c0a      	ldr	r4, [pc, #40]	; (8002388 <wf200_host_reset_chip+0x2c>)
 8002360:	2200      	movs	r2, #0
 8002362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002366:	4620      	mov	r0, r4
 8002368:	f001 f91e 	bl	80035a8 <HAL_GPIO_WritePin>
  HAL_Delay( 10 );
 800236c:	200a      	movs	r0, #10
 800236e:	f000 fca7 	bl	8002cc0 <HAL_Delay>
  HAL_GPIO_WritePin(WF200_RESET_PORT, WF200_RESET_GPIO, GPIO_PIN_SET);
 8002372:	2201      	movs	r2, #1
 8002374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002378:	4620      	mov	r0, r4
 800237a:	f001 f915 	bl	80035a8 <HAL_GPIO_WritePin>
  HAL_Delay( 30 );
 800237e:	201e      	movs	r0, #30
 8002380:	f000 fc9e 	bl	8002cc0 <HAL_Delay>
  
  return SL_SUCCESS;
}
 8002384:	2000      	movs	r0, #0
 8002386:	bd10      	pop	{r4, pc}
 8002388:	40021400 	.word	0x40021400

0800238c <wf200_host_set_wake_up_pin>:
  HAL_GPIO_WritePin(WF200_RESET_PORT, WF200_RESET_GPIO, GPIO_PIN_RESET);
  return SL_SUCCESS;
}

sl_status_t wf200_host_set_wake_up_pin( uint8_t state )
{
 800238c:	b508      	push	{r3, lr}
  if ( state > 0 )
 800238e:	b938      	cbnz	r0, 80023a0 <wf200_host_set_wake_up_pin+0x14>
  {
    HAL_GPIO_WritePin(WF200_WUP_PORT, WF200_WUP_GPIO, GPIO_PIN_SET);
  }
  else
  {
    HAL_GPIO_WritePin(WF200_WUP_PORT, WF200_WUP_GPIO, GPIO_PIN_RESET);
 8002390:	2200      	movs	r2, #0
 8002392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002396:	4806      	ldr	r0, [pc, #24]	; (80023b0 <wf200_host_set_wake_up_pin+0x24>)
 8002398:	f001 f906 	bl	80035a8 <HAL_GPIO_WritePin>
  }
  return SL_SUCCESS;
}
 800239c:	2000      	movs	r0, #0
 800239e:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(WF200_WUP_PORT, WF200_WUP_GPIO, GPIO_PIN_SET);
 80023a0:	2201      	movs	r2, #1
 80023a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023a6:	4802      	ldr	r0, [pc, #8]	; (80023b0 <wf200_host_set_wake_up_pin+0x24>)
 80023a8:	f001 f8fe 	bl	80035a8 <HAL_GPIO_WritePin>
 80023ac:	e7f6      	b.n	800239c <wf200_host_set_wake_up_pin+0x10>
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000

080023b4 <wf200_host_wait_for_confirmation>:
  osDelay(2);
  return SL_SUCCESS;
}

sl_status_t wf200_host_wait_for_confirmation( uint32_t timeout, void** event_payload_out )
{
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	4605      	mov	r5, r0
 80023ba:	460e      	mov	r6, r1
  uint32_t posted_event;
  for(uint32_t i = 0; i < timeout; i++)
 80023bc:	2400      	movs	r4, #0
 80023be:	e000      	b.n	80023c2 <wf200_host_wait_for_confirmation+0xe>
 80023c0:	3401      	adds	r4, #1
 80023c2:	42ac      	cmp	r4, r5
 80023c4:	d213      	bcs.n	80023ee <wf200_host_wait_for_confirmation+0x3a>
  {
    if( xQueueReceive( eventQueue, &( posted_event ), 1 ) )
 80023c6:	2300      	movs	r3, #0
 80023c8:	2201      	movs	r2, #1
 80023ca:	a901      	add	r1, sp, #4
 80023cc:	480a      	ldr	r0, [pc, #40]	; (80023f8 <wf200_host_wait_for_confirmation+0x44>)
 80023ce:	6800      	ldr	r0, [r0, #0]
 80023d0:	f004 f8da 	bl	8006588 <xQueueGenericReceive>
 80023d4:	2800      	cmp	r0, #0
 80023d6:	d0f3      	beq.n	80023c0 <wf200_host_wait_for_confirmation+0xc>
    { 
            
      if ( wf200_context->waited_event_id == posted_event )
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <wf200_host_wait_for_confirmation+0x48>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6899      	ldr	r1, [r3, #8]
 80023de:	9a01      	ldr	r2, [sp, #4]
 80023e0:	4291      	cmp	r1, r2
 80023e2:	d1ed      	bne.n	80023c0 <wf200_host_wait_for_confirmation+0xc>
      {
#ifdef DEBUG
        printf("event %#08X \n\r", posted_event); 
#endif 
        if ( event_payload_out != NULL )
 80023e4:	b136      	cbz	r6, 80023f4 <wf200_host_wait_for_confirmation+0x40>
        {
          *event_payload_out = wf200_context->event_payload_buffer;
 80023e6:	3322      	adds	r3, #34	; 0x22
 80023e8:	6033      	str	r3, [r6, #0]
        }
        return SL_SUCCESS;
 80023ea:	2000      	movs	r0, #0
 80023ec:	e000      	b.n	80023f0 <wf200_host_wait_for_confirmation+0x3c>
      }
    }
  }
  return SL_TIMEOUT;
 80023ee:	2002      	movs	r0, #2
}
 80023f0:	b002      	add	sp, #8
 80023f2:	bd70      	pop	{r4, r5, r6, pc}
        return SL_SUCCESS;
 80023f4:	2000      	movs	r0, #0
 80023f6:	e7fb      	b.n	80023f0 <wf200_host_wait_for_confirmation+0x3c>
 80023f8:	20006fc0 	.word	0x20006fc0
 80023fc:	200072d8 	.word	0x200072d8

08002400 <wf200_host_wait>:

sl_status_t wf200_host_wait( uint32_t wait_time )
{
 8002400:	b508      	push	{r3, lr}
  osDelay(wait_time);
 8002402:	f003 f9f9 	bl	80057f8 <osDelay>
  return SL_SUCCESS;
}
 8002406:	2000      	movs	r0, #0
 8002408:	bd08      	pop	{r3, pc}

0800240a <wf200_host_allocate_buffer>:
  return SL_SUCCESS;
}

/* Memory management */
sl_status_t wf200_host_allocate_buffer(wf200_buffer_t** buffer, wf200_buffer_type_t type, uint32_t buffer_size, uint32_t wait_duration)
{
 800240a:	b510      	push	{r4, lr}
 800240c:	4604      	mov	r4, r0
  UNUSED_PARAMETER( type );
  UNUSED_PARAMETER( wait_duration );
  *buffer = pvPortMalloc( buffer_size );
 800240e:	4610      	mov	r0, r2
 8002410:	f003 fb5a 	bl	8005ac8 <pvPortMalloc>
 8002414:	6020      	str	r0, [r4, #0]
  return SL_SUCCESS;
}
 8002416:	2000      	movs	r0, #0
 8002418:	bd10      	pop	{r4, pc}

0800241a <wf200_host_free_buffer>:

sl_status_t wf200_host_free_buffer( wf200_buffer_t* buffer, wf200_buffer_type_t type )
{
 800241a:	b508      	push	{r3, lr}
  UNUSED_PARAMETER( type );
  vPortFree( buffer );
 800241c:	f003 fbd8 	bl	8005bd0 <vPortFree>
  return SL_SUCCESS;
}
 8002420:	2000      	movs	r0, #0
 8002422:	bd08      	pop	{r3, pc}

08002424 <wf200_host_transmit_frame>:

/* Frame hook */
sl_status_t wf200_host_transmit_frame( wf200_buffer_t* frame )
{
 8002424:	b508      	push	{r3, lr}
    return wf200_data_write( frame, frame->msg_len );
 8002426:	8801      	ldrh	r1, [r0, #0]
 8002428:	f003 f83a 	bl	80054a0 <wf200_data_write>
}
 800242c:	bd08      	pop	{r3, pc}
	...

08002430 <wf200_host_setup_waited_event>:

sl_status_t wf200_host_setup_waited_event( uint32_t event_id )
{
  wf200_context->waited_event_id = event_id;
 8002430:	4b02      	ldr	r3, [pc, #8]	; (800243c <wf200_host_setup_waited_event+0xc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6098      	str	r0, [r3, #8]
  wf200_context->posted_event_id = 0;
 8002436:	2000      	movs	r0, #0
 8002438:	60d8      	str	r0, [r3, #12]
  return SL_SUCCESS;
}
 800243a:	4770      	bx	lr
 800243c:	200072d8 	.word	0x200072d8

08002440 <wf200_scan_result_callback>:

/** Callback for individual AP discovered
 */
void wf200_scan_result_callback( wf200_scan_result_t* scan_result )
{
 8002440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002442:	b089      	sub	sp, #36	; 0x24
  scan_count++;
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <wf200_scan_result_callback+0x58>)
 8002446:	7819      	ldrb	r1, [r3, #0]
 8002448:	3101      	adds	r1, #1
 800244a:	b2c9      	uxtb	r1, r1
 800244c:	7019      	strb	r1, [r3, #0]
  printf(
          "# %2d %2d  %03d %02X:%02X:%02X:%02X:%02X:%02X  %s",
          scan_count,
          scan_result->channel,
 800244e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
          ((int16_t)(scan_result->rcpi - 220)/2),
 8002450:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8002452:	3bdc      	subs	r3, #220	; 0xdc
 8002454:	b21b      	sxth	r3, r3
          scan_result->mac[0], scan_result->mac[1],
 8002456:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800245a:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
          scan_result->mac[2], scan_result->mac[3],
 800245e:	f890 6026 	ldrb.w	r6, [r0, #38]	; 0x26
 8002462:	f890 7027 	ldrb.w	r7, [r0, #39]	; 0x27
          scan_result->mac[4], scan_result->mac[5],
 8002466:	f890 e028 	ldrb.w	lr, [r0, #40]	; 0x28
 800246a:	f890 c029 	ldrb.w	ip, [r0, #41]	; 0x29
          scan_result->ssid);
 800246e:	3004      	adds	r0, #4
  printf(
 8002470:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8002474:	9006      	str	r0, [sp, #24]
 8002476:	f8cd c014 	str.w	ip, [sp, #20]
 800247a:	f8cd e010 	str.w	lr, [sp, #16]
 800247e:	9703      	str	r7, [sp, #12]
 8002480:	9602      	str	r6, [sp, #8]
 8002482:	9501      	str	r5, [sp, #4]
 8002484:	9400      	str	r4, [sp, #0]
 8002486:	105b      	asrs	r3, r3, #1
 8002488:	4804      	ldr	r0, [pc, #16]	; (800249c <wf200_scan_result_callback+0x5c>)
 800248a:	f00f fe6f 	bl	801216c <iprintf>
  /*Report one AP information*/
  printf("\r\n");
 800248e:	4804      	ldr	r0, [pc, #16]	; (80024a0 <wf200_scan_result_callback+0x60>)
 8002490:	f00f fee0 	bl	8012254 <puts>
}
 8002494:	b009      	add	sp, #36	; 0x24
 8002496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002498:	20000348 	.word	0x20000348
 800249c:	0805e2d8 	.word	0x0805e2d8
 80024a0:	08013508 	.word	0x08013508

080024a4 <wf200_scan_complete_callback>:

/** Callback to indicate the scan completion
 */
void wf200_scan_complete_callback( uint32_t status )
{
  scan_count = 0;
 80024a4:	2200      	movs	r2, #0
 80024a6:	4b01      	ldr	r3, [pc, #4]	; (80024ac <wf200_scan_complete_callback+0x8>)
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	4770      	bx	lr
 80024ac:	20000348 	.word	0x20000348

080024b0 <wf200_connect_callback>:
}

/** Callback triggered when a connection is established as station
 */
void wf200_connect_callback( uint8_t* mac, uint32_t status )
{
 80024b0:	b508      	push	{r3, lr}
  if(status == 0)
 80024b2:	b119      	cbz	r1, 80024bc <wf200_connect_callback+0xc>
  {  
    printf("Connected\r\n");
    lwip_set_link_up();
  }else{
    printf("Connection attempt failed\r\n");
 80024b4:	4804      	ldr	r0, [pc, #16]	; (80024c8 <wf200_connect_callback+0x18>)
 80024b6:	f00f fecd 	bl	8012254 <puts>
 80024ba:	bd08      	pop	{r3, pc}
    printf("Connected\r\n");
 80024bc:	4803      	ldr	r0, [pc, #12]	; (80024cc <wf200_connect_callback+0x1c>)
 80024be:	f00f fec9 	bl	8012254 <puts>
    lwip_set_link_up();
 80024c2:	f7ff faf5 	bl	8001ab0 <lwip_set_link_up>
 80024c6:	bd08      	pop	{r3, pc}
 80024c8:	08013640 	.word	0x08013640
 80024cc:	08013634 	.word	0x08013634

080024d0 <wf200_disconnect_callback>:
}

/** Callback triggered when connection is disconnected
 */
void wf200_disconnect_callback( uint8_t* mac, uint16_t reason )
{
 80024d0:	b508      	push	{r3, lr}
  printf("Disconnected\r\n");
 80024d2:	4803      	ldr	r0, [pc, #12]	; (80024e0 <wf200_disconnect_callback+0x10>)
 80024d4:	f00f febe 	bl	8012254 <puts>
  lwip_set_link_down();
 80024d8:	f7ff fb0e 	bl	8001af8 <lwip_set_link_down>
 80024dc:	bd08      	pop	{r3, pc}
 80024de:	bf00      	nop
 80024e0:	0801365c 	.word	0x0801365c

080024e4 <wf200_start_ap_callback>:
}

/** Callback triggered when a softap is started
 */
void wf200_start_ap_callback( uint32_t status )
{
 80024e4:	b508      	push	{r3, lr}
  if(status == 0)
 80024e6:	b128      	cbz	r0, 80024f4 <wf200_start_ap_callback+0x10>
  {  
    printf("AP started\r\n");
  }else{
    printf("AP start failed\r\n");
 80024e8:	4804      	ldr	r0, [pc, #16]	; (80024fc <wf200_start_ap_callback+0x18>)
 80024ea:	f00f feb3 	bl	8012254 <puts>
    lwip_set_link_down();
 80024ee:	f7ff fb03 	bl	8001af8 <lwip_set_link_down>
 80024f2:	bd08      	pop	{r3, pc}
    printf("AP started\r\n");
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <wf200_start_ap_callback+0x1c>)
 80024f6:	f00f fead 	bl	8012254 <puts>
 80024fa:	bd08      	pop	{r3, pc}
 80024fc:	0805e318 	.word	0x0805e318
 8002500:	0805e30c 	.word	0x0805e30c

08002504 <wf200_stop_ap_callback>:
}

/** Callback triggered when a softap is stopped
 */
void wf200_stop_ap_callback( void )
{
 8002504:	b508      	push	{r3, lr}
  printf("AP stopped\r\n");
 8002506:	4803      	ldr	r0, [pc, #12]	; (8002514 <wf200_stop_ap_callback+0x10>)
 8002508:	f00f fea4 	bl	8012254 <puts>
  lwip_set_link_down();
 800250c:	f7ff faf4 	bl	8001af8 <lwip_set_link_down>
 8002510:	bd08      	pop	{r3, pc}
 8002512:	bf00      	nop
 8002514:	0805e32c 	.word	0x0805e32c

08002518 <wf200_client_connected_callback>:
}

/** Callback triggered when a client connects
 */
void wf200_client_connected_callback( uint8_t* mac )
{
 8002518:	b508      	push	{r3, lr}
  printf("Client connected\r\n");  
 800251a:	4802      	ldr	r0, [pc, #8]	; (8002524 <wf200_client_connected_callback+0xc>)
 800251c:	f00f fe9a 	bl	8012254 <puts>
 8002520:	bd08      	pop	{r3, pc}
 8002522:	bf00      	nop
 8002524:	08013620 	.word	0x08013620

08002528 <wf200_ap_client_disconnected_callback>:
}

/** Callback triggered when a client disconnects
 */
void wf200_ap_client_disconnected_callback(  uint32_t status, uint8_t* mac )
{
 8002528:	b508      	push	{r3, lr}
  printf("Client disconnected\r\n");
 800252a:	4802      	ldr	r0, [pc, #8]	; (8002534 <wf200_ap_client_disconnected_callback+0xc>)
 800252c:	f00f fe92 	bl	8012254 <puts>
 8002530:	bd08      	pop	{r3, pc}
 8002532:	bf00      	nop
 8002534:	08013608 	.word	0x08013608

08002538 <wf200_generic_status_callback>:
}

/** Callback triggered when a generic status is received
 */
void wf200_generic_status_callback( HiGenericIndBody_t* frame )
{
 8002538:	b508      	push	{r3, lr}
  printf("Generic status received\r\n");
 800253a:	4802      	ldr	r0, [pc, #8]	; (8002544 <wf200_generic_status_callback+0xc>)
 800253c:	f00f fe8a 	bl	8012254 <puts>
 8002540:	bd08      	pop	{r3, pc}
 8002542:	bf00      	nop
 8002544:	0805e2bc 	.word	0x0805e2bc

08002548 <wf200_host_post_event>:
{
 8002548:	b530      	push	{r4, r5, lr}
 800254a:	b083      	sub	sp, #12
 800254c:	9101      	str	r1, [sp, #4]
 800254e:	4614      	mov	r4, r2
 8002550:	461d      	mov	r5, r3
  network_rx_buffer_gbl = (wf200_buffer_t*)event_payload;  
 8002552:	4b36      	ldr	r3, [pc, #216]	; (800262c <wf200_host_post_event+0xe4>)
 8002554:	601a      	str	r2, [r3, #0]
  switch(network_rx_buffer_gbl->msg_id ){
 8002556:	7893      	ldrb	r3, [r2, #2]
 8002558:	2bca      	cmp	r3, #202	; 0xca
 800255a:	d03e      	beq.n	80025da <wf200_host_post_event+0x92>
 800255c:	d821      	bhi.n	80025a2 <wf200_host_post_event+0x5a>
 800255e:	2bc4      	cmp	r3, #196	; 0xc4
 8002560:	d032      	beq.n	80025c8 <wf200_host_post_event+0x80>
 8002562:	d817      	bhi.n	8002594 <wf200_host_post_event+0x4c>
 8002564:	2b4a      	cmp	r3, #74	; 0x4a
 8002566:	d04c      	beq.n	8002602 <wf200_host_post_event+0xba>
 8002568:	2bc3      	cmp	r3, #195	; 0xc3
 800256a:	d104      	bne.n	8002576 <wf200_host_post_event+0x2e>
      wf200_connect_callback(connect_indication->Body.Mac, connect_indication->Body.Status);
 800256c:	6851      	ldr	r1, [r2, #4]
 800256e:	f102 0008 	add.w	r0, r2, #8
 8002572:	f7ff ff9d 	bl	80024b0 <wf200_connect_callback>
  if ( wf200_context->waited_event_id == event_id )
 8002576:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <wf200_host_post_event+0xe8>)
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	6882      	ldr	r2, [r0, #8]
 800257c:	9b01      	ldr	r3, [sp, #4]
 800257e:	429a      	cmp	r2, r3
 8002580:	d047      	beq.n	8002612 <wf200_host_post_event+0xca>
  wf200_host_free_buffer( network_rx_buffer_gbl, WF200_RX_FRAME_BUFFER );
 8002582:	4c2a      	ldr	r4, [pc, #168]	; (800262c <wf200_host_post_event+0xe4>)
 8002584:	2101      	movs	r1, #1
 8002586:	6820      	ldr	r0, [r4, #0]
 8002588:	f7ff ff47 	bl	800241a <wf200_host_free_buffer>
  network_rx_buffer_gbl = NULL;
 800258c:	2000      	movs	r0, #0
 800258e:	6020      	str	r0, [r4, #0]
}
 8002590:	b003      	add	sp, #12
 8002592:	bd30      	pop	{r4, r5, pc}
  switch(network_rx_buffer_gbl->msg_id ){
 8002594:	2bc5      	cmp	r3, #197	; 0xc5
 8002596:	d01c      	beq.n	80025d2 <wf200_host_post_event+0x8a>
 8002598:	2bc7      	cmp	r3, #199	; 0xc7
 800259a:	d1ec      	bne.n	8002576 <wf200_host_post_event+0x2e>
      wf200_stop_ap_callback();
 800259c:	f7ff ffb2 	bl	8002504 <wf200_stop_ap_callback>
      break;
 80025a0:	e7e9      	b.n	8002576 <wf200_host_post_event+0x2e>
  switch(network_rx_buffer_gbl->msg_id ){
 80025a2:	2bcd      	cmp	r3, #205	; 0xcd
 80025a4:	d024      	beq.n	80025f0 <wf200_host_post_event+0xa8>
 80025a6:	d807      	bhi.n	80025b8 <wf200_host_post_event+0x70>
 80025a8:	2bcb      	cmp	r3, #203	; 0xcb
 80025aa:	d01d      	beq.n	80025e8 <wf200_host_post_event+0xa0>
 80025ac:	2bcc      	cmp	r3, #204	; 0xcc
 80025ae:	d1e2      	bne.n	8002576 <wf200_host_post_event+0x2e>
      wf200_scan_complete_callback(scan_complete->Body.Status);
 80025b0:	6850      	ldr	r0, [r2, #4]
 80025b2:	f7ff ff77 	bl	80024a4 <wf200_scan_complete_callback>
      break;
 80025b6:	e7de      	b.n	8002576 <wf200_host_post_event+0x2e>
  switch(network_rx_buffer_gbl->msg_id ){
 80025b8:	2bcf      	cmp	r3, #207	; 0xcf
 80025ba:	d01d      	beq.n	80025f8 <wf200_host_post_event+0xb0>
 80025bc:	2be3      	cmp	r3, #227	; 0xe3
 80025be:	d1da      	bne.n	8002576 <wf200_host_post_event+0x2e>
      wf200_generic_status_callback(&generic_status->Body);
 80025c0:	1d10      	adds	r0, r2, #4
 80025c2:	f7ff ffb9 	bl	8002538 <wf200_generic_status_callback>
      break;
 80025c6:	e7d6      	b.n	8002576 <wf200_host_post_event+0x2e>
      wf200_disconnect_callback(disconnect_indication->Body.Mac, disconnect_indication->Body.Reason);
 80025c8:	8951      	ldrh	r1, [r2, #10]
 80025ca:	1d10      	adds	r0, r2, #4
 80025cc:	f7ff ff80 	bl	80024d0 <wf200_disconnect_callback>
      break;
 80025d0:	e7d1      	b.n	8002576 <wf200_host_post_event+0x2e>
      wf200_start_ap_callback(start_ap_indication->Body.Status);
 80025d2:	6850      	ldr	r0, [r2, #4]
 80025d4:	f7ff ff86 	bl	80024e4 <wf200_start_ap_callback>
      break;
 80025d8:	e7cd      	b.n	8002576 <wf200_host_post_event+0x2e>
      if ( ethernet_frame->frame_type == 0 )
 80025da:	7913      	ldrb	r3, [r2, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ca      	bne.n	8002576 <wf200_host_post_event+0x2e>
        wf200_host_received_frame_callback( ethernet_frame );
 80025e0:	4610      	mov	r0, r2
 80025e2:	f7fe ffad 	bl	8001540 <wf200_host_received_frame_callback>
 80025e6:	e7c6      	b.n	8002576 <wf200_host_post_event+0x2e>
      wf200_scan_result_callback((wf200_scan_result_t*)&scan_result->Body);
 80025e8:	1d10      	adds	r0, r2, #4
 80025ea:	f7ff ff29 	bl	8002440 <wf200_scan_result_callback>
      break;
 80025ee:	e7c2      	b.n	8002576 <wf200_host_post_event+0x2e>
      wf200_client_connected_callback(client_connected_indication->Body.Mac);
 80025f0:	1d10      	adds	r0, r2, #4
 80025f2:	f7ff ff91 	bl	8002518 <wf200_client_connected_callback>
      break;
 80025f6:	e7be      	b.n	8002576 <wf200_host_post_event+0x2e>
      wf200_ap_client_disconnected_callback(ap_client_disconnected_indication->Body.Reason, ap_client_disconnected_indication->Body.Mac);
 80025f8:	1d11      	adds	r1, r2, #4
 80025fa:	8950      	ldrh	r0, [r2, #10]
 80025fc:	f7ff ff94 	bl	8002528 <wf200_ap_client_disconnected_callback>
      break;
 8002600:	e7b9      	b.n	8002576 <wf200_host_post_event+0x2e>
      if ( wf200_context->used_buffer_number > 0 )
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <wf200_host_post_event+0xe8>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	8a93      	ldrh	r3, [r2, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0b4      	beq.n	8002576 <wf200_host_post_event+0x2e>
        wf200_context->used_buffer_number--;
 800260c:	3b01      	subs	r3, #1
 800260e:	8293      	strh	r3, [r2, #20]
 8002610:	e7b1      	b.n	8002576 <wf200_host_post_event+0x2e>
    memcpy( wf200_context->event_payload_buffer, event_payload, event_payload_length );
 8002612:	462a      	mov	r2, r5
 8002614:	4621      	mov	r1, r4
 8002616:	3022      	adds	r0, #34	; 0x22
 8002618:	f00f fd7a 	bl	8012110 <memcpy>
    xQueueOverwrite( eventQueue, ( void * ) &event_id);
 800261c:	2302      	movs	r3, #2
 800261e:	2200      	movs	r2, #0
 8002620:	a901      	add	r1, sp, #4
 8002622:	4804      	ldr	r0, [pc, #16]	; (8002634 <wf200_host_post_event+0xec>)
 8002624:	6800      	ldr	r0, [r0, #0]
 8002626:	f003 fe07 	bl	8006238 <xQueueGenericSend>
 800262a:	e7aa      	b.n	8002582 <wf200_host_post_event+0x3a>
 800262c:	20007090 	.word	0x20007090
 8002630:	200072d8 	.word	0x200072d8
 8002634:	20006fc0 	.word	0x20006fc0

08002638 <SDMMC_GetCmdResp>:

static uint32_t SDMMC_GetCmdResp(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <SDMMC_GetCmdResp+0x5c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a16      	ldr	r2, [pc, #88]	; (8002698 <SDMMC_GetCmdResp+0x60>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0a5a      	lsrs	r2, r3, #9
 8002644:	f241 3388 	movw	r3, #5000	; 0x1388
 8002648:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 800264c:	1e5a      	subs	r2, r3, #1
 800264e:	b1e3      	cbz	r3, 800268a <SDMMC_GetCmdResp+0x52>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002650:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8002652:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002654:	f011 0f45 	tst.w	r1, #69	; 0x45
 8002658:	d0f8      	beq.n	800264c <SDMMC_GetCmdResp+0x14>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800265a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800265c:	f013 0f04 	tst.w	r3, #4
 8002660:	d003      	beq.n	800266a <SDMMC_GetCmdResp+0x32>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002662:	2304      	movs	r3, #4
 8002664:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002666:	4618      	mov	r0, r3
 8002668:	4770      	bx	lr
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800266a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800266c:	f013 0f01 	tst.w	r3, #1
 8002670:	d107      	bne.n	8002682 <SDMMC_GetCmdResp+0x4a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8002672:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002674:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002678:	d00a      	beq.n	8002690 <SDMMC_GetCmdResp+0x58>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800267a:	2340      	movs	r3, #64	; 0x40
 800267c:	6383      	str	r3, [r0, #56]	; 0x38
  }
  return SDMMC_ERROR_NONE;
 800267e:	2000      	movs	r0, #0
 8002680:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002682:	2301      	movs	r3, #1
 8002684:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002686:	4618      	mov	r0, r3
 8002688:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800268a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800268e:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8002690:	2000      	movs	r0, #0
}
 8002692:	4770      	bx	lr
 8002694:	200000d8 	.word	0x200000d8
 8002698:	10624dd3 	.word	0x10624dd3

0800269c <SDIO_transmit_cplt>:
  return SL_SUCCESS;
}

static void SDIO_transmit_cplt(DMA_HandleTypeDef *hdma)
{
  __SDIO_ENABLE_IT(SDIO, SDIO_IT_DATAEND);
 800269c:	4a02      	ldr	r2, [pc, #8]	; (80026a8 <SDIO_transmit_cplt+0xc>)
 800269e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80026a6:	4770      	bx	lr
 80026a8:	40012c00 	.word	0x40012c00

080026ac <SDIO_receive_cplt>:

static void SDIO_receive_cplt(DMA_HandleTypeDef *hdma)
{
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the MMC DCTRL register */
  SDIO->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80026ac:	4a02      	ldr	r2, [pc, #8]	; (80026b8 <SDIO_receive_cplt+0xc>)
 80026ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80026b0:	f023 0308 	bic.w	r3, r3, #8
 80026b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80026b6:	4770      	bx	lr
 80026b8:	40012c00 	.word	0x40012c00

080026bc <sdio_optimal_block_size>:
  return SL_SUCCESS;
}

static uint32_t sdio_optimal_block_size( uint16_t buffer_size )
{
    if ( buffer_size > (uint16_t) 2048 )
 80026bc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80026c0:	d818      	bhi.n	80026f4 <sdio_optimal_block_size+0x38>
        return SDIO_DATABLOCK_SIZE_4096B;
    if ( buffer_size > (uint16_t) 1024 )
 80026c2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80026c6:	d817      	bhi.n	80026f8 <sdio_optimal_block_size+0x3c>
        return SDIO_DATABLOCK_SIZE_2048B;
    if ( buffer_size > (uint16_t) 512 )
 80026c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80026cc:	d816      	bhi.n	80026fc <sdio_optimal_block_size+0x40>
        return SDIO_DATABLOCK_SIZE_1024B;
    if ( buffer_size > (uint16_t) 256 )
 80026ce:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80026d2:	d815      	bhi.n	8002700 <sdio_optimal_block_size+0x44>
        return SDIO_DATABLOCK_SIZE_512B;
    if ( buffer_size > (uint16_t) 128 )
 80026d4:	2880      	cmp	r0, #128	; 0x80
 80026d6:	d815      	bhi.n	8002704 <sdio_optimal_block_size+0x48>
        return SDIO_DATABLOCK_SIZE_256B;
    if ( buffer_size > (uint16_t) 64 )
 80026d8:	2840      	cmp	r0, #64	; 0x40
 80026da:	d815      	bhi.n	8002708 <sdio_optimal_block_size+0x4c>
        return SDIO_DATABLOCK_SIZE_128B;
    if ( buffer_size > (uint16_t) 32 )
 80026dc:	2820      	cmp	r0, #32
 80026de:	d815      	bhi.n	800270c <sdio_optimal_block_size+0x50>
        return SDIO_DATABLOCK_SIZE_64B;
    if ( buffer_size > (uint16_t) 16 )
 80026e0:	2810      	cmp	r0, #16
 80026e2:	d815      	bhi.n	8002710 <sdio_optimal_block_size+0x54>
        return SDIO_DATABLOCK_SIZE_32B;
    if ( buffer_size > (uint16_t) 8 )
 80026e4:	2808      	cmp	r0, #8
 80026e6:	d815      	bhi.n	8002714 <sdio_optimal_block_size+0x58>
        return SDIO_DATABLOCK_SIZE_16B;
    if ( buffer_size > (uint16_t) 4 )
 80026e8:	2804      	cmp	r0, #4
 80026ea:	d801      	bhi.n	80026f0 <sdio_optimal_block_size+0x34>
        return SDIO_DATABLOCK_SIZE_8B;
    if ( buffer_size > (uint16_t) 2 )
        return SDIO_DATABLOCK_SIZE_4B;
 80026ec:	2020      	movs	r0, #32
    return SDIO_DATABLOCK_SIZE_4B;
}
 80026ee:	4770      	bx	lr
        return SDIO_DATABLOCK_SIZE_8B;
 80026f0:	2030      	movs	r0, #48	; 0x30
 80026f2:	4770      	bx	lr
        return SDIO_DATABLOCK_SIZE_4096B;
 80026f4:	20c0      	movs	r0, #192	; 0xc0
 80026f6:	4770      	bx	lr
        return SDIO_DATABLOCK_SIZE_2048B;
 80026f8:	20b0      	movs	r0, #176	; 0xb0
 80026fa:	4770      	bx	lr
        return SDIO_DATABLOCK_SIZE_1024B;
 80026fc:	20a0      	movs	r0, #160	; 0xa0
 80026fe:	4770      	bx	lr
        return SDIO_DATABLOCK_SIZE_512B;
 8002700:	2090      	movs	r0, #144	; 0x90
 8002702:	4770      	bx	lr
        return SDIO_DATABLOCK_SIZE_256B;
 8002704:	2080      	movs	r0, #128	; 0x80
 8002706:	4770      	bx	lr
        return SDIO_DATABLOCK_SIZE_128B;
 8002708:	2070      	movs	r0, #112	; 0x70
 800270a:	4770      	bx	lr
        return SDIO_DATABLOCK_SIZE_64B;
 800270c:	2060      	movs	r0, #96	; 0x60
 800270e:	4770      	bx	lr
        return SDIO_DATABLOCK_SIZE_32B;
 8002710:	2050      	movs	r0, #80	; 0x50
 8002712:	4770      	bx	lr
        return SDIO_DATABLOCK_SIZE_16B;
 8002714:	2040      	movs	r0, #64	; 0x40
 8002716:	4770      	bx	lr

08002718 <MX_SDIO_Init>:

/* SDIO init function */
static void MX_SDIO_Init(void)
{
 8002718:	b570      	push	{r4, r5, r6, lr}
 800271a:	b08a      	sub	sp, #40	; 0x28
  SDIO_InitTypeDef Init;
  
  HAL_SDIO_MspInit();
 800271c:	f7ff fbde 	bl	8001edc <HAL_SDIO_MspInit>
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002720:	2400      	movs	r4, #0
 8002722:	9404      	str	r4, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002724:	9405      	str	r4, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002726:	9406      	str	r4, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002728:	9407      	str	r4, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800272a:	9408      	str	r4, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800272c:	2376      	movs	r3, #118	; 0x76
 800272e:	9309      	str	r3, [sp, #36]	; 0x24
  SDIO_Init(SDIO, Init);
 8002730:	4e09      	ldr	r6, [pc, #36]	; (8002758 <MX_SDIO_Init+0x40>)
 8002732:	ab0a      	add	r3, sp, #40	; 0x28
 8002734:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002738:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800273c:	ab04      	add	r3, sp, #16
 800273e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002740:	4630      	mov	r0, r6
 8002742:	f002 f821 	bl	8004788 <SDIO_Init>
  __SDIO_DISABLE(SDIO);
 8002746:	4d05      	ldr	r5, [pc, #20]	; (800275c <MX_SDIO_Init+0x44>)
 8002748:	602c      	str	r4, [r5, #0]
  SDIO_PowerState_ON(SDIO);
 800274a:	4630      	mov	r0, r6
 800274c:	f002 f838 	bl	80047c0 <SDIO_PowerState_ON>
  __SDIO_ENABLE(SDIO);
 8002750:	2301      	movs	r3, #1
 8002752:	602b      	str	r3, [r5, #0]
}
 8002754:	b00a      	add	sp, #40	; 0x28
 8002756:	bd70      	pop	{r4, r5, r6, pc}
 8002758:	40012c00 	.word	0x40012c00
 800275c:	422580a0 	.word	0x422580a0

08002760 <MX_SDIO_DeInit>:

/* SDIO deinit function */
static void MX_SDIO_DeInit(void)
{
 8002760:	b508      	push	{r3, lr}
  /* Peripheral clock disable */
  __HAL_RCC_SDIO_CLK_DISABLE();
 8002762:	4a0c      	ldr	r2, [pc, #48]	; (8002794 <MX_SDIO_DeInit+0x34>)
 8002764:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800276a:	6453      	str	r3, [r2, #68]	; 0x44

  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800276c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8002770:	4809      	ldr	r0, [pc, #36]	; (8002798 <MX_SDIO_DeInit+0x38>)
 8002772:	f000 fe7b 	bl	800346c <HAL_GPIO_DeInit>
                  |GPIO_PIN_12);
  
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8002776:	2104      	movs	r1, #4
 8002778:	4808      	ldr	r0, [pc, #32]	; (800279c <MX_SDIO_DeInit+0x3c>)
 800277a:	f000 fe77 	bl	800346c <HAL_GPIO_DeInit>
  
  /* SDIO DMA DeInit */
  HAL_DMA_DeInit(&hdma_sdio_rx);
 800277e:	4808      	ldr	r0, [pc, #32]	; (80027a0 <MX_SDIO_DeInit+0x40>)
 8002780:	f000 fc1a 	bl	8002fb8 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hdma_sdio_tx);
 8002784:	4807      	ldr	r0, [pc, #28]	; (80027a4 <MX_SDIO_DeInit+0x44>)
 8002786:	f000 fc17 	bl	8002fb8 <HAL_DMA_DeInit>
  
  /* SDIO interrupt DeInit */
  HAL_NVIC_DisableIRQ(SDIO_IRQn);
 800278a:	2031      	movs	r0, #49	; 0x31
 800278c:	f000 fafc 	bl	8002d88 <HAL_NVIC_DisableIRQ>
 8002790:	bd08      	pop	{r3, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	40020800 	.word	0x40020800
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	20006fcc 	.word	0x20006fcc
 80027a4:	20007030 	.word	0x20007030

080027a8 <wf200_host_sdio_enable_high_speed_mode>:
{
 80027a8:	b530      	push	{r4, r5, lr}
 80027aa:	b08b      	sub	sp, #44	; 0x2c
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80027ac:	2400      	movs	r4, #0
 80027ae:	9404      	str	r4, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80027b0:	9405      	str	r4, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80027b2:	9406      	str	r4, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_4B;
 80027b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027b8:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80027ba:	9408      	str	r4, [sp, #32]
  Init.ClockDiv            = 0;
 80027bc:	9409      	str	r4, [sp, #36]	; 0x24
  SDIO_Init(SDIO, Init);
 80027be:	4d08      	ldr	r5, [pc, #32]	; (80027e0 <wf200_host_sdio_enable_high_speed_mode+0x38>)
 80027c0:	ab0a      	add	r3, sp, #40	; 0x28
 80027c2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80027c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80027ca:	ab04      	add	r3, sp, #16
 80027cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ce:	4628      	mov	r0, r5
 80027d0:	f001 ffda 	bl	8004788 <SDIO_Init>
  SDIO_PowerState_ON(SDIO);
 80027d4:	4628      	mov	r0, r5
 80027d6:	f001 fff3 	bl	80047c0 <SDIO_PowerState_ON>
}
 80027da:	4620      	mov	r0, r4
 80027dc:	b00b      	add	sp, #44	; 0x2c
 80027de:	bd30      	pop	{r4, r5, pc}
 80027e0:	40012c00 	.word	0x40012c00

080027e4 <wf200_host_init_bus>:
{
 80027e4:	b508      	push	{r3, lr}
  MX_SDIO_Init();
 80027e6:	f7ff ff97 	bl	8002718 <MX_SDIO_Init>
  sdioDMASemaphore = xSemaphoreCreateBinary();
 80027ea:	2203      	movs	r2, #3
 80027ec:	2100      	movs	r1, #0
 80027ee:	2001      	movs	r0, #1
 80027f0:	f003 fcfe 	bl	80061f0 <xQueueGenericCreate>
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <wf200_host_init_bus+0x60>)
 80027f6:	6018      	str	r0, [r3, #0]
  xSemaphoreGive(sdioDMASemaphore);  
 80027f8:	2300      	movs	r3, #0
 80027fa:	461a      	mov	r2, r3
 80027fc:	4619      	mov	r1, r3
 80027fe:	f003 fd1b 	bl	8006238 <xQueueGenericSend>
  errorstate = SDMMC_CmdGoIdleState(SDIO);
 8002802:	4811      	ldr	r0, [pc, #68]	; (8002848 <wf200_host_init_bus+0x64>)
 8002804:	f002 f926 	bl	8004a54 <SDMMC_CmdGoIdleState>
  if(errorstate != SDMMC_ERROR_NONE)
 8002808:	b108      	cbz	r0, 800280e <wf200_host_init_bus+0x2a>
    return SL_ERROR;
 800280a:	2004      	movs	r0, #4
 800280c:	bd08      	pop	{r3, pc}
  HAL_Delay(1); //Mandatory because wf200 reply to cmd0,
 800280e:	2001      	movs	r0, #1
 8002810:	f000 fa56 	bl	8002cc0 <HAL_Delay>
  errorstate = SDMMC_CmdOperCond(SDIO);
 8002814:	480c      	ldr	r0, [pc, #48]	; (8002848 <wf200_host_init_bus+0x64>)
 8002816:	f002 f930 	bl	8004a7a <SDMMC_CmdOperCond>
  if(errorstate != SDMMC_ERROR_NONE)
 800281a:	b108      	cbz	r0, 8002820 <wf200_host_init_bus+0x3c>
    return SL_ERROR;
 800281c:	2004      	movs	r0, #4
 800281e:	bd08      	pop	{r3, pc}
  errorstate = SDMMC_CmdSetRelAdd(SDIO, NULL);
 8002820:	2100      	movs	r1, #0
 8002822:	4809      	ldr	r0, [pc, #36]	; (8002848 <wf200_host_init_bus+0x64>)
 8002824:	f002 f940 	bl	8004aa8 <SDMMC_CmdSetRelAdd>
  if(errorstate != SDMMC_ERROR_NONE)
 8002828:	b108      	cbz	r0, 800282e <wf200_host_init_bus+0x4a>
    return SL_ERROR;
 800282a:	2004      	movs	r0, #4
 800282c:	bd08      	pop	{r3, pc}
  errorstate = SDMMC_CmdSelDesel(SDIO, 0x00010000);
 800282e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002832:	2300      	movs	r3, #0
 8002834:	4804      	ldr	r0, [pc, #16]	; (8002848 <wf200_host_init_bus+0x64>)
 8002836:	f002 f8f5 	bl	8004a24 <SDMMC_CmdSelDesel>
  if(errorstate != SDMMC_ERROR_NONE)
 800283a:	b108      	cbz	r0, 8002840 <wf200_host_init_bus+0x5c>
    return SL_ERROR;
 800283c:	2004      	movs	r0, #4
 800283e:	bd08      	pop	{r3, pc}
  return SL_SUCCESS;
 8002840:	2000      	movs	r0, #0
}
 8002842:	bd08      	pop	{r3, pc}
 8002844:	2000702c 	.word	0x2000702c
 8002848:	40012c00 	.word	0x40012c00

0800284c <wf200_host_deinit_bus>:
{
 800284c:	b508      	push	{r3, lr}
  MX_SDIO_DeInit();
 800284e:	f7ff ff87 	bl	8002760 <MX_SDIO_DeInit>
}
 8002852:	2000      	movs	r0, #0
 8002854:	bd08      	pop	{r3, pc}
	...

08002858 <wf200_host_sdio_transfer_cmd52>:
sl_status_t wf200_host_sdio_transfer_cmd52( wf200_host_bus_tranfer_type_t type, uint8_t function, uint32_t address, uint8_t* buffer ){
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	b087      	sub	sp, #28
 800285c:	4606      	mov	r6, r0
 800285e:	460f      	mov	r7, r1
 8002860:	4614      	mov	r4, r2
 8002862:	461d      	mov	r5, r3
  if(xSemaphoreTake(sdioDMASemaphore, portMAX_DELAY) == pdTRUE )
 8002864:	2300      	movs	r3, #0
 8002866:	f04f 32ff 	mov.w	r2, #4294967295
 800286a:	4619      	mov	r1, r3
 800286c:	4820      	ldr	r0, [pc, #128]	; (80028f0 <wf200_host_sdio_transfer_cmd52+0x98>)
 800286e:	6800      	ldr	r0, [r0, #0]
 8002870:	f003 fe8a 	bl	8006588 <xQueueGenericReceive>
 8002874:	2801      	cmp	r0, #1
 8002876:	d002      	beq.n	800287e <wf200_host_sdio_transfer_cmd52+0x26>
  return SL_SUCCESS;
 8002878:	2000      	movs	r0, #0
}
 800287a:	b007      	add	sp, #28
 800287c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(type == WF200_BUS_WRITE){
 800287e:	2e01      	cmp	r6, #1
 8002880:	d017      	beq.n	80028b2 <wf200_host_sdio_transfer_cmd52+0x5a>
          (address << 9); // length
 8002882:	0264      	lsls	r4, r4, #9
        (function << 28) | // function number
 8002884:	ea44 7407 	orr.w	r4, r4, r7, lsl #28
      command.Argument = 0x00000000 | // 0x80000000 for write, 0x00000000 for read
 8002888:	9401      	str	r4, [sp, #4]
    command.CmdIndex         = SDMMC_CMD_SDMMC_RW_DIRECT; 
 800288a:	2334      	movs	r3, #52	; 0x34
 800288c:	9302      	str	r3, [sp, #8]
    command.Response         = SDIO_RESPONSE_SHORT;
 800288e:	2340      	movs	r3, #64	; 0x40
 8002890:	9303      	str	r3, [sp, #12]
    command.WaitForInterrupt = SDIO_WAIT_NO;
 8002892:	2300      	movs	r3, #0
 8002894:	9304      	str	r3, [sp, #16]
    command.CPSM             = SDIO_CPSM_ENABLE;
 8002896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800289a:	9305      	str	r3, [sp, #20]
    SDIO_SendCommand(SDIO, &command);
 800289c:	4c15      	ldr	r4, [pc, #84]	; (80028f4 <wf200_host_sdio_transfer_cmd52+0x9c>)
 800289e:	a901      	add	r1, sp, #4
 80028a0:	4620      	mov	r0, r4
 80028a2:	f001 ff91 	bl	80047c8 <SDIO_SendCommand>
    status = SDMMC_GetCmdResp(SDIO);
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7ff fec6 	bl	8002638 <SDMMC_GetCmdResp>
    if(status == SDMMC_ERROR_NONE)
 80028ac:	b150      	cbz	r0, 80028c4 <wf200_host_sdio_transfer_cmd52+0x6c>
      return SL_ERROR;
 80028ae:	2004      	movs	r0, #4
 80028b0:	e7e3      	b.n	800287a <wf200_host_sdio_transfer_cmd52+0x22>
          (address << 9)
 80028b2:	0263      	lsls	r3, r4, #9
        (function << 28) | // function number
 80028b4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
            | *buffer; // length
 80028b8:	7829      	ldrb	r1, [r5, #0]
 80028ba:	430b      	orrs	r3, r1
 80028bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      command.Argument = 0x80000000 | // 0x80000000 for write, 0x00000000 for read
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	e7e2      	b.n	800288a <wf200_host_sdio_transfer_cmd52+0x32>
      uint32_t response_flags = SDIO_GetResponse(SDIO, SDIO_RESP1);
 80028c4:	2100      	movs	r1, #0
 80028c6:	4620      	mov	r0, r4
 80028c8:	f001 ff93 	bl	80047f2 <SDIO_GetResponse>
      if((response_flags & 0xFF00) == 0x1000)
 80028cc:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80028d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d4:	d001      	beq.n	80028da <wf200_host_sdio_transfer_cmd52+0x82>
        return SL_ERROR;
 80028d6:	2004      	movs	r0, #4
 80028d8:	e7cf      	b.n	800287a <wf200_host_sdio_transfer_cmd52+0x22>
        *buffer = response_flags & 0xFF;
 80028da:	7028      	strb	r0, [r5, #0]
    xSemaphoreGive(sdioDMASemaphore); 
 80028dc:	2300      	movs	r3, #0
 80028de:	461a      	mov	r2, r3
 80028e0:	4619      	mov	r1, r3
 80028e2:	4803      	ldr	r0, [pc, #12]	; (80028f0 <wf200_host_sdio_transfer_cmd52+0x98>)
 80028e4:	6800      	ldr	r0, [r0, #0]
 80028e6:	f003 fca7 	bl	8006238 <xQueueGenericSend>
  return SL_SUCCESS;
 80028ea:	2000      	movs	r0, #0
 80028ec:	e7c5      	b.n	800287a <wf200_host_sdio_transfer_cmd52+0x22>
 80028ee:	bf00      	nop
 80028f0:	2000702c 	.word	0x2000702c
 80028f4:	40012c00 	.word	0x40012c00

080028f8 <wf200_host_sdio_read_cmd53>:
{    
 80028f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fa:	b08d      	sub	sp, #52	; 0x34
 80028fc:	4604      	mov	r4, r0
 80028fe:	460f      	mov	r7, r1
 8002900:	4616      	mov	r6, r2
 8002902:	461d      	mov	r5, r3
  SDIO->DCTRL = 0U;  
 8002904:	2200      	movs	r2, #0
 8002906:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <wf200_host_sdio_read_cmd53+0xe0>)
 8002908:	62da      	str	r2, [r3, #44]	; 0x2c
  if( buffer_length >= WF200_SDIO_BLOCK_MODE_THRESHOLD )
 800290a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800290e:	d356      	bcc.n	80029be <wf200_host_sdio_read_cmd53+0xc6>
    uint32_t block_count = ( buffer_length / WF200_SDIO_BLOCK_SIZE ) + ( ( ( buffer_length % WF200_SDIO_BLOCK_SIZE ) == 0 ) ? 0 : 1 );
 8002910:	f015 023f 	ands.w	r2, r5, #63	; 0x3f
 8002914:	bf18      	it	ne
 8002916:	2201      	movne	r2, #1
 8002918:	eb02 1295 	add.w	r2, r2, r5, lsr #6
    command.Argument = SDIO_CMD53_BLOCK_MODE | SDIO_CMD53_COUNT( block_count );
 800291c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002920:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002924:	9207      	str	r2, [sp, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002926:	2300      	movs	r3, #0
 8002928:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = sdio_optimal_block_size(WF200_SDIO_BLOCK_SIZE);
 800292a:	2040      	movs	r0, #64	; 0x40
 800292c:	f7ff fec6 	bl	80026bc <sdio_optimal_block_size>
 8002930:	9003      	str	r0, [sp, #12]
  command.Argument |= SDIO_CMD53_FUNCTION( function ) | SDIO_CMD53_OPMODE_INCREASING_ADDRESS | SDIO_CMD53_ADDRESS( address );
 8002932:	0723      	lsls	r3, r4, #28
 8002934:	4c29      	ldr	r4, [pc, #164]	; (80029dc <wf200_host_sdio_read_cmd53+0xe4>)
 8002936:	ea04 2747 	and.w	r7, r4, r7, lsl #9
 800293a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800293e:	433b      	orrs	r3, r7
 8002940:	9c07      	ldr	r4, [sp, #28]
 8002942:	4323      	orrs	r3, r4
 8002944:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002948:	9307      	str	r3, [sp, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800294a:	2302      	movs	r3, #2
 800294c:	9304      	str	r3, [sp, #16]
  SDIO->DCTRL |= SDIO_DCTRL_SDIOEN;
 800294e:	4c22      	ldr	r4, [pc, #136]	; (80029d8 <wf200_host_sdio_read_cmd53+0xe0>)
 8002950:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002952:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002956:	62e3      	str	r3, [r4, #44]	; 0x2c
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002958:	f04f 33ff 	mov.w	r3, #4294967295
 800295c:	9301      	str	r3, [sp, #4]
  config.DataLength    = buffer_length;
 800295e:	9502      	str	r5, [sp, #8]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002960:	2701      	movs	r7, #1
 8002962:	9706      	str	r7, [sp, #24]
  SDIO_ConfigData(SDIO, &config);
 8002964:	a901      	add	r1, sp, #4
 8002966:	4620      	mov	r0, r4
 8002968:	f002 f84a 	bl	8004a00 <SDIO_ConfigData>
  __SDIO_ENABLE_IT(SDIO, SDIO_IT_DATAEND);
 800296c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800296e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002972:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma_sdio_rx.XferCpltCallback = SDIO_receive_cplt;
 8002974:	481a      	ldr	r0, [pc, #104]	; (80029e0 <wf200_host_sdio_read_cmd53+0xe8>)
 8002976:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <wf200_host_sdio_read_cmd53+0xec>)
 8002978:	63c3      	str	r3, [r0, #60]	; 0x3c
  HAL_DMA_Start_IT(&hdma_sdio_rx, (uint32_t)&SDIO->FIFO, (uint32_t)buffer, (uint32_t)buffer_length/4);
 800297a:	08ab      	lsrs	r3, r5, #2
 800297c:	4632      	mov	r2, r6
 800297e:	491a      	ldr	r1, [pc, #104]	; (80029e8 <wf200_host_sdio_read_cmd53+0xf0>)
 8002980:	f000 fb46 	bl	8003010 <HAL_DMA_Start_IT>
  __SDIO_DMA_ENABLE(SDIO);
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <wf200_host_sdio_read_cmd53+0xf4>)
 8002986:	601f      	str	r7, [r3, #0]
  command.CmdIndex         = SDMMC_CMD_SDMMC_RW_EXTENDED;
 8002988:	2335      	movs	r3, #53	; 0x35
 800298a:	9308      	str	r3, [sp, #32]
  command.Response         = SDIO_RESPONSE_SHORT;
 800298c:	2340      	movs	r3, #64	; 0x40
 800298e:	9309      	str	r3, [sp, #36]	; 0x24
  command.WaitForInterrupt = SDIO_WAIT_NO;
 8002990:	2500      	movs	r5, #0
 8002992:	950a      	str	r5, [sp, #40]	; 0x28
  command.CPSM             = SDIO_CPSM_ENABLE;
 8002994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002998:	930b      	str	r3, [sp, #44]	; 0x2c
  SDIO_SendCommand(SDIO, &command);
 800299a:	a907      	add	r1, sp, #28
 800299c:	4620      	mov	r0, r4
 800299e:	f001 ff13 	bl	80047c8 <SDIO_SendCommand>
  SDMMC_GetCmdResp(SDIO);
 80029a2:	4620      	mov	r0, r4
 80029a4:	f7ff fe48 	bl	8002638 <SDMMC_GetCmdResp>
  uint32_t response_flags = SDIO_GetResponse(SDIO, SDIO_RESP1);
 80029a8:	4629      	mov	r1, r5
 80029aa:	4620      	mov	r0, r4
 80029ac:	f001 ff21 	bl	80047f2 <SDIO_GetResponse>
  if(((response_flags>> 8) & 0xFF) != 0x20)
 80029b0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80029b4:	2820      	cmp	r0, #32
 80029b6:	d00c      	beq.n	80029d2 <wf200_host_sdio_read_cmd53+0xda>
    return SL_ERROR;
 80029b8:	2004      	movs	r0, #4
}
 80029ba:	b00d      	add	sp, #52	; 0x34
 80029bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    command.Argument = SDIO_CMD53_COUNT( buffer_length );
 80029be:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80029c2:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_STREAM;
 80029c4:	2304      	movs	r3, #4
 80029c6:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = sdio_optimal_block_size(buffer_length);
 80029c8:	4628      	mov	r0, r5
 80029ca:	f7ff fe77 	bl	80026bc <sdio_optimal_block_size>
 80029ce:	9003      	str	r0, [sp, #12]
 80029d0:	e7af      	b.n	8002932 <wf200_host_sdio_read_cmd53+0x3a>
  return SL_SUCCESS;
 80029d2:	2000      	movs	r0, #0
 80029d4:	e7f1      	b.n	80029ba <wf200_host_sdio_read_cmd53+0xc2>
 80029d6:	bf00      	nop
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	03fffe00 	.word	0x03fffe00
 80029e0:	20006fcc 	.word	0x20006fcc
 80029e4:	080026ad 	.word	0x080026ad
 80029e8:	40012c80 	.word	0x40012c80
 80029ec:	4225858c 	.word	0x4225858c

080029f0 <wf200_host_sdio_write_cmd53>:
{
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f2:	b08d      	sub	sp, #52	; 0x34
 80029f4:	4604      	mov	r4, r0
 80029f6:	460f      	mov	r7, r1
 80029f8:	4616      	mov	r6, r2
 80029fa:	461d      	mov	r5, r3
  SDIO->DCTRL = 0U;  
 80029fc:	2200      	movs	r2, #0
 80029fe:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <wf200_host_sdio_write_cmd53+0xd8>)
 8002a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_sdio_tx.XferCpltCallback = SDIO_transmit_cplt;
 8002a02:	4a32      	ldr	r2, [pc, #200]	; (8002acc <wf200_host_sdio_write_cmd53+0xdc>)
 8002a04:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <wf200_host_sdio_write_cmd53+0xe0>)
 8002a06:	63da      	str	r2, [r3, #60]	; 0x3c
  if( buffer_length >= WF200_SDIO_BLOCK_MODE_THRESHOLD )
 8002a08:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8002a0c:	d33d      	bcc.n	8002a8a <wf200_host_sdio_write_cmd53+0x9a>
    uint32_t block_count = ( buffer_length / WF200_SDIO_BLOCK_SIZE ) + ( ( ( buffer_length % WF200_SDIO_BLOCK_SIZE ) == 0 ) ? 0 : 1 );
 8002a0e:	f015 023f 	ands.w	r2, r5, #63	; 0x3f
 8002a12:	bf18      	it	ne
 8002a14:	2201      	movne	r2, #1
 8002a16:	eb02 1295 	add.w	r2, r2, r5, lsr #6
    command.Argument = SDIO_CMD53_BLOCK_MODE | SDIO_CMD53_COUNT( block_count );
 8002a1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a1e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002a22:	9207      	str	r2, [sp, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = sdio_optimal_block_size(WF200_SDIO_BLOCK_SIZE);
 8002a28:	2040      	movs	r0, #64	; 0x40
 8002a2a:	f7ff fe47 	bl	80026bc <sdio_optimal_block_size>
 8002a2e:	9003      	str	r0, [sp, #12]
  command.Argument |= SDIO_CMD53_WRITE | SDIO_CMD53_FUNCTION( function ) | SDIO_CMD53_OPMODE_INCREASING_ADDRESS | SDIO_CMD53_ADDRESS( address );
 8002a30:	0723      	lsls	r3, r4, #28
 8002a32:	4c28      	ldr	r4, [pc, #160]	; (8002ad4 <wf200_host_sdio_write_cmd53+0xe4>)
 8002a34:	ea04 2747 	and.w	r7, r4, r7, lsl #9
 8002a38:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8002a3c:	433b      	orrs	r3, r7
 8002a3e:	9c07      	ldr	r4, [sp, #28]
 8002a40:	4323      	orrs	r3, r4
 8002a42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002a46:	9307      	str	r3, [sp, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002a48:	2700      	movs	r7, #0
 8002a4a:	9704      	str	r7, [sp, #16]
  SDIO->DCTRL |= SDIO_DCTRL_SDIOEN;
 8002a4c:	4c1e      	ldr	r4, [pc, #120]	; (8002ac8 <wf200_host_sdio_write_cmd53+0xd8>)
 8002a4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a54:	62e3      	str	r3, [r4, #44]	; 0x2c
  command.CmdIndex         = SDMMC_CMD_SDMMC_RW_EXTENDED;
 8002a56:	2335      	movs	r3, #53	; 0x35
 8002a58:	9308      	str	r3, [sp, #32]
  command.Response         = SDIO_RESPONSE_SHORT;
 8002a5a:	2340      	movs	r3, #64	; 0x40
 8002a5c:	9309      	str	r3, [sp, #36]	; 0x24
  command.WaitForInterrupt = SDIO_WAIT_NO;
 8002a5e:	970a      	str	r7, [sp, #40]	; 0x28
  command.CPSM             = SDIO_CPSM_ENABLE;
 8002a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a64:	930b      	str	r3, [sp, #44]	; 0x2c
  SDIO_SendCommand(SDIO, &command);
 8002a66:	a907      	add	r1, sp, #28
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f001 fead 	bl	80047c8 <SDIO_SendCommand>
  SDMMC_GetCmdResp(SDIO);
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7ff fde2 	bl	8002638 <SDMMC_GetCmdResp>
  uint32_t response_flags = SDIO_GetResponse(SDIO, SDIO_RESP1);
 8002a74:	4639      	mov	r1, r7
 8002a76:	4620      	mov	r0, r4
 8002a78:	f001 febb 	bl	80047f2 <SDIO_GetResponse>
  if(((response_flags>> 8) & 0xFF) != 0x20)
 8002a7c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002a80:	2820      	cmp	r0, #32
 8002a82:	d00c      	beq.n	8002a9e <wf200_host_sdio_write_cmd53+0xae>
    return SL_ERROR;
 8002a84:	2004      	movs	r0, #4
}
 8002a86:	b00d      	add	sp, #52	; 0x34
 8002a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    command.Argument = SDIO_CMD53_COUNT( buffer_length );
 8002a8a:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8002a8e:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_STREAM;
 8002a90:	2304      	movs	r3, #4
 8002a92:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = sdio_optimal_block_size(buffer_length);
 8002a94:	4628      	mov	r0, r5
 8002a96:	f7ff fe11 	bl	80026bc <sdio_optimal_block_size>
 8002a9a:	9003      	str	r0, [sp, #12]
 8002a9c:	e7c8      	b.n	8002a30 <wf200_host_sdio_write_cmd53+0x40>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	9301      	str	r3, [sp, #4]
  config.DataLength    = buffer_length;
 8002aa4:	9502      	str	r5, [sp, #8]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002aa6:	2401      	movs	r4, #1
 8002aa8:	9406      	str	r4, [sp, #24]
  SDIO_ConfigData(SDIO, &config);
 8002aaa:	a901      	add	r1, sp, #4
 8002aac:	4806      	ldr	r0, [pc, #24]	; (8002ac8 <wf200_host_sdio_write_cmd53+0xd8>)
 8002aae:	f001 ffa7 	bl	8004a00 <SDIO_ConfigData>
  HAL_DMA_Start_IT(&hdma_sdio_tx, (uint32_t)buffer, (uint32_t)&SDIO->FIFO, (uint32_t)buffer_length/4);
 8002ab2:	08ab      	lsrs	r3, r5, #2
 8002ab4:	4a08      	ldr	r2, [pc, #32]	; (8002ad8 <wf200_host_sdio_write_cmd53+0xe8>)
 8002ab6:	4631      	mov	r1, r6
 8002ab8:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <wf200_host_sdio_write_cmd53+0xe0>)
 8002aba:	f000 faa9 	bl	8003010 <HAL_DMA_Start_IT>
  __SDIO_DMA_ENABLE(SDIO);
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <wf200_host_sdio_write_cmd53+0xec>)
 8002ac0:	601c      	str	r4, [r3, #0]
  return SL_SUCCESS;
 8002ac2:	4638      	mov	r0, r7
 8002ac4:	e7df      	b.n	8002a86 <wf200_host_sdio_write_cmd53+0x96>
 8002ac6:	bf00      	nop
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	0800269d 	.word	0x0800269d
 8002ad0:	20007030 	.word	0x20007030
 8002ad4:	03fffe00 	.word	0x03fffe00
 8002ad8:	40012c80 	.word	0x40012c80
 8002adc:	4225858c 	.word	0x4225858c

08002ae0 <wf200_host_sdio_transfer_cmd53>:
{    
 8002ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ae4:	4680      	mov	r8, r0
 8002ae6:	460c      	mov	r4, r1
 8002ae8:	4615      	mov	r5, r2
 8002aea:	461e      	mov	r6, r3
 8002aec:	f8bd 7018 	ldrh.w	r7, [sp, #24]
  if(xSemaphoreTake(sdioDMASemaphore, portMAX_DELAY) == pdTRUE )
 8002af0:	2300      	movs	r3, #0
 8002af2:	f04f 32ff 	mov.w	r2, #4294967295
 8002af6:	4619      	mov	r1, r3
 8002af8:	4817      	ldr	r0, [pc, #92]	; (8002b58 <wf200_host_sdio_transfer_cmd53+0x78>)
 8002afa:	6800      	ldr	r0, [r0, #0]
 8002afc:	f003 fd44 	bl	8006588 <xQueueGenericReceive>
 8002b00:	2801      	cmp	r0, #1
 8002b02:	d00d      	beq.n	8002b20 <wf200_host_sdio_transfer_cmd53+0x40>
    result = SL_TIMEOUT;
 8002b04:	2402      	movs	r4, #2
  if(xSemaphoreTake(sdioDMASemaphore, portMAX_DELAY) == pdTRUE )
 8002b06:	2300      	movs	r3, #0
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4812      	ldr	r0, [pc, #72]	; (8002b58 <wf200_host_sdio_transfer_cmd53+0x78>)
 8002b10:	6800      	ldr	r0, [r0, #0]
 8002b12:	f003 fd39 	bl	8006588 <xQueueGenericReceive>
 8002b16:	2801      	cmp	r0, #1
 8002b18:	d015      	beq.n	8002b46 <wf200_host_sdio_transfer_cmd53+0x66>
}
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(type == WF200_BUS_WRITE)
 8002b20:	f1b8 0f01 	cmp.w	r8, #1
 8002b24:	d007      	beq.n	8002b36 <wf200_host_sdio_transfer_cmd53+0x56>
      result = wf200_host_sdio_read_cmd53( function, address, buffer, buffer_length );
 8002b26:	463b      	mov	r3, r7
 8002b28:	4632      	mov	r2, r6
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7ff fee3 	bl	80028f8 <wf200_host_sdio_read_cmd53>
 8002b32:	4604      	mov	r4, r0
 8002b34:	e7e7      	b.n	8002b06 <wf200_host_sdio_transfer_cmd53+0x26>
      result = wf200_host_sdio_write_cmd53( function, address, buffer, buffer_length );
 8002b36:	463b      	mov	r3, r7
 8002b38:	4632      	mov	r2, r6
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f7ff ff57 	bl	80029f0 <wf200_host_sdio_write_cmd53>
 8002b42:	4604      	mov	r4, r0
 8002b44:	e7df      	b.n	8002b06 <wf200_host_sdio_transfer_cmd53+0x26>
    xSemaphoreGive(sdioDMASemaphore); 
 8002b46:	2300      	movs	r3, #0
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4802      	ldr	r0, [pc, #8]	; (8002b58 <wf200_host_sdio_transfer_cmd53+0x78>)
 8002b4e:	6800      	ldr	r0, [r0, #0]
 8002b50:	f003 fb72 	bl	8006238 <xQueueGenericSend>
  return result;
 8002b54:	e7e1      	b.n	8002b1a <wf200_host_sdio_transfer_cmd53+0x3a>
 8002b56:	bf00      	nop
 8002b58:	2000702c 	.word	0x2000702c

08002b5c <wf200_host_enable_platform_interrupt>:
  __SDIO_ENABLE_IT(SDIO, SDIO_IT_SDIOIT);
 8002b5c:	4a03      	ldr	r2, [pc, #12]	; (8002b6c <wf200_host_enable_platform_interrupt+0x10>)
 8002b5e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002b60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b64:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002b66:	2000      	movs	r0, #0
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40012c00 	.word	0x40012c00

08002b70 <wf200_host_disable_platform_interrupt>:
  __SDIO_DISABLE_IT(SDIO, SDIO_IT_SDIOIT);
 8002b70:	4a03      	ldr	r2, [pc, #12]	; (8002b80 <wf200_host_disable_platform_interrupt+0x10>)
 8002b72:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002b74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b78:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40012c00 	.word	0x40012c00

08002b84 <receive_frames>:
  busCommTaskHandle = osThreadCreate(osThread(busCommTask), NULL);
}
wf200_buffer_t *network_rx_buffer_gbl;

static sl_status_t receive_frames ()
{
 8002b84:	b500      	push	{lr}
 8002b86:	b083      	sub	sp, #12
  sl_status_t result;
  uint16_t control_register = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8ad 3006 	strh.w	r3, [sp, #6]
  do
  {
    result = wf200_receive_frame(&control_register);
 8002b8e:	f10d 0006 	add.w	r0, sp, #6
 8002b92:	f002 fb2b 	bl	80051ec <wf200_receive_frame>
    ERROR_CHECK( result );
 8002b96:	4602      	mov	r2, r0
 8002b98:	b928      	cbnz	r0, 8002ba6 <receive_frames+0x22>
  }while ( (control_register & WF200_CONT_NEXT_LEN_MASK) != 0 );
 8002b9a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f3      	bne.n	8002b8e <receive_frames+0xa>
error_handler:
  return result;
}
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	b003      	add	sp, #12
 8002baa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002bb0 <prvBusCommTask>:

static void prvBusCommTask(void const * pvParameters )
{
 8002bb0:	b508      	push	{r3, lr}
 8002bb2:	e001      	b.n	8002bb8 <prvBusCommTask+0x8>
          //unable to receive
        }
    }
    else
    {
       receive_frames();
 8002bb4:	f7ff ffe6 	bl	8002b84 <receive_frames>
    ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f004 fb77 	bl	80072b0 <ulTaskNotifyTake>
    if( s_xDriverSemaphore != NULL )
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <prvBusCommTask+0x40>)
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d0f4      	beq.n	8002bb4 <prvBusCommTask+0x4>
        if( xSemaphoreTake( s_xDriverSemaphore, ( portMAX_DELAY ) ) == pdTRUE )
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f003 fcd9 	bl	8006588 <xQueueGenericReceive>
 8002bd6:	2801      	cmp	r0, #1
 8002bd8:	d1ee      	bne.n	8002bb8 <prvBusCommTask+0x8>
          receive_frames();
 8002bda:	f7ff ffd3 	bl	8002b84 <receive_frames>
          xSemaphoreGive( s_xDriverSemaphore );
 8002bde:	2300      	movs	r3, #0
 8002be0:	461a      	mov	r2, r3
 8002be2:	4619      	mov	r1, r3
 8002be4:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <prvBusCommTask+0x40>)
 8002be6:	6800      	ldr	r0, [r0, #0]
 8002be8:	f003 fb26 	bl	8006238 <xQueueGenericSend>
 8002bec:	e7e4      	b.n	8002bb8 <prvBusCommTask+0x8>
 8002bee:	bf00      	nop
 8002bf0:	20000330 	.word	0x20000330

08002bf4 <vBusCommStart>:
{
 8002bf4:	b530      	push	{r4, r5, lr}
 8002bf6:	b087      	sub	sp, #28
  osThreadDef(busCommTask, prvBusCommTask, osPriorityRealtime, 0, 128);
 8002bf8:	ac01      	add	r4, sp, #4
 8002bfa:	4d06      	ldr	r5, [pc, #24]	; (8002c14 <vBusCommStart+0x20>)
 8002bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c00:	682b      	ldr	r3, [r5, #0]
 8002c02:	6023      	str	r3, [r4, #0]
  busCommTaskHandle = osThreadCreate(osThread(busCommTask), NULL);
 8002c04:	2100      	movs	r1, #0
 8002c06:	a801      	add	r0, sp, #4
 8002c08:	f002 fdd7 	bl	80057ba <osThreadCreate>
 8002c0c:	4b02      	ldr	r3, [pc, #8]	; (8002c18 <vBusCommStart+0x24>)
 8002c0e:	6018      	str	r0, [r3, #0]
}
 8002c10:	b007      	add	sp, #28
 8002c12:	bd30      	pop	{r4, r5, pc}
 8002c14:	080132e4 	.word	0x080132e4
 8002c18:	20007094 	.word	0x20007094

08002c1c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c1c:	490f      	ldr	r1, [pc, #60]	; (8002c5c <SystemInit+0x40>)
 8002c1e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <SystemInit+0x44>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c34:	2000      	movs	r0, #0
 8002c36:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c42:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002c44:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <SystemInit+0x48>)
 8002c46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c50:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c56:	608b      	str	r3, [r1, #8]
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000ed00 	.word	0xe000ed00
 8002c60:	40023800 	.word	0x40023800
 8002c64:	24003010 	.word	0x24003010

08002c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c68:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_Init+0x30>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c72:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c7a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c84:	2003      	movs	r0, #3
 8002c86:	f000 f82f 	bl	8002ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7ff fa4a 	bl	8002124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c90:	f7ff f8da 	bl	8001e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002c94:	2000      	movs	r0, #0
 8002c96:	bd08      	pop	{r3, pc}
 8002c98:	40023c00 	.word	0x40023c00

08002c9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002c9c:	4a03      	ldr	r2, [pc, #12]	; (8002cac <HAL_IncTick+0x10>)
 8002c9e:	6811      	ldr	r1, [r2, #0]
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_IncTick+0x14>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	440b      	add	r3, r1
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	200072d4 	.word	0x200072d4
 8002cb0:	200000dc 	.word	0x200000dc

08002cb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002cb4:	4b01      	ldr	r3, [pc, #4]	; (8002cbc <HAL_GetTick+0x8>)
 8002cb6:	6818      	ldr	r0, [r3, #0]
}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	200072d4 	.word	0x200072d4

08002cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc0:	b538      	push	{r3, r4, r5, lr}
 8002cc2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f7ff fff6 	bl	8002cb4 <HAL_GetTick>
 8002cc8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cca:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002cce:	d002      	beq.n	8002cd6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <HAL_Delay+0x24>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cd6:	f7ff ffed 	bl	8002cb4 <HAL_GetTick>
 8002cda:	1b40      	subs	r0, r0, r5
 8002cdc:	4284      	cmp	r4, r0
 8002cde:	d8fa      	bhi.n	8002cd6 <HAL_Delay+0x16>
  {
  }
}
 8002ce0:	bd38      	pop	{r3, r4, r5, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200000dc 	.word	0x200000dc

08002ce8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce8:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002cea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002cf4:	0200      	lsls	r0, r0, #8
 8002cf6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cfa:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002cfc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002d00:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002d04:	60d0      	str	r0, [r2, #12]
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d0c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <HAL_NVIC_SetPriority+0x5c>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d16:	f1c3 0407 	rsb	r4, r3, #7
 8002d1a:	2c04      	cmp	r4, #4
 8002d1c:	bf28      	it	cs
 8002d1e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d20:	1d1d      	adds	r5, r3, #4
 8002d22:	2d06      	cmp	r5, #6
 8002d24:	d917      	bls.n	8002d56 <HAL_NVIC_SetPriority+0x4a>
 8002d26:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	2501      	movs	r5, #1
 8002d2a:	fa05 f404 	lsl.w	r4, r5, r4
 8002d2e:	3c01      	subs	r4, #1
 8002d30:	4021      	ands	r1, r4
 8002d32:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d34:	fa05 f303 	lsl.w	r3, r5, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	db0b      	blt.n	8002d5a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d42:	0109      	lsls	r1, r1, #4
 8002d44:	b2c9      	uxtb	r1, r1
 8002d46:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002d4a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002d4e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002d52:	bc30      	pop	{r4, r5}
 8002d54:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d56:	2300      	movs	r3, #0
 8002d58:	e7e6      	b.n	8002d28 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	f000 000f 	and.w	r0, r0, #15
 8002d5e:	0109      	lsls	r1, r1, #4
 8002d60:	b2c9      	uxtb	r1, r1
 8002d62:	4b02      	ldr	r3, [pc, #8]	; (8002d6c <HAL_NVIC_SetPriority+0x60>)
 8002d64:	5419      	strb	r1, [r3, r0]
 8002d66:	e7f4      	b.n	8002d52 <HAL_NVIC_SetPriority+0x46>
 8002d68:	e000ed00 	.word	0xe000ed00
 8002d6c:	e000ed14 	.word	0xe000ed14

08002d70 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d70:	0942      	lsrs	r2, r0, #5
 8002d72:	f000 001f 	and.w	r0, r0, #31
 8002d76:	2301      	movs	r3, #1
 8002d78:	fa03 f000 	lsl.w	r0, r3, r0
 8002d7c:	4b01      	ldr	r3, [pc, #4]	; (8002d84 <HAL_NVIC_EnableIRQ+0x14>)
 8002d7e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002d82:	4770      	bx	lr
 8002d84:	e000e100 	.word	0xe000e100

08002d88 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d88:	0943      	lsrs	r3, r0, #5
 8002d8a:	f000 001f 	and.w	r0, r0, #31
 8002d8e:	2201      	movs	r2, #1
 8002d90:	fa02 f000 	lsl.w	r0, r2, r0
 8002d94:	3320      	adds	r3, #32
 8002d96:	4a02      	ldr	r2, [pc, #8]	; (8002da0 <HAL_NVIC_DisableIRQ+0x18>)
 8002d98:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	e000e100 	.word	0xe000e100

08002da4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da4:	3801      	subs	r0, #1
 8002da6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002daa:	d20a      	bcs.n	8002dc2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_SYSTICK_Config+0x24>)
 8002dae:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db0:	21f0      	movs	r1, #240	; 0xf0
 8002db2:	4a06      	ldr	r2, [pc, #24]	; (8002dcc <HAL_SYSTICK_Config+0x28>)
 8002db4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db8:	2000      	movs	r0, #0
 8002dba:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dbc:	2207      	movs	r2, #7
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002dc2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002dd0:	2804      	cmp	r0, #4
 8002dd2:	d005      	beq.n	8002de0 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002dd4:	4a05      	ldr	r2, [pc, #20]	; (8002dec <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8002dd6:	6813      	ldr	r3, [r2, #0]
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002de0:	4a02      	ldr	r2, [pc, #8]	; (8002dec <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8002de2:	6813      	ldr	r3, [r2, #0]
 8002de4:	f043 0304 	orr.w	r3, r3, #4
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	4770      	bx	lr
 8002dec:	e000e010 	.word	0xe000e010

08002df0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002df2:	6805      	ldr	r5, [r0, #0]
 8002df4:	682c      	ldr	r4, [r5, #0]
 8002df6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8002dfa:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dfc:	6804      	ldr	r4, [r0, #0]
 8002dfe:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e00:	6883      	ldr	r3, [r0, #8]
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d005      	beq.n	8002e12 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002e06:	6803      	ldr	r3, [r0, #0]
 8002e08:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8002e0a:	6803      	ldr	r3, [r0, #0]
 8002e0c:	60da      	str	r2, [r3, #12]
  }
}
 8002e0e:	bc30      	pop	{r4, r5}
 8002e10:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8002e12:	6803      	ldr	r3, [r0, #0]
 8002e14:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002e16:	6803      	ldr	r3, [r0, #0]
 8002e18:	60d9      	str	r1, [r3, #12]
 8002e1a:	e7f8      	b.n	8002e0e <DMA_SetConfig+0x1e>

08002e1c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e1c:	6802      	ldr	r2, [r0, #0]
 8002e1e:	b2d3      	uxtb	r3, r2
 8002e20:	3b10      	subs	r3, #16
 8002e22:	490b      	ldr	r1, [pc, #44]	; (8002e50 <DMA_CalcBaseAndBitshift+0x34>)
 8002e24:	fba1 1303 	umull	r1, r3, r1, r3
 8002e28:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e2a:	490a      	ldr	r1, [pc, #40]	; (8002e54 <DMA_CalcBaseAndBitshift+0x38>)
 8002e2c:	5cc9      	ldrb	r1, [r1, r3]
 8002e2e:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d806      	bhi.n	8002e42 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e34:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002e38:	f022 0203 	bic.w	r2, r2, #3
 8002e3c:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8002e3e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002e40:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e42:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002e46:	f022 0203 	bic.w	r2, r2, #3
 8002e4a:	3204      	adds	r2, #4
 8002e4c:	6582      	str	r2, [r0, #88]	; 0x58
 8002e4e:	e7f6      	b.n	8002e3e <DMA_CalcBaseAndBitshift+0x22>
 8002e50:	aaaaaaab 	.word	0xaaaaaaab
 8002e54:	0805e35c 	.word	0x0805e35c

08002e58 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e58:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e5a:	6982      	ldr	r2, [r0, #24]
 8002e5c:	b992      	cbnz	r2, 8002e84 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d00a      	beq.n	8002e78 <DMA_CheckFifoParam+0x20>
 8002e62:	b11b      	cbz	r3, 8002e6c <DMA_CheckFifoParam+0x14>
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d001      	beq.n	8002e6c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8002e68:	2000      	movs	r0, #0
 8002e6a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e6c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002e6e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002e72:	d12c      	bne.n	8002ece <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8002e74:	2000      	movs	r0, #0
 8002e76:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002e7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e7e:	d028      	beq.n	8002ed2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002e80:	2000      	movs	r0, #0
 8002e82:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e84:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002e88:	d005      	beq.n	8002e96 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d929      	bls.n	8002ee2 <DMA_CheckFifoParam+0x8a>
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d015      	beq.n	8002ebe <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2000      	movs	r0, #0
 8002e94:	4770      	bx	lr
    switch (tmp)
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d803      	bhi.n	8002ea2 <DMA_CheckFifoParam+0x4a>
 8002e9a:	e8df f003 	tbb	[pc, r3]
 8002e9e:	041c      	.short	0x041c
 8002ea0:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002ea8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002eac:	d115      	bne.n	8002eda <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2000      	movs	r0, #0
 8002eb0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eb2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002eb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eb8:	d011      	beq.n	8002ede <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	2000      	movs	r0, #0
 8002ebc:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ebe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002ec0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002ec4:	d001      	beq.n	8002eca <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8002ec6:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002ec8:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8002eca:	2000      	movs	r0, #0
 8002ecc:	4770      	bx	lr
        status = HAL_ERROR;
 8002ece:	2001      	movs	r0, #1
 8002ed0:	4770      	bx	lr
        status = HAL_ERROR;
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	4770      	bx	lr
      status = HAL_ERROR;
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	4770      	bx	lr
        status = HAL_ERROR;
 8002eda:	2001      	movs	r0, #1
 8002edc:	4770      	bx	lr
        status = HAL_ERROR;
 8002ede:	2001      	movs	r0, #1
 8002ee0:	4770      	bx	lr
      status = HAL_ERROR;
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_DMA_Init>:
{
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002eec:	f7ff fee2 	bl	8002cb4 <HAL_GetTick>
  if(hdma == NULL)
 8002ef0:	2c00      	cmp	r4, #0
 8002ef2:	d05d      	beq.n	8002fb0 <HAL_DMA_Init+0xc8>
 8002ef4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002efc:	2302      	movs	r3, #2
 8002efe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002f02:	6822      	ldr	r2, [r4, #0]
 8002f04:	6813      	ldr	r3, [r2, #0]
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	f012 0f01 	tst.w	r2, #1
 8002f14:	d00a      	beq.n	8002f2c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f16:	f7ff fecd 	bl	8002cb4 <HAL_GetTick>
 8002f1a:	1b40      	subs	r0, r0, r5
 8002f1c:	2805      	cmp	r0, #5
 8002f1e:	d9f5      	bls.n	8002f0c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f20:	2320      	movs	r3, #32
 8002f22:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f24:	2003      	movs	r0, #3
 8002f26:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002f2c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f2e:	4921      	ldr	r1, [pc, #132]	; (8002fb4 <HAL_DMA_Init+0xcc>)
 8002f30:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f32:	6862      	ldr	r2, [r4, #4]
 8002f34:	68a0      	ldr	r0, [r4, #8]
 8002f36:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f38:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3c:	6920      	ldr	r0, [r4, #16]
 8002f3e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f40:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f42:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f44:	69a0      	ldr	r0, [r4, #24]
 8002f46:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f48:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f4c:	6a20      	ldr	r0, [r4, #32]
 8002f4e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f50:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f52:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f54:	2904      	cmp	r1, #4
 8002f56:	d016      	beq.n	8002f86 <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 8002f58:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002f5a:	6826      	ldr	r6, [r4, #0]
 8002f5c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f5e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f64:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d012      	beq.n	8002f90 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 8002f6a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f7ff ff55 	bl	8002e1c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f72:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002f74:	233f      	movs	r3, #63	; 0x3f
 8002f76:	4093      	lsls	r3, r2
 8002f78:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002f84:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002f88:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002f8a:	4301      	orrs	r1, r0
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	e7e3      	b.n	8002f58 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 8002f90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f92:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0e7      	beq.n	8002f6a <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f7ff ff5c 	bl	8002e58 <DMA_CheckFifoParam>
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d0e2      	beq.n	8002f6a <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fa4:	2340      	movs	r3, #64	; 0x40
 8002fa6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002fa8:	2001      	movs	r0, #1
 8002faa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002fae:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002fb0:	2001      	movs	r0, #1
}
 8002fb2:	bd70      	pop	{r4, r5, r6, pc}
 8002fb4:	f010803f 	.word	0xf010803f

08002fb8 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8002fb8:	b340      	cbz	r0, 800300c <HAL_DMA_DeInit+0x54>
{
 8002fba:	b538      	push	{r3, r4, r5, lr}
 8002fbc:	4604      	mov	r4, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002fbe:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d101      	bne.n	8002fcc <HAL_DMA_DeInit+0x14>
    return HAL_BUSY;
 8002fc8:	2002      	movs	r0, #2
}
 8002fca:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_DMA_DISABLE(hdma);
 8002fcc:	6802      	ldr	r2, [r0, #0]
 8002fce:	6813      	ldr	r3, [r2, #0]
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8002fd6:	6803      	ldr	r3, [r0, #0]
 8002fd8:	2500      	movs	r5, #0
 8002fda:	601d      	str	r5, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002fdc:	6803      	ldr	r3, [r0, #0]
 8002fde:	605d      	str	r5, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002fe0:	6803      	ldr	r3, [r0, #0]
 8002fe2:	609d      	str	r5, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002fe4:	6803      	ldr	r3, [r0, #0]
 8002fe6:	60dd      	str	r5, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002fe8:	6803      	ldr	r3, [r0, #0]
 8002fea:	611d      	str	r5, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8002fec:	6803      	ldr	r3, [r0, #0]
 8002fee:	2221      	movs	r2, #33	; 0x21
 8002ff0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ff2:	f7ff ff13 	bl	8002e1c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ff8:	233f      	movs	r3, #63	; 0x3f
 8002ffa:	4093      	lsls	r3, r2
 8002ffc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ffe:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8003000:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8003004:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  return HAL_OK;
 8003008:	4628      	mov	r0, r5
 800300a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800300c:	2001      	movs	r0, #1
 800300e:	4770      	bx	lr

08003010 <HAL_DMA_Start_IT>:
{
 8003010:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003012:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8003014:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8003018:	2c01      	cmp	r4, #1
 800301a:	d031      	beq.n	8003080 <HAL_DMA_Start_IT+0x70>
 800301c:	2401      	movs	r4, #1
 800301e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003022:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8003026:	b2e4      	uxtb	r4, r4
 8003028:	2c01      	cmp	r4, #1
 800302a:	d004      	beq.n	8003036 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 800302c:	2300      	movs	r3, #0
 800302e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8003032:	2002      	movs	r0, #2
 8003034:	bd38      	pop	{r3, r4, r5, pc}
 8003036:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003038:	2002      	movs	r0, #2
 800303a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800303e:	2000      	movs	r0, #0
 8003040:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003042:	4620      	mov	r0, r4
 8003044:	f7ff fed4 	bl	8002df0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003048:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800304a:	233f      	movs	r3, #63	; 0x3f
 800304c:	4093      	lsls	r3, r2
 800304e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	6813      	ldr	r3, [r2, #0]
 8003054:	f043 0316 	orr.w	r3, r3, #22
 8003058:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800305a:	6822      	ldr	r2, [r4, #0]
 800305c:	6953      	ldr	r3, [r2, #20]
 800305e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003062:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8003064:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003066:	b123      	cbz	r3, 8003072 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003068:	6822      	ldr	r2, [r4, #0]
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	f043 0308 	orr.w	r3, r3, #8
 8003070:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003072:	6822      	ldr	r2, [r4, #0]
 8003074:	6813      	ldr	r3, [r2, #0]
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2000      	movs	r0, #0
 800307e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 8003080:	2002      	movs	r0, #2
}
 8003082:	bd38      	pop	{r3, r4, r5, pc}

08003084 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003084:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d003      	beq.n	8003096 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003092:	2001      	movs	r0, #1
 8003094:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8003096:	2305      	movs	r3, #5
 8003098:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800309c:	6802      	ldr	r2, [r0, #0]
 800309e:	6813      	ldr	r3, [r2, #0]
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80030a6:	2000      	movs	r0, #0
}
 80030a8:	4770      	bx	lr
	...

080030ac <HAL_DMA_IRQHandler>:
{
 80030ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ae:	b083      	sub	sp, #12
 80030b0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030b6:	4b72      	ldr	r3, [pc, #456]	; (8003280 <HAL_DMA_IRQHandler+0x1d4>)
 80030b8:	681d      	ldr	r5, [r3, #0]
 80030ba:	4b72      	ldr	r3, [pc, #456]	; (8003284 <HAL_DMA_IRQHandler+0x1d8>)
 80030bc:	fba3 3505 	umull	r3, r5, r3, r5
 80030c0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030c2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80030c4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030c6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80030c8:	2308      	movs	r3, #8
 80030ca:	4093      	lsls	r3, r2
 80030cc:	421e      	tst	r6, r3
 80030ce:	d010      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030d0:	6803      	ldr	r3, [r0, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	f012 0f04 	tst.w	r2, #4
 80030d8:	d00b      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	f022 0204 	bic.w	r2, r2, #4
 80030e0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030e2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80030e4:	2308      	movs	r3, #8
 80030e6:	4093      	lsls	r3, r2
 80030e8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030ea:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030f2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80030f4:	2301      	movs	r3, #1
 80030f6:	4093      	lsls	r3, r2
 80030f8:	421e      	tst	r6, r3
 80030fa:	d009      	beq.n	8003110 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	6952      	ldr	r2, [r2, #20]
 8003100:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003104:	d004      	beq.n	8003110 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003106:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003108:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800310a:	f043 0302 	orr.w	r3, r3, #2
 800310e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003110:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003112:	2304      	movs	r3, #4
 8003114:	4093      	lsls	r3, r2
 8003116:	421e      	tst	r6, r3
 8003118:	d009      	beq.n	800312e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800311a:	6822      	ldr	r2, [r4, #0]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	f012 0f02 	tst.w	r2, #2
 8003122:	d004      	beq.n	800312e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003124:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003126:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800312e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003130:	2310      	movs	r3, #16
 8003132:	4093      	lsls	r3, r2
 8003134:	421e      	tst	r6, r3
 8003136:	d024      	beq.n	8003182 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003138:	6822      	ldr	r2, [r4, #0]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	f012 0f08 	tst.w	r2, #8
 8003140:	d01f      	beq.n	8003182 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003142:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800314c:	d00d      	beq.n	800316a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003154:	d104      	bne.n	8003160 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8003156:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003158:	b19b      	cbz	r3, 8003182 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800315a:	4620      	mov	r0, r4
 800315c:	4798      	blx	r3
 800315e:	e010      	b.n	8003182 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003160:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003162:	b173      	cbz	r3, 8003182 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8003164:	4620      	mov	r0, r4
 8003166:	4798      	blx	r3
 8003168:	e00b      	b.n	8003182 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003170:	d103      	bne.n	800317a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	f022 0208 	bic.w	r2, r2, #8
 8003178:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800317a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800317c:	b10b      	cbz	r3, 8003182 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800317e:	4620      	mov	r0, r4
 8003180:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003182:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003184:	2320      	movs	r3, #32
 8003186:	4093      	lsls	r3, r2
 8003188:	421e      	tst	r6, r3
 800318a:	d055      	beq.n	8003238 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800318c:	6822      	ldr	r2, [r4, #0]
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	f012 0f10 	tst.w	r2, #16
 8003194:	d050      	beq.n	8003238 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003196:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003198:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b05      	cmp	r3, #5
 80031a0:	d00e      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80031aa:	d033      	beq.n	8003214 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80031b2:	d12a      	bne.n	800320a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80031b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d03e      	beq.n	8003238 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80031ba:	4620      	mov	r0, r4
 80031bc:	4798      	blx	r3
 80031be:	e03b      	b.n	8003238 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c0:	6822      	ldr	r2, [r4, #0]
 80031c2:	6813      	ldr	r3, [r2, #0]
 80031c4:	f023 0316 	bic.w	r3, r3, #22
 80031c8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ca:	6822      	ldr	r2, [r4, #0]
 80031cc:	6953      	ldr	r3, [r2, #20]
 80031ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031d6:	b1a3      	cbz	r3, 8003202 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031d8:	6822      	ldr	r2, [r4, #0]
 80031da:	6813      	ldr	r3, [r2, #0]
 80031dc:	f023 0308 	bic.w	r3, r3, #8
 80031e0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80031e4:	233f      	movs	r3, #63	; 0x3f
 80031e6:	4093      	lsls	r3, r2
 80031e8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80031ea:	2300      	movs	r3, #0
 80031ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80031f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d03f      	beq.n	800327c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80031fc:	4620      	mov	r0, r4
 80031fe:	4798      	blx	r3
 8003200:	e03c      	b.n	800327c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003202:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e7      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x12c>
 8003208:	e7eb      	b.n	80031e2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800320a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800320c:	b1a3      	cbz	r3, 8003238 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800320e:	4620      	mov	r0, r4
 8003210:	4798      	blx	r3
 8003212:	e011      	b.n	8003238 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	f412 7f80 	tst.w	r2, #256	; 0x100
 800321a:	d109      	bne.n	8003230 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	f022 0210 	bic.w	r2, r2, #16
 8003222:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8003224:	2300      	movs	r3, #0
 8003226:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800322a:	2301      	movs	r3, #1
 800322c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8003230:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003232:	b10b      	cbz	r3, 8003238 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8003234:	4620      	mov	r0, r4
 8003236:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003238:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800323a:	b1fb      	cbz	r3, 800327c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800323c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800323e:	f013 0f01 	tst.w	r3, #1
 8003242:	d017      	beq.n	8003274 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003244:	2305      	movs	r3, #5
 8003246:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800324a:	6822      	ldr	r2, [r4, #0]
 800324c:	6813      	ldr	r3, [r2, #0]
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003254:	9b01      	ldr	r3, [sp, #4]
 8003256:	3301      	adds	r3, #1
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	429d      	cmp	r5, r3
 800325c:	d304      	bcc.n	8003268 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f013 0f01 	tst.w	r3, #1
 8003266:	d1f5      	bne.n	8003254 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8003268:	2300      	movs	r3, #0
 800326a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800326e:	2301      	movs	r3, #1
 8003270:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8003274:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003276:	b10b      	cbz	r3, 800327c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8003278:	4620      	mov	r0, r4
 800327a:	4798      	blx	r3
}
 800327c:	b003      	add	sp, #12
 800327e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003280:	200000d8 	.word	0x200000d8
 8003284:	1b4e81b5 	.word	0x1b4e81b5

08003288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328a:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800328c:	2400      	movs	r4, #0
 800328e:	e04b      	b.n	8003328 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003290:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8003294:	f10e 0e08 	add.w	lr, lr, #8
 8003298:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800329c:	f004 0607 	and.w	r6, r4, #7
 80032a0:	00b6      	lsls	r6, r6, #2
 80032a2:	270f      	movs	r7, #15
 80032a4:	40b7      	lsls	r7, r6
 80032a6:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032aa:	690f      	ldr	r7, [r1, #16]
 80032ac:	fa07 f606 	lsl.w	r6, r7, r6
 80032b0:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 80032b2:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 80032b6:	e046      	b.n	8003346 <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032b8:	2609      	movs	r6, #9
 80032ba:	e000      	b.n	80032be <HAL_GPIO_Init+0x36>
 80032bc:	2600      	movs	r6, #0
 80032be:	fa06 f60e 	lsl.w	r6, r6, lr
 80032c2:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c4:	3302      	adds	r3, #2
 80032c6:	4e64      	ldr	r6, [pc, #400]	; (8003458 <HAL_GPIO_Init+0x1d0>)
 80032c8:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032cc:	4b63      	ldr	r3, [pc, #396]	; (800345c <HAL_GPIO_Init+0x1d4>)
 80032ce:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 80032d0:	43eb      	mvns	r3, r5
 80032d2:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032d6:	684f      	ldr	r7, [r1, #4]
 80032d8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80032dc:	d001      	beq.n	80032e2 <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 80032de:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 80032e2:	4a5e      	ldr	r2, [pc, #376]	; (800345c <HAL_GPIO_Init+0x1d4>)
 80032e4:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80032e6:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80032e8:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032ec:	684f      	ldr	r7, [r1, #4]
 80032ee:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80032f2:	d001      	beq.n	80032f8 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80032f4:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 80032f8:	4a58      	ldr	r2, [pc, #352]	; (800345c <HAL_GPIO_Init+0x1d4>)
 80032fa:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032fc:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80032fe:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003302:	684f      	ldr	r7, [r1, #4]
 8003304:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003308:	d001      	beq.n	800330e <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 800330a:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 800330e:	4a53      	ldr	r2, [pc, #332]	; (800345c <HAL_GPIO_Init+0x1d4>)
 8003310:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8003312:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8003314:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003316:	684e      	ldr	r6, [r1, #4]
 8003318:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800331c:	d001      	beq.n	8003322 <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 800331e:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8003322:	4a4e      	ldr	r2, [pc, #312]	; (800345c <HAL_GPIO_Init+0x1d4>)
 8003324:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003326:	3401      	adds	r4, #1
 8003328:	2c0f      	cmp	r4, #15
 800332a:	f200 8092 	bhi.w	8003452 <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 800332e:	2301      	movs	r3, #1
 8003330:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003332:	680a      	ldr	r2, [r1, #0]
 8003334:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8003338:	42ab      	cmp	r3, r5
 800333a:	d1f4      	bne.n	8003326 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800333c:	684a      	ldr	r2, [r1, #4]
 800333e:	2a02      	cmp	r2, #2
 8003340:	d0a6      	beq.n	8003290 <HAL_GPIO_Init+0x8>
 8003342:	2a12      	cmp	r2, #18
 8003344:	d0a4      	beq.n	8003290 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8003346:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003348:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 800334c:	2203      	movs	r2, #3
 800334e:	fa02 f20e 	lsl.w	r2, r2, lr
 8003352:	43d2      	mvns	r2, r2
 8003354:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003356:	684f      	ldr	r7, [r1, #4]
 8003358:	f007 0703 	and.w	r7, r7, #3
 800335c:	fa07 f70e 	lsl.w	r7, r7, lr
 8003360:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8003362:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003364:	684e      	ldr	r6, [r1, #4]
 8003366:	1e77      	subs	r7, r6, #1
 8003368:	2f01      	cmp	r7, #1
 800336a:	d903      	bls.n	8003374 <HAL_GPIO_Init+0xec>
 800336c:	2e11      	cmp	r6, #17
 800336e:	d001      	beq.n	8003374 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003370:	2e12      	cmp	r6, #18
 8003372:	d10f      	bne.n	8003394 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8003374:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003376:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003378:	68cf      	ldr	r7, [r1, #12]
 800337a:	fa07 f70e 	lsl.w	r7, r7, lr
 800337e:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8003380:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8003382:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003384:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003388:	684e      	ldr	r6, [r1, #4]
 800338a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800338e:	40a6      	lsls	r6, r4
 8003390:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8003392:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8003394:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003396:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003398:	688b      	ldr	r3, [r1, #8]
 800339a:	fa03 f30e 	lsl.w	r3, r3, lr
 800339e:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80033a0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033a2:	684b      	ldr	r3, [r1, #4]
 80033a4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80033a8:	d0bd      	beq.n	8003326 <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <HAL_GPIO_Init+0x1d8>)
 80033b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033b6:	645a      	str	r2, [r3, #68]	; 0x44
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80033c2:	08a3      	lsrs	r3, r4, #2
 80033c4:	1c9e      	adds	r6, r3, #2
 80033c6:	4a24      	ldr	r2, [pc, #144]	; (8003458 <HAL_GPIO_Init+0x1d0>)
 80033c8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033cc:	f004 0603 	and.w	r6, r4, #3
 80033d0:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 80033d4:	260f      	movs	r6, #15
 80033d6:	fa06 f60e 	lsl.w	r6, r6, lr
 80033da:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033de:	4f21      	ldr	r7, [pc, #132]	; (8003464 <HAL_GPIO_Init+0x1dc>)
 80033e0:	42b8      	cmp	r0, r7
 80033e2:	f43f af6b 	beq.w	80032bc <HAL_GPIO_Init+0x34>
 80033e6:	4e20      	ldr	r6, [pc, #128]	; (8003468 <HAL_GPIO_Init+0x1e0>)
 80033e8:	42b0      	cmp	r0, r6
 80033ea:	d022      	beq.n	8003432 <HAL_GPIO_Init+0x1aa>
 80033ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80033f0:	42b0      	cmp	r0, r6
 80033f2:	d020      	beq.n	8003436 <HAL_GPIO_Init+0x1ae>
 80033f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80033f8:	42b0      	cmp	r0, r6
 80033fa:	d01e      	beq.n	800343a <HAL_GPIO_Init+0x1b2>
 80033fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003400:	42b0      	cmp	r0, r6
 8003402:	d01c      	beq.n	800343e <HAL_GPIO_Init+0x1b6>
 8003404:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003408:	42b0      	cmp	r0, r6
 800340a:	d01a      	beq.n	8003442 <HAL_GPIO_Init+0x1ba>
 800340c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003410:	42b0      	cmp	r0, r6
 8003412:	d018      	beq.n	8003446 <HAL_GPIO_Init+0x1be>
 8003414:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003418:	42b0      	cmp	r0, r6
 800341a:	d016      	beq.n	800344a <HAL_GPIO_Init+0x1c2>
 800341c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003420:	42b0      	cmp	r0, r6
 8003422:	d014      	beq.n	800344e <HAL_GPIO_Init+0x1c6>
 8003424:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003428:	42b0      	cmp	r0, r6
 800342a:	f43f af45 	beq.w	80032b8 <HAL_GPIO_Init+0x30>
 800342e:	260a      	movs	r6, #10
 8003430:	e745      	b.n	80032be <HAL_GPIO_Init+0x36>
 8003432:	2601      	movs	r6, #1
 8003434:	e743      	b.n	80032be <HAL_GPIO_Init+0x36>
 8003436:	2602      	movs	r6, #2
 8003438:	e741      	b.n	80032be <HAL_GPIO_Init+0x36>
 800343a:	2603      	movs	r6, #3
 800343c:	e73f      	b.n	80032be <HAL_GPIO_Init+0x36>
 800343e:	2604      	movs	r6, #4
 8003440:	e73d      	b.n	80032be <HAL_GPIO_Init+0x36>
 8003442:	2605      	movs	r6, #5
 8003444:	e73b      	b.n	80032be <HAL_GPIO_Init+0x36>
 8003446:	2606      	movs	r6, #6
 8003448:	e739      	b.n	80032be <HAL_GPIO_Init+0x36>
 800344a:	2607      	movs	r6, #7
 800344c:	e737      	b.n	80032be <HAL_GPIO_Init+0x36>
 800344e:	2608      	movs	r6, #8
 8003450:	e735      	b.n	80032be <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 8003452:	b003      	add	sp, #12
 8003454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003456:	bf00      	nop
 8003458:	40013800 	.word	0x40013800
 800345c:	40013c00 	.word	0x40013c00
 8003460:	40023800 	.word	0x40023800
 8003464:	40020000 	.word	0x40020000
 8003468:	40020400 	.word	0x40020400

0800346c <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800346c:	2300      	movs	r3, #0
 800346e:	2b0f      	cmp	r3, #15
 8003470:	f200 8092 	bhi.w	8003598 <HAL_GPIO_DeInit+0x12c>
{
 8003474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003476:	e00a      	b.n	800348e <HAL_GPIO_DeInit+0x22>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003478:	2609      	movs	r6, #9
 800347a:	e000      	b.n	800347e <HAL_GPIO_DeInit+0x12>
 800347c:	2600      	movs	r6, #0
 800347e:	fa06 f202 	lsl.w	r2, r6, r2
 8003482:	4294      	cmp	r4, r2
 8003484:	d06f      	beq.n	8003566 <HAL_GPIO_DeInit+0xfa>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003486:	3301      	adds	r3, #1
 8003488:	2b0f      	cmp	r3, #15
 800348a:	f200 8084 	bhi.w	8003596 <HAL_GPIO_DeInit+0x12a>
    ioposition = 0x01U << position;
 800348e:	2201      	movs	r2, #1
 8003490:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8003492:	ea02 0501 	and.w	r5, r2, r1
    if(iocurrent == ioposition)
 8003496:	42aa      	cmp	r2, r5
 8003498:	d1f5      	bne.n	8003486 <HAL_GPIO_DeInit+0x1a>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800349a:	6806      	ldr	r6, [r0, #0]
 800349c:	005f      	lsls	r7, r3, #1
 800349e:	2403      	movs	r4, #3
 80034a0:	40bc      	lsls	r4, r7
 80034a2:	43e4      	mvns	r4, r4
 80034a4:	4026      	ands	r6, r4
 80034a6:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034a8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80034ac:	f10e 0e08 	add.w	lr, lr, #8
 80034b0:	f850 c02e 	ldr.w	ip, [r0, lr, lsl #2]
 80034b4:	f003 0607 	and.w	r6, r3, #7
 80034b8:	00b6      	lsls	r6, r6, #2
 80034ba:	270f      	movs	r7, #15
 80034bc:	fa07 f606 	lsl.w	r6, r7, r6
 80034c0:	ea2c 0606 	bic.w	r6, ip, r6
 80034c4:	f840 602e 	str.w	r6, [r0, lr, lsl #2]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c8:	6886      	ldr	r6, [r0, #8]
 80034ca:	4026      	ands	r6, r4
 80034cc:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034ce:	6846      	ldr	r6, [r0, #4]
 80034d0:	ea26 0202 	bic.w	r2, r6, r2
 80034d4:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034d6:	68c2      	ldr	r2, [r0, #12]
 80034d8:	4014      	ands	r4, r2
 80034da:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2U];
 80034dc:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80034e0:	f10e 0402 	add.w	r4, lr, #2
 80034e4:	4a2d      	ldr	r2, [pc, #180]	; (800359c <HAL_GPIO_DeInit+0x130>)
 80034e6:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80034ea:	f003 0203 	and.w	r2, r3, #3
 80034ee:	0092      	lsls	r2, r2, #2
 80034f0:	4097      	lsls	r7, r2
 80034f2:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80034f4:	4e2a      	ldr	r6, [pc, #168]	; (80035a0 <HAL_GPIO_DeInit+0x134>)
 80034f6:	42b0      	cmp	r0, r6
 80034f8:	d0c0      	beq.n	800347c <HAL_GPIO_DeInit+0x10>
 80034fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80034fe:	42b0      	cmp	r0, r6
 8003500:	d021      	beq.n	8003546 <HAL_GPIO_DeInit+0xda>
 8003502:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003506:	42b0      	cmp	r0, r6
 8003508:	d01f      	beq.n	800354a <HAL_GPIO_DeInit+0xde>
 800350a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800350e:	42b0      	cmp	r0, r6
 8003510:	d01d      	beq.n	800354e <HAL_GPIO_DeInit+0xe2>
 8003512:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003516:	42b0      	cmp	r0, r6
 8003518:	d01b      	beq.n	8003552 <HAL_GPIO_DeInit+0xe6>
 800351a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800351e:	42b0      	cmp	r0, r6
 8003520:	d019      	beq.n	8003556 <HAL_GPIO_DeInit+0xea>
 8003522:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003526:	42b0      	cmp	r0, r6
 8003528:	d017      	beq.n	800355a <HAL_GPIO_DeInit+0xee>
 800352a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800352e:	42b0      	cmp	r0, r6
 8003530:	d015      	beq.n	800355e <HAL_GPIO_DeInit+0xf2>
 8003532:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003536:	42b0      	cmp	r0, r6
 8003538:	d013      	beq.n	8003562 <HAL_GPIO_DeInit+0xf6>
 800353a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800353e:	42b0      	cmp	r0, r6
 8003540:	d09a      	beq.n	8003478 <HAL_GPIO_DeInit+0xc>
 8003542:	260a      	movs	r6, #10
 8003544:	e79b      	b.n	800347e <HAL_GPIO_DeInit+0x12>
 8003546:	2601      	movs	r6, #1
 8003548:	e799      	b.n	800347e <HAL_GPIO_DeInit+0x12>
 800354a:	2602      	movs	r6, #2
 800354c:	e797      	b.n	800347e <HAL_GPIO_DeInit+0x12>
 800354e:	2603      	movs	r6, #3
 8003550:	e795      	b.n	800347e <HAL_GPIO_DeInit+0x12>
 8003552:	2604      	movs	r6, #4
 8003554:	e793      	b.n	800347e <HAL_GPIO_DeInit+0x12>
 8003556:	2605      	movs	r6, #5
 8003558:	e791      	b.n	800347e <HAL_GPIO_DeInit+0x12>
 800355a:	2606      	movs	r6, #6
 800355c:	e78f      	b.n	800347e <HAL_GPIO_DeInit+0x12>
 800355e:	2607      	movs	r6, #7
 8003560:	e78d      	b.n	800347e <HAL_GPIO_DeInit+0x12>
 8003562:	2608      	movs	r6, #8
 8003564:	e78b      	b.n	800347e <HAL_GPIO_DeInit+0x12>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003566:	4e0d      	ldr	r6, [pc, #52]	; (800359c <HAL_GPIO_DeInit+0x130>)
 8003568:	f10e 0202 	add.w	r2, lr, #2
 800356c:	f856 4022 	ldr.w	r4, [r6, r2, lsl #2]
 8003570:	ea24 0707 	bic.w	r7, r4, r7
 8003574:	f846 7022 	str.w	r7, [r6, r2, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003578:	4c0a      	ldr	r4, [pc, #40]	; (80035a4 <HAL_GPIO_DeInit+0x138>)
 800357a:	6826      	ldr	r6, [r4, #0]
 800357c:	43ea      	mvns	r2, r5
 800357e:	4016      	ands	r6, r2
 8003580:	6026      	str	r6, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003582:	6865      	ldr	r5, [r4, #4]
 8003584:	4015      	ands	r5, r2
 8003586:	6065      	str	r5, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003588:	68a5      	ldr	r5, [r4, #8]
 800358a:	4015      	ands	r5, r2
 800358c:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800358e:	68e5      	ldr	r5, [r4, #12]
 8003590:	402a      	ands	r2, r5
 8003592:	60e2      	str	r2, [r4, #12]
 8003594:	e777      	b.n	8003486 <HAL_GPIO_DeInit+0x1a>
      }
    }
  }
}
 8003596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40013800 	.word	0x40013800
 80035a0:	40020000 	.word	0x40020000
 80035a4:	40013c00 	.word	0x40013c00

080035a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035a8:	b912      	cbnz	r2, 80035b0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035aa:	0409      	lsls	r1, r1, #16
 80035ac:	6181      	str	r1, [r0, #24]
 80035ae:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80035b0:	6181      	str	r1, [r0, #24]
 80035b2:	4770      	bx	lr

080035b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035b4:	4770      	bx	lr
	...

080035b8 <HAL_GPIO_EXTI_IRQHandler>:
{
 80035b8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	4203      	tst	r3, r0
 80035c0:	d100      	bne.n	80035c4 <HAL_GPIO_EXTI_IRQHandler+0xc>
 80035c2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035c4:	4b02      	ldr	r3, [pc, #8]	; (80035d0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80035c6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035c8:	f7ff fff4 	bl	80035b4 <HAL_GPIO_EXTI_Callback>
}
 80035cc:	e7f9      	b.n	80035c2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80035ce:	bf00      	nop
 80035d0:	40013c00 	.word	0x40013c00

080035d4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035d4:	2800      	cmp	r0, #0
 80035d6:	f000 81bb 	beq.w	8003950 <HAL_RCC_OscConfig+0x37c>
{
 80035da:	b570      	push	{r4, r5, r6, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e0:	6803      	ldr	r3, [r0, #0]
 80035e2:	f013 0f01 	tst.w	r3, #1
 80035e6:	d03b      	beq.n	8003660 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035e8:	4ba7      	ldr	r3, [pc, #668]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d02c      	beq.n	800364e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f4:	4ba4      	ldr	r3, [pc, #656]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d021      	beq.n	8003644 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003600:	6863      	ldr	r3, [r4, #4]
 8003602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003606:	d04f      	beq.n	80036a8 <HAL_RCC_OscConfig+0xd4>
 8003608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800360c:	d052      	beq.n	80036b4 <HAL_RCC_OscConfig+0xe0>
 800360e:	4b9e      	ldr	r3, [pc, #632]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800361e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003620:	6863      	ldr	r3, [r4, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d050      	beq.n	80036c8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7ff fb45 	bl	8002cb4 <HAL_GetTick>
 800362a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362c:	4b96      	ldr	r3, [pc, #600]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003634:	d114      	bne.n	8003660 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003636:	f7ff fb3d 	bl	8002cb4 <HAL_GetTick>
 800363a:	1b40      	subs	r0, r0, r5
 800363c:	2864      	cmp	r0, #100	; 0x64
 800363e:	d9f5      	bls.n	800362c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8003640:	2003      	movs	r0, #3
 8003642:	e18a      	b.n	800395a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003644:	4b90      	ldr	r3, [pc, #576]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800364c:	d0d8      	beq.n	8003600 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364e:	4b8e      	ldr	r3, [pc, #568]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003656:	d003      	beq.n	8003660 <HAL_RCC_OscConfig+0x8c>
 8003658:	6863      	ldr	r3, [r4, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 817a 	beq.w	8003954 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	f013 0f02 	tst.w	r3, #2
 8003666:	d055      	beq.n	8003714 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003668:	4b87      	ldr	r3, [pc, #540]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f013 0f0c 	tst.w	r3, #12
 8003670:	d03e      	beq.n	80036f0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003672:	4b85      	ldr	r3, [pc, #532]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800367a:	2b08      	cmp	r3, #8
 800367c:	d033      	beq.n	80036e6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800367e:	68e3      	ldr	r3, [r4, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d068      	beq.n	8003756 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003684:	2201      	movs	r2, #1
 8003686:	4b81      	ldr	r3, [pc, #516]	; (800388c <HAL_RCC_OscConfig+0x2b8>)
 8003688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7ff fb13 	bl	8002cb4 <HAL_GetTick>
 800368e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	4b7d      	ldr	r3, [pc, #500]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f013 0f02 	tst.w	r3, #2
 8003698:	d154      	bne.n	8003744 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369a:	f7ff fb0b 	bl	8002cb4 <HAL_GetTick>
 800369e:	1b40      	subs	r0, r0, r5
 80036a0:	2802      	cmp	r0, #2
 80036a2:	d9f5      	bls.n	8003690 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80036a4:	2003      	movs	r0, #3
 80036a6:	e158      	b.n	800395a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a8:	4a77      	ldr	r2, [pc, #476]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 80036aa:	6813      	ldr	r3, [r2, #0]
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e7b5      	b.n	8003620 <HAL_RCC_OscConfig+0x4c>
 80036b4:	4b74      	ldr	r3, [pc, #464]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e7ab      	b.n	8003620 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80036c8:	f7ff faf4 	bl	8002cb4 <HAL_GetTick>
 80036cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	4b6e      	ldr	r3, [pc, #440]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80036d6:	d0c3      	beq.n	8003660 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d8:	f7ff faec 	bl	8002cb4 <HAL_GetTick>
 80036dc:	1b40      	subs	r0, r0, r5
 80036de:	2864      	cmp	r0, #100	; 0x64
 80036e0:	d9f5      	bls.n	80036ce <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80036e2:	2003      	movs	r0, #3
 80036e4:	e139      	b.n	800395a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e6:	4b68      	ldr	r3, [pc, #416]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80036ee:	d1c6      	bne.n	800367e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f0:	4b65      	ldr	r3, [pc, #404]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f013 0f02 	tst.w	r3, #2
 80036f8:	d004      	beq.n	8003704 <HAL_RCC_OscConfig+0x130>
 80036fa:	68e3      	ldr	r3, [r4, #12]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8003700:	2001      	movs	r0, #1
 8003702:	e12a      	b.n	800395a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003704:	4a60      	ldr	r2, [pc, #384]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800370c:	6921      	ldr	r1, [r4, #16]
 800370e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003712:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	f013 0f08 	tst.w	r3, #8
 800371a:	d040      	beq.n	800379e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800371c:	6963      	ldr	r3, [r4, #20]
 800371e:	b363      	cbz	r3, 800377a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003720:	2201      	movs	r2, #1
 8003722:	4b5b      	ldr	r3, [pc, #364]	; (8003890 <HAL_RCC_OscConfig+0x2bc>)
 8003724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003726:	f7ff fac5 	bl	8002cb4 <HAL_GetTick>
 800372a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372c:	4b56      	ldr	r3, [pc, #344]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 800372e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003730:	f013 0f02 	tst.w	r3, #2
 8003734:	d133      	bne.n	800379e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003736:	f7ff fabd 	bl	8002cb4 <HAL_GetTick>
 800373a:	1b40      	subs	r0, r0, r5
 800373c:	2802      	cmp	r0, #2
 800373e:	d9f5      	bls.n	800372c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003740:	2003      	movs	r0, #3
 8003742:	e10a      	b.n	800395a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003744:	4a50      	ldr	r2, [pc, #320]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 8003746:	6813      	ldr	r3, [r2, #0]
 8003748:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800374c:	6921      	ldr	r1, [r4, #16]
 800374e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	e7de      	b.n	8003714 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003756:	2200      	movs	r2, #0
 8003758:	4b4c      	ldr	r3, [pc, #304]	; (800388c <HAL_RCC_OscConfig+0x2b8>)
 800375a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800375c:	f7ff faaa 	bl	8002cb4 <HAL_GetTick>
 8003760:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003762:	4b49      	ldr	r3, [pc, #292]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f013 0f02 	tst.w	r3, #2
 800376a:	d0d3      	beq.n	8003714 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800376c:	f7ff faa2 	bl	8002cb4 <HAL_GetTick>
 8003770:	1b40      	subs	r0, r0, r5
 8003772:	2802      	cmp	r0, #2
 8003774:	d9f5      	bls.n	8003762 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8003776:	2003      	movs	r0, #3
 8003778:	e0ef      	b.n	800395a <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377a:	2200      	movs	r2, #0
 800377c:	4b44      	ldr	r3, [pc, #272]	; (8003890 <HAL_RCC_OscConfig+0x2bc>)
 800377e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003780:	f7ff fa98 	bl	8002cb4 <HAL_GetTick>
 8003784:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003786:	4b40      	ldr	r3, [pc, #256]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 8003788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378a:	f013 0f02 	tst.w	r3, #2
 800378e:	d006      	beq.n	800379e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003790:	f7ff fa90 	bl	8002cb4 <HAL_GetTick>
 8003794:	1b40      	subs	r0, r0, r5
 8003796:	2802      	cmp	r0, #2
 8003798:	d9f5      	bls.n	8003786 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 800379a:	2003      	movs	r0, #3
 800379c:	e0dd      	b.n	800395a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	f013 0f04 	tst.w	r3, #4
 80037a4:	d079      	beq.n	800389a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a6:	4b38      	ldr	r3, [pc, #224]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80037ae:	d133      	bne.n	8003818 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b0:	2300      	movs	r3, #0
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	4b34      	ldr	r3, [pc, #208]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 80037b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80037c8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ca:	4b32      	ldr	r3, [pc, #200]	; (8003894 <HAL_RCC_OscConfig+0x2c0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80037d2:	d023      	beq.n	800381c <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d4:	68a3      	ldr	r3, [r4, #8]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d034      	beq.n	8003844 <HAL_RCC_OscConfig+0x270>
 80037da:	2b05      	cmp	r3, #5
 80037dc:	d038      	beq.n	8003850 <HAL_RCC_OscConfig+0x27c>
 80037de:	4b2a      	ldr	r3, [pc, #168]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 80037e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	671a      	str	r2, [r3, #112]	; 0x70
 80037e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037ea:	f022 0204 	bic.w	r2, r2, #4
 80037ee:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f0:	68a3      	ldr	r3, [r4, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d036      	beq.n	8003864 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7ff fa5d 	bl	8002cb4 <HAL_GetTick>
 80037fa:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	4b22      	ldr	r3, [pc, #136]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003800:	f013 0f02 	tst.w	r3, #2
 8003804:	d148      	bne.n	8003898 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7ff fa55 	bl	8002cb4 <HAL_GetTick>
 800380a:	1b80      	subs	r0, r0, r6
 800380c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003810:	4298      	cmp	r0, r3
 8003812:	d9f3      	bls.n	80037fc <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8003814:	2003      	movs	r0, #3
 8003816:	e0a0      	b.n	800395a <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8003818:	2500      	movs	r5, #0
 800381a:	e7d6      	b.n	80037ca <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381c:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_RCC_OscConfig+0x2c0>)
 800381e:	6813      	ldr	r3, [r2, #0]
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003826:	f7ff fa45 	bl	8002cb4 <HAL_GetTick>
 800382a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382c:	4b19      	ldr	r3, [pc, #100]	; (8003894 <HAL_RCC_OscConfig+0x2c0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003834:	d1ce      	bne.n	80037d4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7ff fa3d 	bl	8002cb4 <HAL_GetTick>
 800383a:	1b80      	subs	r0, r0, r6
 800383c:	2802      	cmp	r0, #2
 800383e:	d9f5      	bls.n	800382c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8003840:	2003      	movs	r0, #3
 8003842:	e08a      	b.n	800395a <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003844:	4a10      	ldr	r2, [pc, #64]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 8003846:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6713      	str	r3, [r2, #112]	; 0x70
 800384e:	e7cf      	b.n	80037f0 <HAL_RCC_OscConfig+0x21c>
 8003850:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 8003852:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003854:	f042 0204 	orr.w	r2, r2, #4
 8003858:	671a      	str	r2, [r3, #112]	; 0x70
 800385a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	671a      	str	r2, [r3, #112]	; 0x70
 8003862:	e7c5      	b.n	80037f0 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003864:	f7ff fa26 	bl	8002cb4 <HAL_GetTick>
 8003868:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386a:	4b07      	ldr	r3, [pc, #28]	; (8003888 <HAL_RCC_OscConfig+0x2b4>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	f013 0f02 	tst.w	r3, #2
 8003872:	d011      	beq.n	8003898 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7ff fa1e 	bl	8002cb4 <HAL_GetTick>
 8003878:	1b80      	subs	r0, r0, r6
 800387a:	f241 3388 	movw	r3, #5000	; 0x1388
 800387e:	4298      	cmp	r0, r3
 8003880:	d9f3      	bls.n	800386a <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8003882:	2003      	movs	r0, #3
 8003884:	e069      	b.n	800395a <HAL_RCC_OscConfig+0x386>
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	42470000 	.word	0x42470000
 8003890:	42470e80 	.word	0x42470e80
 8003894:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003898:	b9e5      	cbnz	r5, 80038d4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800389a:	69a3      	ldr	r3, [r4, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d05b      	beq.n	8003958 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a0:	4a30      	ldr	r2, [pc, #192]	; (8003964 <HAL_RCC_OscConfig+0x390>)
 80038a2:	6892      	ldr	r2, [r2, #8]
 80038a4:	f002 020c 	and.w	r2, r2, #12
 80038a8:	2a08      	cmp	r2, #8
 80038aa:	d058      	beq.n	800395e <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d017      	beq.n	80038e0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b0:	2200      	movs	r2, #0
 80038b2:	4b2d      	ldr	r3, [pc, #180]	; (8003968 <HAL_RCC_OscConfig+0x394>)
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7ff f9fd 	bl	8002cb4 <HAL_GetTick>
 80038ba:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038bc:	4b29      	ldr	r3, [pc, #164]	; (8003964 <HAL_RCC_OscConfig+0x390>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038c4:	d042      	beq.n	800394c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c6:	f7ff f9f5 	bl	8002cb4 <HAL_GetTick>
 80038ca:	1b00      	subs	r0, r0, r4
 80038cc:	2802      	cmp	r0, #2
 80038ce:	d9f5      	bls.n	80038bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80038d0:	2003      	movs	r0, #3
 80038d2:	e042      	b.n	800395a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d4:	4a23      	ldr	r2, [pc, #140]	; (8003964 <HAL_RCC_OscConfig+0x390>)
 80038d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80038d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038dc:	6413      	str	r3, [r2, #64]	; 0x40
 80038de:	e7dc      	b.n	800389a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80038e0:	2200      	movs	r2, #0
 80038e2:	4b21      	ldr	r3, [pc, #132]	; (8003968 <HAL_RCC_OscConfig+0x394>)
 80038e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038e6:	f7ff f9e5 	bl	8002cb4 <HAL_GetTick>
 80038ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ec:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <HAL_RCC_OscConfig+0x390>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038f4:	d006      	beq.n	8003904 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f6:	f7ff f9dd 	bl	8002cb4 <HAL_GetTick>
 80038fa:	1b40      	subs	r0, r0, r5
 80038fc:	2802      	cmp	r0, #2
 80038fe:	d9f5      	bls.n	80038ec <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8003900:	2003      	movs	r0, #3
 8003902:	e02a      	b.n	800395a <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003904:	69e3      	ldr	r3, [r4, #28]
 8003906:	6a22      	ldr	r2, [r4, #32]
 8003908:	4313      	orrs	r3, r2
 800390a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800390c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003910:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003912:	0852      	lsrs	r2, r2, #1
 8003914:	3a01      	subs	r2, #1
 8003916:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800391a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800391c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003920:	4a10      	ldr	r2, [pc, #64]	; (8003964 <HAL_RCC_OscConfig+0x390>)
 8003922:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003924:	2201      	movs	r2, #1
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <HAL_RCC_OscConfig+0x394>)
 8003928:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800392a:	f7ff f9c3 	bl	8002cb4 <HAL_GetTick>
 800392e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <HAL_RCC_OscConfig+0x390>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003938:	d106      	bne.n	8003948 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393a:	f7ff f9bb 	bl	8002cb4 <HAL_GetTick>
 800393e:	1b00      	subs	r0, r0, r4
 8003940:	2802      	cmp	r0, #2
 8003942:	d9f5      	bls.n	8003930 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8003944:	2003      	movs	r0, #3
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003948:	2000      	movs	r0, #0
 800394a:	e006      	b.n	800395a <HAL_RCC_OscConfig+0x386>
 800394c:	2000      	movs	r0, #0
 800394e:	e004      	b.n	800395a <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8003950:	2001      	movs	r0, #1
 8003952:	4770      	bx	lr
        return HAL_ERROR;
 8003954:	2001      	movs	r0, #1
 8003956:	e000      	b.n	800395a <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8003958:	2000      	movs	r0, #0
}
 800395a:	b002      	add	sp, #8
 800395c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800395e:	2001      	movs	r0, #1
 8003960:	e7fb      	b.n	800395a <HAL_RCC_OscConfig+0x386>
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800
 8003968:	42470060 	.word	0x42470060

0800396c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800396e:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b04      	cmp	r3, #4
 8003978:	d059      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0xc2>
 800397a:	2b08      	cmp	r3, #8
 800397c:	d001      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800397e:	482e      	ldr	r0, [pc, #184]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003982:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003990:	d02a      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003992:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800399a:	461e      	mov	r6, r3
 800399c:	2700      	movs	r7, #0
 800399e:	015c      	lsls	r4, r3, #5
 80039a0:	2500      	movs	r5, #0
 80039a2:	1ae4      	subs	r4, r4, r3
 80039a4:	eb65 0507 	sbc.w	r5, r5, r7
 80039a8:	01a9      	lsls	r1, r5, #6
 80039aa:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80039ae:	01a0      	lsls	r0, r4, #6
 80039b0:	1b00      	subs	r0, r0, r4
 80039b2:	eb61 0105 	sbc.w	r1, r1, r5
 80039b6:	00cb      	lsls	r3, r1, #3
 80039b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80039bc:	00c4      	lsls	r4, r0, #3
 80039be:	19a0      	adds	r0, r4, r6
 80039c0:	eb43 0107 	adc.w	r1, r3, r7
 80039c4:	024b      	lsls	r3, r1, #9
 80039c6:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80039ca:	0244      	lsls	r4, r0, #9
 80039cc:	4620      	mov	r0, r4
 80039ce:	4619      	mov	r1, r3
 80039d0:	2300      	movs	r3, #0
 80039d2:	f7fc fc75 	bl	80002c0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d6:	4b17      	ldr	r3, [pc, #92]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80039de:	3301      	adds	r3, #1
 80039e0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80039e2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80039e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80039f0:	461e      	mov	r6, r3
 80039f2:	2700      	movs	r7, #0
 80039f4:	015c      	lsls	r4, r3, #5
 80039f6:	2500      	movs	r5, #0
 80039f8:	1ae4      	subs	r4, r4, r3
 80039fa:	eb65 0507 	sbc.w	r5, r5, r7
 80039fe:	01a9      	lsls	r1, r5, #6
 8003a00:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8003a04:	01a0      	lsls	r0, r4, #6
 8003a06:	1b00      	subs	r0, r0, r4
 8003a08:	eb61 0105 	sbc.w	r1, r1, r5
 8003a0c:	00cb      	lsls	r3, r1, #3
 8003a0e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003a12:	00c4      	lsls	r4, r0, #3
 8003a14:	19a0      	adds	r0, r4, r6
 8003a16:	eb43 0107 	adc.w	r1, r3, r7
 8003a1a:	028b      	lsls	r3, r1, #10
 8003a1c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003a20:	0284      	lsls	r4, r0, #10
 8003a22:	4620      	mov	r0, r4
 8003a24:	4619      	mov	r1, r3
 8003a26:	2300      	movs	r3, #0
 8003a28:	f7fc fc4a 	bl	80002c0 <__aeabi_uldivmod>
 8003a2c:	e7d3      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8003a2e:	4803      	ldr	r0, [pc, #12]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	00f42400 	.word	0x00f42400
 8003a3c:	007a1200 	.word	0x007a1200

08003a40 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003a40:	2800      	cmp	r0, #0
 8003a42:	f000 809d 	beq.w	8003b80 <HAL_RCC_ClockConfig+0x140>
{
 8003a46:	b570      	push	{r4, r5, r6, lr}
 8003a48:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a4a:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <HAL_RCC_ClockConfig+0x148>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	428b      	cmp	r3, r1
 8003a54:	d209      	bcs.n	8003a6a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	b2cb      	uxtb	r3, r1
 8003a58:	4a4b      	ldr	r2, [pc, #300]	; (8003b88 <HAL_RCC_ClockConfig+0x148>)
 8003a5a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5c:	6813      	ldr	r3, [r2, #0]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	4299      	cmp	r1, r3
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8003a66:	2001      	movs	r0, #1
 8003a68:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	f013 0f02 	tst.w	r3, #2
 8003a70:	d017      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a72:	f013 0f04 	tst.w	r3, #4
 8003a76:	d004      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a78:	4a44      	ldr	r2, [pc, #272]	; (8003b8c <HAL_RCC_ClockConfig+0x14c>)
 8003a7a:	6893      	ldr	r3, [r2, #8]
 8003a7c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a80:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	f013 0f08 	tst.w	r3, #8
 8003a88:	d004      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a8a:	4a40      	ldr	r2, [pc, #256]	; (8003b8c <HAL_RCC_ClockConfig+0x14c>)
 8003a8c:	6893      	ldr	r3, [r2, #8]
 8003a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a92:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4a3d      	ldr	r2, [pc, #244]	; (8003b8c <HAL_RCC_ClockConfig+0x14c>)
 8003a96:	6893      	ldr	r3, [r2, #8]
 8003a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a9c:	68a0      	ldr	r0, [r4, #8]
 8003a9e:	4303      	orrs	r3, r0
 8003aa0:	6093      	str	r3, [r2, #8]
 8003aa2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	f013 0f01 	tst.w	r3, #1
 8003aaa:	d032      	beq.n	8003b12 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aac:	6863      	ldr	r3, [r4, #4]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d021      	beq.n	8003af6 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab2:	1e9a      	subs	r2, r3, #2
 8003ab4:	2a01      	cmp	r2, #1
 8003ab6:	d925      	bls.n	8003b04 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab8:	4a34      	ldr	r2, [pc, #208]	; (8003b8c <HAL_RCC_ClockConfig+0x14c>)
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	f012 0f02 	tst.w	r2, #2
 8003ac0:	d060      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac2:	4932      	ldr	r1, [pc, #200]	; (8003b8c <HAL_RCC_ClockConfig+0x14c>)
 8003ac4:	688a      	ldr	r2, [r1, #8]
 8003ac6:	f022 0203 	bic.w	r2, r2, #3
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003ace:	f7ff f8f1 	bl	8002cb4 <HAL_GetTick>
 8003ad2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad4:	4b2d      	ldr	r3, [pc, #180]	; (8003b8c <HAL_RCC_ClockConfig+0x14c>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	6862      	ldr	r2, [r4, #4]
 8003ade:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ae2:	d016      	beq.n	8003b12 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae4:	f7ff f8e6 	bl	8002cb4 <HAL_GetTick>
 8003ae8:	1b80      	subs	r0, r0, r6
 8003aea:	f241 3388 	movw	r3, #5000	; 0x1388
 8003aee:	4298      	cmp	r0, r3
 8003af0:	d9f0      	bls.n	8003ad4 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8003af2:	2003      	movs	r0, #3
 8003af4:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	4a25      	ldr	r2, [pc, #148]	; (8003b8c <HAL_RCC_ClockConfig+0x14c>)
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003afe:	d1e0      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003b00:	2001      	movs	r0, #1
 8003b02:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b04:	4a21      	ldr	r2, [pc, #132]	; (8003b8c <HAL_RCC_ClockConfig+0x14c>)
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003b0c:	d1d9      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003b0e:	2001      	movs	r0, #1
 8003b10:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <HAL_RCC_ClockConfig+0x148>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	429d      	cmp	r5, r3
 8003b1c:	d209      	bcs.n	8003b32 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1e:	b2ea      	uxtb	r2, r5
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_ClockConfig+0x148>)
 8003b22:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	429d      	cmp	r5, r3
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8003b2e:	2001      	movs	r0, #1
}
 8003b30:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	f013 0f04 	tst.w	r3, #4
 8003b38:	d006      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3a:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <HAL_RCC_ClockConfig+0x14c>)
 8003b3c:	6893      	ldr	r3, [r2, #8]
 8003b3e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003b42:	68e1      	ldr	r1, [r4, #12]
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	f013 0f08 	tst.w	r3, #8
 8003b4e:	d007      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b50:	4a0e      	ldr	r2, [pc, #56]	; (8003b8c <HAL_RCC_ClockConfig+0x14c>)
 8003b52:	6893      	ldr	r3, [r2, #8]
 8003b54:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003b58:	6921      	ldr	r1, [r4, #16]
 8003b5a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b5e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b60:	f7ff ff04 	bl	800396c <HAL_RCC_GetSysClockFreq>
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCC_ClockConfig+0x14c>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b6c:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <HAL_RCC_ClockConfig+0x150>)
 8003b6e:	5cd3      	ldrb	r3, [r2, r3]
 8003b70:	40d8      	lsrs	r0, r3
 8003b72:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <HAL_RCC_ClockConfig+0x154>)
 8003b74:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003b76:	2000      	movs	r0, #0
 8003b78:	f7fe fad4 	bl	8002124 <HAL_InitTick>
  return HAL_OK;
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003b80:	2001      	movs	r0, #1
 8003b82:	4770      	bx	lr
        return HAL_ERROR;
 8003b84:	2001      	movs	r0, #1
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
 8003b88:	40023c00 	.word	0x40023c00
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	0805e344 	.word	0x0805e344
 8003b94:	200000d8 	.word	0x200000d8

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003b98:	4b01      	ldr	r3, [pc, #4]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x8>)
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	200000d8 	.word	0x200000d8

08003ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ba6:	f7ff fff7 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003baa:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <HAL_RCC_GetPCLK1Freq+0x18>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003bb2:	4a03      	ldr	r2, [pc, #12]	; (8003bc0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003bb4:	5cd3      	ldrb	r3, [r2, r3]
}
 8003bb6:	40d8      	lsrs	r0, r3
 8003bb8:	bd08      	pop	{r3, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	0805e354 	.word	0x0805e354

08003bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bc6:	f7ff ffe7 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bca:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <HAL_RCC_GetPCLK2Freq+0x18>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003bd2:	4a03      	ldr	r2, [pc, #12]	; (8003be0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003bd4:	5cd3      	ldrb	r3, [r2, r3]
}
 8003bd6:	40d8      	lsrs	r0, r3
 8003bd8:	bd08      	pop	{r3, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	0805e354 	.word	0x0805e354

08003be4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003be4:	230f      	movs	r3, #15
 8003be6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_RCC_GetClockConfig+0x34>)
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	f002 0203 	and.w	r2, r2, #3
 8003bf0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003bf8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003c00:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	08db      	lsrs	r3, r3, #3
 8003c06:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003c0a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <HAL_RCC_GetClockConfig+0x38>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	600b      	str	r3, [r1, #0]
 8003c16:	4770      	bx	lr
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40023c00 	.word	0x40023c00

08003c20 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c20:	4770      	bx	lr

08003c22 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c22:	6802      	ldr	r2, [r0, #0]
 8003c24:	68d3      	ldr	r3, [r2, #12]
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	60d3      	str	r3, [r2, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c2c:	6802      	ldr	r2, [r0, #0]
 8003c2e:	6813      	ldr	r3, [r2, #0]
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8003c36:	2000      	movs	r0, #0
 8003c38:	4770      	bx	lr

08003c3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	4770      	bx	lr

08003c40 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c40:	4770      	bx	lr

08003c42 <HAL_TIM_IRQHandler>:
{
 8003c42:	b510      	push	{r4, lr}
 8003c44:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c46:	6803      	ldr	r3, [r0, #0]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	f012 0f02 	tst.w	r2, #2
 8003c4e:	d011      	beq.n	8003c74 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	f012 0f02 	tst.w	r2, #2
 8003c56:	d00d      	beq.n	8003c74 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c58:	f06f 0202 	mvn.w	r2, #2
 8003c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c62:	6803      	ldr	r3, [r0, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f013 0f03 	tst.w	r3, #3
 8003c6a:	d070      	beq.n	8003d4e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003c6c:	f7ff ffe6 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c70:	2300      	movs	r3, #0
 8003c72:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	f012 0f04 	tst.w	r2, #4
 8003c7c:	d012      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	f012 0f04 	tst.w	r2, #4
 8003c84:	d00e      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c86:	f06f 0204 	mvn.w	r2, #4
 8003c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003c98:	d05f      	beq.n	8003d5a <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f7ff ffce 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	f012 0f08 	tst.w	r2, #8
 8003cac:	d012      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	f012 0f08 	tst.w	r2, #8
 8003cb4:	d00e      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cb6:	f06f 0208 	mvn.w	r2, #8
 8003cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f013 0f03 	tst.w	r3, #3
 8003cc8:	d04e      	beq.n	8003d68 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f7ff ffb6 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	f012 0f10 	tst.w	r2, #16
 8003cdc:	d012      	beq.n	8003d04 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	f012 0f10 	tst.w	r2, #16
 8003ce4:	d00e      	beq.n	8003d04 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ce6:	f06f 0210 	mvn.w	r2, #16
 8003cea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cec:	2308      	movs	r3, #8
 8003cee:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003cf8:	d03d      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f7ff ff9e 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d00:	2300      	movs	r3, #0
 8003d02:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	f012 0f01 	tst.w	r2, #1
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	f012 0f01 	tst.w	r2, #1
 8003d14:	d136      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003d1e:	d003      	beq.n	8003d28 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003d26:	d134      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d30:	d003      	beq.n	8003d3a <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d38:	d132      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	f012 0f20 	tst.w	r2, #32
 8003d42:	d003      	beq.n	8003d4c <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	f012 0f20 	tst.w	r2, #32
 8003d4a:	d130      	bne.n	8003dae <HAL_TIM_IRQHandler+0x16c>
 8003d4c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4e:	f7ff ff74 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7ff ff73 	bl	8003c3e <HAL_TIM_PWM_PulseFinishedCallback>
 8003d58:	e78a      	b.n	8003c70 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f7ff ff6d 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d60:	4620      	mov	r0, r4
 8003d62:	f7ff ff6c 	bl	8003c3e <HAL_TIM_PWM_PulseFinishedCallback>
 8003d66:	e79b      	b.n	8003ca0 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f7ff ff66 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003d6e:	4620      	mov	r0, r4
 8003d70:	f7ff ff65 	bl	8003c3e <HAL_TIM_PWM_PulseFinishedCallback>
 8003d74:	e7ac      	b.n	8003cd0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7ff ff5f 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f7ff ff5e 	bl	8003c3e <HAL_TIM_PWM_PulseFinishedCallback>
 8003d82:	e7bd      	b.n	8003d00 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d84:	f06f 0201 	mvn.w	r2, #1
 8003d88:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7fd ffac 	bl	8001ce8 <HAL_TIM_PeriodElapsedCallback>
 8003d90:	e7c1      	b.n	8003d16 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f000 f8b7 	bl	8003f0c <HAL_TIMEx_BreakCallback>
 8003d9e:	e7c3      	b.n	8003d28 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003da0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003da4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003da6:	4620      	mov	r0, r4
 8003da8:	f7ff ff4a 	bl	8003c40 <HAL_TIM_TriggerCallback>
 8003dac:	e7c5      	b.n	8003d3a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dae:	f06f 0220 	mvn.w	r2, #32
 8003db2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003db4:	4620      	mov	r0, r4
 8003db6:	f000 f8a8 	bl	8003f0a <HAL_TIMEx_CommutationCallback>
}
 8003dba:	e7c7      	b.n	8003d4c <HAL_TIM_IRQHandler+0x10a>

08003dbc <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8003dbc:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003dbe:	4a45      	ldr	r2, [pc, #276]	; (8003ed4 <TIM_Base_SetConfig+0x118>)
 8003dc0:	4290      	cmp	r0, r2
 8003dc2:	d04a      	beq.n	8003e5a <TIM_Base_SetConfig+0x9e>
 8003dc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003dc8:	d049      	beq.n	8003e5e <TIM_Base_SetConfig+0xa2>
 8003dca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003dce:	4290      	cmp	r0, r2
 8003dd0:	d047      	beq.n	8003e62 <TIM_Base_SetConfig+0xa6>
 8003dd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dd6:	4290      	cmp	r0, r2
 8003dd8:	d045      	beq.n	8003e66 <TIM_Base_SetConfig+0xaa>
 8003dda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dde:	4290      	cmp	r0, r2
 8003de0:	d043      	beq.n	8003e6a <TIM_Base_SetConfig+0xae>
 8003de2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003de6:	4290      	cmp	r0, r2
 8003de8:	d035      	beq.n	8003e56 <TIM_Base_SetConfig+0x9a>
 8003dea:	2200      	movs	r2, #0
 8003dec:	b11a      	cbz	r2, 8003df6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003df2:	684a      	ldr	r2, [r1, #4]
 8003df4:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003df6:	4a37      	ldr	r2, [pc, #220]	; (8003ed4 <TIM_Base_SetConfig+0x118>)
 8003df8:	4290      	cmp	r0, r2
 8003dfa:	d03a      	beq.n	8003e72 <TIM_Base_SetConfig+0xb6>
 8003dfc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003e00:	d050      	beq.n	8003ea4 <TIM_Base_SetConfig+0xe8>
 8003e02:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003e06:	4290      	cmp	r0, r2
 8003e08:	d04e      	beq.n	8003ea8 <TIM_Base_SetConfig+0xec>
 8003e0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e0e:	4290      	cmp	r0, r2
 8003e10:	d04c      	beq.n	8003eac <TIM_Base_SetConfig+0xf0>
 8003e12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e16:	4290      	cmp	r0, r2
 8003e18:	d04a      	beq.n	8003eb0 <TIM_Base_SetConfig+0xf4>
 8003e1a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003e1e:	4290      	cmp	r0, r2
 8003e20:	d048      	beq.n	8003eb4 <TIM_Base_SetConfig+0xf8>
 8003e22:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003e26:	4290      	cmp	r0, r2
 8003e28:	d046      	beq.n	8003eb8 <TIM_Base_SetConfig+0xfc>
 8003e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e2e:	4290      	cmp	r0, r2
 8003e30:	d044      	beq.n	8003ebc <TIM_Base_SetConfig+0x100>
 8003e32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e36:	4290      	cmp	r0, r2
 8003e38:	d042      	beq.n	8003ec0 <TIM_Base_SetConfig+0x104>
 8003e3a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003e3e:	4290      	cmp	r0, r2
 8003e40:	d040      	beq.n	8003ec4 <TIM_Base_SetConfig+0x108>
 8003e42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e46:	4290      	cmp	r0, r2
 8003e48:	d03e      	beq.n	8003ec8 <TIM_Base_SetConfig+0x10c>
 8003e4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e4e:	4290      	cmp	r0, r2
 8003e50:	d00d      	beq.n	8003e6e <TIM_Base_SetConfig+0xb2>
 8003e52:	2200      	movs	r2, #0
 8003e54:	e00e      	b.n	8003e74 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003e56:	2201      	movs	r2, #1
 8003e58:	e7c8      	b.n	8003dec <TIM_Base_SetConfig+0x30>
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	e7c6      	b.n	8003dec <TIM_Base_SetConfig+0x30>
 8003e5e:	2201      	movs	r2, #1
 8003e60:	e7c4      	b.n	8003dec <TIM_Base_SetConfig+0x30>
 8003e62:	2201      	movs	r2, #1
 8003e64:	e7c2      	b.n	8003dec <TIM_Base_SetConfig+0x30>
 8003e66:	2201      	movs	r2, #1
 8003e68:	e7c0      	b.n	8003dec <TIM_Base_SetConfig+0x30>
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	e7be      	b.n	8003dec <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003e6e:	2201      	movs	r2, #1
 8003e70:	e000      	b.n	8003e74 <TIM_Base_SetConfig+0xb8>
 8003e72:	2201      	movs	r2, #1
 8003e74:	b11a      	cbz	r2, 8003e7e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e7a:	68ca      	ldr	r2, [r1, #12]
 8003e7c:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8003e7e:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e80:	688b      	ldr	r3, [r1, #8]
 8003e82:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003e84:	680b      	ldr	r3, [r1, #0]
 8003e86:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003e88:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <TIM_Base_SetConfig+0x118>)
 8003e8a:	4298      	cmp	r0, r3
 8003e8c:	d020      	beq.n	8003ed0 <TIM_Base_SetConfig+0x114>
 8003e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e92:	4298      	cmp	r0, r3
 8003e94:	d01a      	beq.n	8003ecc <TIM_Base_SetConfig+0x110>
 8003e96:	2300      	movs	r3, #0
 8003e98:	b10b      	cbz	r3, 8003e9e <TIM_Base_SetConfig+0xe2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e9a:	690b      	ldr	r3, [r1, #16]
 8003e9c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	6143      	str	r3, [r0, #20]
 8003ea2:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	e7e5      	b.n	8003e74 <TIM_Base_SetConfig+0xb8>
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	e7e3      	b.n	8003e74 <TIM_Base_SetConfig+0xb8>
 8003eac:	2201      	movs	r2, #1
 8003eae:	e7e1      	b.n	8003e74 <TIM_Base_SetConfig+0xb8>
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	e7df      	b.n	8003e74 <TIM_Base_SetConfig+0xb8>
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	e7dd      	b.n	8003e74 <TIM_Base_SetConfig+0xb8>
 8003eb8:	2201      	movs	r2, #1
 8003eba:	e7db      	b.n	8003e74 <TIM_Base_SetConfig+0xb8>
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	e7d9      	b.n	8003e74 <TIM_Base_SetConfig+0xb8>
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	e7d7      	b.n	8003e74 <TIM_Base_SetConfig+0xb8>
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	e7d5      	b.n	8003e74 <TIM_Base_SetConfig+0xb8>
 8003ec8:	2201      	movs	r2, #1
 8003eca:	e7d3      	b.n	8003e74 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e7e3      	b.n	8003e98 <TIM_Base_SetConfig+0xdc>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e7e1      	b.n	8003e98 <TIM_Base_SetConfig+0xdc>
 8003ed4:	40010000 	.word	0x40010000

08003ed8 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8003ed8:	b1a8      	cbz	r0, 8003f06 <HAL_TIM_Base_Init+0x2e>
{ 
 8003eda:	b510      	push	{r4, lr}
 8003edc:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8003ede:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003ee2:	b15b      	cbz	r3, 8003efc <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003eea:	1d21      	adds	r1, r4, #4
 8003eec:	6820      	ldr	r0, [r4, #0]
 8003eee:	f7ff ff65 	bl	8003dbc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003ef8:	2000      	movs	r0, #0
 8003efa:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003efc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8003f00:	f7ff fe8e 	bl	8003c20 <HAL_TIM_Base_MspInit>
 8003f04:	e7ee      	b.n	8003ee4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003f06:	2001      	movs	r0, #1
 8003f08:	4770      	bx	lr

08003f0a <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	4770      	bx	lr

08003f0e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f0e:	6802      	ldr	r2, [r0, #0]
 8003f10:	68d3      	ldr	r3, [r2, #12]
 8003f12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f16:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f18:	6802      	ldr	r2, [r0, #0]
 8003f1a:	6953      	ldr	r3, [r2, #20]
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f22:	2320      	movs	r3, #32
 8003f24:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8003f28:	4770      	bx	lr

08003f2a <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f2a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b21      	cmp	r3, #33	; 0x21
 8003f32:	d001      	beq.n	8003f38 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003f34:	2002      	movs	r0, #2
 8003f36:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f38:	6883      	ldr	r3, [r0, #8]
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3e:	d017      	beq.n	8003f70 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f40:	6802      	ldr	r2, [r0, #0]
 8003f42:	6a03      	ldr	r3, [r0, #32]
 8003f44:	1c59      	adds	r1, r3, #1
 8003f46:	6201      	str	r1, [r0, #32]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 8003f4c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003f56:	b9db      	cbnz	r3, 8003f90 <UART_Transmit_IT+0x66>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f58:	6802      	ldr	r2, [r0, #0]
 8003f5a:	68d3      	ldr	r3, [r2, #12]
 8003f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f60:	60d3      	str	r3, [r2, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f62:	6802      	ldr	r2, [r0, #0]
 8003f64:	68d3      	ldr	r3, [r2, #12]
 8003f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f6a:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8003f70:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f72:	6802      	ldr	r2, [r0, #0]
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7a:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003f7c:	6903      	ldr	r3, [r0, #16]
 8003f7e:	b91b      	cbnz	r3, 8003f88 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8003f80:	6a03      	ldr	r3, [r0, #32]
 8003f82:	3302      	adds	r3, #2
 8003f84:	6203      	str	r3, [r0, #32]
 8003f86:	e7e1      	b.n	8003f4c <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8003f88:	6a03      	ldr	r3, [r0, #32]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	6203      	str	r3, [r0, #32]
 8003f8e:	e7dd      	b.n	8003f4c <UART_Transmit_IT+0x22>
    return HAL_OK;
 8003f90:	2000      	movs	r0, #0
  }
}
 8003f92:	4770      	bx	lr

08003f94 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f98:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003f9a:	6802      	ldr	r2, [r0, #0]
 8003f9c:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003f9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003fa2:	68c1      	ldr	r1, [r0, #12]
 8003fa4:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003fa6:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003fa8:	6801      	ldr	r1, [r0, #0]
 8003faa:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003fac:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003fb0:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fb4:	6882      	ldr	r2, [r0, #8]
 8003fb6:	6900      	ldr	r0, [r0, #16]
 8003fb8:	4302      	orrs	r2, r0
 8003fba:	6960      	ldr	r0, [r4, #20]
 8003fbc:	4302      	orrs	r2, r0
 8003fbe:	69e0      	ldr	r0, [r4, #28]
 8003fc0:	4302      	orrs	r2, r0
 8003fc2:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003fc4:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003fc6:	6822      	ldr	r2, [r4, #0]
 8003fc8:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003fce:	69a1      	ldr	r1, [r4, #24]
 8003fd0:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003fd2:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd4:	69e3      	ldr	r3, [r4, #28]
 8003fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fda:	d062      	beq.n	80040a2 <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fdc:	f8d4 8000 	ldr.w	r8, [r4]
 8003fe0:	4bbb      	ldr	r3, [pc, #748]	; (80042d0 <UART_SetConfig+0x33c>)
 8003fe2:	4598      	cmp	r8, r3
 8003fe4:	f000 811b 	beq.w	800421e <UART_SetConfig+0x28a>
 8003fe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fec:	4598      	cmp	r8, r3
 8003fee:	f000 8116 	beq.w	800421e <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003ff2:	f7ff fdd7 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8003ff6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ffa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ffe:	6865      	ldr	r5, [r4, #4]
 8004000:	00ad      	lsls	r5, r5, #2
 8004002:	fbb0 f5f5 	udiv	r5, r0, r5
 8004006:	4fb3      	ldr	r7, [pc, #716]	; (80042d4 <UART_SetConfig+0x340>)
 8004008:	fba7 3505 	umull	r3, r5, r7, r5
 800400c:	096d      	lsrs	r5, r5, #5
 800400e:	012e      	lsls	r6, r5, #4
 8004010:	f7ff fdc8 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8004014:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004018:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800401c:	6865      	ldr	r5, [r4, #4]
 800401e:	00ad      	lsls	r5, r5, #2
 8004020:	fbb0 faf5 	udiv	sl, r0, r5
 8004024:	f7ff fdbe 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8004028:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800402c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004030:	6865      	ldr	r5, [r4, #4]
 8004032:	00ad      	lsls	r5, r5, #2
 8004034:	fbb0 f5f5 	udiv	r5, r0, r5
 8004038:	fba7 3505 	umull	r3, r5, r7, r5
 800403c:	096d      	lsrs	r5, r5, #5
 800403e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8004042:	fb09 a515 	mls	r5, r9, r5, sl
 8004046:	012d      	lsls	r5, r5, #4
 8004048:	3532      	adds	r5, #50	; 0x32
 800404a:	fba7 3505 	umull	r3, r5, r7, r5
 800404e:	096d      	lsrs	r5, r5, #5
 8004050:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8004054:	4435      	add	r5, r6
 8004056:	f7ff fda5 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 800405a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800405e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004062:	6866      	ldr	r6, [r4, #4]
 8004064:	00b6      	lsls	r6, r6, #2
 8004066:	fbb0 f6f6 	udiv	r6, r0, r6
 800406a:	f7ff fd9b 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 800406e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004072:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004076:	6863      	ldr	r3, [r4, #4]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	fbb0 f0f3 	udiv	r0, r0, r3
 800407e:	fba7 3000 	umull	r3, r0, r7, r0
 8004082:	0940      	lsrs	r0, r0, #5
 8004084:	fb09 6910 	mls	r9, r9, r0, r6
 8004088:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800408c:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8004090:	fba7 3709 	umull	r3, r7, r7, r9
 8004094:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8004098:	442f      	add	r7, r5
 800409a:	f8c8 7008 	str.w	r7, [r8, #8]
 800409e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80040a2:	f8d4 8000 	ldr.w	r8, [r4]
 80040a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040aa:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80040ae:	4598      	cmp	r8, r3
 80040b0:	d05c      	beq.n	800416c <UART_SetConfig+0x1d8>
 80040b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040b6:	4598      	cmp	r8, r3
 80040b8:	d058      	beq.n	800416c <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80040ba:	f7ff fd73 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 80040be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040c6:	6865      	ldr	r5, [r4, #4]
 80040c8:	006d      	lsls	r5, r5, #1
 80040ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80040ce:	4f81      	ldr	r7, [pc, #516]	; (80042d4 <UART_SetConfig+0x340>)
 80040d0:	fba7 3505 	umull	r3, r5, r7, r5
 80040d4:	096d      	lsrs	r5, r5, #5
 80040d6:	012e      	lsls	r6, r5, #4
 80040d8:	f7ff fd64 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 80040dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040e4:	6865      	ldr	r5, [r4, #4]
 80040e6:	006d      	lsls	r5, r5, #1
 80040e8:	fbb0 faf5 	udiv	sl, r0, r5
 80040ec:	f7ff fd5a 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 80040f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040f8:	6865      	ldr	r5, [r4, #4]
 80040fa:	006d      	lsls	r5, r5, #1
 80040fc:	fbb0 f5f5 	udiv	r5, r0, r5
 8004100:	fba7 3505 	umull	r3, r5, r7, r5
 8004104:	096d      	lsrs	r5, r5, #5
 8004106:	f04f 0964 	mov.w	r9, #100	; 0x64
 800410a:	fb09 a515 	mls	r5, r9, r5, sl
 800410e:	00ed      	lsls	r5, r5, #3
 8004110:	3532      	adds	r5, #50	; 0x32
 8004112:	fba7 3505 	umull	r3, r5, r7, r5
 8004116:	096d      	lsrs	r5, r5, #5
 8004118:	006d      	lsls	r5, r5, #1
 800411a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800411e:	4435      	add	r5, r6
 8004120:	f7ff fd40 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8004124:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004128:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800412c:	6866      	ldr	r6, [r4, #4]
 800412e:	0076      	lsls	r6, r6, #1
 8004130:	fbb0 f6f6 	udiv	r6, r0, r6
 8004134:	f7ff fd36 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8004138:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800413c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004140:	6863      	ldr	r3, [r4, #4]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	fbb0 f3f3 	udiv	r3, r0, r3
 8004148:	fba7 2303 	umull	r2, r3, r7, r3
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	fb09 6913 	mls	r9, r9, r3, r6
 8004152:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8004156:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800415a:	fba7 3709 	umull	r3, r7, r7, r9
 800415e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8004162:	442f      	add	r7, r5
 8004164:	f8c8 7008 	str.w	r7, [r8, #8]
 8004168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800416c:	f7ff fd2a 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 8004170:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004174:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004178:	6865      	ldr	r5, [r4, #4]
 800417a:	006d      	lsls	r5, r5, #1
 800417c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004180:	4f54      	ldr	r7, [pc, #336]	; (80042d4 <UART_SetConfig+0x340>)
 8004182:	fba7 3505 	umull	r3, r5, r7, r5
 8004186:	096d      	lsrs	r5, r5, #5
 8004188:	012e      	lsls	r6, r5, #4
 800418a:	f7ff fd1b 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 800418e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004192:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004196:	6865      	ldr	r5, [r4, #4]
 8004198:	006d      	lsls	r5, r5, #1
 800419a:	fbb0 faf5 	udiv	sl, r0, r5
 800419e:	f7ff fd11 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 80041a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041aa:	6865      	ldr	r5, [r4, #4]
 80041ac:	006d      	lsls	r5, r5, #1
 80041ae:	fbb0 f5f5 	udiv	r5, r0, r5
 80041b2:	fba7 3505 	umull	r3, r5, r7, r5
 80041b6:	096d      	lsrs	r5, r5, #5
 80041b8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80041bc:	fb09 a515 	mls	r5, r9, r5, sl
 80041c0:	00ed      	lsls	r5, r5, #3
 80041c2:	3532      	adds	r5, #50	; 0x32
 80041c4:	fba7 3505 	umull	r3, r5, r7, r5
 80041c8:	096d      	lsrs	r5, r5, #5
 80041ca:	006d      	lsls	r5, r5, #1
 80041cc:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80041d0:	4435      	add	r5, r6
 80041d2:	f7ff fcf7 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 80041d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041de:	6866      	ldr	r6, [r4, #4]
 80041e0:	0076      	lsls	r6, r6, #1
 80041e2:	fbb0 f6f6 	udiv	r6, r0, r6
 80041e6:	f7ff fced 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 80041ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041f2:	6863      	ldr	r3, [r4, #4]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041fa:	fba7 2303 	umull	r2, r3, r7, r3
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	fb09 6913 	mls	r9, r9, r3, r6
 8004204:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8004208:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800420c:	fba7 3709 	umull	r3, r7, r7, r9
 8004210:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8004214:	442f      	add	r7, r5
 8004216:	f8c8 7008 	str.w	r7, [r8, #8]
 800421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800421e:	f7ff fcd1 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 8004222:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004226:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800422a:	6865      	ldr	r5, [r4, #4]
 800422c:	00ad      	lsls	r5, r5, #2
 800422e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004232:	4f28      	ldr	r7, [pc, #160]	; (80042d4 <UART_SetConfig+0x340>)
 8004234:	fba7 3505 	umull	r3, r5, r7, r5
 8004238:	096d      	lsrs	r5, r5, #5
 800423a:	012e      	lsls	r6, r5, #4
 800423c:	f7ff fcc2 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 8004240:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004244:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004248:	6865      	ldr	r5, [r4, #4]
 800424a:	00ad      	lsls	r5, r5, #2
 800424c:	fbb0 faf5 	udiv	sl, r0, r5
 8004250:	f7ff fcb8 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 8004254:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004258:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800425c:	6865      	ldr	r5, [r4, #4]
 800425e:	00ad      	lsls	r5, r5, #2
 8004260:	fbb0 f5f5 	udiv	r5, r0, r5
 8004264:	fba7 3505 	umull	r3, r5, r7, r5
 8004268:	096d      	lsrs	r5, r5, #5
 800426a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800426e:	fb09 a515 	mls	r5, r9, r5, sl
 8004272:	012d      	lsls	r5, r5, #4
 8004274:	3532      	adds	r5, #50	; 0x32
 8004276:	fba7 3505 	umull	r3, r5, r7, r5
 800427a:	096d      	lsrs	r5, r5, #5
 800427c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8004280:	4435      	add	r5, r6
 8004282:	f7ff fc9f 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 8004286:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800428a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800428e:	6866      	ldr	r6, [r4, #4]
 8004290:	00b6      	lsls	r6, r6, #2
 8004292:	fbb0 f6f6 	udiv	r6, r0, r6
 8004296:	f7ff fc95 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 800429a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800429e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80042a2:	6863      	ldr	r3, [r4, #4]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042aa:	fba7 2303 	umull	r2, r3, r7, r3
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	fb09 6913 	mls	r9, r9, r3, r6
 80042b4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80042b8:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80042bc:	fba7 3709 	umull	r3, r7, r7, r9
 80042c0:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80042c4:	442f      	add	r7, r5
 80042c6:	f8c8 7008 	str.w	r7, [r8, #8]
 80042ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ce:	bf00      	nop
 80042d0:	40011000 	.word	0x40011000
 80042d4:	51eb851f 	.word	0x51eb851f

080042d8 <UART_WaitOnFlagUntilTimeout>:
{
 80042d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042dc:	4605      	mov	r5, r0
 80042de:	460f      	mov	r7, r1
 80042e0:	4616      	mov	r6, r2
 80042e2:	4698      	mov	r8, r3
 80042e4:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80042e6:	682b      	ldr	r3, [r5, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	ea37 0303 	bics.w	r3, r7, r3
 80042ee:	bf0c      	ite	eq
 80042f0:	2301      	moveq	r3, #1
 80042f2:	2300      	movne	r3, #0
 80042f4:	42b3      	cmp	r3, r6
 80042f6:	d11e      	bne.n	8004336 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80042f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80042fc:	d0f3      	beq.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80042fe:	b12c      	cbz	r4, 800430c <UART_WaitOnFlagUntilTimeout+0x34>
 8004300:	f7fe fcd8 	bl	8002cb4 <HAL_GetTick>
 8004304:	eba0 0008 	sub.w	r0, r0, r8
 8004308:	4284      	cmp	r4, r0
 800430a:	d2ec      	bcs.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800430c:	682a      	ldr	r2, [r5, #0]
 800430e:	68d3      	ldr	r3, [r2, #12]
 8004310:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004314:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004316:	682a      	ldr	r2, [r5, #0]
 8004318:	6953      	ldr	r3, [r2, #20]
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004320:	2320      	movs	r3, #32
 8004322:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004326:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800432a:	2300      	movs	r3, #0
 800432c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8004330:	2003      	movs	r0, #3
 8004332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8004336:	2000      	movs	r0, #0
}
 8004338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800433c <HAL_UART_Init>:
  if(huart == NULL)
 800433c:	b358      	cbz	r0, 8004396 <HAL_UART_Init+0x5a>
{
 800433e:	b510      	push	{r4, lr}
 8004340:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8004342:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004346:	b30b      	cbz	r3, 800438c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004348:	2324      	movs	r3, #36	; 0x24
 800434a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800434e:	6822      	ldr	r2, [r4, #0]
 8004350:	68d3      	ldr	r3, [r2, #12]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004358:	4620      	mov	r0, r4
 800435a:	f7ff fe1b 	bl	8003f94 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800435e:	6822      	ldr	r2, [r4, #0]
 8004360:	6913      	ldr	r3, [r2, #16]
 8004362:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004366:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004368:	6822      	ldr	r2, [r4, #0]
 800436a:	6953      	ldr	r3, [r2, #20]
 800436c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004370:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	68d3      	ldr	r3, [r2, #12]
 8004376:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800437a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437c:	2000      	movs	r0, #0
 800437e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004380:	2320      	movs	r3, #32
 8004382:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8004386:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800438a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800438c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004390:	f7fd fe72 	bl	8002078 <HAL_UART_MspInit>
 8004394:	e7d8      	b.n	8004348 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004396:	2001      	movs	r0, #1
 8004398:	4770      	bx	lr

0800439a <HAL_UART_Transmit>:
{
 800439a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80043a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d004      	beq.n	80043b6 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	b002      	add	sp, #8
 80043b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043b6:	4604      	mov	r4, r0
 80043b8:	460d      	mov	r5, r1
 80043ba:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 80043bc:	2900      	cmp	r1, #0
 80043be:	d055      	beq.n	800446c <HAL_UART_Transmit+0xd2>
 80043c0:	2a00      	cmp	r2, #0
 80043c2:	d055      	beq.n	8004470 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 80043c4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_UART_Transmit+0x36>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e7ee      	b.n	80043ae <HAL_UART_Transmit+0x14>
 80043d0:	2301      	movs	r3, #1
 80043d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043da:	2321      	movs	r3, #33	; 0x21
 80043dc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80043e0:	f7fe fc68 	bl	8002cb4 <HAL_GetTick>
 80043e4:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80043e6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80043ea:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80043ee:	e010      	b.n	8004412 <HAL_UART_Transmit+0x78>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043f0:	9600      	str	r6, [sp, #0]
 80043f2:	463b      	mov	r3, r7
 80043f4:	2200      	movs	r2, #0
 80043f6:	2180      	movs	r1, #128	; 0x80
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff ff6d 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d138      	bne.n	8004474 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004402:	6822      	ldr	r2, [r4, #0]
 8004404:	882b      	ldrh	r3, [r5, #0]
 8004406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800440c:	6923      	ldr	r3, [r4, #16]
 800440e:	b9cb      	cbnz	r3, 8004444 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8004410:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 8004412:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004414:	b29b      	uxth	r3, r3
 8004416:	b1bb      	cbz	r3, 8004448 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 8004418:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29b      	uxth	r3, r3
 8004420:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004422:	68a3      	ldr	r3, [r4, #8]
 8004424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004428:	d0e2      	beq.n	80043f0 <HAL_UART_Transmit+0x56>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800442a:	9600      	str	r6, [sp, #0]
 800442c:	463b      	mov	r3, r7
 800442e:	2200      	movs	r2, #0
 8004430:	2180      	movs	r1, #128	; 0x80
 8004432:	4620      	mov	r0, r4
 8004434:	f7ff ff50 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 8004438:	b9f0      	cbnz	r0, 8004478 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	782a      	ldrb	r2, [r5, #0]
 800443e:	605a      	str	r2, [r3, #4]
 8004440:	3501      	adds	r5, #1
 8004442:	e7e6      	b.n	8004412 <HAL_UART_Transmit+0x78>
          pData +=1U;
 8004444:	3501      	adds	r5, #1
 8004446:	e7e4      	b.n	8004412 <HAL_UART_Transmit+0x78>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004448:	9600      	str	r6, [sp, #0]
 800444a:	463b      	mov	r3, r7
 800444c:	2200      	movs	r2, #0
 800444e:	2140      	movs	r1, #64	; 0x40
 8004450:	4620      	mov	r0, r4
 8004452:	f7ff ff41 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	b108      	cbz	r0, 800445e <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e7a7      	b.n	80043ae <HAL_UART_Transmit+0x14>
      huart->gState = HAL_UART_STATE_READY;
 800445e:	2220      	movs	r2, #32
 8004460:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8004464:	2200      	movs	r2, #0
 8004466:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 800446a:	e7a0      	b.n	80043ae <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e79e      	b.n	80043ae <HAL_UART_Transmit+0x14>
 8004470:	2301      	movs	r3, #1
 8004472:	e79c      	b.n	80043ae <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e79a      	b.n	80043ae <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e798      	b.n	80043ae <HAL_UART_Transmit+0x14>

0800447c <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 800447c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b20      	cmp	r3, #32
 8004484:	d001      	beq.n	800448a <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;   
 8004486:	2002      	movs	r0, #2
 8004488:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0)) 
 800448a:	b1a9      	cbz	r1, 80044b8 <HAL_UART_Transmit_IT+0x3c>
 800448c:	b1b2      	cbz	r2, 80044bc <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 800448e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004492:	2b01      	cmp	r3, #1
 8004494:	d014      	beq.n	80044c0 <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8004496:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8004498:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800449a:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449c:	2300      	movs	r3, #0
 800449e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044a0:	2221      	movs	r2, #33	; 0x21
 80044a2:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80044a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044aa:	6801      	ldr	r1, [r0, #0]
 80044ac:	68ca      	ldr	r2, [r1, #12]
 80044ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044b2:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80044b4:	4618      	mov	r0, r3
 80044b6:	4770      	bx	lr
      return HAL_ERROR;
 80044b8:	2001      	movs	r0, #1
 80044ba:	4770      	bx	lr
 80044bc:	2001      	movs	r0, #1
 80044be:	4770      	bx	lr
    __HAL_LOCK(huart);
 80044c0:	2002      	movs	r0, #2
}
 80044c2:	4770      	bx	lr

080044c4 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80044c4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d001      	beq.n	80044d2 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY; 
 80044ce:	2002      	movs	r0, #2
 80044d0:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0)) 
 80044d2:	b1d1      	cbz	r1, 800450a <HAL_UART_Receive_IT+0x46>
 80044d4:	b1da      	cbz	r2, 800450e <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 80044d6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d019      	beq.n	8004512 <HAL_UART_Receive_IT+0x4e>
    huart->pRxBuffPtr = pData;
 80044de:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80044e0:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 80044e2:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044e8:	2222      	movs	r2, #34	; 0x22
 80044ea:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 80044ee:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	6801      	ldr	r1, [r0, #0]
 80044f4:	694a      	ldr	r2, [r1, #20]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80044fc:	6801      	ldr	r1, [r0, #0]
 80044fe:	68ca      	ldr	r2, [r1, #12]
 8004500:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004504:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8004506:	4618      	mov	r0, r3
 8004508:	4770      	bx	lr
      return HAL_ERROR;
 800450a:	2001      	movs	r0, #1
 800450c:	4770      	bx	lr
 800450e:	2001      	movs	r0, #1
 8004510:	4770      	bx	lr
    __HAL_LOCK(huart);
 8004512:	2002      	movs	r0, #2
}
 8004514:	4770      	bx	lr

08004516 <UART_EndTransmit_IT>:
{
 8004516:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004518:	6801      	ldr	r1, [r0, #0]
 800451a:	68cb      	ldr	r3, [r1, #12]
 800451c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004520:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004522:	2320      	movs	r3, #32
 8004524:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004528:	f7fd fecc 	bl	80022c4 <HAL_UART_TxCpltCallback>
}
 800452c:	2000      	movs	r0, #0
 800452e:	bd08      	pop	{r3, pc}

08004530 <UART_Receive_IT>:
{
 8004530:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004532:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b22      	cmp	r3, #34	; 0x22
 800453a:	d001      	beq.n	8004540 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 800453c:	2002      	movs	r0, #2
 800453e:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004540:	6883      	ldr	r3, [r0, #8]
 8004542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004546:	d00f      	beq.n	8004568 <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004548:	6903      	ldr	r3, [r0, #16]
 800454a:	bb0b      	cbnz	r3, 8004590 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800454c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	6282      	str	r2, [r0, #40]	; 0x28
 8004552:	6802      	ldr	r2, [r0, #0]
 8004554:	6852      	ldr	r2, [r2, #4]
 8004556:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8004558:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29b      	uxth	r3, r3
 8004560:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004562:	b1f3      	cbz	r3, 80045a2 <UART_Receive_IT+0x72>
    return HAL_OK;
 8004564:	2000      	movs	r0, #0
}
 8004566:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8004568:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 800456a:	6903      	ldr	r3, [r0, #16]
 800456c:	b943      	cbnz	r3, 8004580 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800456e:	6803      	ldr	r3, [r0, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004576:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8004578:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800457a:	3302      	adds	r3, #2
 800457c:	6283      	str	r3, [r0, #40]	; 0x28
 800457e:	e7eb      	b.n	8004558 <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004580:	6803      	ldr	r3, [r0, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8004588:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800458a:	3301      	adds	r3, #1
 800458c:	6283      	str	r3, [r0, #40]	; 0x28
 800458e:	e7e3      	b.n	8004558 <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004590:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004592:	1c53      	adds	r3, r2, #1
 8004594:	6283      	str	r3, [r0, #40]	; 0x28
 8004596:	6803      	ldr	r3, [r0, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800459e:	7013      	strb	r3, [r2, #0]
 80045a0:	e7da      	b.n	8004558 <UART_Receive_IT+0x28>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a2:	6802      	ldr	r2, [r0, #0]
 80045a4:	68d3      	ldr	r3, [r2, #12]
 80045a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045aa:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ac:	6802      	ldr	r2, [r0, #0]
 80045ae:	6953      	ldr	r3, [r2, #20]
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80045b6:	2320      	movs	r3, #32
 80045b8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80045bc:	f7fd fe8c 	bl	80022d8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80045c0:	2000      	movs	r0, #0
 80045c2:	bd08      	pop	{r3, pc}

080045c4 <HAL_UART_ErrorCallback>:
{
 80045c4:	4770      	bx	lr
	...

080045c8 <HAL_UART_IRQHandler>:
{
 80045c8:	b510      	push	{r4, lr}
 80045ca:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045cc:	6802      	ldr	r2, [r0, #0]
 80045ce:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045d0:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045d2:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 80045d4:	f013 000f 	ands.w	r0, r3, #15
 80045d8:	d105      	bne.n	80045e6 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045da:	f013 0f20 	tst.w	r3, #32
 80045de:	d002      	beq.n	80045e6 <HAL_UART_IRQHandler+0x1e>
 80045e0:	f011 0f20 	tst.w	r1, #32
 80045e4:	d153      	bne.n	800468e <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d067      	beq.n	80046ba <HAL_UART_IRQHandler+0xf2>
 80045ea:	f012 0201 	ands.w	r2, r2, #1
 80045ee:	d102      	bne.n	80045f6 <HAL_UART_IRQHandler+0x2e>
 80045f0:	f411 7f90 	tst.w	r1, #288	; 0x120
 80045f4:	d061      	beq.n	80046ba <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045f6:	f013 0f01 	tst.w	r3, #1
 80045fa:	d006      	beq.n	800460a <HAL_UART_IRQHandler+0x42>
 80045fc:	f411 7f80 	tst.w	r1, #256	; 0x100
 8004600:	d003      	beq.n	800460a <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004602:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004604:	f040 0001 	orr.w	r0, r0, #1
 8004608:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800460a:	f013 0f04 	tst.w	r3, #4
 800460e:	d004      	beq.n	800461a <HAL_UART_IRQHandler+0x52>
 8004610:	b11a      	cbz	r2, 800461a <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004612:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004614:	f040 0002 	orr.w	r0, r0, #2
 8004618:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800461a:	f013 0f02 	tst.w	r3, #2
 800461e:	d004      	beq.n	800462a <HAL_UART_IRQHandler+0x62>
 8004620:	b11a      	cbz	r2, 800462a <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004622:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004624:	f040 0004 	orr.w	r0, r0, #4
 8004628:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800462a:	f013 0f08 	tst.w	r3, #8
 800462e:	d004      	beq.n	800463a <HAL_UART_IRQHandler+0x72>
 8004630:	b11a      	cbz	r2, 800463a <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004632:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004634:	f042 0208 	orr.w	r2, r2, #8
 8004638:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800463a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800463c:	2a00      	cmp	r2, #0
 800463e:	d048      	beq.n	80046d2 <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004640:	f013 0f20 	tst.w	r3, #32
 8004644:	d002      	beq.n	800464c <HAL_UART_IRQHandler+0x84>
 8004646:	f011 0f20 	tst.w	r1, #32
 800464a:	d124      	bne.n	8004696 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004654:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004656:	f012 0f08 	tst.w	r2, #8
 800465a:	d100      	bne.n	800465e <HAL_UART_IRQHandler+0x96>
 800465c:	b33b      	cbz	r3, 80046ae <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 800465e:	4620      	mov	r0, r4
 8004660:	f7ff fc55 	bl	8003f0e <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	f012 0f40 	tst.w	r2, #64	; 0x40
 800466c:	d01b      	beq.n	80046a6 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	695a      	ldr	r2, [r3, #20]
 8004670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004674:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8004676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004678:	b18b      	cbz	r3, 800469e <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800467a:	4a1a      	ldr	r2, [pc, #104]	; (80046e4 <HAL_UART_IRQHandler+0x11c>)
 800467c:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800467e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004680:	f7fe fd00 	bl	8003084 <HAL_DMA_Abort_IT>
 8004684:	b328      	cbz	r0, 80046d2 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004686:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004688:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800468a:	4798      	blx	r3
 800468c:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 800468e:	4620      	mov	r0, r4
 8004690:	f7ff ff4e 	bl	8004530 <UART_Receive_IT>
      return;
 8004694:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8004696:	4620      	mov	r0, r4
 8004698:	f7ff ff4a 	bl	8004530 <UART_Receive_IT>
 800469c:	e7d6      	b.n	800464c <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 800469e:	4620      	mov	r0, r4
 80046a0:	f7ff ff90 	bl	80045c4 <HAL_UART_ErrorCallback>
 80046a4:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 80046a6:	4620      	mov	r0, r4
 80046a8:	f7ff ff8c 	bl	80045c4 <HAL_UART_ErrorCallback>
 80046ac:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 80046ae:	4620      	mov	r0, r4
 80046b0:	f7ff ff88 	bl	80045c4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80046b8:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046be:	d002      	beq.n	80046c6 <HAL_UART_IRQHandler+0xfe>
 80046c0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80046c4:	d106      	bne.n	80046d4 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80046ca:	d002      	beq.n	80046d2 <HAL_UART_IRQHandler+0x10a>
 80046cc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80046d0:	d104      	bne.n	80046dc <HAL_UART_IRQHandler+0x114>
 80046d2:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80046d4:	4620      	mov	r0, r4
 80046d6:	f7ff fc28 	bl	8003f2a <UART_Transmit_IT>
    return;
 80046da:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 80046dc:	4620      	mov	r0, r4
 80046de:	f7ff ff1a 	bl	8004516 <UART_EndTransmit_IT>
    return;
 80046e2:	e7f6      	b.n	80046d2 <HAL_UART_IRQHandler+0x10a>
 80046e4:	080046e9 	.word	0x080046e9

080046e8 <UART_DMAAbortOnError>:
{
 80046e8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80046f0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80046f2:	f7ff ff67 	bl	80045c4 <HAL_UART_ErrorCallback>
 80046f6:	bd08      	pop	{r3, pc}

080046f8 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <SDMMC_GetCmdError+0x34>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <SDMMC_GetCmdError+0x38>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	0a5a      	lsrs	r2, r3, #9
 8004704:	f241 3388 	movw	r3, #5000	; 0x1388
 8004708:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800470c:	1e5a      	subs	r2, r3, #1
 800470e:	b14b      	cbz	r3, 8004724 <SDMMC_GetCmdError+0x2c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004710:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004712:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004714:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004718:	d0f8      	beq.n	800470c <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800471a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800471e:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004720:	2000      	movs	r0, #0
 8004722:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004724:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	200000d8 	.word	0x200000d8
 8004730:	10624dd3 	.word	0x10624dd3

08004734 <SDMMC_GetCmdResp7>:
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004734:	4b12      	ldr	r3, [pc, #72]	; (8004780 <SDMMC_GetCmdResp7+0x4c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a12      	ldr	r2, [pc, #72]	; (8004784 <SDMMC_GetCmdResp7+0x50>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	0a5a      	lsrs	r2, r3, #9
 8004740:	f241 3388 	movw	r3, #5000	; 0x1388
 8004744:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8004748:	1e5a      	subs	r2, r3, #1
 800474a:	b1a3      	cbz	r3, 8004776 <SDMMC_GetCmdResp7+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800474c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 800474e:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004750:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004754:	d0f8      	beq.n	8004748 <SDMMC_GetCmdResp7+0x14>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004756:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004758:	f013 0f04 	tst.w	r3, #4
 800475c:	d003      	beq.n	8004766 <SDMMC_GetCmdResp7+0x32>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800475e:	2340      	movs	r3, #64	; 0x40
 8004760:	6383      	str	r3, [r0, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004762:	2004      	movs	r0, #4
 8004764:	4770      	bx	lr
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004766:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004768:	f013 0f40 	tst.w	r3, #64	; 0x40
 800476c:	d006      	beq.n	800477c <SDMMC_GetCmdResp7+0x48>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800476e:	2340      	movs	r3, #64	; 0x40
 8004770:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004772:	2000      	movs	r0, #0
 8004774:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004776:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800477a:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 800477c:	2000      	movs	r0, #0
  
}
 800477e:	4770      	bx	lr
 8004780:	200000d8 	.word	0x200000d8
 8004784:	10624dd3 	.word	0x10624dd3

08004788 <SDIO_Init>:
{
 8004788:	b084      	sub	sp, #16
 800478a:	b410      	push	{r4}
 800478c:	ac02      	add	r4, sp, #8
 800478e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
             Init.ClockBypass         |\
 8004792:	9a03      	ldr	r2, [sp, #12]
  tmpreg |= (Init.ClockEdge           |\
 8004794:	460b      	mov	r3, r1
 8004796:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8004798:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 800479a:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800479c:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 800479e:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 80047a0:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 80047a2:	4313      	orrs	r3, r2
             Init.ClockDiv
 80047a4:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 80047a6:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80047a8:	6842      	ldr	r2, [r0, #4]
 80047aa:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 80047ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80047b2:	4313      	orrs	r3, r2
 80047b4:	6043      	str	r3, [r0, #4]
}
 80047b6:	2000      	movs	r0, #0
 80047b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047bc:	b004      	add	sp, #16
 80047be:	4770      	bx	lr

080047c0 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80047c0:	2303      	movs	r3, #3
 80047c2:	6003      	str	r3, [r0, #0]
}
 80047c4:	2000      	movs	r0, #0
 80047c6:	4770      	bx	lr

080047c8 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 80047c8:	680b      	ldr	r3, [r1, #0]
 80047ca:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047cc:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 80047ce:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047d0:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 80047d2:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 80047d4:	4313      	orrs	r3, r2
                       Command->CPSM);
 80047d6:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 80047d8:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80047da:	68c2      	ldr	r2, [r0, #12]
 80047dc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80047e0:	f022 020f 	bic.w	r2, r2, #15
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60c3      	str	r3, [r0, #12]
}
 80047e8:	2000      	movs	r0, #0
 80047ea:	4770      	bx	lr

080047ec <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 80047ec:	6900      	ldr	r0, [r0, #16]
}
 80047ee:	b2c0      	uxtb	r0, r0
 80047f0:	4770      	bx	lr

080047f2 <SDIO_GetResponse>:
{
 80047f2:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80047f8:	3014      	adds	r0, #20
 80047fa:	4401      	add	r1, r0
 80047fc:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80047fe:	9b01      	ldr	r3, [sp, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
}  
 8004802:	b002      	add	sp, #8
 8004804:	4770      	bx	lr
	...

08004808 <SDMMC_GetCmdResp1>:
{
 8004808:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800480a:	4b52      	ldr	r3, [pc, #328]	; (8004954 <SDMMC_GetCmdResp1+0x14c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4c52      	ldr	r4, [pc, #328]	; (8004958 <SDMMC_GetCmdResp1+0x150>)
 8004810:	fba4 4303 	umull	r4, r3, r4, r3
 8004814:	0a5b      	lsrs	r3, r3, #9
 8004816:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 800481a:	1e53      	subs	r3, r2, #1
 800481c:	2a00      	cmp	r2, #0
 800481e:	d063      	beq.n	80048e8 <SDMMC_GetCmdResp1+0xe0>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004820:	6b44      	ldr	r4, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004822:	461a      	mov	r2, r3
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004824:	f014 0f45 	tst.w	r4, #69	; 0x45
 8004828:	d0f7      	beq.n	800481a <SDMMC_GetCmdResp1+0x12>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800482a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800482c:	f013 0f04 	tst.w	r3, #4
 8004830:	d003      	beq.n	800483a <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004832:	2304      	movs	r3, #4
 8004834:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004836:	4618      	mov	r0, r3
 8004838:	bd38      	pop	{r3, r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800483a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800483c:	f013 0f01 	tst.w	r3, #1
 8004840:	d003      	beq.n	800484a <SDMMC_GetCmdResp1+0x42>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004842:	2301      	movs	r3, #1
 8004844:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004846:	4618      	mov	r0, r3
 8004848:	bd38      	pop	{r3, r4, r5, pc}
 800484a:	460d      	mov	r5, r1
 800484c:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800484e:	f7ff ffcd 	bl	80047ec <SDIO_GetCommandResponse>
 8004852:	42a8      	cmp	r0, r5
 8004854:	d001      	beq.n	800485a <SDMMC_GetCmdResp1+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004856:	2001      	movs	r0, #1
 8004858:	bd38      	pop	{r3, r4, r5, pc}
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800485a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800485e:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004860:	2100      	movs	r1, #0
 8004862:	4620      	mov	r0, r4
 8004864:	f7ff ffc5 	bl	80047f2 <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004868:	4b3c      	ldr	r3, [pc, #240]	; (800495c <SDMMC_GetCmdResp1+0x154>)
 800486a:	4003      	ands	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d03e      	beq.n	80048ee <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004870:	2800      	cmp	r0, #0
 8004872:	db3e      	blt.n	80048f2 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004874:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004878:	d001      	beq.n	800487e <SDMMC_GetCmdResp1+0x76>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800487a:	2040      	movs	r0, #64	; 0x40
 800487c:	bd38      	pop	{r3, r4, r5, pc}
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800487e:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8004882:	d001      	beq.n	8004888 <SDMMC_GetCmdResp1+0x80>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004884:	2080      	movs	r0, #128	; 0x80
 8004886:	bd38      	pop	{r3, r4, r5, pc}
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004888:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 800488c:	d134      	bne.n	80048f8 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800488e:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8004892:	d134      	bne.n	80048fe <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004894:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8004898:	d134      	bne.n	8004904 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800489a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800489e:	d134      	bne.n	800490a <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80048a0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80048a4:	d134      	bne.n	8004910 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80048a6:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80048aa:	d134      	bne.n	8004916 <SDMMC_GetCmdResp1+0x10e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80048ac:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80048b0:	d134      	bne.n	800491c <SDMMC_GetCmdResp1+0x114>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80048b2:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80048b6:	d134      	bne.n	8004922 <SDMMC_GetCmdResp1+0x11a>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80048b8:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80048bc:	d134      	bne.n	8004928 <SDMMC_GetCmdResp1+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80048be:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 80048c2:	d134      	bne.n	800492e <SDMMC_GetCmdResp1+0x126>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80048c4:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 80048c8:	d134      	bne.n	8004934 <SDMMC_GetCmdResp1+0x12c>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80048ca:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80048ce:	d134      	bne.n	800493a <SDMMC_GetCmdResp1+0x132>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80048d0:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80048d4:	d134      	bne.n	8004940 <SDMMC_GetCmdResp1+0x138>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80048d6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80048da:	d134      	bne.n	8004946 <SDMMC_GetCmdResp1+0x13e>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80048dc:	f010 0f08 	tst.w	r0, #8
 80048e0:	d034      	beq.n	800494c <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80048e2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
      return SDMMC_ERROR_TIMEOUT;
 80048e8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80048ec:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 80048ee:	2000      	movs	r0, #0
 80048f0:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80048f2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80048f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80048fc:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80048fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004902:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004904:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004908:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800490a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800490e:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004910:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004914:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004916:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800491a:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800491c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004920:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_CC_ERR;
 8004922:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004926:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004928:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800492c:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800492e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004932:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004934:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004938:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800493a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800493e:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004940:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004944:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ERASE_RESET;
 8004946:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800494a:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800494c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
}
 8004950:	bd38      	pop	{r3, r4, r5, pc}
 8004952:	bf00      	nop
 8004954:	200000d8 	.word	0x200000d8
 8004958:	10624dd3 	.word	0x10624dd3
 800495c:	fdffe008 	.word	0xfdffe008

08004960 <SDMMC_GetCmdResp6>:
{
 8004960:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004962:	4b25      	ldr	r3, [pc, #148]	; (80049f8 <SDMMC_GetCmdResp6+0x98>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4c25      	ldr	r4, [pc, #148]	; (80049fc <SDMMC_GetCmdResp6+0x9c>)
 8004968:	fba4 4303 	umull	r4, r3, r4, r3
 800496c:	0a5c      	lsrs	r4, r3, #9
 800496e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004972:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 8004976:	1e5c      	subs	r4, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d037      	beq.n	80049ec <SDMMC_GetCmdResp6+0x8c>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800497c:	6b45      	ldr	r5, [r0, #52]	; 0x34
    if (count-- == 0U)
 800497e:	4623      	mov	r3, r4
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004980:	f015 0f45 	tst.w	r5, #69	; 0x45
 8004984:	d0f7      	beq.n	8004976 <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004986:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004988:	f013 0f04 	tst.w	r3, #4
 800498c:	d003      	beq.n	8004996 <SDMMC_GetCmdResp6+0x36>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800498e:	2304      	movs	r3, #4
 8004990:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004992:	4618      	mov	r0, r3
 8004994:	bd70      	pop	{r4, r5, r6, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004996:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004998:	f013 0f01 	tst.w	r3, #1
 800499c:	d003      	beq.n	80049a6 <SDMMC_GetCmdResp6+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800499e:	2301      	movs	r3, #1
 80049a0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049a2:	4618      	mov	r0, r3
 80049a4:	bd70      	pop	{r4, r5, r6, pc}
 80049a6:	4616      	mov	r6, r2
 80049a8:	460d      	mov	r5, r1
 80049aa:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80049ac:	f7ff ff1e 	bl	80047ec <SDIO_GetCommandResponse>
 80049b0:	42a8      	cmp	r0, r5
 80049b2:	d001      	beq.n	80049b8 <SDMMC_GetCmdResp6+0x58>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049b4:	2001      	movs	r0, #1
 80049b6:	bd70      	pop	{r4, r5, r6, pc}
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80049b8:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80049bc:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80049be:	2100      	movs	r1, #0
 80049c0:	4620      	mov	r0, r4
 80049c2:	f7ff ff16 	bl	80047f2 <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80049c6:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 80049ca:	d005      	beq.n	80049d8 <SDMMC_GetCmdResp6+0x78>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80049cc:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80049d0:	d006      	beq.n	80049e0 <SDMMC_GetCmdResp6+0x80>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80049d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80049d6:	bd70      	pop	{r4, r5, r6, pc}
    *pRCA = (uint16_t) (response_r1 >> 16);
 80049d8:	0c00      	lsrs	r0, r0, #16
 80049da:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 80049dc:	2000      	movs	r0, #0
 80049de:	bd70      	pop	{r4, r5, r6, pc}
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80049e0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80049e4:	d005      	beq.n	80049f2 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80049e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
      return SDMMC_ERROR_TIMEOUT;
 80049ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80049f0:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80049f2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
}
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	200000d8 	.word	0x200000d8
 80049fc:	10624dd3 	.word	0x10624dd3

08004a00 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8004a00:	680b      	ldr	r3, [r1, #0]
 8004a02:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8004a04:	684b      	ldr	r3, [r1, #4]
 8004a06:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a08:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8004a0a:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a0c:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8004a0e:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8004a10:	4313      	orrs	r3, r2
                       Data->DPSM);
 8004a12:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8004a14:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004a16:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004a18:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8004a20:	2000      	movs	r0, #0
 8004a22:	4770      	bx	lr

08004a24 <SDMMC_CmdSelDesel>:
{
 8004a24:	b530      	push	{r4, r5, lr}
 8004a26:	b087      	sub	sp, #28
 8004a28:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004a2a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004a2c:	2407      	movs	r4, #7
 8004a2e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a30:	2340      	movs	r3, #64	; 0x40
 8004a32:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a34:	2300      	movs	r3, #0
 8004a36:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a3c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a3e:	a901      	add	r1, sp, #4
 8004a40:	f7ff fec2 	bl	80047c8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a48:	4621      	mov	r1, r4
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f7ff fedc 	bl	8004808 <SDMMC_GetCmdResp1>
}
 8004a50:	b007      	add	sp, #28
 8004a52:	bd30      	pop	{r4, r5, pc}

08004a54 <SDMMC_CmdGoIdleState>:
{
 8004a54:	b510      	push	{r4, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004a5e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004a60:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a62:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a68:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a6a:	a901      	add	r1, sp, #4
 8004a6c:	f7ff feac 	bl	80047c8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004a70:	4620      	mov	r0, r4
 8004a72:	f7ff fe41 	bl	80046f8 <SDMMC_GetCmdError>
}
 8004a76:	b006      	add	sp, #24
 8004a78:	bd10      	pop	{r4, pc}

08004a7a <SDMMC_CmdOperCond>:
{
 8004a7a:	b510      	push	{r4, lr}
 8004a7c:	b086      	sub	sp, #24
 8004a7e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004a80:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004a84:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004a86:	2308      	movs	r3, #8
 8004a88:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a8a:	2340      	movs	r3, #64	; 0x40
 8004a8c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a96:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a98:	a901      	add	r1, sp, #4
 8004a9a:	f7ff fe95 	bl	80047c8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7ff fe48 	bl	8004734 <SDMMC_GetCmdResp7>
}
 8004aa4:	b006      	add	sp, #24
 8004aa6:	bd10      	pop	{r4, pc}

08004aa8 <SDMMC_CmdSetRelAdd>:
{
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	4605      	mov	r5, r0
 8004aae:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004ab4:	2403      	movs	r4, #3
 8004ab6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ab8:	2240      	movs	r2, #64	; 0x40
 8004aba:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004abc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac2:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ac4:	a901      	add	r1, sp, #4
 8004ac6:	f7ff fe7f 	bl	80047c8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004aca:	4632      	mov	r2, r6
 8004acc:	4621      	mov	r1, r4
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f7ff ff46 	bl	8004960 <SDMMC_GetCmdResp6>
}
 8004ad4:	b006      	add	sp, #24
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}

08004ad8 <wf200_init_chip>:
  * \brief Init wf200 chip
  *
  * \return SL_SUCCESS if the initialization is successful, SL_ERROR otherwise
  */
static sl_status_t wf200_init_chip( void )
{
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	b082      	sub	sp, #8
    sl_status_t status;
    uint32_t    value32;
    uint16_t    value16;

    status = wf200_reg_read_32( WF200_CONFIG_REG_ID, &value32);
 8004adc:	a901      	add	r1, sp, #4
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f000 fca9 	bl	8005436 <wf200_reg_read_32>
    ERROR_CHECK(status);
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	b110      	cbz	r0, 8004aee <wf200_init_chip+0x16>
        ERROR_CHECK( status );
    }

error_handler:
    return status;
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	b002      	add	sp, #8
 8004aec:	bd10      	pop	{r4, pc}
    status = wf200_reg_write_32( WF200_TSET_GEN_R_W_REG_ID, 0x07208775);
 8004aee:	4930      	ldr	r1, [pc, #192]	; (8004bb0 <wf200_init_chip+0xd8>)
 8004af0:	2006      	movs	r0, #6
 8004af2:	f000 fcb9 	bl	8005468 <wf200_reg_write_32>
    ERROR_CHECK(status);
 8004af6:	4603      	mov	r3, r0
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d1f5      	bne.n	8004ae8 <wf200_init_chip+0x10>
    status = wf200_reg_write_32( WF200_TSET_GEN_R_W_REG_ID, 0x082ec020);
 8004afc:	492d      	ldr	r1, [pc, #180]	; (8004bb4 <wf200_init_chip+0xdc>)
 8004afe:	2006      	movs	r0, #6
 8004b00:	f000 fcb2 	bl	8005468 <wf200_reg_write_32>
    ERROR_CHECK(status);
 8004b04:	4603      	mov	r3, r0
 8004b06:	2800      	cmp	r0, #0
 8004b08:	d1ee      	bne.n	8004ae8 <wf200_init_chip+0x10>
    status = wf200_reg_write_32( WF200_TSET_GEN_R_W_REG_ID, 0x093c3c3c);
 8004b0a:	492b      	ldr	r1, [pc, #172]	; (8004bb8 <wf200_init_chip+0xe0>)
 8004b0c:	2006      	movs	r0, #6
 8004b0e:	f000 fcab 	bl	8005468 <wf200_reg_write_32>
    ERROR_CHECK(status);
 8004b12:	4603      	mov	r3, r0
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d1e7      	bne.n	8004ae8 <wf200_init_chip+0x10>
    status = wf200_reg_write_32( WF200_TSET_GEN_R_W_REG_ID, 0x0b322c44);
 8004b18:	4928      	ldr	r1, [pc, #160]	; (8004bbc <wf200_init_chip+0xe4>)
 8004b1a:	2006      	movs	r0, #6
 8004b1c:	f000 fca4 	bl	8005468 <wf200_reg_write_32>
    ERROR_CHECK(status);
 8004b20:	4603      	mov	r3, r0
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d1e0      	bne.n	8004ae8 <wf200_init_chip+0x10>
    status = wf200_reg_write_32( WF200_TSET_GEN_R_W_REG_ID, 0x0ca06497);
 8004b26:	4926      	ldr	r1, [pc, #152]	; (8004bc0 <wf200_init_chip+0xe8>)
 8004b28:	2006      	movs	r0, #6
 8004b2a:	f000 fc9d 	bl	8005468 <wf200_reg_write_32>
    ERROR_CHECK(status);
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d1d9      	bne.n	8004ae8 <wf200_init_chip+0x10>
    status = wf200_reg_read_16( WF200_CONTROL_REG_ID, &value16);
 8004b34:	f10d 0102 	add.w	r1, sp, #2
 8004b38:	2001      	movs	r0, #1
 8004b3a:	f000 fc57 	bl	80053ec <wf200_reg_read_16>
    ERROR_CHECK(status);
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d1d1      	bne.n	8004ae8 <wf200_init_chip+0x10>
    value16 |= WF200_CONT_WUP_BIT;
 8004b44:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004b48:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8004b4c:	b289      	uxth	r1, r1
 8004b4e:	f8ad 1002 	strh.w	r1, [sp, #2]
    status = wf200_reg_write_16( WF200_CONTROL_REG_ID, value16);
 8004b52:	2001      	movs	r0, #1
 8004b54:	f000 fc5b 	bl	800540e <wf200_reg_write_16>
    ERROR_CHECK(status);
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d1c4      	bne.n	8004ae8 <wf200_init_chip+0x10>
 8004b5e:	2400      	movs	r4, #0
    for ( uint32_t i = 0; i < 200; ++i)
 8004b60:	2cc7      	cmp	r4, #199	; 0xc7
 8004b62:	d811      	bhi.n	8004b88 <wf200_init_chip+0xb0>
        status = wf200_reg_read_16( WF200_CONTROL_REG_ID, &value16 );
 8004b64:	f10d 0102 	add.w	r1, sp, #2
 8004b68:	2001      	movs	r0, #1
 8004b6a:	f000 fc3f 	bl	80053ec <wf200_reg_read_16>
        ERROR_CHECK( status );
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d1b9      	bne.n	8004ae8 <wf200_init_chip+0x10>
        if ( ( value16 & WF200_CONT_RDY_BIT ) == WF200_CONT_RDY_BIT )
 8004b74:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004b78:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004b7c:	d104      	bne.n	8004b88 <wf200_init_chip+0xb0>
          wf200_host_wait( 1 );
 8004b7e:	2001      	movs	r0, #1
 8004b80:	f7fd fc3e 	bl	8002400 <wf200_host_wait>
    for ( uint32_t i = 0; i < 200; ++i)
 8004b84:	3401      	adds	r4, #1
 8004b86:	e7eb      	b.n	8004b60 <wf200_init_chip+0x88>
    if ( ( value16 & WF200_CONT_RDY_BIT ) != WF200_CONT_RDY_BIT )
 8004b88:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004b8c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004b90:	d101      	bne.n	8004b96 <wf200_init_chip+0xbe>
        status = SL_TIMEOUT;
 8004b92:	2302      	movs	r3, #2
 8004b94:	e7a8      	b.n	8004ae8 <wf200_init_chip+0x10>
    status = wf200_reg_read_32( WF200_CONFIG_REG_ID, &value32 );
 8004b96:	a901      	add	r1, sp, #4
 8004b98:	2000      	movs	r0, #0
 8004b9a:	f000 fc4c 	bl	8005436 <wf200_reg_read_32>
    ERROR_CHECK( status );
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d1a1      	bne.n	8004ae8 <wf200_init_chip+0x10>
    if ( ( value32 & WF200_CONFIG_ACCESS_MODE_BIT ) == 0 )
 8004ba4:	9a01      	ldr	r2, [sp, #4]
 8004ba6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004baa:	d19d      	bne.n	8004ae8 <wf200_init_chip+0x10>
        status = SL_ERROR;
 8004bac:	2304      	movs	r3, #4
    return status;
 8004bae:	e79b      	b.n	8004ae8 <wf200_init_chip+0x10>
 8004bb0:	07208775 	.word	0x07208775
 8004bb4:	082ec020 	.word	0x082ec020
 8004bb8:	093c3c3c 	.word	0x093c3c3c
 8004bbc:	0b322c44 	.word	0x0b322c44
 8004bc0:	0ca06497 	.word	0x0ca06497

08004bc4 <poll_for_value>:
 * \param polled_value: waiting for the value to be equal to polled_value
 * \param max_retries: Number of polling to be done before returning SL_TIMEOUT
 * \return SL_SUCCESS if the value is received correctly, SL_ERROR if not able to read from the WF200, SL_TIMEOUT if the value is not found in time
 */
static sl_status_t poll_for_value( uint32_t address, uint32_t polled_value, uint32_t max_retries )
{
 8004bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	4607      	mov	r7, r0
 8004bca:	460e      	mov	r6, r1
 8004bcc:	4614      	mov	r4, r2
    uint32_t    value;
    sl_status_t status = SL_SUCCESS;
 8004bce:	2500      	movs	r5, #0

    for ( ; max_retries > 0; max_retries-- )
 8004bd0:	b16c      	cbz	r4, 8004bee <poll_for_value+0x2a>
    {
        status = wf200_apb_read_32( address, &value );
 8004bd2:	a901      	add	r1, sp, #4
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	f000 fc91 	bl	80054fc <wf200_apb_read_32>
        ERROR_CHECK( status );
 8004bda:	4605      	mov	r5, r0
 8004bdc:	b958      	cbnz	r0, 8004bf6 <poll_for_value+0x32>
        if ( value == polled_value )
 8004bde:	9b01      	ldr	r3, [sp, #4]
 8004be0:	42b3      	cmp	r3, r6
 8004be2:	d004      	beq.n	8004bee <poll_for_value+0x2a>
        {
          break;
        }
        else
        {
          wf200_host_wait( 1 );
 8004be4:	2001      	movs	r0, #1
 8004be6:	f7fd fc0b 	bl	8002400 <wf200_host_wait>
    for ( ; max_retries > 0; max_retries-- )
 8004bea:	3c01      	subs	r4, #1
 8004bec:	e7f0      	b.n	8004bd0 <poll_for_value+0xc>
        }
    }
    if ( value != polled_value )
 8004bee:	9b01      	ldr	r3, [sp, #4]
 8004bf0:	429e      	cmp	r6, r3
 8004bf2:	d000      	beq.n	8004bf6 <poll_for_value+0x32>
    {
        status = SL_TIMEOUT;
 8004bf4:	2502      	movs	r5, #2
    }

error_handler:
    return status;
}
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	b003      	add	sp, #12
 8004bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bfc <wf200_download_run_bootloader>:
{
 8004bfc:	b500      	push	{lr}
 8004bfe:	b083      	sub	sp, #12
    status = wf200_apb_read_32( ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32 );
 8004c00:	a901      	add	r1, sp, #4
 8004c02:	4816      	ldr	r0, [pc, #88]	; (8004c5c <wf200_download_run_bootloader+0x60>)
 8004c04:	f000 fc7a 	bl	80054fc <wf200_apb_read_32>
    ERROR_CHECK( status );
 8004c08:	4603      	mov	r3, r0
 8004c0a:	b118      	cbz	r0, 8004c14 <wf200_download_run_bootloader+0x18>
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	b003      	add	sp, #12
 8004c10:	f85d fb04 	ldr.w	pc, [sp], #4
    status = wf200_reg_read_32( WF200_CONFIG_REG_ID, &value32 );
 8004c14:	a901      	add	r1, sp, #4
 8004c16:	f000 fc0e 	bl	8005436 <wf200_reg_read_32>
    ERROR_CHECK( status );
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d1f5      	bne.n	8004c0c <wf200_download_run_bootloader+0x10>
    value32 &= ~( WF200_CONFIG_CPU_RESET_BIT | WF200_CONFIG_CPU_CLK_DIS_BIT );
 8004c20:	9901      	ldr	r1, [sp, #4]
 8004c22:	f421 41a0 	bic.w	r1, r1, #20480	; 0x5000
 8004c26:	9101      	str	r1, [sp, #4]
    status = wf200_reg_write_32( WF200_CONFIG_REG_ID, value32 );
 8004c28:	f000 fc1e 	bl	8005468 <wf200_reg_write_32>
    ERROR_CHECK( status );
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d1ec      	bne.n	8004c0c <wf200_download_run_bootloader+0x10>
    status = wf200_apb_write_32( ADDR_DOWNLOAD_FIFO_BASE, 0x23abc88e );
 8004c32:	490b      	ldr	r1, [pc, #44]	; (8004c60 <wf200_download_run_bootloader+0x64>)
 8004c34:	480b      	ldr	r0, [pc, #44]	; (8004c64 <wf200_download_run_bootloader+0x68>)
 8004c36:	f000 fc51 	bl	80054dc <wf200_apb_write_32>
    ERROR_CHECK( status );
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	d1e5      	bne.n	8004c0c <wf200_download_run_bootloader+0x10>
    status = wf200_apb_read_32( ADDR_DOWNLOAD_FIFO_BASE, &value32 );
 8004c40:	a901      	add	r1, sp, #4
 8004c42:	4808      	ldr	r0, [pc, #32]	; (8004c64 <wf200_download_run_bootloader+0x68>)
 8004c44:	f000 fc5a 	bl	80054fc <wf200_apb_read_32>
    ERROR_CHECK( status );
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d1de      	bne.n	8004c0c <wf200_download_run_bootloader+0x10>
    if (value32 != 0x23abc88e)
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <wf200_download_run_bootloader+0x64>)
 8004c50:	9901      	ldr	r1, [sp, #4]
 8004c52:	4291      	cmp	r1, r2
 8004c54:	d0da      	beq.n	8004c0c <wf200_download_run_bootloader+0x10>
        status = SL_ERROR;
 8004c56:	2304      	movs	r3, #4
    return status;
 8004c58:	e7d8      	b.n	8004c0c <wf200_download_run_bootloader+0x10>
 8004c5a:	bf00      	nop
 8004c5c:	0900c010 	.word	0x0900c010
 8004c60:	23abc88e 	.word	0x23abc88e
 8004c64:	09004000 	.word	0x09004000

08004c68 <wf200_compare_keysets>:
 * \param wf200_keyset: value retrieved from the WF200
 * \param firmware_keyset: 8 first bytes of the WF200 firmware
 * \return SL_SUCCESS if the firmware is compatible with the WF200, SL_WIFI_INVALID_KEY otherwise
 */
static sl_status_t wf200_compare_keysets(uint8_t wf200_keyset, char* firmware_keyset)
{
 8004c68:	b510      	push	{r4, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	4604      	mov	r4, r0
  sl_status_t result;
  char keyset_string[3];
  keyset_string[0] = *(firmware_keyset + 6);
 8004c6e:	798b      	ldrb	r3, [r1, #6]
 8004c70:	f88d 3004 	strb.w	r3, [sp, #4]
  keyset_string[1] = *(firmware_keyset + 7);
 8004c74:	79cb      	ldrb	r3, [r1, #7]
 8004c76:	f88d 3005 	strb.w	r3, [sp, #5]
  keyset_string[2] = '\0';
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	f88d 1006 	strb.w	r1, [sp, #6]
  uint8_t keyset_value = (uint8_t)strtoul(keyset_string, NULL, 16);
 8004c80:	2210      	movs	r2, #16
 8004c82:	a801      	add	r0, sp, #4
 8004c84:	f00d fbf8 	bl	8012478 <strtoul>
 8004c88:	b2c0      	uxtb	r0, r0
  if(keyset_value == wf200_keyset)
 8004c8a:	42a0      	cmp	r0, r4
 8004c8c:	d102      	bne.n	8004c94 <wf200_compare_keysets+0x2c>
  {
    result = SL_SUCCESS;
 8004c8e:	2000      	movs	r0, #0
  }else{
    result = SL_WIFI_INVALID_KEY;
  }
  return result;
}
 8004c90:	b002      	add	sp, #8
 8004c92:	bd10      	pop	{r4, pc}
    result = SL_WIFI_INVALID_KEY;
 8004c94:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
  return result;
 8004c98:	e7fa      	b.n	8004c90 <wf200_compare_keysets+0x28>
	...

08004c9c <wf200_download_run_firmware>:
{
 8004c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca0:	b084      	sub	sp, #16
    uint32_t       get = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9301      	str	r3, [sp, #4]
    status = wf200_host_init( );
 8004ca6:	f7fd fb21 	bl	80022ec <wf200_host_init>
    ERROR_CHECK( status );
 8004caa:	4604      	mov	r4, r0
 8004cac:	b128      	cbz	r0, 8004cba <wf200_download_run_firmware+0x1e>
    wf200_host_deinit( );
 8004cae:	f7fd fb53 	bl	8002358 <wf200_host_deinit>
}
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	b004      	add	sp, #16
 8004cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = wf200_apb_write_32( ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_NOT_READY );
 8004cba:	4986      	ldr	r1, [pc, #536]	; (8004ed4 <wf200_download_run_firmware+0x238>)
 8004cbc:	4886      	ldr	r0, [pc, #536]	; (8004ed8 <wf200_download_run_firmware+0x23c>)
 8004cbe:	f000 fc0d 	bl	80054dc <wf200_apb_write_32>
    ERROR_CHECK( status );
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d1f2      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_apb_write_32( ADDR_DWL_CTRL_AREA_PUT, 0 );
 8004cc8:	2100      	movs	r1, #0
 8004cca:	4884      	ldr	r0, [pc, #528]	; (8004edc <wf200_download_run_firmware+0x240>)
 8004ccc:	f000 fc06 	bl	80054dc <wf200_apb_write_32>
    ERROR_CHECK( status );
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d1eb      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_apb_write_32( ADDR_DWL_CTRL_AREA_GET, 0 );
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4881      	ldr	r0, [pc, #516]	; (8004ee0 <wf200_download_run_firmware+0x244>)
 8004cda:	f000 fbff 	bl	80054dc <wf200_apb_write_32>
    ERROR_CHECK( status );
 8004cde:	4604      	mov	r4, r0
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d1e4      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_apb_write_32( ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_READY );
 8004ce4:	497f      	ldr	r1, [pc, #508]	; (8004ee4 <wf200_download_run_firmware+0x248>)
 8004ce6:	487c      	ldr	r0, [pc, #496]	; (8004ed8 <wf200_download_run_firmware+0x23c>)
 8004ce8:	f000 fbf8 	bl	80054dc <wf200_apb_write_32>
    ERROR_CHECK( status );
 8004cec:	4604      	mov	r4, r0
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d1dd      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    status = poll_for_value( ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_INFO_READY, 100 );
 8004cf2:	2264      	movs	r2, #100	; 0x64
 8004cf4:	497c      	ldr	r1, [pc, #496]	; (8004ee8 <wf200_download_run_firmware+0x24c>)
 8004cf6:	487d      	ldr	r0, [pc, #500]	; (8004eec <wf200_download_run_firmware+0x250>)
 8004cf8:	f7ff ff64 	bl	8004bc4 <poll_for_value>
    ERROR_CHECK( status );
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d1d5      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_apb_read_32( 0x0900C080, &value32 );
 8004d02:	a903      	add	r1, sp, #12
 8004d04:	487a      	ldr	r0, [pc, #488]	; (8004ef0 <wf200_download_run_firmware+0x254>)
 8004d06:	f000 fbf9 	bl	80054fc <wf200_apb_read_32>
    ERROR_CHECK( status );
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	d1ce      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_apb_read_32( WFX_PTE_INFO + 12, &value32 );
 8004d10:	a903      	add	r1, sp, #12
 8004d12:	4878      	ldr	r0, [pc, #480]	; (8004ef4 <wf200_download_run_firmware+0x258>)
 8004d14:	f000 fbf2 	bl	80054fc <wf200_apb_read_32>
    ERROR_CHECK(status);
 8004d18:	4604      	mov	r4, r0
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d1c7      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    encryption_keyset = (value32 >> 8);
 8004d1e:	9b03      	ldr	r3, [sp, #12]
 8004d20:	0a1b      	lsrs	r3, r3, #8
 8004d22:	4a75      	ldr	r2, [pc, #468]	; (8004ef8 <wf200_download_run_firmware+0x25c>)
 8004d24:	7013      	strb	r3, [r2, #0]
    status = wf200_apb_write_32( ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_HOST_INFO_READ );
 8004d26:	4975      	ldr	r1, [pc, #468]	; (8004efc <wf200_download_run_firmware+0x260>)
 8004d28:	486b      	ldr	r0, [pc, #428]	; (8004ed8 <wf200_download_run_firmware+0x23c>)
 8004d2a:	f000 fbd7 	bl	80054dc <wf200_apb_write_32>
    ERROR_CHECK( status );
 8004d2e:	4604      	mov	r4, r0
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d1bc      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    status = poll_for_value( ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_READY, 100 );
 8004d34:	2264      	movs	r2, #100	; 0x64
 8004d36:	496b      	ldr	r1, [pc, #428]	; (8004ee4 <wf200_download_run_firmware+0x248>)
 8004d38:	486c      	ldr	r0, [pc, #432]	; (8004eec <wf200_download_run_firmware+0x250>)
 8004d3a:	f7ff ff43 	bl	8004bc4 <poll_for_value>
    ERROR_CHECK( status );
 8004d3e:	4604      	mov	r4, r0
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d1b4      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_apb_write_32( ADDR_DOWNLOAD_FIFO_BASE, 0xFFFFFFFF );
 8004d44:	f04f 31ff 	mov.w	r1, #4294967295
 8004d48:	486d      	ldr	r0, [pc, #436]	; (8004f00 <wf200_download_run_firmware+0x264>)
 8004d4a:	f000 fbc7 	bl	80054dc <wf200_apb_write_32>
    ERROR_CHECK( status );
 8004d4e:	4604      	mov	r4, r0
 8004d50:	2800      	cmp	r0, #0
 8004d52:	d1ac      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    wf200_host_get_firmware_size( &image_length );
 8004d54:	a802      	add	r0, sp, #8
 8004d56:	f7fd faf9 	bl	800234c <wf200_host_get_firmware_size>
    status = wf200_apb_write_32( ADDR_DWL_CTRL_AREA_IMAGE_SIZE, image_length - FW_HASH_SIZE - FW_SIGNATURE_SIZE - FW_KEYSET_SIZE);
 8004d5a:	9902      	ldr	r1, [sp, #8]
 8004d5c:	3950      	subs	r1, #80	; 0x50
 8004d5e:	4869      	ldr	r0, [pc, #420]	; (8004f04 <wf200_download_run_firmware+0x268>)
 8004d60:	f000 fbbc 	bl	80054dc <wf200_apb_write_32>
    ERROR_CHECK( status );
 8004d64:	4604      	mov	r4, r0
 8004d66:	2800      	cmp	r0, #0
 8004d68:	d1a1      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_host_get_firmware_data( &buffer, FW_KEYSET_SIZE );
 8004d6a:	2108      	movs	r1, #8
 8004d6c:	4668      	mov	r0, sp
 8004d6e:	f7fd fadb 	bl	8002328 <wf200_host_get_firmware_data>
    ERROR_CHECK( status );
 8004d72:	4604      	mov	r4, r0
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d19a      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_compare_keysets(encryption_keyset, (char*) buffer);
 8004d78:	9900      	ldr	r1, [sp, #0]
 8004d7a:	4b5f      	ldr	r3, [pc, #380]	; (8004ef8 <wf200_download_run_firmware+0x25c>)
 8004d7c:	7818      	ldrb	r0, [r3, #0]
 8004d7e:	f7ff ff73 	bl	8004c68 <wf200_compare_keysets>
    ERROR_CHECK( status );
 8004d82:	4604      	mov	r4, r0
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d192      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_host_get_firmware_data( &buffer, FW_SIGNATURE_SIZE );
 8004d88:	2140      	movs	r1, #64	; 0x40
 8004d8a:	4668      	mov	r0, sp
 8004d8c:	f7fd facc 	bl	8002328 <wf200_host_get_firmware_data>
    ERROR_CHECK( status );
 8004d90:	4604      	mov	r4, r0
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d18b      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_apb_write( ADDR_DWL_CTRL_AREA_SIGNATURE, buffer, FW_SIGNATURE_SIZE );
 8004d96:	2240      	movs	r2, #64	; 0x40
 8004d98:	9900      	ldr	r1, [sp, #0]
 8004d9a:	485b      	ldr	r0, [pc, #364]	; (8004f08 <wf200_download_run_firmware+0x26c>)
 8004d9c:	f000 fb87 	bl	80054ae <wf200_apb_write>
    ERROR_CHECK( status );
 8004da0:	4604      	mov	r4, r0
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d183      	bne.n	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_host_get_firmware_data( &buffer, FW_HASH_SIZE );
 8004da6:	2108      	movs	r1, #8
 8004da8:	4668      	mov	r0, sp
 8004daa:	f7fd fabd 	bl	8002328 <wf200_host_get_firmware_data>
    ERROR_CHECK( status );
 8004dae:	4604      	mov	r4, r0
 8004db0:	2800      	cmp	r0, #0
 8004db2:	f47f af7c 	bne.w	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_apb_write( ADDR_DWL_CTRL_AREA_FW_HASH, buffer, FW_HASH_SIZE );
 8004db6:	2208      	movs	r2, #8
 8004db8:	9900      	ldr	r1, [sp, #0]
 8004dba:	4854      	ldr	r0, [pc, #336]	; (8004f0c <wf200_download_run_firmware+0x270>)
 8004dbc:	f000 fb77 	bl	80054ae <wf200_apb_write>
    ERROR_CHECK( status );
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	f47f af73 	bne.w	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_apb_write_32( ADDR_DWL_CTRL_AREA_FW_VERSION, FW_VERSION_VALUE );
 8004dc8:	2101      	movs	r1, #1
 8004dca:	4851      	ldr	r0, [pc, #324]	; (8004f10 <wf200_download_run_firmware+0x274>)
 8004dcc:	f000 fb86 	bl	80054dc <wf200_apb_write_32>
    ERROR_CHECK( status );
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	f47f af6b 	bne.w	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_apb_write_32( ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_PENDING );
 8004dd8:	494e      	ldr	r1, [pc, #312]	; (8004f14 <wf200_download_run_firmware+0x278>)
 8004dda:	483f      	ldr	r0, [pc, #252]	; (8004ed8 <wf200_download_run_firmware+0x23c>)
 8004ddc:	f000 fb7e 	bl	80054dc <wf200_apb_write_32>
    ERROR_CHECK( status );
 8004de0:	4604      	mov	r4, r0
 8004de2:	2800      	cmp	r0, #0
 8004de4:	f47f af63 	bne.w	8004cae <wf200_download_run_firmware+0x12>
    image_length -= ( FW_HASH_SIZE + FW_SIGNATURE_SIZE + FW_KEYSET_SIZE);
 8004de8:	9f02      	ldr	r7, [sp, #8]
 8004dea:	f1a7 0250 	sub.w	r2, r7, #80	; 0x50
 8004dee:	9202      	str	r2, [sp, #8]
    num_blocks = (image_length - 1) / DOWNLOAD_BLOCK_SIZE + 1;
 8004df0:	3f51      	subs	r7, #81	; 0x51
 8004df2:	0abf      	lsrs	r7, r7, #10
 8004df4:	3701      	adds	r7, #1
    uint32_t       put = 0;
 8004df6:	2500      	movs	r5, #0
    for ( block = 0; block < num_blocks; block++ )
 8004df8:	46a8      	mov	r8, r5
 8004dfa:	45b8      	cmp	r8, r7
 8004dfc:	d316      	bcc.n	8004e2c <wf200_download_run_firmware+0x190>
    status = wf200_apb_write_32( ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_COMPLETE );
 8004dfe:	4946      	ldr	r1, [pc, #280]	; (8004f18 <wf200_download_run_firmware+0x27c>)
 8004e00:	4835      	ldr	r0, [pc, #212]	; (8004ed8 <wf200_download_run_firmware+0x23c>)
 8004e02:	f000 fb6b 	bl	80054dc <wf200_apb_write_32>
    ERROR_CHECK( status );
 8004e06:	4604      	mov	r4, r0
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	f47f af50 	bne.w	8004cae <wf200_download_run_firmware+0x12>
    status = poll_for_value( ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_AUTH_OK, 100 );
 8004e0e:	2264      	movs	r2, #100	; 0x64
 8004e10:	4941      	ldr	r1, [pc, #260]	; (8004f18 <wf200_download_run_firmware+0x27c>)
 8004e12:	4836      	ldr	r0, [pc, #216]	; (8004eec <wf200_download_run_firmware+0x250>)
 8004e14:	f7ff fed6 	bl	8004bc4 <poll_for_value>
    ERROR_CHECK( status );
 8004e18:	4604      	mov	r4, r0
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	f47f af47 	bne.w	8004cae <wf200_download_run_firmware+0x12>
    status = wf200_apb_write_32( ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_OK_TO_JUMP );
 8004e20:	493e      	ldr	r1, [pc, #248]	; (8004f1c <wf200_download_run_firmware+0x280>)
 8004e22:	482d      	ldr	r0, [pc, #180]	; (8004ed8 <wf200_download_run_firmware+0x23c>)
 8004e24:	f000 fb5a 	bl	80054dc <wf200_apb_write_32>
 8004e28:	4604      	mov	r4, r0
 8004e2a:	e740      	b.n	8004cae <wf200_download_run_firmware+0x12>
        status = wf200_apb_read_32( ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32 );
 8004e2c:	a903      	add	r1, sp, #12
 8004e2e:	482f      	ldr	r0, [pc, #188]	; (8004eec <wf200_download_run_firmware+0x250>)
 8004e30:	f000 fb64 	bl	80054fc <wf200_apb_read_32>
        ERROR_CHECK( status );
 8004e34:	4604      	mov	r4, r0
 8004e36:	2800      	cmp	r0, #0
 8004e38:	f47f af39 	bne.w	8004cae <wf200_download_run_firmware+0x12>
        if ( value32 != NCP_STATE_DOWNLOAD_PENDING )
 8004e3c:	4b35      	ldr	r3, [pc, #212]	; (8004f14 <wf200_download_run_firmware+0x278>)
 8004e3e:	9a03      	ldr	r2, [sp, #12]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d142      	bne.n	8004eca <wf200_download_run_firmware+0x22e>
 8004e44:	2600      	movs	r6, #0
        for ( i = 0; i < 100; i++ )
 8004e46:	2e63      	cmp	r6, #99	; 0x63
 8004e48:	d92d      	bls.n	8004ea6 <wf200_download_run_firmware+0x20a>
        if ( ( put - get ) > ( DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE ) )
 8004e4a:	9b01      	ldr	r3, [sp, #4]
 8004e4c:	1aeb      	subs	r3, r5, r3
 8004e4e:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 8004e52:	d83c      	bhi.n	8004ece <wf200_download_run_firmware+0x232>
        uint32_t block_size = image_length - put;
 8004e54:	9e02      	ldr	r6, [sp, #8]
 8004e56:	1b76      	subs	r6, r6, r5
        if ( block_size > DOWNLOAD_BLOCK_SIZE )
 8004e58:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004e5c:	d901      	bls.n	8004e62 <wf200_download_run_firmware+0x1c6>
            block_size = DOWNLOAD_BLOCK_SIZE;
 8004e5e:	f44f 6680 	mov.w	r6, #1024	; 0x400
        status = wf200_host_get_firmware_data( &buffer, block_size );
 8004e62:	4631      	mov	r1, r6
 8004e64:	4668      	mov	r0, sp
 8004e66:	f7fd fa5f 	bl	8002328 <wf200_host_get_firmware_data>
        ERROR_CHECK( status );
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	f47f af1e 	bne.w	8004cae <wf200_download_run_firmware+0x12>
        uint32_t block_address = ADDR_DOWNLOAD_FIFO_BASE + ( put % DOWNLOAD_FIFO_SIZE );
 8004e72:	f3c5 000e 	ubfx	r0, r5, #0, #15
        status = wf200_apb_write( block_address, buffer, block_size );
 8004e76:	4632      	mov	r2, r6
 8004e78:	9900      	ldr	r1, [sp, #0]
 8004e7a:	f100 6010 	add.w	r0, r0, #150994944	; 0x9000000
 8004e7e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8004e82:	f000 fb14 	bl	80054ae <wf200_apb_write>
        ERROR_CHECK( status );
 8004e86:	4604      	mov	r4, r0
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	f47f af10 	bne.w	8004cae <wf200_download_run_firmware+0x12>
        put += block_size;
 8004e8e:	4435      	add	r5, r6
        status = wf200_apb_write_32( ADDR_DWL_CTRL_AREA_PUT, put );
 8004e90:	4629      	mov	r1, r5
 8004e92:	4812      	ldr	r0, [pc, #72]	; (8004edc <wf200_download_run_firmware+0x240>)
 8004e94:	f000 fb22 	bl	80054dc <wf200_apb_write_32>
        ERROR_CHECK( status );
 8004e98:	4604      	mov	r4, r0
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	f47f af07 	bne.w	8004cae <wf200_download_run_firmware+0x12>
    for ( block = 0; block < num_blocks; block++ )
 8004ea0:	f108 0801 	add.w	r8, r8, #1
 8004ea4:	e7a9      	b.n	8004dfa <wf200_download_run_firmware+0x15e>
            get = 0;
 8004ea6:	a904      	add	r1, sp, #16
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f841 3d0c 	str.w	r3, [r1, #-12]!
            status = wf200_apb_read_32( ADDR_DWL_CTRL_AREA_GET, &get );
 8004eae:	480c      	ldr	r0, [pc, #48]	; (8004ee0 <wf200_download_run_firmware+0x244>)
 8004eb0:	f000 fb24 	bl	80054fc <wf200_apb_read_32>
            ERROR_CHECK( status );
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	f47f aef9 	bne.w	8004cae <wf200_download_run_firmware+0x12>
            if ( ( put - get ) <= ( DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE ) )
 8004ebc:	9b01      	ldr	r3, [sp, #4]
 8004ebe:	1aeb      	subs	r3, r5, r3
 8004ec0:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 8004ec4:	d9c1      	bls.n	8004e4a <wf200_download_run_firmware+0x1ae>
        for ( i = 0; i < 100; i++ )
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7bd      	b.n	8004e46 <wf200_download_run_firmware+0x1aa>
            status = SL_ERROR;
 8004eca:	2404      	movs	r4, #4
 8004ecc:	e6ef      	b.n	8004cae <wf200_download_run_firmware+0x12>
            status = SL_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT;
 8004ece:	f240 4421 	movw	r4, #1057	; 0x421
 8004ed2:	e6ec      	b.n	8004cae <wf200_download_run_firmware+0x12>
 8004ed4:	12345678 	.word	0x12345678
 8004ed8:	0900c00c 	.word	0x0900c00c
 8004edc:	0900c004 	.word	0x0900c004
 8004ee0:	0900c008 	.word	0x0900c008
 8004ee4:	87654321 	.word	0x87654321
 8004ee8:	bd53ef99 	.word	0xbd53ef99
 8004eec:	0900c010 	.word	0x0900c010
 8004ef0:	0900c080 	.word	0x0900c080
 8004ef4:	0900c0cc 	.word	0x0900c0cc
 8004ef8:	200072dc 	.word	0x200072dc
 8004efc:	a753bd99 	.word	0xa753bd99
 8004f00:	09004000 	.word	0x09004000
 8004f04:	0900c000 	.word	0x0900c000
 8004f08:	0900c014 	.word	0x0900c014
 8004f0c:	0900c054 	.word	0x0900c054
 8004f10:	0900c05c 	.word	0x0900c05c
 8004f14:	abcddcba 	.word	0xabcddcba
 8004f18:	d4c64a99 	.word	0xd4c64a99
 8004f1c:	174fc882 	.word	0x174fc882

08004f20 <wf200_send_request>:
{
 8004f20:	b510      	push	{r4, lr}
    wf200_context->waited_event_id = command_id;
 8004f22:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <wf200_send_request+0x18>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6098      	str	r0, [r3, #8]
    wf200_context->posted_event_id = 0;
 8004f28:	2400      	movs	r4, #0
 8004f2a:	60dc      	str	r4, [r3, #12]
    request->msg_id   = command_id;
 8004f2c:	7088      	strb	r0, [r1, #2]
    request->msg_len  = request_length;
 8004f2e:	800a      	strh	r2, [r1, #0]
    return wf200_host_transmit_frame( request );
 8004f30:	4608      	mov	r0, r1
 8004f32:	f7fd fa77 	bl	8002424 <wf200_host_transmit_frame>
}
 8004f36:	bd10      	pop	{r4, pc}
 8004f38:	200072d8 	.word	0x200072d8

08004f3c <wf200_send_join_command>:
{
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	4680      	mov	r8, r0
 8004f44:	460e      	mov	r6, r1
 8004f46:	4691      	mov	r9, r2
 8004f48:	461f      	mov	r7, r3
  wf200_buffer_t*        frame           = NULL;
 8004f4a:	a802      	add	r0, sp, #8
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f840 3d08 	str.w	r3, [r0, #-8]!
  result = wf200_host_allocate_buffer( &frame, WF200_CONTROL_BUFFER, request_length, SL_WAIT_FOREVER );
 8004f52:	f04f 33ff 	mov.w	r3, #4294967295
 8004f56:	2278      	movs	r2, #120	; 0x78
 8004f58:	2102      	movs	r1, #2
 8004f5a:	f7fd fa56 	bl	800240a <wf200_host_allocate_buffer>
  ERROR_CHECK( result );
 8004f5e:	4604      	mov	r4, r0
 8004f60:	b140      	cbz	r0, 8004f74 <wf200_send_join_command+0x38>
  if ( frame != NULL )
 8004f62:	9800      	ldr	r0, [sp, #0]
 8004f64:	b110      	cbz	r0, 8004f6c <wf200_send_join_command+0x30>
    wf200_host_free_buffer( frame, WF200_CONTROL_BUFFER );
 8004f66:	2102      	movs	r1, #2
 8004f68:	f7fd fa57 	bl	800241a <wf200_host_free_buffer>
}
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	b002      	add	sp, #8
 8004f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  memset( frame, 0, request_length );
 8004f74:	f04f 0a78 	mov.w	sl, #120	; 0x78
 8004f78:	4652      	mov	r2, sl
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	9800      	ldr	r0, [sp, #0]
 8004f7e:	f00d f8ec 	bl	801215a <memset>
  frame->msg_info                      = 0;
 8004f82:	2500      	movs	r5, #0
 8004f84:	9b00      	ldr	r3, [sp, #0]
 8004f86:	70dd      	strb	r5, [r3, #3]
  connect_request                      = (WfmHiConnectReqBody_t*)&frame->data;
 8004f88:	9c00      	ldr	r4, [sp, #0]
  connect_request->Channel             = 0;
 8004f8a:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8004f8e:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
  connect_request->SecurityMode        = security_mode;
 8004f92:	f884 9030 	strb.w	r9, [r4, #48]	; 0x30
  connect_request->PreventRoaming      = 1;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  connect_request->MgmtFrameProtection = 0;
 8004f9c:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 8004fa0:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
  connect_request->PasswordLength      = passkey_length;
 8004fa4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8004fa8:	86a3      	strh	r3, [r4, #52]	; 0x34
  connect_request->IeDataLength        = 0;
 8004faa:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
 8004fae:	f884 5077 	strb.w	r5, [r4, #119]	; 0x77
  connect_request->SsidDef.SsidLength  = ssid_length;
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f840 6f04 	str.w	r6, [r0, #4]!
  memcpy( connect_request->SsidDef.Ssid, ssid, ssid_length );
 8004fb8:	f100 0904 	add.w	r9, r0, #4
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	4641      	mov	r1, r8
 8004fc0:	4648      	mov	r0, r9
 8004fc2:	f00d f8a5 	bl	8012110 <memcpy>
  memset( connect_request->SsidDef.Ssid + ssid_length, 0, WFM_API_SSID_SIZE - ssid_length );
 8004fc6:	f1c6 0220 	rsb	r2, r6, #32
 8004fca:	4629      	mov	r1, r5
 8004fcc:	eb09 0006 	add.w	r0, r9, r6
 8004fd0:	f00d f8c3 	bl	801215a <memset>
  memset( connect_request->BSSID, 0xFF, WFM_API_BSSID_SIZE );
 8004fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fda:	85a3      	strh	r3, [r4, #44]	; 0x2c
  memcpy( connect_request->Password, passkey, passkey_length );
 8004fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fde:	4639      	mov	r1, r7
 8004fe0:	f104 0036 	add.w	r0, r4, #54	; 0x36
 8004fe4:	f00d f894 	bl	8012110 <memcpy>
  result = wf200_send_request( WFM_HI_CONNECT_REQ_ID, frame, request_length );
 8004fe8:	4652      	mov	r2, sl
 8004fea:	9900      	ldr	r1, [sp, #0]
 8004fec:	2043      	movs	r0, #67	; 0x43
 8004fee:	f7ff ff97 	bl	8004f20 <wf200_send_request>
  ERROR_CHECK( result );
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d1b4      	bne.n	8004f62 <wf200_send_join_command+0x26>
  result = wf200_host_wait_for_confirmation( WF200_JOIN_REQUEST_TIMEOUT, (void**) &reply );
 8004ff8:	a901      	add	r1, sp, #4
 8004ffa:	f241 3088 	movw	r0, #5000	; 0x1388
 8004ffe:	f7fd f9d9 	bl	80023b4 <wf200_host_wait_for_confirmation>
  ERROR_CHECK( result );
 8005002:	4604      	mov	r4, r0
 8005004:	2800      	cmp	r0, #0
 8005006:	d1ac      	bne.n	8004f62 <wf200_send_join_command+0x26>
  if ( reply->Body.Status != WFM_STATUS_SUCCESS )
 8005008:	9b01      	ldr	r3, [sp, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0a8      	beq.n	8004f62 <wf200_send_join_command+0x26>
    result = SL_ERROR;
 8005010:	2404      	movs	r4, #4
 8005012:	e7a6      	b.n	8004f62 <wf200_send_join_command+0x26>

08005014 <wf200_send_ethernet_frame>:
{
 8005014:	b570      	push	{r4, r5, r6, lr}
  if(wf200_context->used_buffer_number <= wf200_input_buffer_number)
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <wf200_send_ethernet_frame+0x54>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	8a9d      	ldrh	r5, [r3, #20]
 800501c:	4c13      	ldr	r4, [pc, #76]	; (800506c <wf200_send_ethernet_frame+0x58>)
 800501e:	8824      	ldrh	r4, [r4, #0]
 8005020:	42a5      	cmp	r5, r4
 8005022:	d902      	bls.n	800502a <wf200_send_ethernet_frame+0x16>
  sl_status_t           result = SL_ERROR_OUT_OF_BUFFERS;
 8005024:	2308      	movs	r3, #8
}
 8005026:	4618      	mov	r0, r3
 8005028:	bd70      	pop	{r4, r5, r6, pc}
    frame->FrameType        = WFM_FRAME_TYPE_DATA;
 800502a:	2408      	movs	r4, #8
 800502c:	7104      	strb	r4, [r0, #4]
    frame->Priority         = WFM_PRIORITY_BE;
 800502e:	2400      	movs	r4, #0
 8005030:	7144      	strb	r4, [r0, #5]
    frame->PacketId         = wf200_context->data_frame_id++;
 8005032:	881d      	ldrh	r5, [r3, #0]
 8005034:	1c6e      	adds	r6, r5, #1
 8005036:	801e      	strh	r6, [r3, #0]
 8005038:	80c5      	strh	r5, [r0, #6]
    frame->PacketDataLength = data_length;
 800503a:	6081      	str	r1, [r0, #8]
    frame->msg_id           = WFM_HI_SEND_FRAME_REQ_ID;
 800503c:	234a      	movs	r3, #74	; 0x4a
 800503e:	8043      	strh	r3, [r0, #2]
    frame_header->s.b.IntId = interface;
 8005040:	4623      	mov	r3, r4
 8005042:	f362 0342 	bfi	r3, r2, #1, #2
 8005046:	70c3      	strb	r3, [r0, #3]
    frame->msg_len = ROUND_UP_EVEN(data_length + sizeof(wf200_frame_t));
 8005048:	3101      	adds	r1, #1
 800504a:	f021 0101 	bic.w	r1, r1, #1
 800504e:	310c      	adds	r1, #12
 8005050:	8001      	strh	r1, [r0, #0]
    result = wf200_host_transmit_frame( (wf200_buffer_t*) frame );
 8005052:	f7fd f9e7 	bl	8002424 <wf200_host_transmit_frame>
    if(result == SL_SUCCESS){
 8005056:	4603      	mov	r3, r0
 8005058:	2800      	cmp	r0, #0
 800505a:	d1e4      	bne.n	8005026 <wf200_send_ethernet_frame+0x12>
        wf200_context->used_buffer_number++;
 800505c:	4a02      	ldr	r2, [pc, #8]	; (8005068 <wf200_send_ethernet_frame+0x54>)
 800505e:	6811      	ldr	r1, [r2, #0]
 8005060:	8a8a      	ldrh	r2, [r1, #20]
 8005062:	3201      	adds	r2, #1
 8005064:	828a      	strh	r2, [r1, #20]
 8005066:	e7de      	b.n	8005026 <wf200_send_ethernet_frame+0x12>
 8005068:	200072d8 	.word	0x200072d8
 800506c:	2000034a 	.word	0x2000034a

08005070 <wf200_send_configuration>:
{
 8005070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005072:	b083      	sub	sp, #12
 8005074:	4607      	mov	r7, r0
 8005076:	460d      	mov	r5, r1
  wf200_buffer_t*           frame          = NULL;
 8005078:	a802      	add	r0, sp, #8
 800507a:	2300      	movs	r3, #0
 800507c:	f840 3d08 	str.w	r3, [r0, #-8]!
  uint32_t                  request_length = ROUND_UP_EVEN(sizeof(HiConfigurationReq_t) + pds_data_length - API_VARIABLE_SIZE_ARRAY_DUMMY_SIZE); // '-1' to exclude size of 'Body.PdsData' field, which is already included in pds_data_length
 8005080:	1c4c      	adds	r4, r1, #1
 8005082:	f024 0401 	bic.w	r4, r4, #1
 8005086:	3406      	adds	r4, #6
  result = wf200_host_allocate_buffer( &frame, WF200_CONTROL_BUFFER, request_length, SL_WAIT_FOREVER );
 8005088:	f04f 33ff 	mov.w	r3, #4294967295
 800508c:	4622      	mov	r2, r4
 800508e:	2102      	movs	r1, #2
 8005090:	f7fd f9bb 	bl	800240a <wf200_host_allocate_buffer>
  ERROR_CHECK( result );
 8005094:	4606      	mov	r6, r0
 8005096:	b138      	cbz	r0, 80050a8 <wf200_send_configuration+0x38>
  if ( frame != NULL )
 8005098:	9800      	ldr	r0, [sp, #0]
 800509a:	b110      	cbz	r0, 80050a2 <wf200_send_configuration+0x32>
    wf200_host_free_buffer( frame, WF200_CONTROL_BUFFER );
 800509c:	2102      	movs	r1, #2
 800509e:	f7fd f9bc 	bl	800241a <wf200_host_free_buffer>
}
 80050a2:	4630      	mov	r0, r6
 80050a4:	b003      	add	sp, #12
 80050a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  memset( frame, 0, request_length );
 80050a8:	4622      	mov	r2, r4
 80050aa:	2100      	movs	r1, #0
 80050ac:	9800      	ldr	r0, [sp, #0]
 80050ae:	f00d f854 	bl	801215a <memset>
  config_request         = (HiConfigurationReqBody_t*)&frame->data;
 80050b2:	9e00      	ldr	r6, [sp, #0]
  config_request->Length = pds_data_length;
 80050b4:	80b5      	strh	r5, [r6, #4]
  memcpy( config_request->PdsData, pds_data, pds_data_length );
 80050b6:	462a      	mov	r2, r5
 80050b8:	4639      	mov	r1, r7
 80050ba:	1db0      	adds	r0, r6, #6
 80050bc:	f00d f828 	bl	8012110 <memcpy>
  result = wf200_send_request( HI_CONFIGURATION_REQ_ID, frame, request_length );
 80050c0:	4622      	mov	r2, r4
 80050c2:	4631      	mov	r1, r6
 80050c4:	2009      	movs	r0, #9
 80050c6:	f7ff ff2b 	bl	8004f20 <wf200_send_request>
  ERROR_CHECK( result );
 80050ca:	4606      	mov	r6, r0
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d1e3      	bne.n	8005098 <wf200_send_configuration+0x28>
  result = wf200_host_wait_for_confirmation( WF200_DEFAULT_REQUEST_TIMEOUT, (void**)&reply );
 80050d0:	a901      	add	r1, sp, #4
 80050d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80050d6:	f7fd f96d 	bl	80023b4 <wf200_host_wait_for_confirmation>
  ERROR_CHECK( result );
 80050da:	4606      	mov	r6, r0
 80050dc:	2800      	cmp	r0, #0
 80050de:	d1db      	bne.n	8005098 <wf200_send_configuration+0x28>
  if(reply->Body.Status != WFM_STATUS_SUCCESS)
 80050e0:	9b01      	ldr	r3, [sp, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0d7      	beq.n	8005098 <wf200_send_configuration+0x28>
    result = SL_ERROR;
 80050e8:	2604      	movs	r6, #4
 80050ea:	e7d5      	b.n	8005098 <wf200_send_configuration+0x28>

080050ec <wf200_send_command>:
{
 80050ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050f0:	b083      	sub	sp, #12
 80050f2:	4607      	mov	r7, r0
 80050f4:	460e      	mov	r6, r1
 80050f6:	4615      	mov	r5, r2
 80050f8:	4698      	mov	r8, r3
    wf200_buffer_t*       request = NULL;
 80050fa:	a802      	add	r0, sp, #8
 80050fc:	2300      	movs	r3, #0
 80050fe:	f840 3d08 	str.w	r3, [r0, #-8]!
    uint32_t              request_length = ROUND_UP_EVEN(sizeof(HiMsgHdr_t) + data_size);
 8005102:	1c54      	adds	r4, r2, #1
 8005104:	f024 0401 	bic.w	r4, r4, #1
 8005108:	3404      	adds	r4, #4
    result = wf200_host_allocate_buffer( &request, WF200_CONTROL_BUFFER, request_length, SL_WAIT_FOREVER );
 800510a:	f04f 33ff 	mov.w	r3, #4294967295
 800510e:	4622      	mov	r2, r4
 8005110:	2102      	movs	r1, #2
 8005112:	f7fd f97a 	bl	800240a <wf200_host_allocate_buffer>
    ERROR_CHECK( result );
 8005116:	4681      	mov	r9, r0
 8005118:	b140      	cbz	r0, 800512c <wf200_send_command+0x40>
    if ( request != NULL )
 800511a:	9800      	ldr	r0, [sp, #0]
 800511c:	b110      	cbz	r0, 8005124 <wf200_send_command+0x38>
        wf200_host_free_buffer( request, WF200_CONTROL_BUFFER );
 800511e:	2102      	movs	r1, #2
 8005120:	f7fd f97b 	bl	800241a <wf200_host_free_buffer>
}
 8005124:	4648      	mov	r0, r9
 8005126:	b003      	add	sp, #12
 8005128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    memset( request, 0, request_length );
 800512c:	4622      	mov	r2, r4
 800512e:	2100      	movs	r1, #0
 8005130:	9800      	ldr	r0, [sp, #0]
 8005132:	f00d f812 	bl	801215a <memset>
    request_header->s.b.IntId = interface;
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	f368 0342 	bfi	r3, r8, #1, #2
 800513e:	9a00      	ldr	r2, [sp, #0]
 8005140:	70d3      	strb	r3, [r2, #3]
    if ( data != NULL )
 8005142:	b12e      	cbz	r6, 8005150 <wf200_send_command+0x64>
        memcpy( request->data, data, data_size );
 8005144:	462a      	mov	r2, r5
 8005146:	4631      	mov	r1, r6
 8005148:	9800      	ldr	r0, [sp, #0]
 800514a:	3004      	adds	r0, #4
 800514c:	f00c ffe0 	bl	8012110 <memcpy>
    result = wf200_send_request( command_id, request, request_length );
 8005150:	4622      	mov	r2, r4
 8005152:	9900      	ldr	r1, [sp, #0]
 8005154:	b2b8      	uxth	r0, r7
 8005156:	f7ff fee3 	bl	8004f20 <wf200_send_request>
    ERROR_CHECK( result );
 800515a:	4681      	mov	r9, r0
 800515c:	2800      	cmp	r0, #0
 800515e:	d1dc      	bne.n	800511a <wf200_send_command+0x2e>
    result = wf200_host_wait_for_confirmation( WF200_DEFAULT_REQUEST_TIMEOUT, (void**)&reply );
 8005160:	a901      	add	r1, sp, #4
 8005162:	f241 3088 	movw	r0, #5000	; 0x1388
 8005166:	f7fd f925 	bl	80023b4 <wf200_host_wait_for_confirmation>
 800516a:	4681      	mov	r9, r0
 800516c:	e7d5      	b.n	800511a <wf200_send_command+0x2e>

0800516e <wf200_start_ap_command>:
{
 800516e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005172:	b09c      	sub	sp, #112	; 0x70
 8005174:	4680      	mov	r8, r0
 8005176:	460f      	mov	r7, r1
 8005178:	4614      	mov	r4, r2
 800517a:	461d      	mov	r5, r3
 800517c:	f89d 608c 	ldrb.w	r6, [sp, #140]	; 0x8c
  WfmHiStartApReqBody_t payload =
 8005180:	2270      	movs	r2, #112	; 0x70
 8005182:	2100      	movs	r1, #0
 8005184:	4668      	mov	r0, sp
 8005186:	f00c ffe8 	bl	801215a <memset>
 800518a:	9400      	str	r4, [sp, #0]
 800518c:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8005190:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
  memcpy( payload.SsidDef.Ssid, ssid, ssid_length );
 8005194:	4622      	mov	r2, r4
 8005196:	4639      	mov	r1, r7
 8005198:	a801      	add	r0, sp, #4
 800519a:	f00c ffb9 	bl	8012110 <memcpy>
  memset( payload.SsidDef.Ssid + ssid_length, 0, sizeof( payload.SsidDef.Ssid ) - ssid_length );
 800519e:	f1c4 0220 	rsb	r2, r4, #32
 80051a2:	2100      	movs	r1, #0
 80051a4:	ab01      	add	r3, sp, #4
 80051a6:	1918      	adds	r0, r3, r4
 80051a8:	f00c ffd7 	bl	801215a <memset>
  if ( security != WFM_SECURITY_MODE_OPEN )
 80051ac:	b96d      	cbnz	r5, 80051ca <wf200_start_ap_command+0x5c>
    memset( &payload.Password, '\0', WFM_API_PASSWORD_SIZE );
 80051ae:	2240      	movs	r2, #64	; 0x40
 80051b0:	2100      	movs	r1, #0
 80051b2:	a80b      	add	r0, sp, #44	; 0x2c
 80051b4:	f00c ffd1 	bl	801215a <memset>
  return wf200_send_command( WFM_HI_START_AP_REQ_ID, &payload, sizeof( payload ), WF200_SOFTAP_INTERFACE);
 80051b8:	2301      	movs	r3, #1
 80051ba:	2270      	movs	r2, #112	; 0x70
 80051bc:	4669      	mov	r1, sp
 80051be:	2045      	movs	r0, #69	; 0x45
 80051c0:	f7ff ff94 	bl	80050ec <wf200_send_command>
}
 80051c4:	b01c      	add	sp, #112	; 0x70
 80051c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    payload.PasswordLength = passkey_length;
 80051ca:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
    memcpy( payload.Password, passkey, passkey_length );
 80051ce:	4632      	mov	r2, r6
 80051d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80051d2:	a80b      	add	r0, sp, #44	; 0x2c
 80051d4:	f00c ff9c 	bl	8012110 <memcpy>
    memset( &payload.Password[passkey_length], 0, sizeof( payload.Password ) - passkey_length );
 80051d8:	f106 0028 	add.w	r0, r6, #40	; 0x28
 80051dc:	4468      	add	r0, sp
 80051de:	f1c6 0240 	rsb	r2, r6, #64	; 0x40
 80051e2:	2100      	movs	r1, #0
 80051e4:	3004      	adds	r0, #4
 80051e6:	f00c ffb8 	bl	801215a <memset>
 80051ea:	e7e5      	b.n	80051b8 <wf200_start_ap_command+0x4a>

080051ec <wf200_receive_frame>:
{
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	4605      	mov	r5, r0
  frame_size = (*ctrl_reg & WF200_CONT_NEXT_LEN_MASK) * 2;
 80051f2:	8803      	ldrh	r3, [r0, #0]
 80051f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
  if(frame_size == 0)
 80051f8:	005e      	lsls	r6, r3, #1
 80051fa:	b183      	cbz	r3, 800521e <wf200_receive_frame+0x32>
  read_length = frame_size + 2;
 80051fc:	1cb4      	adds	r4, r6, #2
  result = wf200_host_allocate_buffer( &network_rx_buffer, WF200_RX_FRAME_BUFFER, ROUND_UP( read_length, ROUND_UP_VALUE ), 0 );
 80051fe:	f014 0f3f 	tst.w	r4, #63	; 0x3f
 8005202:	d01c      	beq.n	800523e <wf200_receive_frame+0x52>
 8005204:	f024 023f 	bic.w	r2, r4, #63	; 0x3f
 8005208:	3240      	adds	r2, #64	; 0x40
 800520a:	2300      	movs	r3, #0
 800520c:	2101      	movs	r1, #1
 800520e:	a801      	add	r0, sp, #4
 8005210:	f7fd f8fb 	bl	800240a <wf200_host_allocate_buffer>
  ERROR_CHECK( result );
 8005214:	4603      	mov	r3, r0
 8005216:	b1a0      	cbz	r0, 8005242 <wf200_receive_frame+0x56>
}
 8005218:	4618      	mov	r0, r3
 800521a:	b002      	add	sp, #8
 800521c:	bd70      	pop	{r4, r5, r6, pc}
    result = wf200_reg_read_16( WF200_CONTROL_REG_ID, ctrl_reg );
 800521e:	4601      	mov	r1, r0
 8005220:	2001      	movs	r0, #1
 8005222:	f000 f8e3 	bl	80053ec <wf200_reg_read_16>
    ERROR_CHECK( result );
 8005226:	4603      	mov	r3, r0
 8005228:	2800      	cmp	r0, #0
 800522a:	d1f5      	bne.n	8005218 <wf200_receive_frame+0x2c>
    frame_size = (*ctrl_reg & WF200_CONT_NEXT_LEN_MASK) * 2;
 800522c:	882b      	ldrh	r3, [r5, #0]
 800522e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    if(frame_size == 0)
 8005232:	005e      	lsls	r6, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e1      	bne.n	80051fc <wf200_receive_frame+0x10>
     result = SL_WIFI_NO_PACKET_TO_RECEIVE;
 8005238:	f240 430f 	movw	r3, #1039	; 0x40f
  return result;
 800523c:	e7ec      	b.n	8005218 <wf200_receive_frame+0x2c>
  result = wf200_host_allocate_buffer( &network_rx_buffer, WF200_RX_FRAME_BUFFER, ROUND_UP( read_length, ROUND_UP_VALUE ), 0 );
 800523e:	4622      	mov	r2, r4
 8005240:	e7e3      	b.n	800520a <wf200_receive_frame+0x1e>
  memset( network_rx_buffer, 0, read_length );
 8005242:	4622      	mov	r2, r4
 8005244:	2100      	movs	r1, #0
 8005246:	9801      	ldr	r0, [sp, #4]
 8005248:	f00c ff87 	bl	801215a <memset>
  result = wf200_data_read( network_rx_buffer, read_length );
 800524c:	4621      	mov	r1, r4
 800524e:	9801      	ldr	r0, [sp, #4]
 8005250:	f000 f91f 	bl	8005492 <wf200_data_read>
  ERROR_CHECK( result );
 8005254:	4603      	mov	r3, r0
 8005256:	2800      	cmp	r0, #0
 8005258:	d1de      	bne.n	8005218 <wf200_receive_frame+0x2c>
  network_rx_buffer->msg_len = UNPACK_16BIT_LITTLE_ENDIAN(&network_rx_buffer->msg_len);
 800525a:	9b01      	ldr	r3, [sp, #4]
 800525c:	781a      	ldrb	r2, [r3, #0]
 800525e:	7859      	ldrb	r1, [r3, #1]
 8005260:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005264:	801a      	strh	r2, [r3, #0]
  network_rx_buffer->msg_id  = UNPACK_16BIT_LITTLE_ENDIAN(&network_rx_buffer->msg_id)  & 0xFF;
 8005266:	9901      	ldr	r1, [sp, #4]
  frame_type = ((*ctrl_reg & WF200_CONT_FRAME_TYPE_INFO) >> WF200_CONT_FRAME_TYPE_OFFSET);
 8005268:	8828      	ldrh	r0, [r5, #0]
  *ctrl_reg = UNPACK_16BIT_LITTLE_ENDIAN(((uint8_t*)network_rx_buffer) + frame_size);
 800526a:	5d8b      	ldrb	r3, [r1, r6]
 800526c:	1c72      	adds	r2, r6, #1
 800526e:	5c8a      	ldrb	r2, [r1, r2]
 8005270:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005274:	802b      	strh	r3, [r5, #0]
  result = wf200_host_post_event(frame_type, network_rx_buffer->msg_id, network_rx_buffer, frame_size);
 8005276:	4633      	mov	r3, r6
 8005278:	460a      	mov	r2, r1
 800527a:	7889      	ldrb	r1, [r1, #2]
 800527c:	0b80      	lsrs	r0, r0, #14
 800527e:	f7fd f963 	bl	8002548 <wf200_host_post_event>
 8005282:	4603      	mov	r3, r0
 8005284:	e7c8      	b.n	8005218 <wf200_receive_frame+0x2c>

08005286 <wf200_enable_irq>:
{
 8005286:	b500      	push	{lr}
 8005288:	b083      	sub	sp, #12
    result = wf200_host_enable_platform_interrupt();
 800528a:	f7fd fc67 	bl	8002b5c <wf200_host_enable_platform_interrupt>
    ERROR_CHECK(result);
 800528e:	4603      	mov	r3, r0
 8005290:	b118      	cbz	r0, 800529a <wf200_enable_irq+0x14>
}
 8005292:	4618      	mov	r0, r3
 8005294:	b003      	add	sp, #12
 8005296:	f85d fb04 	ldr.w	pc, [sp], #4
    result = wf200_reg_read_32( WF200_CONFIG_REG_ID, &value32);
 800529a:	a901      	add	r1, sp, #4
 800529c:	f000 f8cb 	bl	8005436 <wf200_reg_read_32>
    ERROR_CHECK(result);
 80052a0:	4603      	mov	r3, r0
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d1f5      	bne.n	8005292 <wf200_enable_irq+0xc>
    value32 |= WF200_CONF_IRQ_RDY_ENABLE;
 80052a6:	9901      	ldr	r1, [sp, #4]
 80052a8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 80052ac:	9101      	str	r1, [sp, #4]
    result = wf200_reg_write_32( WF200_CONFIG_REG_ID, value32);
 80052ae:	f000 f8db 	bl	8005468 <wf200_reg_write_32>
 80052b2:	4603      	mov	r3, r0
    return result;
 80052b4:	e7ed      	b.n	8005292 <wf200_enable_irq+0xc>

080052b6 <wf200_disable_irq>:
{
 80052b6:	b500      	push	{lr}
 80052b8:	b083      	sub	sp, #12
    result = wf200_reg_read_32( WF200_CONFIG_REG_ID, &value32);
 80052ba:	a901      	add	r1, sp, #4
 80052bc:	2000      	movs	r0, #0
 80052be:	f000 f8ba 	bl	8005436 <wf200_reg_read_32>
    ERROR_CHECK(result);
 80052c2:	4603      	mov	r3, r0
 80052c4:	b118      	cbz	r0, 80052ce <wf200_disable_irq+0x18>
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	b003      	add	sp, #12
 80052ca:	f85d fb04 	ldr.w	pc, [sp], #4
    value32 &= ~WF200_CONF_IRQ_RDY_ENABLE;
 80052ce:	9901      	ldr	r1, [sp, #4]
 80052d0:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80052d4:	9101      	str	r1, [sp, #4]
    result = wf200_reg_write_32( WF200_CONFIG_REG_ID, value32);
 80052d6:	f000 f8c7 	bl	8005468 <wf200_reg_write_32>
    ERROR_CHECK(result);
 80052da:	4603      	mov	r3, r0
 80052dc:	2800      	cmp	r0, #0
 80052de:	d1f2      	bne.n	80052c6 <wf200_disable_irq+0x10>
    result = wf200_host_disable_platform_interrupt();
 80052e0:	f7fd fc46 	bl	8002b70 <wf200_host_disable_platform_interrupt>
 80052e4:	4603      	mov	r3, r0
    return result;
 80052e6:	e7ee      	b.n	80052c6 <wf200_disable_irq+0x10>

080052e8 <wf200_set_access_mode_message>:
{
 80052e8:	b500      	push	{lr}
 80052ea:	b083      	sub	sp, #12
    result = wf200_reg_read_32( WF200_CONFIG_REG_ID, &val32 );
 80052ec:	a901      	add	r1, sp, #4
 80052ee:	2000      	movs	r0, #0
 80052f0:	f000 f8a1 	bl	8005436 <wf200_reg_read_32>
    ERROR_CHECK( result );
 80052f4:	4603      	mov	r3, r0
 80052f6:	b118      	cbz	r0, 8005300 <wf200_set_access_mode_message+0x18>
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	b003      	add	sp, #12
 80052fc:	f85d fb04 	ldr.w	pc, [sp], #4
    result = wf200_reg_write_32( WF200_CONFIG_REG_ID, val32 & ~WF200_CONFIG_ACCESS_MODE_BIT );
 8005300:	9901      	ldr	r1, [sp, #4]
 8005302:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005306:	f000 f8af 	bl	8005468 <wf200_reg_write_32>
 800530a:	4603      	mov	r3, r0
    return result;
 800530c:	e7f4      	b.n	80052f8 <wf200_set_access_mode_message+0x10>
	...

08005310 <wf200_init>:
{
 8005310:	b530      	push	{r4, r5, lr}
 8005312:	b083      	sub	sp, #12
 8005314:	4605      	mov	r5, r0
  memset( context, 0, sizeof( *context ) );
 8005316:	f44f 720f 	mov.w	r2, #572	; 0x23c
 800531a:	2100      	movs	r1, #0
 800531c:	f00c ff1d 	bl	801215a <memset>
  wf200_context = context;
 8005320:	4b2f      	ldr	r3, [pc, #188]	; (80053e0 <wf200_init+0xd0>)
 8005322:	601d      	str	r5, [r3, #0]
  wf200_context->used_buffer_number = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	82ab      	strh	r3, [r5, #20]
  result = wf200_init_bus(  );
 8005328:	f000 f980 	bl	800562c <wf200_init_bus>
  ERROR_CHECK( result );
 800532c:	4604      	mov	r4, r0
 800532e:	b120      	cbz	r0, 800533a <wf200_init+0x2a>
  if ( result != SL_SUCCESS )
 8005330:	2c00      	cmp	r4, #0
 8005332:	d14e      	bne.n	80053d2 <wf200_init+0xc2>
}
 8005334:	4620      	mov	r0, r4
 8005336:	b003      	add	sp, #12
 8005338:	bd30      	pop	{r4, r5, pc}
  result = wf200_init_chip( );
 800533a:	f7ff fbcd 	bl	8004ad8 <wf200_init_chip>
  ERROR_CHECK( result );
 800533e:	4604      	mov	r4, r0
 8005340:	2800      	cmp	r0, #0
 8005342:	d1f5      	bne.n	8005330 <wf200_init+0x20>
  result = wf200_download_run_bootloader();
 8005344:	f7ff fc5a 	bl	8004bfc <wf200_download_run_bootloader>
  ERROR_CHECK( result );
 8005348:	4604      	mov	r4, r0
 800534a:	2800      	cmp	r0, #0
 800534c:	d1f0      	bne.n	8005330 <wf200_init+0x20>
  wf200_context->waited_event_id = HI_STARTUP_IND_ID;
 800534e:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <wf200_init+0xd0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	22e1      	movs	r2, #225	; 0xe1
 8005354:	609a      	str	r2, [r3, #8]
  result = wf200_download_run_firmware( );
 8005356:	f7ff fca1 	bl	8004c9c <wf200_download_run_firmware>
  ERROR_CHECK( result );
 800535a:	4604      	mov	r4, r0
 800535c:	2800      	cmp	r0, #0
 800535e:	d1e7      	bne.n	8005330 <wf200_init+0x20>
  result = wf200_enable_irq(  );
 8005360:	f7ff ff91 	bl	8005286 <wf200_enable_irq>
  ERROR_CHECK( result );
 8005364:	4604      	mov	r4, r0
 8005366:	2800      	cmp	r0, #0
 8005368:	d1e2      	bne.n	8005330 <wf200_init+0x20>
  result = wf200_set_access_mode_message(  );
 800536a:	f7ff ffbd 	bl	80052e8 <wf200_set_access_mode_message>
  ERROR_CHECK( result );
 800536e:	4604      	mov	r4, r0
 8005370:	2800      	cmp	r0, #0
 8005372:	d1dd      	bne.n	8005330 <wf200_init+0x20>
  result = wf200_host_wait_for_confirmation( WF200_DEFAULT_REQUEST_TIMEOUT, (void **)&startup_info );
 8005374:	a901      	add	r1, sp, #4
 8005376:	f241 3088 	movw	r0, #5000	; 0x1388
 800537a:	f7fd f81b 	bl	80023b4 <wf200_host_wait_for_confirmation>
  ERROR_CHECK( result );
 800537e:	4604      	mov	r4, r0
 8005380:	2800      	cmp	r0, #0
 8005382:	d1d5      	bne.n	8005330 <wf200_init+0x20>
  memcpy(&(context->mac_addr_0.octet), startup_info->Body.MacAddr0, sizeof(wf200_mac_address_t));
 8005384:	9b01      	ldr	r3, [sp, #4]
 8005386:	461a      	mov	r2, r3
 8005388:	f852 1f26 	ldr.w	r1, [r2, #38]!
 800538c:	f8c5 1016 	str.w	r1, [r5, #22]
 8005390:	8892      	ldrh	r2, [r2, #4]
 8005392:	836a      	strh	r2, [r5, #26]
  memcpy(&(context->mac_addr_1.octet), startup_info->Body.MacAddr1, sizeof(wf200_mac_address_t));
 8005394:	461a      	mov	r2, r3
 8005396:	f852 1f2c 	ldr.w	r1, [r2, #44]!
 800539a:	61e9      	str	r1, [r5, #28]
 800539c:	8892      	ldrh	r2, [r2, #4]
 800539e:	842a      	strh	r2, [r5, #32]
  wf200_input_buffer_number = startup_info->Body.NumInpChBufs;
 80053a0:	8c1a      	ldrh	r2, [r3, #32]
 80053a2:	4b10      	ldr	r3, [pc, #64]	; (80053e4 <wf200_init+0xd4>)
 80053a4:	801a      	strh	r2, [r3, #0]
  wf200_host_set_wake_up_pin(1);
 80053a6:	2001      	movs	r0, #1
 80053a8:	f7fc fff0 	bl	800238c <wf200_host_set_wake_up_pin>
  for ( uint8_t a = 0; a < ARRAY_COUNT(wf200_pds); a++ )
 80053ac:	2500      	movs	r5, #0
 80053ae:	2d05      	cmp	r5, #5
 80053b0:	d8be      	bhi.n	8005330 <wf200_init+0x20>
    result = wf200_send_configuration( wf200_pds[a],strlen(wf200_pds[a]) );
 80053b2:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <wf200_init+0xd8>)
 80053b4:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
 80053b8:	4620      	mov	r0, r4
 80053ba:	f7fa ff23 	bl	8000204 <strlen>
 80053be:	4601      	mov	r1, r0
 80053c0:	4620      	mov	r0, r4
 80053c2:	f7ff fe55 	bl	8005070 <wf200_send_configuration>
    ERROR_CHECK( result );
 80053c6:	4604      	mov	r4, r0
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d1b1      	bne.n	8005330 <wf200_init+0x20>
  for ( uint8_t a = 0; a < ARRAY_COUNT(wf200_pds); a++ )
 80053cc:	3501      	adds	r5, #1
 80053ce:	b2ed      	uxtb	r5, r5
 80053d0:	e7ed      	b.n	80053ae <wf200_init+0x9e>
    wf200_disable_irq( );
 80053d2:	f7ff ff70 	bl	80052b6 <wf200_disable_irq>
    wf200_deinit_bus();
 80053d6:	f000 f9d1 	bl	800577c <wf200_deinit_bus>
    wf200_host_deinit();
 80053da:	f7fc ffbd 	bl	8002358 <wf200_host_deinit>
  return result;
 80053de:	e7a9      	b.n	8005334 <wf200_init+0x24>
 80053e0:	200072d8 	.word	0x200072d8
 80053e4:	2000034a 	.word	0x2000034a
 80053e8:	0805e578 	.word	0x0805e578

080053ec <wf200_reg_read_16>:

#define MAX_RETRIES 3
#define CONFIG_PREFECH_BIT (1 << 13)

sl_status_t wf200_reg_read_16( wf200_register_address_t address, uint16_t* value_out )
{
 80053ec:	b510      	push	{r4, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	460c      	mov	r4, r1
    uint8_t tmp[4];
    sl_status_t result = wf200_reg_read(  address, tmp, sizeof( tmp ) );
 80053f2:	2204      	movs	r2, #4
 80053f4:	eb0d 0102 	add.w	r1, sp, r2
 80053f8:	f000 f8a8 	bl	800554c <wf200_reg_read>

    *value_out = UNPACK_16BIT_LITTLE_ENDIAN( tmp );
 80053fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005400:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005408:	8023      	strh	r3, [r4, #0]

    return result;
}
 800540a:	b002      	add	sp, #8
 800540c:	bd10      	pop	{r4, pc}

0800540e <wf200_reg_write_16>:

sl_status_t wf200_reg_write_16( wf200_register_address_t address, uint16_t value_in )
{
 800540e:	b500      	push	{lr}
 8005410:	b083      	sub	sp, #12
    uint8_t tmp[4];

    PACK_16BIT_LITTLE_ENDIAN( tmp, value_in );
 8005412:	f88d 1004 	strb.w	r1, [sp, #4]
 8005416:	0a09      	lsrs	r1, r1, #8
 8005418:	f88d 1005 	strb.w	r1, [sp, #5]
    tmp[2] = 0;
 800541c:	2300      	movs	r3, #0
 800541e:	f88d 3006 	strb.w	r3, [sp, #6]
    tmp[3] = 0;
 8005422:	f88d 3007 	strb.w	r3, [sp, #7]

    return wf200_reg_write(  address, tmp, sizeof( tmp ) );
 8005426:	2204      	movs	r2, #4
 8005428:	eb0d 0102 	add.w	r1, sp, r2
 800542c:	f000 f8d8 	bl	80055e0 <wf200_reg_write>
}
 8005430:	b003      	add	sp, #12
 8005432:	f85d fb04 	ldr.w	pc, [sp], #4

08005436 <wf200_reg_read_32>:

sl_status_t wf200_reg_read_32( wf200_register_address_t address, uint32_t* value_out )
{
 8005436:	b510      	push	{r4, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	460c      	mov	r4, r1
    uint8_t tmp[4];
    sl_status_t result = wf200_reg_read( address, tmp, sizeof( tmp ) );
 800543c:	2204      	movs	r2, #4
 800543e:	eb0d 0102 	add.w	r1, sp, r2
 8005442:	f000 f883 	bl	800554c <wf200_reg_read>

    *value_out = UNPACK_32BIT_LITTLE_ENDIAN( tmp );
 8005446:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800544a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800544e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005452:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8005456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800545a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800545e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005462:	6023      	str	r3, [r4, #0]
    return result;
}
 8005464:	b002      	add	sp, #8
 8005466:	bd10      	pop	{r4, pc}

08005468 <wf200_reg_write_32>:

sl_status_t wf200_reg_write_32( wf200_register_address_t address, uint32_t value_in )
{
 8005468:	b500      	push	{lr}
 800546a:	b083      	sub	sp, #12
    uint8_t tmp[4];

    PACK_32BIT_LITTLE_ENDIAN( tmp, value_in );
 800546c:	f88d 1004 	strb.w	r1, [sp, #4]
 8005470:	0a0b      	lsrs	r3, r1, #8
 8005472:	f88d 3005 	strb.w	r3, [sp, #5]
 8005476:	0c0b      	lsrs	r3, r1, #16
 8005478:	f88d 3006 	strb.w	r3, [sp, #6]
 800547c:	0e09      	lsrs	r1, r1, #24
 800547e:	f88d 1007 	strb.w	r1, [sp, #7]

    return wf200_reg_write( address, tmp, sizeof( tmp ) );
 8005482:	2204      	movs	r2, #4
 8005484:	eb0d 0102 	add.w	r1, sp, r2
 8005488:	f000 f8aa 	bl	80055e0 <wf200_reg_write>
}
 800548c:	b003      	add	sp, #12
 800548e:	f85d fb04 	ldr.w	pc, [sp], #4

08005492 <wf200_data_read>:

sl_status_t wf200_data_read( void* buffer, uint32_t length )
{
 8005492:	b508      	push	{r3, lr}
    sl_status_t result;

    result = wf200_reg_read(  WF200_IN_OUT_QUEUE_REG_ID, buffer, length );
 8005494:	460a      	mov	r2, r1
 8005496:	4601      	mov	r1, r0
 8005498:	2002      	movs	r0, #2
 800549a:	f000 f857 	bl	800554c <wf200_reg_read>

    return result;
}
 800549e:	bd08      	pop	{r3, pc}

080054a0 <wf200_data_write>:

sl_status_t wf200_data_write( const void* buffer, uint32_t length )
{
 80054a0:	b508      	push	{r3, lr}
    sl_status_t result;

    result = wf200_reg_write(  WF200_IN_OUT_QUEUE_REG_ID, buffer, length );
 80054a2:	460a      	mov	r2, r1
 80054a4:	4601      	mov	r1, r0
 80054a6:	2002      	movs	r0, #2
 80054a8:	f000 f89a 	bl	80055e0 <wf200_reg_write>

    return result;
}
 80054ac:	bd08      	pop	{r3, pc}

080054ae <wf200_apb_write>:

sl_status_t wf200_apb_write( uint32_t address, const void* buffer, uint32_t length )
{
 80054ae:	b538      	push	{r3, r4, r5, lr}
    sl_status_t result;
    if ( length / 2 >= 0x1000 )
 80054b0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80054b4:	d302      	bcc.n	80054bc <wf200_apb_write+0xe>
    {
        return SL_BAD_ARG;
 80054b6:	2305      	movs	r3, #5
    {
        result = wf200_reg_write(  WF200_SRAM_DPORT_REG_ID, buffer, length );
    }

    return result;
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	4614      	mov	r4, r2
 80054be:	460d      	mov	r5, r1
 80054c0:	4601      	mov	r1, r0
    result = wf200_reg_write_32( WF200_SRAM_BASE_ADDR_REG_ID, address );
 80054c2:	2004      	movs	r0, #4
 80054c4:	f7ff ffd0 	bl	8005468 <wf200_reg_write_32>
    if ( result == SL_SUCCESS )
 80054c8:	4603      	mov	r3, r0
 80054ca:	2800      	cmp	r0, #0
 80054cc:	d1f4      	bne.n	80054b8 <wf200_apb_write+0xa>
        result = wf200_reg_write(  WF200_SRAM_DPORT_REG_ID, buffer, length );
 80054ce:	4622      	mov	r2, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	2005      	movs	r0, #5
 80054d4:	f000 f884 	bl	80055e0 <wf200_reg_write>
 80054d8:	4603      	mov	r3, r0
 80054da:	e7ed      	b.n	80054b8 <wf200_apb_write+0xa>

080054dc <wf200_apb_write_32>:

sl_status_t wf200_apb_write_32( uint32_t address, uint32_t value_in )
{
 80054dc:	b510      	push	{r4, lr}
 80054de:	460c      	mov	r4, r1
    sl_status_t result;

    result = wf200_reg_write_32( WF200_SRAM_BASE_ADDR_REG_ID, address );
 80054e0:	4601      	mov	r1, r0
 80054e2:	2004      	movs	r0, #4
 80054e4:	f7ff ffc0 	bl	8005468 <wf200_reg_write_32>

    if ( result == SL_SUCCESS )
 80054e8:	4603      	mov	r3, r0
 80054ea:	b108      	cbz	r0, 80054f0 <wf200_apb_write_32+0x14>
    {
        result = wf200_reg_write_32( WF200_SRAM_DPORT_REG_ID, value_in );
    }

    return result;
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd10      	pop	{r4, pc}
        result = wf200_reg_write_32( WF200_SRAM_DPORT_REG_ID, value_in );
 80054f0:	4621      	mov	r1, r4
 80054f2:	2005      	movs	r0, #5
 80054f4:	f7ff ffb8 	bl	8005468 <wf200_reg_write_32>
 80054f8:	4603      	mov	r3, r0
    return result;
 80054fa:	e7f7      	b.n	80054ec <wf200_apb_write_32+0x10>

080054fc <wf200_apb_read_32>:

sl_status_t wf200_apb_read_32( uint32_t address, uint32_t* value_out )
{
 80054fc:	b530      	push	{r4, r5, lr}
 80054fe:	b083      	sub	sp, #12
 8005500:	460d      	mov	r5, r1
    uint32_t value32;
    sl_status_t result;

    // write address
    result = wf200_reg_write_32( WF200_SRAM_BASE_ADDR_REG_ID, address );
 8005502:	4601      	mov	r1, r0
 8005504:	2004      	movs	r0, #4
 8005506:	f7ff ffaf 	bl	8005468 <wf200_reg_write_32>

    // set the "prefetch" bit
    result = wf200_reg_read_32( WF200_CONFIG_REG_ID, &value32 );
 800550a:	a901      	add	r1, sp, #4
 800550c:	2000      	movs	r0, #0
 800550e:	f7ff ff92 	bl	8005436 <wf200_reg_read_32>
    result = wf200_reg_write_32( WF200_CONFIG_REG_ID, value32 | CONFIG_PREFECH_BIT );
 8005512:	9901      	ldr	r1, [sp, #4]
 8005514:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8005518:	2000      	movs	r0, #0
 800551a:	f7ff ffa5 	bl	8005468 <wf200_reg_write_32>

    // and wait for the prefetch bit to clear
    for ( uint32_t i = 0; i < 20; i++ )
 800551e:	2400      	movs	r4, #0
 8005520:	2c13      	cmp	r4, #19
 8005522:	d80c      	bhi.n	800553e <wf200_apb_read_32+0x42>
    {
        result = wf200_reg_read_32( WF200_CONFIG_REG_ID, &value32 );
 8005524:	a901      	add	r1, sp, #4
 8005526:	2000      	movs	r0, #0
 8005528:	f7ff ff85 	bl	8005436 <wf200_reg_read_32>
        if ( ( value32 & CONFIG_PREFECH_BIT ) == 0 )
 800552c:	9b01      	ldr	r3, [sp, #4]
 800552e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005532:	d004      	beq.n	800553e <wf200_apb_read_32+0x42>
        {
            break;
        }

        wf200_host_wait( 1 );
 8005534:	2001      	movs	r0, #1
 8005536:	f7fc ff63 	bl	8002400 <wf200_host_wait>
    for ( uint32_t i = 0; i < 20; i++ )
 800553a:	3401      	adds	r4, #1
 800553c:	e7f0      	b.n	8005520 <wf200_apb_read_32+0x24>
    }

    // and data is ready
    result = wf200_reg_read_32( WF200_SRAM_DPORT_REG_ID, value_out );
 800553e:	4629      	mov	r1, r5
 8005540:	2005      	movs	r0, #5
 8005542:	f7ff ff78 	bl	8005436 <wf200_reg_read_32>

    return result;
}
 8005546:	b003      	add	sp, #12
 8005548:	bd30      	pop	{r4, r5, pc}
	...

0800554c <wf200_reg_read>:
static uint32_t            rx_buffer_id;
static uint32_t            tx_buffer_id;


sl_status_t wf200_reg_read( wf200_register_address_t address, void* buffer, uint32_t length )
{
 800554c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	4605      	mov	r5, r0
 8005554:	460e      	mov	r6, r1
 8005556:	4614      	mov	r4, r2
    sl_status_t result;
    uint32_t buffer_id = 0;
    uint32_t reg_address;
    uint16_t control_register;
    uint32_t current_transfer_size = ( length >= WF200_SDIO_BLOCK_MODE_THRESHOLD ) ? ROUND_UP( length, WF200_SDIO_BLOCK_SIZE ) : length;
 8005558:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800555c:	d306      	bcc.n	800556c <wf200_reg_read+0x20>
 800555e:	f012 0f3f 	tst.w	r2, #63	; 0x3f
 8005562:	d018      	beq.n	8005596 <wf200_reg_read+0x4a>
 8005564:	f022 073f 	bic.w	r7, r2, #63	; 0x3f
 8005568:	3740      	adds	r7, #64	; 0x40
 800556a:	e000      	b.n	800556e <wf200_reg_read+0x22>
 800556c:	4617      	mov	r7, r2

    if ( address == WF200_IN_OUT_QUEUE_REG_ID )
 800556e:	2d02      	cmp	r5, #2
 8005570:	d013      	beq.n	800559a <wf200_reg_read+0x4e>
    uint32_t buffer_id = 0;
 8005572:	2200      	movs	r2, #0
        {
            rx_buffer_id = 1;
        }
    }

    reg_address = ( buffer_id << 7 ) | ( address << 2 );
 8005574:	00a9      	lsls	r1, r5, #2

    result = wf200_host_sdio_transfer_cmd53( WF200_BUS_READ, 1, reg_address, buffer, current_transfer_size );
 8005576:	b2bb      	uxth	r3, r7
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	4633      	mov	r3, r6
 800557c:	ea41 12c2 	orr.w	r2, r1, r2, lsl #7
 8005580:	2101      	movs	r1, #1
 8005582:	2002      	movs	r0, #2
 8005584:	f7fd faac 	bl	8002ae0 <wf200_host_sdio_transfer_cmd53>
 8005588:	4680      	mov	r8, r0
    
    if ( address == WF200_IN_OUT_QUEUE_REG_ID )
 800558a:	2d02      	cmp	r5, #2
 800558c:	d00f      	beq.n	80055ae <wf200_reg_read+0x62>
      if((control_register & WF200_CONT_NEXT_LEN_MASK) == 0){
        wf200_reg_read_32( WF200_CONFIG_REG_ID, NULL );
      }
    }
    return result;
}
 800558e:	4640      	mov	r0, r8
 8005590:	b002      	add	sp, #8
 8005592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t current_transfer_size = ( length >= WF200_SDIO_BLOCK_MODE_THRESHOLD ) ? ROUND_UP( length, WF200_SDIO_BLOCK_SIZE ) : length;
 8005596:	4617      	mov	r7, r2
 8005598:	e7e9      	b.n	800556e <wf200_reg_read+0x22>
        buffer_id = rx_buffer_id++;
 800559a:	4910      	ldr	r1, [pc, #64]	; (80055dc <wf200_reg_read+0x90>)
 800559c:	680a      	ldr	r2, [r1, #0]
 800559e:	1c53      	adds	r3, r2, #1
 80055a0:	600b      	str	r3, [r1, #0]
        if ( rx_buffer_id > 4 )
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d9e6      	bls.n	8005574 <wf200_reg_read+0x28>
            rx_buffer_id = 1;
 80055a6:	2101      	movs	r1, #1
 80055a8:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <wf200_reg_read+0x90>)
 80055aa:	6019      	str	r1, [r3, #0]
 80055ac:	e7e2      	b.n	8005574 <wf200_reg_read+0x28>
      if( length > WF200_SDIO_BLOCK_MODE_THRESHOLD)
 80055ae:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80055b2:	d903      	bls.n	80055bc <wf200_reg_read+0x70>
        memcpy( (uint8_t*)((uint8_t*)buffer + length - 2), (uint8_t*)((uint8_t*)buffer + current_transfer_size - 2), 2);
 80055b4:	1ea3      	subs	r3, r4, #2
 80055b6:	3f02      	subs	r7, #2
 80055b8:	5bf2      	ldrh	r2, [r6, r7]
 80055ba:	52f2      	strh	r2, [r6, r3]
      control_register = UNPACK_16BIT_LITTLE_ENDIAN(((uint8_t*)buffer) + length - 2);
 80055bc:	1ea3      	subs	r3, r4, #2
 80055be:	5cf3      	ldrb	r3, [r6, r3]
 80055c0:	3c01      	subs	r4, #1
 80055c2:	5d32      	ldrb	r2, [r6, r4]
 80055c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      if((control_register & WF200_CONT_NEXT_LEN_MASK) == 0){
 80055c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1de      	bne.n	800558e <wf200_reg_read+0x42>
        wf200_reg_read_32( WF200_CONFIG_REG_ID, NULL );
 80055d0:	2100      	movs	r1, #0
 80055d2:	4608      	mov	r0, r1
 80055d4:	f7ff ff2f 	bl	8005436 <wf200_reg_read_32>
    return result;
 80055d8:	e7d9      	b.n	800558e <wf200_reg_read+0x42>
 80055da:	bf00      	nop
 80055dc:	2000034c 	.word	0x2000034c

080055e0 <wf200_reg_write>:

sl_status_t wf200_reg_write( wf200_register_address_t address, const void* buffer, uint32_t length )
{
 80055e0:	b530      	push	{r4, r5, lr}
 80055e2:	b083      	sub	sp, #12
 80055e4:	460b      	mov	r3, r1
    uint32_t buffer_id = 0;
    uint32_t reg_address;
    uint32_t current_transfer_size = ( length >= WF200_SDIO_BLOCK_MODE_THRESHOLD ) ? ROUND_UP( length, WF200_SDIO_BLOCK_SIZE ) : length;
 80055e6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80055ea:	d305      	bcc.n	80055f8 <wf200_reg_write+0x18>
 80055ec:	f012 0f3f 	tst.w	r2, #63	; 0x3f
 80055f0:	d002      	beq.n	80055f8 <wf200_reg_write+0x18>
 80055f2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80055f6:	3240      	adds	r2, #64	; 0x40

    if ( address == WF200_IN_OUT_QUEUE_REG_ID )
 80055f8:	2802      	cmp	r0, #2
 80055fa:	d00b      	beq.n	8005614 <wf200_reg_write+0x34>
    uint32_t buffer_id = 0;
 80055fc:	2500      	movs	r5, #0
        {
            tx_buffer_id = 0;
        }
    }

    reg_address = ( buffer_id << 7 ) | ( address << 2 );
 80055fe:	0080      	lsls	r0, r0, #2

    return wf200_host_sdio_transfer_cmd53( WF200_BUS_WRITE, 1, reg_address, (void*)buffer, current_transfer_size );
 8005600:	b292      	uxth	r2, r2
 8005602:	9200      	str	r2, [sp, #0]
 8005604:	ea40 12c5 	orr.w	r2, r0, r5, lsl #7
 8005608:	2101      	movs	r1, #1
 800560a:	4608      	mov	r0, r1
 800560c:	f7fd fa68 	bl	8002ae0 <wf200_host_sdio_transfer_cmd53>
}
 8005610:	b003      	add	sp, #12
 8005612:	bd30      	pop	{r4, r5, pc}
        buffer_id = tx_buffer_id++;
 8005614:	4c04      	ldr	r4, [pc, #16]	; (8005628 <wf200_reg_write+0x48>)
 8005616:	6825      	ldr	r5, [r4, #0]
 8005618:	1c69      	adds	r1, r5, #1
 800561a:	6021      	str	r1, [r4, #0]
        if ( tx_buffer_id > 31 )
 800561c:	291f      	cmp	r1, #31
 800561e:	d9ee      	bls.n	80055fe <wf200_reg_write+0x1e>
            tx_buffer_id = 0;
 8005620:	2400      	movs	r4, #0
 8005622:	4901      	ldr	r1, [pc, #4]	; (8005628 <wf200_reg_write+0x48>)
 8005624:	600c      	str	r4, [r1, #0]
 8005626:	e7ea      	b.n	80055fe <wf200_reg_write+0x1e>
 8005628:	20000350 	.word	0x20000350

0800562c <wf200_init_bus>:


sl_status_t wf200_init_bus( void )
{
 800562c:	b500      	push	{lr}
 800562e:	b083      	sub	sp, #12
    sl_status_t result;
    uint32_t    value32;
    uint8_t     value_u8;

    rx_buffer_id = 1;
 8005630:	2201      	movs	r2, #1
 8005632:	4b50      	ldr	r3, [pc, #320]	; (8005774 <wf200_init_bus+0x148>)
 8005634:	601a      	str	r2, [r3, #0]
    tx_buffer_id = 0;
 8005636:	2200      	movs	r2, #0
 8005638:	4b4f      	ldr	r3, [pc, #316]	; (8005778 <wf200_init_bus+0x14c>)
 800563a:	601a      	str	r2, [r3, #0]

    wf200_host_reset_chip( );
 800563c:	f7fc fe8e 	bl	800235c <wf200_host_reset_chip>
    
    result = wf200_host_init_bus();
 8005640:	f7fd f8d0 	bl	80027e4 <wf200_host_init_bus>
    ERROR_CHECK(result);
 8005644:	4603      	mov	r3, r0
 8005646:	b118      	cbz	r0, 8005650 <wf200_init_bus+0x24>
        ERROR_CHECK( result );
    }

error_handler:
    return result;
}
 8005648:	4618      	mov	r0, r3
 800564a:	b003      	add	sp, #12
 800564c:	f85d fb04 	ldr.w	pc, [sp], #4
    result = wf200_host_sdio_transfer_cmd52( WF200_BUS_READ, 0, 2, &value_u8 );
 8005650:	f10d 0303 	add.w	r3, sp, #3
 8005654:	2202      	movs	r2, #2
 8005656:	2100      	movs	r1, #0
 8005658:	4610      	mov	r0, r2
 800565a:	f7fd f8fd 	bl	8002858 <wf200_host_sdio_transfer_cmd52>
    ERROR_CHECK( result );
 800565e:	4603      	mov	r3, r0
 8005660:	2800      	cmp	r0, #0
 8005662:	d1f1      	bne.n	8005648 <wf200_init_bus+0x1c>
    value_u8 |= ( 1 << 1 );
 8005664:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005668:	f042 0202 	orr.w	r2, r2, #2
 800566c:	ab02      	add	r3, sp, #8
 800566e:	f803 2d05 	strb.w	r2, [r3, #-5]!
    result = wf200_host_sdio_transfer_cmd52( WF200_BUS_WRITE, 0, 2, &value_u8 );
 8005672:	2202      	movs	r2, #2
 8005674:	2100      	movs	r1, #0
 8005676:	2001      	movs	r0, #1
 8005678:	f7fd f8ee 	bl	8002858 <wf200_host_sdio_transfer_cmd52>
    ERROR_CHECK( result );
 800567c:	4603      	mov	r3, r0
 800567e:	2800      	cmp	r0, #0
 8005680:	d1e2      	bne.n	8005648 <wf200_init_bus+0x1c>
    result = wf200_host_sdio_transfer_cmd52( WF200_BUS_READ, 0, 4, &value_u8 );
 8005682:	f10d 0303 	add.w	r3, sp, #3
 8005686:	2204      	movs	r2, #4
 8005688:	2100      	movs	r1, #0
 800568a:	2002      	movs	r0, #2
 800568c:	f7fd f8e4 	bl	8002858 <wf200_host_sdio_transfer_cmd52>
    ERROR_CHECK( result );
 8005690:	4603      	mov	r3, r0
 8005692:	2800      	cmp	r0, #0
 8005694:	d1d8      	bne.n	8005648 <wf200_init_bus+0x1c>
    value_u8 |= 0x1 | ( 1 << 1 );
 8005696:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800569a:	f042 0203 	orr.w	r2, r2, #3
 800569e:	ab02      	add	r3, sp, #8
 80056a0:	f803 2d05 	strb.w	r2, [r3, #-5]!
    result = wf200_host_sdio_transfer_cmd52( WF200_BUS_WRITE, 0, 4, &value_u8 );
 80056a4:	2204      	movs	r2, #4
 80056a6:	2100      	movs	r1, #0
 80056a8:	2001      	movs	r0, #1
 80056aa:	f7fd f8d5 	bl	8002858 <wf200_host_sdio_transfer_cmd52>
    ERROR_CHECK( result );
 80056ae:	4603      	mov	r3, r0
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d1c9      	bne.n	8005648 <wf200_init_bus+0x1c>
    result = wf200_host_sdio_transfer_cmd52( WF200_BUS_READ, 0, 7, &value_u8 );
 80056b4:	f10d 0303 	add.w	r3, sp, #3
 80056b8:	2207      	movs	r2, #7
 80056ba:	2100      	movs	r1, #0
 80056bc:	2002      	movs	r0, #2
 80056be:	f7fd f8cb 	bl	8002858 <wf200_host_sdio_transfer_cmd52>
    ERROR_CHECK( result );
 80056c2:	4603      	mov	r3, r0
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d1bf      	bne.n	8005648 <wf200_init_bus+0x1c>
    value_u8 = ( value_u8 & 0xFC ) | 0x2;
 80056c8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80056cc:	f022 0203 	bic.w	r2, r2, #3
 80056d0:	b252      	sxtb	r2, r2
 80056d2:	f042 0202 	orr.w	r2, r2, #2
 80056d6:	ab02      	add	r3, sp, #8
 80056d8:	f803 2d05 	strb.w	r2, [r3, #-5]!
    result = wf200_host_sdio_transfer_cmd52( WF200_BUS_WRITE, 0, 7, &value_u8 );
 80056dc:	2207      	movs	r2, #7
 80056de:	2100      	movs	r1, #0
 80056e0:	2001      	movs	r0, #1
 80056e2:	f7fd f8b9 	bl	8002858 <wf200_host_sdio_transfer_cmd52>
    ERROR_CHECK( result );
 80056e6:	4603      	mov	r3, r0
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d1ad      	bne.n	8005648 <wf200_init_bus+0x1c>
    result = wf200_host_sdio_transfer_cmd52( WF200_BUS_READ, 0, 0x13, &value_u8 );
 80056ec:	f10d 0303 	add.w	r3, sp, #3
 80056f0:	2213      	movs	r2, #19
 80056f2:	2100      	movs	r1, #0
 80056f4:	2002      	movs	r0, #2
 80056f6:	f7fd f8af 	bl	8002858 <wf200_host_sdio_transfer_cmd52>
    ERROR_CHECK( result );
 80056fa:	4603      	mov	r3, r0
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d1a3      	bne.n	8005648 <wf200_init_bus+0x1c>
    value_u8 |= 0x2; // Set EHS to 1
 8005700:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005704:	f042 0202 	orr.w	r2, r2, #2
 8005708:	ab02      	add	r3, sp, #8
 800570a:	f803 2d05 	strb.w	r2, [r3, #-5]!
    result = wf200_host_sdio_transfer_cmd52( WF200_BUS_WRITE, 0, 0x13, &value_u8 );
 800570e:	2213      	movs	r2, #19
 8005710:	2100      	movs	r1, #0
 8005712:	2001      	movs	r0, #1
 8005714:	f7fd f8a0 	bl	8002858 <wf200_host_sdio_transfer_cmd52>
    ERROR_CHECK(result);
 8005718:	4603      	mov	r3, r0
 800571a:	2800      	cmp	r0, #0
 800571c:	d194      	bne.n	8005648 <wf200_init_bus+0x1c>
    wf200_host_sdio_enable_high_speed_mode( );
 800571e:	f7fd f843 	bl	80027a8 <wf200_host_sdio_enable_high_speed_mode>
    value_u8 = WF200_SDIO_BLOCK_SIZE & 0xff;
 8005722:	ab02      	add	r3, sp, #8
 8005724:	2240      	movs	r2, #64	; 0x40
 8005726:	f803 2d05 	strb.w	r2, [r3, #-5]!
    result = wf200_host_sdio_transfer_cmd52( WF200_BUS_WRITE, 0, SDIO_FBR_FN1_BLOCK_SIZE_LSB_REGISTER, &value_u8 );
 800572a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800572e:	2100      	movs	r1, #0
 8005730:	2001      	movs	r0, #1
 8005732:	f7fd f891 	bl	8002858 <wf200_host_sdio_transfer_cmd52>
    ERROR_CHECK( result );
 8005736:	4603      	mov	r3, r0
 8005738:	2800      	cmp	r0, #0
 800573a:	d185      	bne.n	8005648 <wf200_init_bus+0x1c>
    value_u8 = ( WF200_SDIO_BLOCK_SIZE >> 8 ) & 0xff;
 800573c:	2100      	movs	r1, #0
 800573e:	ab02      	add	r3, sp, #8
 8005740:	f803 1d05 	strb.w	r1, [r3, #-5]!
    result = wf200_host_sdio_transfer_cmd52( WF200_BUS_WRITE, 0, SDIO_FBR_FN1_BLOCK_SIZE_MSB_REGISTER, &value_u8 );
 8005744:	f240 1211 	movw	r2, #273	; 0x111
 8005748:	2001      	movs	r0, #1
 800574a:	f7fd f885 	bl	8002858 <wf200_host_sdio_transfer_cmd52>
    ERROR_CHECK( result );
 800574e:	4603      	mov	r3, r0
 8005750:	2800      	cmp	r0, #0
 8005752:	f47f af79 	bne.w	8005648 <wf200_init_bus+0x1c>
    result = wf200_reg_read_32( WF200_CONFIG_REG_ID, &value32);
 8005756:	a901      	add	r1, sp, #4
 8005758:	f7ff fe6d 	bl	8005436 <wf200_reg_read_32>
    ERROR_CHECK(result);
 800575c:	4603      	mov	r3, r0
 800575e:	2800      	cmp	r0, #0
 8005760:	f47f af72 	bne.w	8005648 <wf200_init_bus+0x1c>
    if ( value32 == 0 || value32 == 0xFFFFFFFF )
 8005764:	9a01      	ldr	r2, [sp, #4]
 8005766:	3a01      	subs	r2, #1
 8005768:	f112 0f03 	cmn.w	r2, #3
 800576c:	f67f af6c 	bls.w	8005648 <wf200_init_bus+0x1c>
        result = SL_ERROR;
 8005770:	2304      	movs	r3, #4
    return result;
 8005772:	e769      	b.n	8005648 <wf200_init_bus+0x1c>
 8005774:	2000034c 	.word	0x2000034c
 8005778:	20000350 	.word	0x20000350

0800577c <wf200_deinit_bus>:

sl_status_t wf200_deinit_bus( void )
{
 800577c:	b508      	push	{r3, lr}
    return wf200_host_deinit_bus();
 800577e:	f7fd f865 	bl	800284c <wf200_host_deinit_bus>
}
 8005782:	bd08      	pop	{r3, pc}

08005784 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8005784:	2884      	cmp	r0, #132	; 0x84
 8005786:	d001      	beq.n	800578c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8005788:	3003      	adds	r0, #3
 800578a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800578c:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800578e:	4770      	bx	lr

08005790 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005790:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8005794:	3000      	adds	r0, #0
 8005796:	bf18      	it	ne
 8005798:	2001      	movne	r0, #1
 800579a:	4770      	bx	lr

0800579c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800579c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800579e:	f001 f9ed 	bl	8006b7c <vTaskStartScheduler>
  
  return osOK;
}
 80057a2:	2000      	movs	r0, #0
 80057a4:	bd08      	pop	{r3, pc}

080057a6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80057a6:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 80057a8:	f7ff fff2 	bl	8005790 <inHandlerMode>
 80057ac:	b910      	cbnz	r0, 80057b4 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 80057ae:	f001 fa2b 	bl	8006c08 <xTaskGetTickCount>
  }
}
 80057b2:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 80057b4:	f001 fa2e 	bl	8006c14 <xTaskGetTickCountFromISR>
 80057b8:	bd08      	pop	{r3, pc}

080057ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057bc:	b085      	sub	sp, #20
 80057be:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057c0:	6844      	ldr	r4, [r0, #4]
 80057c2:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057c4:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057c6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80057ca:	f7ff ffdb 	bl	8005784 <makeFreeRtosPriority>
 80057ce:	ab03      	add	r3, sp, #12
 80057d0:	9301      	str	r3, [sp, #4]
 80057d2:	9000      	str	r0, [sp, #0]
 80057d4:	463b      	mov	r3, r7
 80057d6:	b2b2      	uxth	r2, r6
 80057d8:	4629      	mov	r1, r5
 80057da:	4620      	mov	r0, r4
 80057dc:	f001 f92c 	bl	8006a38 <xTaskCreate>
 80057e0:	2801      	cmp	r0, #1
 80057e2:	d102      	bne.n	80057ea <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80057e4:	9803      	ldr	r0, [sp, #12]
}
 80057e6:	b005      	add	sp, #20
 80057e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 80057ea:	2000      	movs	r0, #0
 80057ec:	e7fb      	b.n	80057e6 <osThreadCreate+0x2c>

080057ee <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80057ee:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80057f0:	f001 f954 	bl	8006a9c <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 80057f4:	2000      	movs	r0, #0
 80057f6:	bd08      	pop	{r3, pc}

080057f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80057f8:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057fa:	4603      	mov	r3, r0
 80057fc:	b900      	cbnz	r0, 8005800 <osDelay+0x8>
 80057fe:	2301      	movs	r3, #1
 8005800:	4618      	mov	r0, r3
 8005802:	f001 fb1d 	bl	8006e40 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005806:	2000      	movs	r0, #0
 8005808:	bd08      	pop	{r3, pc}

0800580a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800580a:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800580c:	2001      	movs	r0, #1
 800580e:	f000 fde3 	bl	80063d8 <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 8005812:	bd08      	pop	{r3, pc}

08005814 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005814:	b530      	push	{r4, r5, lr}
 8005816:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005818:	2300      	movs	r3, #0
 800581a:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800581c:	b360      	cbz	r0, 8005878 <osMutexWait+0x64>
 800581e:	460c      	mov	r4, r1
 8005820:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8005822:	f1b1 3fff 	cmp.w	r1, #4294967295
 8005826:	d00d      	beq.n	8005844 <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8005828:	b901      	cbnz	r1, 800582c <osMutexWait+0x18>
  ticks = 0;
 800582a:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800582c:	f7ff ffb0 	bl	8005790 <inHandlerMode>
 8005830:	b1b8      	cbz	r0, 8005862 <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005832:	aa01      	add	r2, sp, #4
 8005834:	2100      	movs	r1, #0
 8005836:	4628      	mov	r0, r5
 8005838:	f000 ff7e 	bl	8006738 <xQueueReceiveFromISR>
 800583c:	2801      	cmp	r0, #1
 800583e:	d004      	beq.n	800584a <osMutexWait+0x36>
      return osErrorOS;
 8005840:	20ff      	movs	r0, #255	; 0xff
 8005842:	e017      	b.n	8005874 <osMutexWait+0x60>
    ticks = portMAX_DELAY;
 8005844:	f04f 34ff 	mov.w	r4, #4294967295
 8005848:	e7f0      	b.n	800582c <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800584a:	9b01      	ldr	r3, [sp, #4]
 800584c:	b1b3      	cbz	r3, 800587c <osMutexWait+0x68>
 800584e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005852:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <osMutexWait+0x70>)
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800585e:	2000      	movs	r0, #0
 8005860:	e008      	b.n	8005874 <osMutexWait+0x60>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005862:	2300      	movs	r3, #0
 8005864:	4622      	mov	r2, r4
 8005866:	4619      	mov	r1, r3
 8005868:	4628      	mov	r0, r5
 800586a:	f000 fe8d 	bl	8006588 <xQueueGenericReceive>
 800586e:	2801      	cmp	r0, #1
 8005870:	d006      	beq.n	8005880 <osMutexWait+0x6c>
    return osErrorOS;
 8005872:	20ff      	movs	r0, #255	; 0xff
}
 8005874:	b003      	add	sp, #12
 8005876:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8005878:	2080      	movs	r0, #128	; 0x80
 800587a:	e7fb      	b.n	8005874 <osMutexWait+0x60>
  return osOK;
 800587c:	2000      	movs	r0, #0
 800587e:	e7f9      	b.n	8005874 <osMutexWait+0x60>
 8005880:	2000      	movs	r0, #0
 8005882:	e7f7      	b.n	8005874 <osMutexWait+0x60>
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005888:	b510      	push	{r4, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800588e:	2300      	movs	r3, #0
 8005890:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 8005892:	f7ff ff7d 	bl	8005790 <inHandlerMode>
 8005896:	b1a0      	cbz	r0, 80058c2 <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005898:	a901      	add	r1, sp, #4
 800589a:	4620      	mov	r0, r4
 800589c:	f000 fe16 	bl	80064cc <xQueueGiveFromISR>
 80058a0:	2801      	cmp	r0, #1
 80058a2:	d002      	beq.n	80058aa <osMutexRelease+0x22>
      return osErrorOS;
 80058a4:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 80058a6:	b002      	add	sp, #8
 80058a8:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80058aa:	9b01      	ldr	r3, [sp, #4]
 80058ac:	b1ab      	cbz	r3, 80058da <osMutexRelease+0x52>
 80058ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b2:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <osMutexRelease+0x58>)
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 80058be:	2000      	movs	r0, #0
 80058c0:	e7f1      	b.n	80058a6 <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80058c2:	2300      	movs	r3, #0
 80058c4:	461a      	mov	r2, r3
 80058c6:	4619      	mov	r1, r3
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fcb5 	bl	8006238 <xQueueGenericSend>
 80058ce:	2801      	cmp	r0, #1
 80058d0:	d001      	beq.n	80058d6 <osMutexRelease+0x4e>
    result = osErrorOS;
 80058d2:	20ff      	movs	r0, #255	; 0xff
 80058d4:	e7e7      	b.n	80058a6 <osMutexRelease+0x1e>
  osStatus result = osOK;
 80058d6:	2000      	movs	r0, #0
 80058d8:	e7e5      	b.n	80058a6 <osMutexRelease+0x1e>
 80058da:	2000      	movs	r0, #0
 80058dc:	e7e3      	b.n	80058a6 <osMutexRelease+0x1e>
 80058de:	bf00      	nop
 80058e0:	e000ed04 	.word	0xe000ed04

080058e4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80058e4:	b508      	push	{r3, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80058e6:	2200      	movs	r2, #0
 80058e8:	6841      	ldr	r1, [r0, #4]
 80058ea:	6800      	ldr	r0, [r0, #0]
 80058ec:	f000 fc80 	bl	80061f0 <xQueueGenericCreate>
#endif
}
 80058f0:	bd08      	pop	{r3, pc}
	...

080058f4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80058f4:	b530      	push	{r4, r5, lr}
 80058f6:	b085      	sub	sp, #20
 80058f8:	4604      	mov	r4, r0
 80058fa:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80058fc:	2300      	movs	r3, #0
 80058fe:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8005900:	4615      	mov	r5, r2
 8005902:	b902      	cbnz	r2, 8005906 <osMessagePut+0x12>
    ticks = 1;
 8005904:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8005906:	f7ff ff43 	bl	8005790 <inHandlerMode>
 800590a:	b1a8      	cbz	r0, 8005938 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800590c:	2300      	movs	r3, #0
 800590e:	aa03      	add	r2, sp, #12
 8005910:	a901      	add	r1, sp, #4
 8005912:	4620      	mov	r0, r4
 8005914:	f000 fd6b 	bl	80063ee <xQueueGenericSendFromISR>
 8005918:	2801      	cmp	r0, #1
 800591a:	d001      	beq.n	8005920 <osMessagePut+0x2c>
      return osErrorOS;
 800591c:	20ff      	movs	r0, #255	; 0xff
 800591e:	e014      	b.n	800594a <osMessagePut+0x56>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	b1a3      	cbz	r3, 800594e <osMessagePut+0x5a>
 8005924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005928:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <osMessagePut+0x64>)
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8005934:	2000      	movs	r0, #0
 8005936:	e008      	b.n	800594a <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005938:	2300      	movs	r3, #0
 800593a:	462a      	mov	r2, r5
 800593c:	a901      	add	r1, sp, #4
 800593e:	4620      	mov	r0, r4
 8005940:	f000 fc7a 	bl	8006238 <xQueueGenericSend>
 8005944:	2801      	cmp	r0, #1
 8005946:	d004      	beq.n	8005952 <osMessagePut+0x5e>
      return osErrorOS;
 8005948:	20ff      	movs	r0, #255	; 0xff
}
 800594a:	b005      	add	sp, #20
 800594c:	bd30      	pop	{r4, r5, pc}
  return osOK;
 800594e:	2000      	movs	r0, #0
 8005950:	e7fb      	b.n	800594a <osMessagePut+0x56>
 8005952:	2000      	movs	r0, #0
 8005954:	e7f9      	b.n	800594a <osMessagePut+0x56>
 8005956:	bf00      	nop
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005962:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8005968:	b1f9      	cbz	r1, 80059aa <osMessageGet+0x4e>
 800596a:	460d      	mov	r5, r1
 800596c:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 800596e:	2300      	movs	r3, #0
 8005970:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8005972:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005976:	d021      	beq.n	80059bc <osMessageGet+0x60>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8005978:	b902      	cbnz	r2, 800597c <osMessageGet+0x20>
  ticks = 0;
 800597a:	461e      	mov	r6, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800597c:	f7ff ff08 	bl	8005790 <inHandlerMode>
 8005980:	b310      	cbz	r0, 80059c8 <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005982:	aa03      	add	r2, sp, #12
 8005984:	a901      	add	r1, sp, #4
 8005986:	4628      	mov	r0, r5
 8005988:	f000 fed6 	bl	8006738 <xQueueReceiveFromISR>
 800598c:	2801      	cmp	r0, #1
 800598e:	d018      	beq.n	80059c2 <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8005990:	2300      	movs	r3, #0
 8005992:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005994:	9b03      	ldr	r3, [sp, #12]
 8005996:	b313      	cbz	r3, 80059de <osMessageGet+0x82>
 8005998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599c:	4b16      	ldr	r3, [pc, #88]	; (80059f8 <osMessageGet+0x9c>)
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	e019      	b.n	80059de <osMessageGet+0x82>
    event.status = osErrorParameter;
 80059aa:	ab04      	add	r3, sp, #16
 80059ac:	2280      	movs	r2, #128	; 0x80
 80059ae:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 80059b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059ba:	e014      	b.n	80059e6 <osMessageGet+0x8a>
    ticks = portMAX_DELAY;
 80059bc:	f04f 36ff 	mov.w	r6, #4294967295
 80059c0:	e7dc      	b.n	800597c <osMessageGet+0x20>
      event.status = osEventMessage;
 80059c2:	2310      	movs	r3, #16
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	e7e5      	b.n	8005994 <osMessageGet+0x38>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80059c8:	2300      	movs	r3, #0
 80059ca:	4632      	mov	r2, r6
 80059cc:	a901      	add	r1, sp, #4
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 fdda 	bl	8006588 <xQueueGenericReceive>
 80059d4:	2801      	cmp	r0, #1
 80059d6:	d009      	beq.n	80059ec <osMessageGet+0x90>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80059d8:	b95e      	cbnz	r6, 80059f2 <osMessageGet+0x96>
 80059da:	2300      	movs	r3, #0
 80059dc:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 80059de:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 80059e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80059e6:	4620      	mov	r0, r4
 80059e8:	b004      	add	sp, #16
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 80059ec:	2310      	movs	r3, #16
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	e7f5      	b.n	80059de <osMessageGet+0x82>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80059f2:	2340      	movs	r3, #64	; 0x40
 80059f4:	e7f2      	b.n	80059dc <osMessageGet+0x80>
 80059f6:	bf00      	nop
 80059f8:	e000ed04 	.word	0xe000ed04

080059fc <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80059fc:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80059fe:	f001 fb8d 	bl	800711c <xTaskGetSchedulerState>
 8005a02:	2801      	cmp	r0, #1
 8005a04:	d001      	beq.n	8005a0a <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8005a06:	f000 fa35 	bl	8005e74 <xPortSysTickHandler>
 8005a0a:	bd08      	pop	{r3, pc}

08005a0c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a0c:	4a12      	ldr	r2, [pc, #72]	; (8005a58 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a0e:	f012 0f07 	tst.w	r2, #7
 8005a12:	d01e      	beq.n	8005a52 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a14:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a16:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a1a:	f5c1 43c8 	rsb	r3, r1, #25600	; 0x6400
 8005a1e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a20:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a22:	480e      	ldr	r0, [pc, #56]	; (8005a5c <prvHeapInit+0x50>)
 8005a24:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a26:	2100      	movs	r1, #0
 8005a28:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a2a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005a2c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a2e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8005a32:	480b      	ldr	r0, [pc, #44]	; (8005a60 <prvHeapInit+0x54>)
 8005a34:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8005a36:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a38:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a3a:	1a99      	subs	r1, r3, r2
 8005a3c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a3e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a40:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <prvHeapInit+0x58>)
 8005a42:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a44:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <prvHeapInit+0x5c>)
 8005a46:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a4c:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <prvHeapInit+0x60>)
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a52:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005a56:	e7e4      	b.n	8005a22 <prvHeapInit+0x16>
 8005a58:	20000358 	.word	0x20000358
 8005a5c:	20006764 	.word	0x20006764
 8005a60:	20000354 	.word	0x20000354
 8005a64:	20006760 	.word	0x20006760
 8005a68:	2000675c 	.word	0x2000675c
 8005a6c:	20006758 	.word	0x20006758

08005a70 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a70:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a72:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <prvInsertBlockIntoFreeList+0x50>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4282      	cmp	r2, r0
 8005a78:	d31b      	bcc.n	8005ab2 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a7a:	6859      	ldr	r1, [r3, #4]
 8005a7c:	185c      	adds	r4, r3, r1
 8005a7e:	42a0      	cmp	r0, r4
 8005a80:	d103      	bne.n	8005a8a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a82:	6840      	ldr	r0, [r0, #4]
 8005a84:	4401      	add	r1, r0
 8005a86:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a88:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a8a:	6841      	ldr	r1, [r0, #4]
 8005a8c:	1844      	adds	r4, r0, r1
 8005a8e:	42a2      	cmp	r2, r4
 8005a90:	d113      	bne.n	8005aba <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a92:	4c0c      	ldr	r4, [pc, #48]	; (8005ac4 <prvInsertBlockIntoFreeList+0x54>)
 8005a94:	6824      	ldr	r4, [r4, #0]
 8005a96:	42a2      	cmp	r2, r4
 8005a98:	d00d      	beq.n	8005ab6 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a9a:	6852      	ldr	r2, [r2, #4]
 8005a9c:	4411      	add	r1, r2
 8005a9e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005aa6:	4298      	cmp	r0, r3
 8005aa8:	d000      	beq.n	8005aac <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005aaa:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ab0:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	e7de      	b.n	8005a74 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ab6:	6004      	str	r4, [r0, #0]
 8005ab8:	e7f5      	b.n	8005aa6 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005aba:	6002      	str	r2, [r0, #0]
 8005abc:	e7f3      	b.n	8005aa6 <prvInsertBlockIntoFreeList+0x36>
 8005abe:	bf00      	nop
 8005ac0:	20006764 	.word	0x20006764
 8005ac4:	20000354 	.word	0x20000354

08005ac8 <pvPortMalloc>:
{
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005acc:	f001 f894 	bl	8006bf8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005ad0:	4b3a      	ldr	r3, [pc, #232]	; (8005bbc <pvPortMalloc+0xf4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	b1bb      	cbz	r3, 8005b06 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ad6:	4b3a      	ldr	r3, [pc, #232]	; (8005bc0 <pvPortMalloc+0xf8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	421c      	tst	r4, r3
 8005adc:	d163      	bne.n	8005ba6 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8005ade:	b1ac      	cbz	r4, 8005b0c <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8005ae0:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ae2:	f014 0f07 	tst.w	r4, #7
 8005ae6:	d011      	beq.n	8005b0c <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ae8:	f024 0407 	bic.w	r4, r4, #7
 8005aec:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005aee:	f004 0307 	and.w	r3, r4, #7
 8005af2:	b15b      	cbz	r3, 8005b0c <pvPortMalloc+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005af4:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	e7fe      	b.n	8005b04 <pvPortMalloc+0x3c>
			prvHeapInit();
 8005b06:	f7ff ff81 	bl	8005a0c <prvHeapInit>
 8005b0a:	e7e4      	b.n	8005ad6 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b0c:	2c00      	cmp	r4, #0
 8005b0e:	d04c      	beq.n	8005baa <pvPortMalloc+0xe2>
 8005b10:	4b2c      	ldr	r3, [pc, #176]	; (8005bc4 <pvPortMalloc+0xfc>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	429c      	cmp	r4, r3
 8005b16:	d84a      	bhi.n	8005bae <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8005b18:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <pvPortMalloc+0x100>)
 8005b1a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b1c:	e001      	b.n	8005b22 <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8005b1e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b20:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b22:	686a      	ldr	r2, [r5, #4]
 8005b24:	4294      	cmp	r4, r2
 8005b26:	d902      	bls.n	8005b2e <pvPortMalloc+0x66>
 8005b28:	682a      	ldr	r2, [r5, #0]
 8005b2a:	2a00      	cmp	r2, #0
 8005b2c:	d1f7      	bne.n	8005b1e <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8005b2e:	4a23      	ldr	r2, [pc, #140]	; (8005bbc <pvPortMalloc+0xf4>)
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	4295      	cmp	r5, r2
 8005b34:	d03d      	beq.n	8005bb2 <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b36:	681e      	ldr	r6, [r3, #0]
 8005b38:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b3a:	682a      	ldr	r2, [r5, #0]
 8005b3c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b3e:	686b      	ldr	r3, [r5, #4]
 8005b40:	1b1b      	subs	r3, r3, r4
 8005b42:	2b10      	cmp	r3, #16
 8005b44:	d910      	bls.n	8005b68 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b46:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b48:	f010 0f07 	tst.w	r0, #7
 8005b4c:	d008      	beq.n	8005b60 <pvPortMalloc+0x98>
 8005b4e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	e7fe      	b.n	8005b5e <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b60:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b62:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b64:	f7ff ff84 	bl	8005a70 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b68:	686a      	ldr	r2, [r5, #4]
 8005b6a:	4916      	ldr	r1, [pc, #88]	; (8005bc4 <pvPortMalloc+0xfc>)
 8005b6c:	680b      	ldr	r3, [r1, #0]
 8005b6e:	1a9b      	subs	r3, r3, r2
 8005b70:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b72:	4916      	ldr	r1, [pc, #88]	; (8005bcc <pvPortMalloc+0x104>)
 8005b74:	6809      	ldr	r1, [r1, #0]
 8005b76:	428b      	cmp	r3, r1
 8005b78:	d201      	bcs.n	8005b7e <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b7a:	4914      	ldr	r1, [pc, #80]	; (8005bcc <pvPortMalloc+0x104>)
 8005b7c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b7e:	4b10      	ldr	r3, [pc, #64]	; (8005bc0 <pvPortMalloc+0xf8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8005b8a:	f001 f8db 	bl	8006d44 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b8e:	f016 0f07 	tst.w	r6, #7
 8005b92:	d010      	beq.n	8005bb6 <pvPortMalloc+0xee>
 8005b94:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	e7fe      	b.n	8005ba4 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8005ba6:	2600      	movs	r6, #0
 8005ba8:	e7ef      	b.n	8005b8a <pvPortMalloc+0xc2>
 8005baa:	2600      	movs	r6, #0
 8005bac:	e7ed      	b.n	8005b8a <pvPortMalloc+0xc2>
 8005bae:	2600      	movs	r6, #0
 8005bb0:	e7eb      	b.n	8005b8a <pvPortMalloc+0xc2>
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	e7e9      	b.n	8005b8a <pvPortMalloc+0xc2>
}
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	bd70      	pop	{r4, r5, r6, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000354 	.word	0x20000354
 8005bc0:	20006758 	.word	0x20006758
 8005bc4:	2000675c 	.word	0x2000675c
 8005bc8:	20006764 	.word	0x20006764
 8005bcc:	20006760 	.word	0x20006760

08005bd0 <vPortFree>:
	if( pv != NULL )
 8005bd0:	b380      	cbz	r0, 8005c34 <vPortFree+0x64>
{
 8005bd2:	b538      	push	{r3, r4, r5, lr}
 8005bd4:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8005bd6:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bda:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005bde:	4916      	ldr	r1, [pc, #88]	; (8005c38 <vPortFree+0x68>)
 8005be0:	6809      	ldr	r1, [r1, #0]
 8005be2:	420a      	tst	r2, r1
 8005be4:	d108      	bne.n	8005bf8 <vPortFree+0x28>
 8005be6:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	e7fe      	b.n	8005bf6 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bf8:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8005bfc:	b140      	cbz	r0, 8005c10 <vPortFree+0x40>
 8005bfe:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	e7fe      	b.n	8005c0e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c10:	ea22 0201 	bic.w	r2, r2, r1
 8005c14:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8005c18:	f000 ffee 	bl	8006bf8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c1c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8005c20:	4a06      	ldr	r2, [pc, #24]	; (8005c3c <vPortFree+0x6c>)
 8005c22:	6813      	ldr	r3, [r2, #0]
 8005c24:	440b      	add	r3, r1
 8005c26:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f7ff ff21 	bl	8005a70 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8005c2e:	f001 f889 	bl	8006d44 <xTaskResumeAll>
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20006758 	.word	0x20006758
 8005c3c:	2000675c 	.word	0x2000675c

08005c40 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c40:	f100 0308 	add.w	r3, r0, #8
 8005c44:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c46:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c4c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c4e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	6003      	str	r3, [r0, #0]
 8005c54:	4770      	bx	lr

08005c56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	6103      	str	r3, [r0, #16]
 8005c5a:	4770      	bx	lr

08005c5c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c5c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c5e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c68:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c6a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005c6c:	6803      	ldr	r3, [r0, #0]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	6003      	str	r3, [r0, #0]
 8005c72:	4770      	bx	lr

08005c74 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c74:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c76:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c78:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005c7c:	d002      	beq.n	8005c84 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c7e:	f100 0208 	add.w	r2, r0, #8
 8005c82:	e002      	b.n	8005c8a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c84:	6902      	ldr	r2, [r0, #16]
 8005c86:	e004      	b.n	8005c92 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c88:	461a      	mov	r2, r3
 8005c8a:	6853      	ldr	r3, [r2, #4]
 8005c8c:	681c      	ldr	r4, [r3, #0]
 8005c8e:	42a5      	cmp	r5, r4
 8005c90:	d2fa      	bcs.n	8005c88 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c92:	6853      	ldr	r3, [r2, #4]
 8005c94:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c96:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c98:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c9a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c9c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005c9e:	6803      	ldr	r3, [r0, #0]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	6003      	str	r3, [r0, #0]
}
 8005ca4:	bc30      	pop	{r4, r5}
 8005ca6:	4770      	bx	lr

08005ca8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ca8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005caa:	6842      	ldr	r2, [r0, #4]
 8005cac:	6881      	ldr	r1, [r0, #8]
 8005cae:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cb0:	6882      	ldr	r2, [r0, #8]
 8005cb2:	6841      	ldr	r1, [r0, #4]
 8005cb4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	4290      	cmp	r0, r2
 8005cba:	d005      	beq.n	8005cc8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	3801      	subs	r0, #1
 8005cc4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8005cc6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cc8:	6882      	ldr	r2, [r0, #8]
 8005cca:	605a      	str	r2, [r3, #4]
 8005ccc:	e7f6      	b.n	8005cbc <uxListRemove+0x14>
	...

08005cd0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <prvTaskExitError+0x30>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd8:	d008      	beq.n	8005cec <prvTaskExitError+0x1c>
 8005cda:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	e7fe      	b.n	8005cea <prvTaskExitError+0x1a>
 8005cec:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	e7fe      	b.n	8005cfc <prvTaskExitError+0x2c>
 8005cfe:	bf00      	nop
 8005d00:	200000e0 	.word	0x200000e0

08005d04 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005d04:	4806      	ldr	r0, [pc, #24]	; (8005d20 <prvPortStartFirstTask+0x1c>)
 8005d06:	6800      	ldr	r0, [r0, #0]
 8005d08:	6800      	ldr	r0, [r0, #0]
 8005d0a:	f380 8808 	msr	MSP, r0
 8005d0e:	b662      	cpsie	i
 8005d10:	b661      	cpsie	f
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	df00      	svc	0
 8005d1c:	bf00      	nop
 8005d1e:	0000      	.short	0x0000
 8005d20:	e000ed08 	.word	0xe000ed08

08005d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d34 <vPortEnableVFP+0x10>
 8005d28:	6801      	ldr	r1, [r0, #0]
 8005d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d2e:	6001      	str	r1, [r0, #0]
 8005d30:	4770      	bx	lr
 8005d32:	0000      	.short	0x0000
 8005d34:	e000ed88 	.word	0xe000ed88

08005d38 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d3c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d40:	f021 0101 	bic.w	r1, r1, #1
 8005d44:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <pxPortInitialiseStack+0x28>)
 8005d4a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d4e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005d52:	f06f 0302 	mvn.w	r3, #2
 8005d56:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005d5a:	3844      	subs	r0, #68	; 0x44
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	08005cd1 	.word	0x08005cd1
	...

08005d70 <SVC_Handler>:
	__asm volatile (
 8005d70:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <pxCurrentTCBConst2>)
 8005d72:	6819      	ldr	r1, [r3, #0]
 8005d74:	6808      	ldr	r0, [r1, #0]
 8005d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7a:	f380 8809 	msr	PSP, r0
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f04f 0000 	mov.w	r0, #0
 8005d86:	f380 8811 	msr	BASEPRI, r0
 8005d8a:	4770      	bx	lr
 8005d8c:	f3af 8000 	nop.w

08005d90 <pxCurrentTCBConst2>:
 8005d90:	20006774 	.word	0x20006774

08005d94 <vPortEnterCritical>:
 8005d94:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005da4:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <vPortEnterCritical+0x3c>)
 8005da6:	6813      	ldr	r3, [r2, #0]
 8005da8:	3301      	adds	r3, #1
 8005daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10d      	bne.n	8005dcc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005db0:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <vPortEnterCritical+0x40>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005db8:	d008      	beq.n	8005dcc <vPortEnterCritical+0x38>
 8005dba:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	e7fe      	b.n	8005dca <vPortEnterCritical+0x36>
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	200000e0 	.word	0x200000e0
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005dd8:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <vPortExitCritical+0x28>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	b943      	cbnz	r3, 8005df0 <vPortExitCritical+0x18>
 8005dde:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	e7fe      	b.n	8005dee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005df0:	3b01      	subs	r3, #1
 8005df2:	4a03      	ldr	r2, [pc, #12]	; (8005e00 <vPortExitCritical+0x28>)
 8005df4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005df6:	b90b      	cbnz	r3, 8005dfc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	200000e0 	.word	0x200000e0
	...

08005e10 <PendSV_Handler>:
	__asm volatile
 8005e10:	f3ef 8009 	mrs	r0, PSP
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <pxCurrentTCBConst>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	f01e 0f10 	tst.w	lr, #16
 8005e20:	bf08      	it	eq
 8005e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2a:	6010      	str	r0, [r2, #0]
 8005e2c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005e30:	f04f 0070 	mov.w	r0, #112	; 0x70
 8005e34:	f380 8811 	msr	BASEPRI, r0
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f001 f868 	bl	8006f14 <vTaskSwitchContext>
 8005e44:	f04f 0000 	mov.w	r0, #0
 8005e48:	f380 8811 	msr	BASEPRI, r0
 8005e4c:	bc08      	pop	{r3}
 8005e4e:	6819      	ldr	r1, [r3, #0]
 8005e50:	6808      	ldr	r0, [r1, #0]
 8005e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e56:	f01e 0f10 	tst.w	lr, #16
 8005e5a:	bf08      	it	eq
 8005e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e60:	f380 8809 	msr	PSP, r0
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	f3af 8000 	nop.w

08005e70 <pxCurrentTCBConst>:
 8005e70:	20006774 	.word	0x20006774

08005e74 <xPortSysTickHandler>:
{
 8005e74:	b508      	push	{r3, lr}
	__asm volatile
 8005e76:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005e86:	f000 fecd 	bl	8006c24 <xTaskIncrementTick>
 8005e8a:	b118      	cbz	r0, 8005e94 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e90:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <xPortSysTickHandler+0x28>)
 8005e92:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005e94:	2300      	movs	r3, #0
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	bd08      	pop	{r3, pc}
 8005e9c:	e000ed04 	.word	0xe000ed04

08005ea0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ea0:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <vPortSetupTimerInterrupt+0x1c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a06      	ldr	r2, [pc, #24]	; (8005ec0 <vPortSetupTimerInterrupt+0x20>)
 8005ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eaa:	099b      	lsrs	r3, r3, #6
 8005eac:	3b01      	subs	r3, #1
 8005eae:	4a05      	ldr	r2, [pc, #20]	; (8005ec4 <vPortSetupTimerInterrupt+0x24>)
 8005eb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005eb2:	2207      	movs	r2, #7
 8005eb4:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <vPortSetupTimerInterrupt+0x28>)
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	200000d8 	.word	0x200000d8
 8005ec0:	10624dd3 	.word	0x10624dd3
 8005ec4:	e000e014 	.word	0xe000e014
 8005ec8:	e000e010 	.word	0xe000e010

08005ecc <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ecc:	4b31      	ldr	r3, [pc, #196]	; (8005f94 <xPortStartScheduler+0xc8>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	4b31      	ldr	r3, [pc, #196]	; (8005f98 <xPortStartScheduler+0xcc>)
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d01a      	beq.n	8005f0c <xPortStartScheduler+0x40>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ed6:	4b2f      	ldr	r3, [pc, #188]	; (8005f94 <xPortStartScheduler+0xc8>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4b30      	ldr	r3, [pc, #192]	; (8005f9c <xPortStartScheduler+0xd0>)
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d01e      	beq.n	8005f1e <xPortStartScheduler+0x52>
{
 8005ee0:	b500      	push	{lr}
 8005ee2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ee4:	4b2e      	ldr	r3, [pc, #184]	; (8005fa0 <xPortStartScheduler+0xd4>)
 8005ee6:	781a      	ldrb	r2, [r3, #0]
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005eec:	22ff      	movs	r2, #255	; 0xff
 8005eee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ef8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005efc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f00:	4a28      	ldr	r2, [pc, #160]	; (8005fa4 <xPortStartScheduler+0xd8>)
 8005f02:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f04:	2207      	movs	r2, #7
 8005f06:	4b28      	ldr	r3, [pc, #160]	; (8005fa8 <xPortStartScheduler+0xdc>)
 8005f08:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f0a:	e01b      	b.n	8005f44 <xPortStartScheduler+0x78>
	__asm volatile
 8005f0c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	e7fe      	b.n	8005f1c <xPortStartScheduler+0x50>
 8005f1e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	e7fe      	b.n	8005f2e <xPortStartScheduler+0x62>
			ulMaxPRIGROUPValue--;
 8005f30:	4a1d      	ldr	r2, [pc, #116]	; (8005fa8 <xPortStartScheduler+0xdc>)
 8005f32:	6813      	ldr	r3, [r2, #0]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f38:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f44:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005f48:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f4c:	d1f0      	bne.n	8005f30 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f4e:	4a16      	ldr	r2, [pc, #88]	; (8005fa8 <xPortStartScheduler+0xdc>)
 8005f50:	6813      	ldr	r3, [r2, #0]
 8005f52:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f58:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f5a:	9b01      	ldr	r3, [sp, #4]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	4a10      	ldr	r2, [pc, #64]	; (8005fa0 <xPortStartScheduler+0xd4>)
 8005f60:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f62:	4b12      	ldr	r3, [pc, #72]	; (8005fac <xPortStartScheduler+0xe0>)
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005f6a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8005f72:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8005f74:	f7ff ff94 	bl	8005ea0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <xPortStartScheduler+0xe4>)
 8005f7c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8005f7e:	f7ff fed1 	bl	8005d24 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f82:	4a0c      	ldr	r2, [pc, #48]	; (8005fb4 <xPortStartScheduler+0xe8>)
 8005f84:	6813      	ldr	r3, [r2, #0]
 8005f86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f8a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005f8c:	f7ff feba 	bl	8005d04 <prvPortStartFirstTask>
	prvTaskExitError();
 8005f90:	f7ff fe9e 	bl	8005cd0 <prvTaskExitError>
 8005f94:	e000ed00 	.word	0xe000ed00
 8005f98:	410fc271 	.word	0x410fc271
 8005f9c:	410fc270 	.word	0x410fc270
 8005fa0:	e000e400 	.word	0xe000e400
 8005fa4:	2000676c 	.word	0x2000676c
 8005fa8:	20006770 	.word	0x20006770
 8005fac:	e000ed20 	.word	0xe000ed20
 8005fb0:	200000e0 	.word	0x200000e0
 8005fb4:	e000ef34 	.word	0xe000ef34

08005fb8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8005fb8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fbc:	2b0f      	cmp	r3, #15
 8005fbe:	d90f      	bls.n	8005fe0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fc0:	4a10      	ldr	r2, [pc, #64]	; (8006004 <vPortValidateInterruptPriority+0x4c>)
 8005fc2:	5c9b      	ldrb	r3, [r3, r2]
 8005fc4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fc6:	4a10      	ldr	r2, [pc, #64]	; (8006008 <vPortValidateInterruptPriority+0x50>)
 8005fc8:	7812      	ldrb	r2, [r2, #0]
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d208      	bcs.n	8005fe0 <vPortValidateInterruptPriority+0x28>
 8005fce:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	e7fe      	b.n	8005fde <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fe0:	4b0a      	ldr	r3, [pc, #40]	; (800600c <vPortValidateInterruptPriority+0x54>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fe8:	4a09      	ldr	r2, [pc, #36]	; (8006010 <vPortValidateInterruptPriority+0x58>)
 8005fea:	6812      	ldr	r2, [r2, #0]
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d908      	bls.n	8006002 <vPortValidateInterruptPriority+0x4a>
 8005ff0:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	e7fe      	b.n	8006000 <vPortValidateInterruptPriority+0x48>
 8006002:	4770      	bx	lr
 8006004:	e000e3f0 	.word	0xe000e3f0
 8006008:	2000676c 	.word	0x2000676c
 800600c:	e000ed0c 	.word	0xe000ed0c
 8006010:	20006770 	.word	0x20006770

08006014 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006014:	b510      	push	{r4, lr}
 8006016:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006018:	f7ff febc 	bl	8005d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800601c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800601e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006020:	429a      	cmp	r2, r3
 8006022:	d004      	beq.n	800602e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8006024:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8006026:	f7ff fed7 	bl	8005dd8 <vPortExitCritical>

	return xReturn;
}
 800602a:	4620      	mov	r0, r4
 800602c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800602e:	2401      	movs	r4, #1
 8006030:	e7f9      	b.n	8006026 <prvIsQueueFull+0x12>

08006032 <prvIsQueueEmpty>:
{
 8006032:	b510      	push	{r4, lr}
 8006034:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006036:	f7ff fead 	bl	8005d94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800603a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800603c:	b123      	cbz	r3, 8006048 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 800603e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006040:	f7ff feca 	bl	8005dd8 <vPortExitCritical>
}
 8006044:	4620      	mov	r0, r4
 8006046:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8006048:	2401      	movs	r4, #1
 800604a:	e7f9      	b.n	8006040 <prvIsQueueEmpty+0xe>

0800604c <prvCopyDataToQueue>:
{
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	4604      	mov	r4, r0
 8006050:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006052:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006054:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006056:	b94a      	cbnz	r2, 800606c <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006058:	6803      	ldr	r3, [r0, #0]
 800605a:	bb53      	cbnz	r3, 80060b2 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800605c:	6840      	ldr	r0, [r0, #4]
 800605e:	f001 f8bf 	bl	80071e0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8006062:	2300      	movs	r3, #0
 8006064:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8006066:	3501      	adds	r5, #1
 8006068:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800606a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800606c:	b96e      	cbnz	r6, 800608a <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800606e:	6880      	ldr	r0, [r0, #8]
 8006070:	f00c f84e 	bl	8012110 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006074:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006076:	68a3      	ldr	r3, [r4, #8]
 8006078:	4413      	add	r3, r2
 800607a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800607c:	6862      	ldr	r2, [r4, #4]
 800607e:	4293      	cmp	r3, r2
 8006080:	d319      	bcc.n	80060b6 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8006086:	2000      	movs	r0, #0
 8006088:	e7ed      	b.n	8006066 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800608a:	68c0      	ldr	r0, [r0, #12]
 800608c:	f00c f840 	bl	8012110 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006092:	425b      	negs	r3, r3
 8006094:	68e2      	ldr	r2, [r4, #12]
 8006096:	441a      	add	r2, r3
 8006098:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800609a:	6821      	ldr	r1, [r4, #0]
 800609c:	428a      	cmp	r2, r1
 800609e:	d202      	bcs.n	80060a6 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80060a0:	6862      	ldr	r2, [r4, #4]
 80060a2:	4413      	add	r3, r2
 80060a4:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80060a6:	2e02      	cmp	r6, #2
 80060a8:	d107      	bne.n	80060ba <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060aa:	b145      	cbz	r5, 80060be <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80060ac:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80060ae:	2000      	movs	r0, #0
 80060b0:	e7d9      	b.n	8006066 <prvCopyDataToQueue+0x1a>
 80060b2:	2000      	movs	r0, #0
 80060b4:	e7d7      	b.n	8006066 <prvCopyDataToQueue+0x1a>
 80060b6:	2000      	movs	r0, #0
 80060b8:	e7d5      	b.n	8006066 <prvCopyDataToQueue+0x1a>
 80060ba:	2000      	movs	r0, #0
 80060bc:	e7d3      	b.n	8006066 <prvCopyDataToQueue+0x1a>
 80060be:	2000      	movs	r0, #0
 80060c0:	e7d1      	b.n	8006066 <prvCopyDataToQueue+0x1a>

080060c2 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060c2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80060c4:	b172      	cbz	r2, 80060e4 <prvCopyDataFromQueue+0x22>
{
 80060c6:	b510      	push	{r4, lr}
 80060c8:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80060ca:	68c4      	ldr	r4, [r0, #12]
 80060cc:	4414      	add	r4, r2
 80060ce:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060d0:	6840      	ldr	r0, [r0, #4]
 80060d2:	4284      	cmp	r4, r0
 80060d4:	d301      	bcc.n	80060da <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	60d8      	str	r0, [r3, #12]
 80060da:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80060dc:	68d9      	ldr	r1, [r3, #12]
 80060de:	f00c f817 	bl	8012110 <memcpy>
 80060e2:	bd10      	pop	{r4, pc}
 80060e4:	4770      	bx	lr

080060e6 <prvUnlockQueue>:
{
 80060e6:	b538      	push	{r3, r4, r5, lr}
 80060e8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80060ea:	f7ff fe53 	bl	8005d94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80060ee:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80060f2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060f4:	e001      	b.n	80060fa <prvUnlockQueue+0x14>
			--cTxLock;
 80060f6:	3c01      	subs	r4, #1
 80060f8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060fa:	2c00      	cmp	r4, #0
 80060fc:	dd0a      	ble.n	8006114 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006100:	b143      	cbz	r3, 8006114 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006102:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006106:	f000 ff6b 	bl	8006fe0 <xTaskRemoveFromEventList>
 800610a:	2800      	cmp	r0, #0
 800610c:	d0f3      	beq.n	80060f6 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800610e:	f000 ffff 	bl	8007110 <vTaskMissedYield>
 8006112:	e7f0      	b.n	80060f6 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8006114:	23ff      	movs	r3, #255	; 0xff
 8006116:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800611a:	f7ff fe5d 	bl	8005dd8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800611e:	f7ff fe39 	bl	8005d94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006122:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8006126:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006128:	e001      	b.n	800612e <prvUnlockQueue+0x48>
				--cRxLock;
 800612a:	3c01      	subs	r4, #1
 800612c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800612e:	2c00      	cmp	r4, #0
 8006130:	dd0a      	ble.n	8006148 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006132:	692b      	ldr	r3, [r5, #16]
 8006134:	b143      	cbz	r3, 8006148 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006136:	f105 0010 	add.w	r0, r5, #16
 800613a:	f000 ff51 	bl	8006fe0 <xTaskRemoveFromEventList>
 800613e:	2800      	cmp	r0, #0
 8006140:	d0f3      	beq.n	800612a <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8006142:	f000 ffe5 	bl	8007110 <vTaskMissedYield>
 8006146:	e7f0      	b.n	800612a <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8006148:	23ff      	movs	r3, #255	; 0xff
 800614a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800614e:	f7ff fe43 	bl	8005dd8 <vPortExitCritical>
 8006152:	bd38      	pop	{r3, r4, r5, pc}

08006154 <xQueueGenericReset>:
{
 8006154:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8006156:	b330      	cbz	r0, 80061a6 <xQueueGenericReset+0x52>
 8006158:	4604      	mov	r4, r0
 800615a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800615c:	f7ff fe1a 	bl	8005d94 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006160:	6821      	ldr	r1, [r4, #0]
 8006162:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006164:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006166:	fb03 1002 	mla	r0, r3, r2, r1
 800616a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800616c:	2000      	movs	r0, #0
 800616e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006170:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006172:	3a01      	subs	r2, #1
 8006174:	fb02 1303 	mla	r3, r2, r3, r1
 8006178:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800617a:	23ff      	movs	r3, #255	; 0xff
 800617c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006180:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8006184:	b9c5      	cbnz	r5, 80061b8 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006186:	6923      	ldr	r3, [r4, #16]
 8006188:	b1f3      	cbz	r3, 80061c8 <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800618a:	f104 0010 	add.w	r0, r4, #16
 800618e:	f000 ff27 	bl	8006fe0 <xTaskRemoveFromEventList>
 8006192:	b1c8      	cbz	r0, 80061c8 <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
 8006194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006198:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <xQueueGenericReset+0x7c>)
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	e010      	b.n	80061c8 <xQueueGenericReset+0x74>
 80061a6:	f04f 0370 	mov.w	r3, #112	; 0x70
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	e7fe      	b.n	80061b6 <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061b8:	f104 0010 	add.w	r0, r4, #16
 80061bc:	f7ff fd40 	bl	8005c40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80061c4:	f7ff fd3c 	bl	8005c40 <vListInitialise>
	taskEXIT_CRITICAL();
 80061c8:	f7ff fe06 	bl	8005dd8 <vPortExitCritical>
}
 80061cc:	2001      	movs	r0, #1
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <prvInitialiseNewQueue>:
{
 80061d4:	b510      	push	{r4, lr}
 80061d6:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80061d8:	460c      	mov	r4, r1
 80061da:	b139      	cbz	r1, 80061ec <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061dc:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80061de:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061e0:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061e2:	2101      	movs	r1, #1
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7ff ffb5 	bl	8006154 <xQueueGenericReset>
 80061ea:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061ec:	601b      	str	r3, [r3, #0]
 80061ee:	e7f6      	b.n	80061de <prvInitialiseNewQueue+0xa>

080061f0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061f0:	b940      	cbnz	r0, 8006204 <xQueueGenericCreate+0x14>
 80061f2:	f04f 0370 	mov.w	r3, #112	; 0x70
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	e7fe      	b.n	8006202 <xQueueGenericCreate+0x12>
	{
 8006204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006206:	b083      	sub	sp, #12
 8006208:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800620a:	b111      	cbz	r1, 8006212 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800620c:	fb01 f000 	mul.w	r0, r1, r0
 8006210:	e000      	b.n	8006214 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8006212:	2000      	movs	r0, #0
 8006214:	4617      	mov	r7, r2
 8006216:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006218:	3048      	adds	r0, #72	; 0x48
 800621a:	f7ff fc55 	bl	8005ac8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800621e:	4606      	mov	r6, r0
 8006220:	b138      	cbz	r0, 8006232 <xQueueGenericCreate+0x42>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006222:	9000      	str	r0, [sp, #0]
 8006224:	463b      	mov	r3, r7
 8006226:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800622a:	4621      	mov	r1, r4
 800622c:	4628      	mov	r0, r5
 800622e:	f7ff ffd1 	bl	80061d4 <prvInitialiseNewQueue>
	}
 8006232:	4630      	mov	r0, r6
 8006234:	b003      	add	sp, #12
 8006236:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006238 <xQueueGenericSend>:
{
 8006238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800623a:	b085      	sub	sp, #20
 800623c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800623e:	b160      	cbz	r0, 800625a <xQueueGenericSend+0x22>
 8006240:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006242:	b199      	cbz	r1, 800626c <xQueueGenericSend+0x34>
 8006244:	2501      	movs	r5, #1
 8006246:	b9bd      	cbnz	r5, 8006278 <xQueueGenericSend+0x40>
 8006248:	f04f 0370 	mov.w	r3, #112	; 0x70
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	e7fe      	b.n	8006258 <xQueueGenericSend+0x20>
 800625a:	f04f 0370 	mov.w	r3, #112	; 0x70
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	e7fe      	b.n	800626a <xQueueGenericSend+0x32>
 800626c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800626e:	b90a      	cbnz	r2, 8006274 <xQueueGenericSend+0x3c>
 8006270:	2501      	movs	r5, #1
 8006272:	e7e8      	b.n	8006246 <xQueueGenericSend+0xe>
 8006274:	2500      	movs	r5, #0
 8006276:	e7e6      	b.n	8006246 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006278:	2b02      	cmp	r3, #2
 800627a:	d009      	beq.n	8006290 <xQueueGenericSend+0x58>
 800627c:	b96d      	cbnz	r5, 800629a <xQueueGenericSend+0x62>
 800627e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	e7fe      	b.n	800628e <xQueueGenericSend+0x56>
 8006290:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006292:	2a01      	cmp	r2, #1
 8006294:	d0f2      	beq.n	800627c <xQueueGenericSend+0x44>
 8006296:	2500      	movs	r5, #0
 8006298:	e7f0      	b.n	800627c <xQueueGenericSend+0x44>
 800629a:	461e      	mov	r6, r3
 800629c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800629e:	f000 ff3d 	bl	800711c <xTaskGetSchedulerState>
 80062a2:	b910      	cbnz	r0, 80062aa <xQueueGenericSend+0x72>
 80062a4:	9b01      	ldr	r3, [sp, #4]
 80062a6:	b103      	cbz	r3, 80062aa <xQueueGenericSend+0x72>
 80062a8:	2500      	movs	r5, #0
 80062aa:	b945      	cbnz	r5, 80062be <xQueueGenericSend+0x86>
 80062ac:	f04f 0370 	mov.w	r3, #112	; 0x70
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	e7fe      	b.n	80062bc <xQueueGenericSend+0x84>
 80062be:	2500      	movs	r5, #0
 80062c0:	e02c      	b.n	800631c <xQueueGenericSend+0xe4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062c2:	4632      	mov	r2, r6
 80062c4:	4639      	mov	r1, r7
 80062c6:	4620      	mov	r0, r4
 80062c8:	f7ff fec0 	bl	800604c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062ce:	b18b      	cbz	r3, 80062f4 <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80062d4:	f000 fe84 	bl	8006fe0 <xTaskRemoveFromEventList>
 80062d8:	b138      	cbz	r0, 80062ea <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 80062da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062de:	4b37      	ldr	r3, [pc, #220]	; (80063bc <xQueueGenericSend+0x184>)
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80062ea:	f7ff fd75 	bl	8005dd8 <vPortExitCritical>
				return pdPASS;
 80062ee:	2001      	movs	r0, #1
}
 80062f0:	b005      	add	sp, #20
 80062f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d0f8      	beq.n	80062ea <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 80062f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062fc:	4b2f      	ldr	r3, [pc, #188]	; (80063bc <xQueueGenericSend+0x184>)
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	e7ef      	b.n	80062ea <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 800630a:	f7ff fd65 	bl	8005dd8 <vPortExitCritical>
					return errQUEUE_FULL;
 800630e:	2000      	movs	r0, #0
 8006310:	e7ee      	b.n	80062f0 <xQueueGenericSend+0xb8>
				prvUnlockQueue( pxQueue );
 8006312:	4620      	mov	r0, r4
 8006314:	f7ff fee7 	bl	80060e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006318:	f000 fd14 	bl	8006d44 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800631c:	f7ff fd3a 	bl	8005d94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006320:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006322:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006324:	429a      	cmp	r2, r3
 8006326:	d3cc      	bcc.n	80062c2 <xQueueGenericSend+0x8a>
 8006328:	2e02      	cmp	r6, #2
 800632a:	d0ca      	beq.n	80062c2 <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800632c:	9b01      	ldr	r3, [sp, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0eb      	beq.n	800630a <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
 8006332:	b91d      	cbnz	r5, 800633c <xQueueGenericSend+0x104>
					vTaskSetTimeOutState( &xTimeOut );
 8006334:	a802      	add	r0, sp, #8
 8006336:	f000 fe99 	bl	800706c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800633a:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 800633c:	f7ff fd4c 	bl	8005dd8 <vPortExitCritical>
		vTaskSuspendAll();
 8006340:	f000 fc5a 	bl	8006bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006344:	f7ff fd26 	bl	8005d94 <vPortEnterCritical>
 8006348:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800634c:	b25b      	sxtb	r3, r3
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006352:	d102      	bne.n	800635a <xQueueGenericSend+0x122>
 8006354:	2300      	movs	r3, #0
 8006356:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800635a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800635e:	b25b      	sxtb	r3, r3
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d102      	bne.n	800636c <xQueueGenericSend+0x134>
 8006366:	2300      	movs	r3, #0
 8006368:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800636c:	f7ff fd34 	bl	8005dd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006370:	a901      	add	r1, sp, #4
 8006372:	a802      	add	r0, sp, #8
 8006374:	f000 fe90 	bl	8007098 <xTaskCheckForTimeOut>
 8006378:	b9c8      	cbnz	r0, 80063ae <xQueueGenericSend+0x176>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800637a:	4620      	mov	r0, r4
 800637c:	f7ff fe4a 	bl	8006014 <prvIsQueueFull>
 8006380:	2800      	cmp	r0, #0
 8006382:	d0c6      	beq.n	8006312 <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006384:	9901      	ldr	r1, [sp, #4]
 8006386:	f104 0010 	add.w	r0, r4, #16
 800638a:	f000 fe11 	bl	8006fb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800638e:	4620      	mov	r0, r4
 8006390:	f7ff fea9 	bl	80060e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006394:	f000 fcd6 	bl	8006d44 <xTaskResumeAll>
 8006398:	2800      	cmp	r0, #0
 800639a:	d1bf      	bne.n	800631c <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 800639c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a0:	4b06      	ldr	r3, [pc, #24]	; (80063bc <xQueueGenericSend+0x184>)
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	e7b6      	b.n	800631c <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 80063ae:	4620      	mov	r0, r4
 80063b0:	f7ff fe99 	bl	80060e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063b4:	f000 fcc6 	bl	8006d44 <xTaskResumeAll>
			return errQUEUE_FULL;
 80063b8:	2000      	movs	r0, #0
 80063ba:	e799      	b.n	80062f0 <xQueueGenericSend+0xb8>
 80063bc:	e000ed04 	.word	0xe000ed04

080063c0 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80063c0:	b148      	cbz	r0, 80063d6 <prvInitialiseMutex+0x16>
	{
 80063c2:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80063c4:	2100      	movs	r1, #0
 80063c6:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80063c8:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80063ca:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80063cc:	460b      	mov	r3, r1
 80063ce:	460a      	mov	r2, r1
 80063d0:	f7ff ff32 	bl	8006238 <xQueueGenericSend>
 80063d4:	bd08      	pop	{r3, pc}
 80063d6:	4770      	bx	lr

080063d8 <xQueueCreateMutex>:
	{
 80063d8:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80063da:	4602      	mov	r2, r0
 80063dc:	2100      	movs	r1, #0
 80063de:	2001      	movs	r0, #1
 80063e0:	f7ff ff06 	bl	80061f0 <xQueueGenericCreate>
 80063e4:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80063e6:	f7ff ffeb 	bl	80063c0 <prvInitialiseMutex>
	}
 80063ea:	4620      	mov	r0, r4
 80063ec:	bd10      	pop	{r4, pc}

080063ee <xQueueGenericSendFromISR>:
{
 80063ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80063f2:	b160      	cbz	r0, 800640e <xQueueGenericSendFromISR+0x20>
 80063f4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063f6:	b199      	cbz	r1, 8006420 <xQueueGenericSendFromISR+0x32>
 80063f8:	2001      	movs	r0, #1
 80063fa:	b9b8      	cbnz	r0, 800642c <xQueueGenericSendFromISR+0x3e>
 80063fc:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	e7fe      	b.n	800640c <xQueueGenericSendFromISR+0x1e>
 800640e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	e7fe      	b.n	800641e <xQueueGenericSendFromISR+0x30>
 8006420:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8006422:	b908      	cbnz	r0, 8006428 <xQueueGenericSendFromISR+0x3a>
 8006424:	2001      	movs	r0, #1
 8006426:	e7e8      	b.n	80063fa <xQueueGenericSendFromISR+0xc>
 8006428:	2000      	movs	r0, #0
 800642a:	e7e6      	b.n	80063fa <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800642c:	2b02      	cmp	r3, #2
 800642e:	d009      	beq.n	8006444 <xQueueGenericSendFromISR+0x56>
 8006430:	b968      	cbnz	r0, 800644e <xQueueGenericSendFromISR+0x60>
 8006432:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	e7fe      	b.n	8006442 <xQueueGenericSendFromISR+0x54>
 8006444:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8006446:	2d01      	cmp	r5, #1
 8006448:	d0f2      	beq.n	8006430 <xQueueGenericSendFromISR+0x42>
 800644a:	2000      	movs	r0, #0
 800644c:	e7f0      	b.n	8006430 <xQueueGenericSendFromISR+0x42>
 800644e:	461f      	mov	r7, r3
 8006450:	4690      	mov	r8, r2
 8006452:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006454:	f7ff fdb0 	bl	8005fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8006458:	f3ef 8611 	mrs	r6, BASEPRI
 800645c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800646c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800646e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006470:	429a      	cmp	r2, r3
 8006472:	d301      	bcc.n	8006478 <xQueueGenericSendFromISR+0x8a>
 8006474:	2f02      	cmp	r7, #2
 8006476:	d121      	bne.n	80064bc <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006478:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800647c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800647e:	463a      	mov	r2, r7
 8006480:	4649      	mov	r1, r9
 8006482:	4620      	mov	r0, r4
 8006484:	f7ff fde2 	bl	800604c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006488:	f1b5 3fff 	cmp.w	r5, #4294967295
 800648c:	d110      	bne.n	80064b0 <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800648e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006490:	b1b3      	cbz	r3, 80064c0 <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006492:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006496:	f000 fda3 	bl	8006fe0 <xTaskRemoveFromEventList>
 800649a:	b198      	cbz	r0, 80064c4 <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 800649c:	f1b8 0f00 	cmp.w	r8, #0
 80064a0:	d012      	beq.n	80064c8 <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064a2:	2001      	movs	r0, #1
 80064a4:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80064a8:	f386 8811 	msr	BASEPRI, r6
}
 80064ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064b0:	1c6b      	adds	r3, r5, #1
 80064b2:	b25b      	sxtb	r3, r3
 80064b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80064b8:	2001      	movs	r0, #1
 80064ba:	e7f5      	b.n	80064a8 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 80064bc:	2000      	movs	r0, #0
 80064be:	e7f3      	b.n	80064a8 <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 80064c0:	2001      	movs	r0, #1
 80064c2:	e7f1      	b.n	80064a8 <xQueueGenericSendFromISR+0xba>
 80064c4:	2001      	movs	r0, #1
 80064c6:	e7ef      	b.n	80064a8 <xQueueGenericSendFromISR+0xba>
 80064c8:	2001      	movs	r0, #1
 80064ca:	e7ed      	b.n	80064a8 <xQueueGenericSendFromISR+0xba>

080064cc <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80064cc:	b160      	cbz	r0, 80064e8 <xQueueGiveFromISR+0x1c>
{
 80064ce:	b570      	push	{r4, r5, r6, lr}
 80064d0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80064d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80064d4:	b18b      	cbz	r3, 80064fa <xQueueGiveFromISR+0x2e>
	__asm volatile
 80064d6:	f04f 0370 	mov.w	r3, #112	; 0x70
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	e7fe      	b.n	80064e6 <xQueueGiveFromISR+0x1a>
 80064e8:	f04f 0370 	mov.w	r3, #112	; 0x70
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	e7fe      	b.n	80064f8 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80064fa:	6803      	ldr	r3, [r0, #0]
 80064fc:	b153      	cbz	r3, 8006514 <xQueueGiveFromISR+0x48>
 80064fe:	2301      	movs	r3, #1
 8006500:	b973      	cbnz	r3, 8006520 <xQueueGiveFromISR+0x54>
 8006502:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	e7fe      	b.n	8006512 <xQueueGiveFromISR+0x46>
 8006514:	6843      	ldr	r3, [r0, #4]
 8006516:	b90b      	cbnz	r3, 800651c <xQueueGiveFromISR+0x50>
 8006518:	2301      	movs	r3, #1
 800651a:	e7f1      	b.n	8006500 <xQueueGiveFromISR+0x34>
 800651c:	2300      	movs	r3, #0
 800651e:	e7ef      	b.n	8006500 <xQueueGiveFromISR+0x34>
 8006520:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006522:	f7ff fd49 	bl	8005fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8006526:	f3ef 8511 	mrs	r5, BASEPRI
 800652a:	f04f 0370 	mov.w	r3, #112	; 0x70
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800653a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800653c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800653e:	429a      	cmp	r2, r3
 8006540:	d21a      	bcs.n	8006578 <xQueueGiveFromISR+0xac>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006542:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006546:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8006548:	3201      	adds	r2, #1
 800654a:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d10c      	bne.n	800656c <xQueueGiveFromISR+0xa0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006554:	b193      	cbz	r3, 800657c <xQueueGiveFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006556:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800655a:	f000 fd41 	bl	8006fe0 <xTaskRemoveFromEventList>
 800655e:	b178      	cbz	r0, 8006580 <xQueueGiveFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
 8006560:	b186      	cbz	r6, 8006584 <xQueueGiveFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006562:	2001      	movs	r0, #1
 8006564:	6030      	str	r0, [r6, #0]
	__asm volatile
 8006566:	f385 8811 	msr	BASEPRI, r5
}
 800656a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800656c:	3301      	adds	r3, #1
 800656e:	b25b      	sxtb	r3, r3
 8006570:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8006574:	2001      	movs	r0, #1
 8006576:	e7f6      	b.n	8006566 <xQueueGiveFromISR+0x9a>
			xReturn = errQUEUE_FULL;
 8006578:	2000      	movs	r0, #0
 800657a:	e7f4      	b.n	8006566 <xQueueGiveFromISR+0x9a>
			xReturn = pdPASS;
 800657c:	2001      	movs	r0, #1
 800657e:	e7f2      	b.n	8006566 <xQueueGiveFromISR+0x9a>
 8006580:	2001      	movs	r0, #1
 8006582:	e7f0      	b.n	8006566 <xQueueGiveFromISR+0x9a>
 8006584:	2001      	movs	r0, #1
 8006586:	e7ee      	b.n	8006566 <xQueueGiveFromISR+0x9a>

08006588 <xQueueGenericReceive>:
{
 8006588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006590:	b160      	cbz	r0, 80065ac <xQueueGenericReceive+0x24>
 8006592:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006594:	b199      	cbz	r1, 80065be <xQueueGenericReceive+0x36>
 8006596:	2501      	movs	r5, #1
 8006598:	b9bd      	cbnz	r5, 80065ca <xQueueGenericReceive+0x42>
	__asm volatile
 800659a:	f04f 0370 	mov.w	r3, #112	; 0x70
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	e7fe      	b.n	80065aa <xQueueGenericReceive+0x22>
 80065ac:	f04f 0370 	mov.w	r3, #112	; 0x70
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	e7fe      	b.n	80065bc <xQueueGenericReceive+0x34>
 80065be:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80065c0:	b90a      	cbnz	r2, 80065c6 <xQueueGenericReceive+0x3e>
 80065c2:	2501      	movs	r5, #1
 80065c4:	e7e8      	b.n	8006598 <xQueueGenericReceive+0x10>
 80065c6:	2500      	movs	r5, #0
 80065c8:	e7e6      	b.n	8006598 <xQueueGenericReceive+0x10>
 80065ca:	461f      	mov	r7, r3
 80065cc:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065ce:	f000 fda5 	bl	800711c <xTaskGetSchedulerState>
 80065d2:	b910      	cbnz	r0, 80065da <xQueueGenericReceive+0x52>
 80065d4:	9b01      	ldr	r3, [sp, #4]
 80065d6:	b103      	cbz	r3, 80065da <xQueueGenericReceive+0x52>
 80065d8:	2500      	movs	r5, #0
 80065da:	b945      	cbnz	r5, 80065ee <xQueueGenericReceive+0x66>
 80065dc:	f04f 0370 	mov.w	r3, #112	; 0x70
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	e7fe      	b.n	80065ec <xQueueGenericReceive+0x64>
 80065ee:	2600      	movs	r6, #0
 80065f0:	e05d      	b.n	80066ae <xQueueGenericReceive+0x126>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80065f2:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065f4:	4641      	mov	r1, r8
 80065f6:	4620      	mov	r0, r4
 80065f8:	f7ff fd63 	bl	80060c2 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80065fc:	b9df      	cbnz	r7, 8006636 <xQueueGenericReceive+0xae>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80065fe:	3d01      	subs	r5, #1
 8006600:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	b913      	cbnz	r3, 800660c <xQueueGenericReceive+0x84>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006606:	f000 fe45 	bl	8007294 <pvTaskIncrementMutexHeldCount>
 800660a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800660c:	6923      	ldr	r3, [r4, #16]
 800660e:	b163      	cbz	r3, 800662a <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006610:	f104 0010 	add.w	r0, r4, #16
 8006614:	f000 fce4 	bl	8006fe0 <xTaskRemoveFromEventList>
 8006618:	b138      	cbz	r0, 800662a <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 800661a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661e:	4b45      	ldr	r3, [pc, #276]	; (8006734 <xQueueGenericReceive+0x1ac>)
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800662a:	f7ff fbd5 	bl	8005dd8 <vPortExitCritical>
				return pdPASS;
 800662e:	2001      	movs	r0, #1
}
 8006630:	b004      	add	sp, #16
 8006632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8006636:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f5      	beq.n	800662a <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800663e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006642:	f000 fccd 	bl	8006fe0 <xTaskRemoveFromEventList>
 8006646:	2800      	cmp	r0, #0
 8006648:	d0ef      	beq.n	800662a <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 800664a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664e:	4b39      	ldr	r3, [pc, #228]	; (8006734 <xQueueGenericReceive+0x1ac>)
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	e7e6      	b.n	800662a <xQueueGenericReceive+0xa2>
					taskEXIT_CRITICAL();
 800665c:	f7ff fbbc 	bl	8005dd8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006660:	2000      	movs	r0, #0
 8006662:	e7e5      	b.n	8006630 <xQueueGenericReceive+0xa8>
					vTaskSetTimeOutState( &xTimeOut );
 8006664:	a802      	add	r0, sp, #8
 8006666:	f000 fd01 	bl	800706c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800666a:	2601      	movs	r6, #1
 800666c:	e029      	b.n	80066c2 <xQueueGenericReceive+0x13a>
		prvLockQueue( pxQueue );
 800666e:	2300      	movs	r3, #0
 8006670:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006674:	e031      	b.n	80066da <xQueueGenericReceive+0x152>
 8006676:	2300      	movs	r3, #0
 8006678:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800667c:	e033      	b.n	80066e6 <xQueueGenericReceive+0x15e>
						taskENTER_CRITICAL();
 800667e:	f7ff fb89 	bl	8005d94 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006682:	6860      	ldr	r0, [r4, #4]
 8006684:	f000 fd5a 	bl	800713c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8006688:	f7ff fba6 	bl	8005dd8 <vPortExitCritical>
 800668c:	e03b      	b.n	8006706 <xQueueGenericReceive+0x17e>
				prvUnlockQueue( pxQueue );
 800668e:	4620      	mov	r0, r4
 8006690:	f7ff fd29 	bl	80060e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006694:	f000 fb56 	bl	8006d44 <xTaskResumeAll>
 8006698:	e009      	b.n	80066ae <xQueueGenericReceive+0x126>
			prvUnlockQueue( pxQueue );
 800669a:	4620      	mov	r0, r4
 800669c:	f7ff fd23 	bl	80060e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066a0:	f000 fb50 	bl	8006d44 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066a4:	4620      	mov	r0, r4
 80066a6:	f7ff fcc4 	bl	8006032 <prvIsQueueEmpty>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d140      	bne.n	8006730 <xQueueGenericReceive+0x1a8>
		taskENTER_CRITICAL();
 80066ae:	f7ff fb71 	bl	8005d94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066b2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066b4:	2d00      	cmp	r5, #0
 80066b6:	d19c      	bne.n	80065f2 <xQueueGenericReceive+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80066b8:	9b01      	ldr	r3, [sp, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0ce      	beq.n	800665c <xQueueGenericReceive+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 80066be:	2e00      	cmp	r6, #0
 80066c0:	d0d0      	beq.n	8006664 <xQueueGenericReceive+0xdc>
		taskEXIT_CRITICAL();
 80066c2:	f7ff fb89 	bl	8005dd8 <vPortExitCritical>
		vTaskSuspendAll();
 80066c6:	f000 fa97 	bl	8006bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066ca:	f7ff fb63 	bl	8005d94 <vPortEnterCritical>
 80066ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80066d2:	b25b      	sxtb	r3, r3
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d0c9      	beq.n	800666e <xQueueGenericReceive+0xe6>
 80066da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80066de:	b25b      	sxtb	r3, r3
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e4:	d0c7      	beq.n	8006676 <xQueueGenericReceive+0xee>
 80066e6:	f7ff fb77 	bl	8005dd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066ea:	a901      	add	r1, sp, #4
 80066ec:	a802      	add	r0, sp, #8
 80066ee:	f000 fcd3 	bl	8007098 <xTaskCheckForTimeOut>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d1d1      	bne.n	800669a <xQueueGenericReceive+0x112>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066f6:	4620      	mov	r0, r4
 80066f8:	f7ff fc9b 	bl	8006032 <prvIsQueueEmpty>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d0c6      	beq.n	800668e <xQueueGenericReceive+0x106>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0bb      	beq.n	800667e <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006706:	9901      	ldr	r1, [sp, #4]
 8006708:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800670c:	f000 fc50 	bl	8006fb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006710:	4620      	mov	r0, r4
 8006712:	f7ff fce8 	bl	80060e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006716:	f000 fb15 	bl	8006d44 <xTaskResumeAll>
 800671a:	2800      	cmp	r0, #0
 800671c:	d1c7      	bne.n	80066ae <xQueueGenericReceive+0x126>
					portYIELD_WITHIN_API();
 800671e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006722:	4b04      	ldr	r3, [pc, #16]	; (8006734 <xQueueGenericReceive+0x1ac>)
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	e7be      	b.n	80066ae <xQueueGenericReceive+0x126>
				return errQUEUE_EMPTY;
 8006730:	2000      	movs	r0, #0
 8006732:	e77d      	b.n	8006630 <xQueueGenericReceive+0xa8>
 8006734:	e000ed04 	.word	0xe000ed04

08006738 <xQueueReceiveFromISR>:
{
 8006738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800673c:	b160      	cbz	r0, 8006758 <xQueueReceiveFromISR+0x20>
 800673e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006740:	b199      	cbz	r1, 800676a <xQueueReceiveFromISR+0x32>
 8006742:	2301      	movs	r3, #1
 8006744:	b9bb      	cbnz	r3, 8006776 <xQueueReceiveFromISR+0x3e>
 8006746:	f04f 0370 	mov.w	r3, #112	; 0x70
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	e7fe      	b.n	8006756 <xQueueReceiveFromISR+0x1e>
 8006758:	f04f 0370 	mov.w	r3, #112	; 0x70
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	e7fe      	b.n	8006768 <xQueueReceiveFromISR+0x30>
 800676a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800676c:	b90b      	cbnz	r3, 8006772 <xQueueReceiveFromISR+0x3a>
 800676e:	2301      	movs	r3, #1
 8006770:	e7e8      	b.n	8006744 <xQueueReceiveFromISR+0xc>
 8006772:	2300      	movs	r3, #0
 8006774:	e7e6      	b.n	8006744 <xQueueReceiveFromISR+0xc>
 8006776:	4617      	mov	r7, r2
 8006778:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800677a:	f7ff fc1d 	bl	8005fb8 <vPortValidateInterruptPriority>
	__asm volatile
 800677e:	f3ef 8611 	mrs	r6, BASEPRI
 8006782:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006792:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006796:	f1b8 0f00 	cmp.w	r8, #0
 800679a:	d020      	beq.n	80067de <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 800679c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80067a0:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067a2:	4649      	mov	r1, r9
 80067a4:	4620      	mov	r0, r4
 80067a6:	f7ff fc8c 	bl	80060c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80067aa:	f108 33ff 	add.w	r3, r8, #4294967295
 80067ae:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80067b0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80067b4:	d10d      	bne.n	80067d2 <xQueueReceiveFromISR+0x9a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b6:	6923      	ldr	r3, [r4, #16]
 80067b8:	b19b      	cbz	r3, 80067e2 <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ba:	f104 0010 	add.w	r0, r4, #16
 80067be:	f000 fc0f 	bl	8006fe0 <xTaskRemoveFromEventList>
 80067c2:	b180      	cbz	r0, 80067e6 <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 80067c4:	b18f      	cbz	r7, 80067ea <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80067c6:	2001      	movs	r0, #1
 80067c8:	6038      	str	r0, [r7, #0]
	__asm volatile
 80067ca:	f386 8811 	msr	BASEPRI, r6
}
 80067ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80067d2:	1c6b      	adds	r3, r5, #1
 80067d4:	b25b      	sxtb	r3, r3
 80067d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80067da:	2001      	movs	r0, #1
 80067dc:	e7f5      	b.n	80067ca <xQueueReceiveFromISR+0x92>
			xReturn = pdFAIL;
 80067de:	2000      	movs	r0, #0
 80067e0:	e7f3      	b.n	80067ca <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 80067e2:	2001      	movs	r0, #1
 80067e4:	e7f1      	b.n	80067ca <xQueueReceiveFromISR+0x92>
 80067e6:	2001      	movs	r0, #1
 80067e8:	e7ef      	b.n	80067ca <xQueueReceiveFromISR+0x92>
 80067ea:	2001      	movs	r0, #1
 80067ec:	e7ed      	b.n	80067ca <xQueueReceiveFromISR+0x92>
	...

080067f0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067f0:	4b0a      	ldr	r3, [pc, #40]	; (800681c <prvResetNextTaskUnblockTime+0x2c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	b94b      	cbnz	r3, 800680c <prvResetNextTaskUnblockTime+0x1c>
 80067f8:	2301      	movs	r3, #1
 80067fa:	b94b      	cbnz	r3, 8006810 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067fc:	4b07      	ldr	r3, [pc, #28]	; (800681c <prvResetNextTaskUnblockTime+0x2c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	4b06      	ldr	r3, [pc, #24]	; (8006820 <prvResetNextTaskUnblockTime+0x30>)
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800680c:	2300      	movs	r3, #0
 800680e:	e7f4      	b.n	80067fa <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006810:	f04f 32ff 	mov.w	r2, #4294967295
 8006814:	4b02      	ldr	r3, [pc, #8]	; (8006820 <prvResetNextTaskUnblockTime+0x30>)
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20006778 	.word	0x20006778
 8006820:	20006850 	.word	0x20006850

08006824 <prvDeleteTCB>:
	{
 8006824:	b510      	push	{r4, lr}
 8006826:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8006828:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800682a:	f7ff f9d1 	bl	8005bd0 <vPortFree>
			vPortFree( pxTCB );
 800682e:	4620      	mov	r0, r4
 8006830:	f7ff f9ce 	bl	8005bd0 <vPortFree>
 8006834:	bd10      	pop	{r4, pc}

08006836 <prvInitialiseNewTask>:
{
 8006836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800683a:	4680      	mov	r8, r0
 800683c:	4699      	mov	r9, r3
 800683e:	9d08      	ldr	r5, [sp, #32]
 8006840:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006842:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006844:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8006846:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800684a:	3a01      	subs	r2, #1
 800684c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006850:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006854:	2300      	movs	r3, #0
 8006856:	2b0f      	cmp	r3, #15
 8006858:	d807      	bhi.n	800686a <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800685a:	5cc8      	ldrb	r0, [r1, r3]
 800685c:	18e2      	adds	r2, r4, r3
 800685e:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8006862:	5cca      	ldrb	r2, [r1, r3]
 8006864:	b10a      	cbz	r2, 800686a <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006866:	3301      	adds	r3, #1
 8006868:	e7f5      	b.n	8006856 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800686a:	2300      	movs	r3, #0
 800686c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006870:	2d06      	cmp	r5, #6
 8006872:	d900      	bls.n	8006876 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006874:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8006876:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006878:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800687a:	f04f 0a00 	mov.w	sl, #0
 800687e:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006882:	1d20      	adds	r0, r4, #4
 8006884:	f7ff f9e7 	bl	8005c56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006888:	f104 0018 	add.w	r0, r4, #24
 800688c:	f7ff f9e3 	bl	8005c56 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006890:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006892:	f1c5 0507 	rsb	r5, r5, #7
 8006896:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006898:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800689a:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800689e:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068a2:	464a      	mov	r2, r9
 80068a4:	4641      	mov	r1, r8
 80068a6:	4630      	mov	r0, r6
 80068a8:	f7ff fa46 	bl	8005d38 <pxPortInitialiseStack>
 80068ac:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80068ae:	b107      	cbz	r7, 80068b2 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068b0:	603c      	str	r4, [r7, #0]
 80068b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080068b8 <prvInitialiseTaskLists>:
{
 80068b8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068ba:	2400      	movs	r4, #0
 80068bc:	e007      	b.n	80068ce <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068be:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80068c2:	0093      	lsls	r3, r2, #2
 80068c4:	480c      	ldr	r0, [pc, #48]	; (80068f8 <prvInitialiseTaskLists+0x40>)
 80068c6:	4418      	add	r0, r3
 80068c8:	f7ff f9ba 	bl	8005c40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068cc:	3401      	adds	r4, #1
 80068ce:	2c06      	cmp	r4, #6
 80068d0:	d9f5      	bls.n	80068be <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80068d2:	4d0a      	ldr	r5, [pc, #40]	; (80068fc <prvInitialiseTaskLists+0x44>)
 80068d4:	4628      	mov	r0, r5
 80068d6:	f7ff f9b3 	bl	8005c40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068da:	4c09      	ldr	r4, [pc, #36]	; (8006900 <prvInitialiseTaskLists+0x48>)
 80068dc:	4620      	mov	r0, r4
 80068de:	f7ff f9af 	bl	8005c40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068e2:	4808      	ldr	r0, [pc, #32]	; (8006904 <prvInitialiseTaskLists+0x4c>)
 80068e4:	f7ff f9ac 	bl	8005c40 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80068e8:	4807      	ldr	r0, [pc, #28]	; (8006908 <prvInitialiseTaskLists+0x50>)
 80068ea:	f7ff f9a9 	bl	8005c40 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80068ee:	4b07      	ldr	r3, [pc, #28]	; (800690c <prvInitialiseTaskLists+0x54>)
 80068f0:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068f2:	4b07      	ldr	r3, [pc, #28]	; (8006910 <prvInitialiseTaskLists+0x58>)
 80068f4:	601c      	str	r4, [r3, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	20006780 	.word	0x20006780
 80068fc:	20006824 	.word	0x20006824
 8006900:	20006838 	.word	0x20006838
 8006904:	20006858 	.word	0x20006858
 8006908:	20006870 	.word	0x20006870
 800690c:	20006778 	.word	0x20006778
 8006910:	2000677c 	.word	0x2000677c

08006914 <prvAddNewTaskToReadyList>:
{
 8006914:	b510      	push	{r4, lr}
 8006916:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006918:	f7ff fa3c 	bl	8005d94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800691c:	4a20      	ldr	r2, [pc, #128]	; (80069a0 <prvAddNewTaskToReadyList+0x8c>)
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006924:	4b1f      	ldr	r3, [pc, #124]	; (80069a4 <prvAddNewTaskToReadyList+0x90>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d031      	beq.n	8006990 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 800692c:	4b1e      	ldr	r3, [pc, #120]	; (80069a8 <prvAddNewTaskToReadyList+0x94>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	b93b      	cbnz	r3, 8006942 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006932:	4b1c      	ldr	r3, [pc, #112]	; (80069a4 <prvAddNewTaskToReadyList+0x90>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006938:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800693a:	429a      	cmp	r2, r3
 800693c:	d801      	bhi.n	8006942 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 800693e:	4b19      	ldr	r3, [pc, #100]	; (80069a4 <prvAddNewTaskToReadyList+0x90>)
 8006940:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8006942:	4a1a      	ldr	r2, [pc, #104]	; (80069ac <prvAddNewTaskToReadyList+0x98>)
 8006944:	6813      	ldr	r3, [r2, #0]
 8006946:	3301      	adds	r3, #1
 8006948:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800694a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800694c:	2201      	movs	r2, #1
 800694e:	409a      	lsls	r2, r3
 8006950:	4917      	ldr	r1, [pc, #92]	; (80069b0 <prvAddNewTaskToReadyList+0x9c>)
 8006952:	6808      	ldr	r0, [r1, #0]
 8006954:	4302      	orrs	r2, r0
 8006956:	600a      	str	r2, [r1, #0]
 8006958:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800695c:	009a      	lsls	r2, r3, #2
 800695e:	1d21      	adds	r1, r4, #4
 8006960:	4814      	ldr	r0, [pc, #80]	; (80069b4 <prvAddNewTaskToReadyList+0xa0>)
 8006962:	4410      	add	r0, r2
 8006964:	f7ff f97a 	bl	8005c5c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006968:	f7ff fa36 	bl	8005dd8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800696c:	4b0e      	ldr	r3, [pc, #56]	; (80069a8 <prvAddNewTaskToReadyList+0x94>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	b16b      	cbz	r3, 800698e <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006972:	4b0c      	ldr	r3, [pc, #48]	; (80069a4 <prvAddNewTaskToReadyList+0x90>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006978:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800697a:	429a      	cmp	r2, r3
 800697c:	d207      	bcs.n	800698e <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 800697e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006982:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <prvAddNewTaskToReadyList+0xa4>)
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 8006990:	4b04      	ldr	r3, [pc, #16]	; (80069a4 <prvAddNewTaskToReadyList+0x90>)
 8006992:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006994:	6813      	ldr	r3, [r2, #0]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d1d3      	bne.n	8006942 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 800699a:	f7ff ff8d 	bl	80068b8 <prvInitialiseTaskLists>
 800699e:	e7d0      	b.n	8006942 <prvAddNewTaskToReadyList+0x2e>
 80069a0:	2000680c 	.word	0x2000680c
 80069a4:	20006774 	.word	0x20006774
 80069a8:	2000686c 	.word	0x2000686c
 80069ac:	2000681c 	.word	0x2000681c
 80069b0:	20006820 	.word	0x20006820
 80069b4:	20006780 	.word	0x20006780
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4604      	mov	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069c0:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <prvAddCurrentTaskToDelayedList+0x64>)
 80069c2:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069c4:	4b17      	ldr	r3, [pc, #92]	; (8006a24 <prvAddCurrentTaskToDelayedList+0x68>)
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	3004      	adds	r0, #4
 80069ca:	f7ff f96d 	bl	8005ca8 <uxListRemove>
 80069ce:	b950      	cbnz	r0, 80069e6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80069d0:	4b14      	ldr	r3, [pc, #80]	; (8006a24 <prvAddCurrentTaskToDelayedList+0x68>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d6:	2301      	movs	r3, #1
 80069d8:	fa03 f202 	lsl.w	r2, r3, r2
 80069dc:	4912      	ldr	r1, [pc, #72]	; (8006a28 <prvAddCurrentTaskToDelayedList+0x6c>)
 80069de:	680b      	ldr	r3, [r1, #0]
 80069e0:	ea23 0302 	bic.w	r3, r3, r2
 80069e4:	600b      	str	r3, [r1, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 80069e6:	442c      	add	r4, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069e8:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <prvAddCurrentTaskToDelayedList+0x68>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	605c      	str	r4, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 80069ee:	42a5      	cmp	r5, r4
 80069f0:	d80d      	bhi.n	8006a0e <prvAddCurrentTaskToDelayedList+0x52>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069f2:	4b0e      	ldr	r3, [pc, #56]	; (8006a2c <prvAddCurrentTaskToDelayedList+0x70>)
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <prvAddCurrentTaskToDelayedList+0x68>)
 80069f8:	6819      	ldr	r1, [r3, #0]
 80069fa:	3104      	adds	r1, #4
 80069fc:	f7ff f93a 	bl	8005c74 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <prvAddCurrentTaskToDelayedList+0x74>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	429c      	cmp	r4, r3
 8006a06:	d201      	bcs.n	8006a0c <prvAddCurrentTaskToDelayedList+0x50>
			{
				xNextTaskUnblockTime = xTimeToWake;
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <prvAddCurrentTaskToDelayedList+0x74>)
 8006a0a:	601c      	str	r4, [r3, #0]
 8006a0c:	bd38      	pop	{r3, r4, r5, pc}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a0e:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <prvAddCurrentTaskToDelayedList+0x78>)
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	4b04      	ldr	r3, [pc, #16]	; (8006a24 <prvAddCurrentTaskToDelayedList+0x68>)
 8006a14:	6819      	ldr	r1, [r3, #0]
 8006a16:	3104      	adds	r1, #4
 8006a18:	f7ff f92c 	bl	8005c74 <vListInsert>
 8006a1c:	bd38      	pop	{r3, r4, r5, pc}
 8006a1e:	bf00      	nop
 8006a20:	20006884 	.word	0x20006884
 8006a24:	20006774 	.word	0x20006774
 8006a28:	20006820 	.word	0x20006820
 8006a2c:	20006778 	.word	0x20006778
 8006a30:	20006850 	.word	0x20006850
 8006a34:	2000677c 	.word	0x2000677c

08006a38 <xTaskCreate>:
	{
 8006a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	4606      	mov	r6, r0
 8006a40:	460f      	mov	r7, r1
 8006a42:	4615      	mov	r5, r2
 8006a44:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a46:	0090      	lsls	r0, r2, #2
 8006a48:	f7ff f83e 	bl	8005ac8 <pvPortMalloc>
			if( pxStack != NULL )
 8006a4c:	b300      	cbz	r0, 8006a90 <xTaskCreate+0x58>
 8006a4e:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006a50:	2054      	movs	r0, #84	; 0x54
 8006a52:	f7ff f839 	bl	8005ac8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006a56:	4604      	mov	r4, r0
 8006a58:	b1b0      	cbz	r0, 8006a88 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8006a5a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8006a5e:	b1cc      	cbz	r4, 8006a94 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a60:	2300      	movs	r3, #0
 8006a62:	9303      	str	r3, [sp, #12]
 8006a64:	9402      	str	r4, [sp, #8]
 8006a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	4643      	mov	r3, r8
 8006a70:	462a      	mov	r2, r5
 8006a72:	4639      	mov	r1, r7
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7ff fede 	bl	8006836 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f7ff ff4a 	bl	8006914 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a80:	2001      	movs	r0, #1
	}
 8006a82:	b005      	add	sp, #20
 8006a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006a88:	4648      	mov	r0, r9
 8006a8a:	f7ff f8a1 	bl	8005bd0 <vPortFree>
 8006a8e:	e7e6      	b.n	8006a5e <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8006a90:	2400      	movs	r4, #0
 8006a92:	e7e4      	b.n	8006a5e <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8006a98:	e7f3      	b.n	8006a82 <xTaskCreate+0x4a>
	...

08006a9c <vTaskDelete>:
	{
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8006aa0:	f7ff f978 	bl	8005d94 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006aa4:	2c00      	cmp	r4, #0
 8006aa6:	d034      	beq.n	8006b12 <vTaskDelete+0x76>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aa8:	1d25      	adds	r5, r4, #4
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f7ff f8fc 	bl	8005ca8 <uxListRemove>
 8006ab0:	b970      	cbnz	r0, 8006ad0 <vTaskDelete+0x34>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ab2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006ab4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006ab8:	008b      	lsls	r3, r1, #2
 8006aba:	4926      	ldr	r1, [pc, #152]	; (8006b54 <vTaskDelete+0xb8>)
 8006abc:	58cb      	ldr	r3, [r1, r3]
 8006abe:	b93b      	cbnz	r3, 8006ad0 <vTaskDelete+0x34>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	fa03 f202 	lsl.w	r2, r3, r2
 8006ac6:	4924      	ldr	r1, [pc, #144]	; (8006b58 <vTaskDelete+0xbc>)
 8006ac8:	680b      	ldr	r3, [r1, #0]
 8006aca:	ea23 0302 	bic.w	r3, r3, r2
 8006ace:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ad0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ad2:	b11b      	cbz	r3, 8006adc <vTaskDelete+0x40>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ad4:	f104 0018 	add.w	r0, r4, #24
 8006ad8:	f7ff f8e6 	bl	8005ca8 <uxListRemove>
			uxTaskNumber++;
 8006adc:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <vTaskDelete+0xc0>)
 8006ade:	6813      	ldr	r3, [r2, #0]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8006ae4:	4b1e      	ldr	r3, [pc, #120]	; (8006b60 <vTaskDelete+0xc4>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	429c      	cmp	r4, r3
 8006aea:	d015      	beq.n	8006b18 <vTaskDelete+0x7c>
				--uxCurrentNumberOfTasks;
 8006aec:	4a1d      	ldr	r2, [pc, #116]	; (8006b64 <vTaskDelete+0xc8>)
 8006aee:	6813      	ldr	r3, [r2, #0]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006af4:	4620      	mov	r0, r4
 8006af6:	f7ff fe95 	bl	8006824 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 8006afa:	f7ff fe79 	bl	80067f0 <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
 8006afe:	f7ff f96b 	bl	8005dd8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8006b02:	4b19      	ldr	r3, [pc, #100]	; (8006b68 <vTaskDelete+0xcc>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	b11b      	cbz	r3, 8006b10 <vTaskDelete+0x74>
			if( pxTCB == pxCurrentTCB )
 8006b08:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <vTaskDelete+0xc4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	429c      	cmp	r4, r3
 8006b0e:	d00c      	beq.n	8006b2a <vTaskDelete+0x8e>
 8006b10:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006b12:	4b13      	ldr	r3, [pc, #76]	; (8006b60 <vTaskDelete+0xc4>)
 8006b14:	681c      	ldr	r4, [r3, #0]
 8006b16:	e7c7      	b.n	8006aa8 <vTaskDelete+0xc>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4814      	ldr	r0, [pc, #80]	; (8006b6c <vTaskDelete+0xd0>)
 8006b1c:	f7ff f89e 	bl	8005c5c <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8006b20:	4a13      	ldr	r2, [pc, #76]	; (8006b70 <vTaskDelete+0xd4>)
 8006b22:	6813      	ldr	r3, [r2, #0]
 8006b24:	3301      	adds	r3, #1
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	e7e9      	b.n	8006afe <vTaskDelete+0x62>
				configASSERT( uxSchedulerSuspended == 0 );
 8006b2a:	4b12      	ldr	r3, [pc, #72]	; (8006b74 <vTaskDelete+0xd8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	b143      	cbz	r3, 8006b42 <vTaskDelete+0xa6>
	__asm volatile
 8006b30:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	e7fe      	b.n	8006b40 <vTaskDelete+0xa4>
				portYIELD_WITHIN_API();
 8006b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b46:	4b0c      	ldr	r3, [pc, #48]	; (8006b78 <vTaskDelete+0xdc>)
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	f3bf 8f6f 	isb	sy
	}
 8006b52:	e7dd      	b.n	8006b10 <vTaskDelete+0x74>
 8006b54:	20006780 	.word	0x20006780
 8006b58:	20006820 	.word	0x20006820
 8006b5c:	2000681c 	.word	0x2000681c
 8006b60:	20006774 	.word	0x20006774
 8006b64:	2000680c 	.word	0x2000680c
 8006b68:	2000686c 	.word	0x2000686c
 8006b6c:	20006870 	.word	0x20006870
 8006b70:	20006810 	.word	0x20006810
 8006b74:	20006818 	.word	0x20006818
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <vTaskStartScheduler>:
{
 8006b7c:	b500      	push	{lr}
 8006b7e:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8006b80:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <vTaskStartScheduler+0x64>)
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	2300      	movs	r3, #0
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	2280      	movs	r2, #128	; 0x80
 8006b8a:	4916      	ldr	r1, [pc, #88]	; (8006be4 <vTaskStartScheduler+0x68>)
 8006b8c:	4816      	ldr	r0, [pc, #88]	; (8006be8 <vTaskStartScheduler+0x6c>)
 8006b8e:	f7ff ff53 	bl	8006a38 <xTaskCreate>
	if( xReturn == pdPASS )
 8006b92:	2801      	cmp	r0, #1
 8006b94:	d005      	beq.n	8006ba2 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b96:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b9a:	d017      	beq.n	8006bcc <vTaskStartScheduler+0x50>
}
 8006b9c:	b003      	add	sp, #12
 8006b9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ba2:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb6:	4b0d      	ldr	r3, [pc, #52]	; (8006bec <vTaskStartScheduler+0x70>)
 8006bb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bba:	2201      	movs	r2, #1
 8006bbc:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <vTaskStartScheduler+0x74>)
 8006bbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <vTaskStartScheduler+0x78>)
 8006bc4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006bc6:	f7ff f981 	bl	8005ecc <xPortStartScheduler>
 8006bca:	e7e7      	b.n	8006b9c <vTaskStartScheduler+0x20>
 8006bcc:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	e7fe      	b.n	8006bdc <vTaskStartScheduler+0x60>
 8006bde:	bf00      	nop
 8006be0:	2000684c 	.word	0x2000684c
 8006be4:	0805e590 	.word	0x0805e590
 8006be8:	08006eed 	.word	0x08006eed
 8006bec:	20006850 	.word	0x20006850
 8006bf0:	2000686c 	.word	0x2000686c
 8006bf4:	20006884 	.word	0x20006884

08006bf8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006bf8:	4a02      	ldr	r2, [pc, #8]	; (8006c04 <vTaskSuspendAll+0xc>)
 8006bfa:	6813      	ldr	r3, [r2, #0]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20006818 	.word	0x20006818

08006c08 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006c08:	4b01      	ldr	r3, [pc, #4]	; (8006c10 <xTaskGetTickCount+0x8>)
 8006c0a:	6818      	ldr	r0, [r3, #0]
}
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	20006884 	.word	0x20006884

08006c14 <xTaskGetTickCountFromISR>:
{
 8006c14:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c16:	f7ff f9cf 	bl	8005fb8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8006c1a:	4b01      	ldr	r3, [pc, #4]	; (8006c20 <xTaskGetTickCountFromISR+0xc>)
 8006c1c:	6818      	ldr	r0, [r3, #0]
}
 8006c1e:	bd08      	pop	{r3, pc}
 8006c20:	20006884 	.word	0x20006884

08006c24 <xTaskIncrementTick>:
{
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c26:	4b3c      	ldr	r3, [pc, #240]	; (8006d18 <xTaskIncrementTick+0xf4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d168      	bne.n	8006d00 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + 1;
 8006c2e:	4b3b      	ldr	r3, [pc, #236]	; (8006d1c <xTaskIncrementTick+0xf8>)
 8006c30:	681d      	ldr	r5, [r3, #0]
 8006c32:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006c34:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8006c36:	b9c5      	cbnz	r5, 8006c6a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006c38:	4b39      	ldr	r3, [pc, #228]	; (8006d20 <xTaskIncrementTick+0xfc>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	b143      	cbz	r3, 8006c52 <xTaskIncrementTick+0x2e>
 8006c40:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	e7fe      	b.n	8006c50 <xTaskIncrementTick+0x2c>
 8006c52:	4a33      	ldr	r2, [pc, #204]	; (8006d20 <xTaskIncrementTick+0xfc>)
 8006c54:	6811      	ldr	r1, [r2, #0]
 8006c56:	4b33      	ldr	r3, [pc, #204]	; (8006d24 <xTaskIncrementTick+0x100>)
 8006c58:	6818      	ldr	r0, [r3, #0]
 8006c5a:	6010      	str	r0, [r2, #0]
 8006c5c:	6019      	str	r1, [r3, #0]
 8006c5e:	4a32      	ldr	r2, [pc, #200]	; (8006d28 <xTaskIncrementTick+0x104>)
 8006c60:	6813      	ldr	r3, [r2, #0]
 8006c62:	3301      	adds	r3, #1
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	f7ff fdc3 	bl	80067f0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c6a:	4b30      	ldr	r3, [pc, #192]	; (8006d2c <xTaskIncrementTick+0x108>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	429d      	cmp	r5, r3
 8006c70:	d23a      	bcs.n	8006ce8 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8006c72:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c74:	4b2e      	ldr	r3, [pc, #184]	; (8006d30 <xTaskIncrementTick+0x10c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c7e:	009a      	lsls	r2, r3, #2
 8006c80:	4b2c      	ldr	r3, [pc, #176]	; (8006d34 <xTaskIncrementTick+0x110>)
 8006c82:	589b      	ldr	r3, [r3, r2]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d940      	bls.n	8006d0a <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 8006c88:	2401      	movs	r4, #1
 8006c8a:	e03e      	b.n	8006d0a <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 8006c8c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c8e:	4b24      	ldr	r3, [pc, #144]	; (8006d20 <xTaskIncrementTick+0xfc>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	b353      	cbz	r3, 8006cec <xTaskIncrementTick+0xc8>
 8006c96:	2300      	movs	r3, #0
 8006c98:	bb53      	cbnz	r3, 8006cf0 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c9a:	4b21      	ldr	r3, [pc, #132]	; (8006d20 <xTaskIncrementTick+0xfc>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ca2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8006ca4:	429d      	cmp	r5, r3
 8006ca6:	d328      	bcc.n	8006cfa <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ca8:	1d37      	adds	r7, r6, #4
 8006caa:	4638      	mov	r0, r7
 8006cac:	f7fe fffc 	bl	8005ca8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cb0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006cb2:	b11b      	cbz	r3, 8006cbc <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cb4:	f106 0018 	add.w	r0, r6, #24
 8006cb8:	f7fe fff6 	bl	8005ca8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cbc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	409a      	lsls	r2, r3
 8006cc2:	491d      	ldr	r1, [pc, #116]	; (8006d38 <xTaskIncrementTick+0x114>)
 8006cc4:	6808      	ldr	r0, [r1, #0]
 8006cc6:	4302      	orrs	r2, r0
 8006cc8:	600a      	str	r2, [r1, #0]
 8006cca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006cce:	009a      	lsls	r2, r3, #2
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	4818      	ldr	r0, [pc, #96]	; (8006d34 <xTaskIncrementTick+0x110>)
 8006cd4:	4410      	add	r0, r2
 8006cd6:	f7fe ffc1 	bl	8005c5c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cda:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006cdc:	4b14      	ldr	r3, [pc, #80]	; (8006d30 <xTaskIncrementTick+0x10c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d2d2      	bcs.n	8006c8c <xTaskIncrementTick+0x68>
 8006ce6:	e7d2      	b.n	8006c8e <xTaskIncrementTick+0x6a>
 8006ce8:	2400      	movs	r4, #0
 8006cea:	e7d0      	b.n	8006c8e <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cec:	2301      	movs	r3, #1
 8006cee:	e7d3      	b.n	8006c98 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf4:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <xTaskIncrementTick+0x108>)
 8006cf6:	601a      	str	r2, [r3, #0]
					break;
 8006cf8:	e7bc      	b.n	8006c74 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8006cfa:	4a0c      	ldr	r2, [pc, #48]	; (8006d2c <xTaskIncrementTick+0x108>)
 8006cfc:	6013      	str	r3, [r2, #0]
						break;
 8006cfe:	e7b9      	b.n	8006c74 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8006d00:	4a0e      	ldr	r2, [pc, #56]	; (8006d3c <xTaskIncrementTick+0x118>)
 8006d02:	6813      	ldr	r3, [r2, #0]
 8006d04:	3301      	adds	r3, #1
 8006d06:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006d08:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8006d0a:	4b0d      	ldr	r3, [pc, #52]	; (8006d40 <xTaskIncrementTick+0x11c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	b103      	cbz	r3, 8006d12 <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 8006d10:	2401      	movs	r4, #1
}
 8006d12:	4620      	mov	r0, r4
 8006d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20006818 	.word	0x20006818
 8006d1c:	20006884 	.word	0x20006884
 8006d20:	20006778 	.word	0x20006778
 8006d24:	2000677c 	.word	0x2000677c
 8006d28:	20006854 	.word	0x20006854
 8006d2c:	20006850 	.word	0x20006850
 8006d30:	20006774 	.word	0x20006774
 8006d34:	20006780 	.word	0x20006780
 8006d38:	20006820 	.word	0x20006820
 8006d3c:	20006814 	.word	0x20006814
 8006d40:	20006888 	.word	0x20006888

08006d44 <xTaskResumeAll>:
{
 8006d44:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8006d46:	4b35      	ldr	r3, [pc, #212]	; (8006e1c <xTaskResumeAll+0xd8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	b943      	cbnz	r3, 8006d5e <xTaskResumeAll+0x1a>
 8006d4c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	e7fe      	b.n	8006d5c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8006d5e:	f7ff f819 	bl	8005d94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006d62:	4b2e      	ldr	r3, [pc, #184]	; (8006e1c <xTaskResumeAll+0xd8>)
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	3a01      	subs	r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d150      	bne.n	8006e12 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d70:	4b2b      	ldr	r3, [pc, #172]	; (8006e20 <xTaskResumeAll+0xdc>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	b923      	cbnz	r3, 8006d80 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8006d76:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006d78:	f7ff f82e 	bl	8005dd8 <vPortExitCritical>
}
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}
 8006d80:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d82:	4b28      	ldr	r3, [pc, #160]	; (8006e24 <xTaskResumeAll+0xe0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	b31b      	cbz	r3, 8006dd0 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006d88:	4b26      	ldr	r3, [pc, #152]	; (8006e24 <xTaskResumeAll+0xe0>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d8e:	f104 0018 	add.w	r0, r4, #24
 8006d92:	f7fe ff89 	bl	8005ca8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d96:	1d25      	adds	r5, r4, #4
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f7fe ff85 	bl	8005ca8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006da0:	2201      	movs	r2, #1
 8006da2:	409a      	lsls	r2, r3
 8006da4:	4920      	ldr	r1, [pc, #128]	; (8006e28 <xTaskResumeAll+0xe4>)
 8006da6:	6808      	ldr	r0, [r1, #0]
 8006da8:	4302      	orrs	r2, r0
 8006daa:	600a      	str	r2, [r1, #0]
 8006dac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006db0:	009a      	lsls	r2, r3, #2
 8006db2:	4629      	mov	r1, r5
 8006db4:	481d      	ldr	r0, [pc, #116]	; (8006e2c <xTaskResumeAll+0xe8>)
 8006db6:	4410      	add	r0, r2
 8006db8:	f7fe ff50 	bl	8005c5c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006dbe:	4b1c      	ldr	r3, [pc, #112]	; (8006e30 <xTaskResumeAll+0xec>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d3dc      	bcc.n	8006d82 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8006dc8:	2201      	movs	r2, #1
 8006dca:	4b1a      	ldr	r3, [pc, #104]	; (8006e34 <xTaskResumeAll+0xf0>)
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e7d8      	b.n	8006d82 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8006dd0:	b10c      	cbz	r4, 8006dd6 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8006dd2:	f7ff fd0d 	bl	80067f0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006dd6:	4b18      	ldr	r3, [pc, #96]	; (8006e38 <xTaskResumeAll+0xf4>)
 8006dd8:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006dda:	b974      	cbnz	r4, 8006dfa <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 8006ddc:	4b15      	ldr	r3, [pc, #84]	; (8006e34 <xTaskResumeAll+0xf0>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	b1cb      	cbz	r3, 8006e16 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 8006de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de6:	4b15      	ldr	r3, [pc, #84]	; (8006e3c <xTaskResumeAll+0xf8>)
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006df2:	2401      	movs	r4, #1
 8006df4:	e7c0      	b.n	8006d78 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006df6:	3c01      	subs	r4, #1
 8006df8:	d007      	beq.n	8006e0a <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 8006dfa:	f7ff ff13 	bl	8006c24 <xTaskIncrementTick>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d0f9      	beq.n	8006df6 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8006e02:	2201      	movs	r2, #1
 8006e04:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <xTaskResumeAll+0xf0>)
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e7f5      	b.n	8006df6 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <xTaskResumeAll+0xf4>)
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	e7e4      	b.n	8006ddc <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 8006e12:	2400      	movs	r4, #0
 8006e14:	e7b0      	b.n	8006d78 <xTaskResumeAll+0x34>
 8006e16:	2400      	movs	r4, #0
 8006e18:	e7ae      	b.n	8006d78 <xTaskResumeAll+0x34>
 8006e1a:	bf00      	nop
 8006e1c:	20006818 	.word	0x20006818
 8006e20:	2000680c 	.word	0x2000680c
 8006e24:	20006858 	.word	0x20006858
 8006e28:	20006820 	.word	0x20006820
 8006e2c:	20006780 	.word	0x20006780
 8006e30:	20006774 	.word	0x20006774
 8006e34:	20006888 	.word	0x20006888
 8006e38:	20006814 	.word	0x20006814
 8006e3c:	e000ed04 	.word	0xe000ed04

08006e40 <vTaskDelay>:
	{
 8006e40:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e42:	b1a8      	cbz	r0, 8006e70 <vTaskDelay+0x30>
 8006e44:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006e46:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <vTaskDelay+0x48>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	b143      	cbz	r3, 8006e5e <vTaskDelay+0x1e>
 8006e4c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	e7fe      	b.n	8006e5c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006e5e:	f7ff fecb 	bl	8006bf8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e62:	2100      	movs	r1, #0
 8006e64:	4620      	mov	r0, r4
 8006e66:	f7ff fda9 	bl	80069bc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006e6a:	f7ff ff6b 	bl	8006d44 <xTaskResumeAll>
 8006e6e:	e000      	b.n	8006e72 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e70:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8006e72:	b938      	cbnz	r0, 8006e84 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8006e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e78:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <vTaskDelay+0x4c>)
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	bd10      	pop	{r4, pc}
 8006e86:	bf00      	nop
 8006e88:	20006818 	.word	0x20006818
 8006e8c:	e000ed04 	.word	0xe000ed04

08006e90 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e90:	4b13      	ldr	r3, [pc, #76]	; (8006ee0 <prvCheckTasksWaitingTermination+0x50>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	b313      	cbz	r3, 8006edc <prvCheckTasksWaitingTermination+0x4c>
{
 8006e96:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8006e98:	f7ff feae 	bl	8006bf8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006e9c:	4b11      	ldr	r3, [pc, #68]	; (8006ee4 <prvCheckTasksWaitingTermination+0x54>)
 8006e9e:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8006ea0:	f7ff ff50 	bl	8006d44 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8006ea4:	b924      	cbnz	r4, 8006eb0 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ea6:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <prvCheckTasksWaitingTermination+0x50>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f4      	bne.n	8006e98 <prvCheckTasksWaitingTermination+0x8>
}
 8006eae:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8006eb0:	f7fe ff70 	bl	8005d94 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <prvCheckTasksWaitingTermination+0x54>)
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eba:	1d20      	adds	r0, r4, #4
 8006ebc:	f7fe fef4 	bl	8005ca8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006ec0:	4a09      	ldr	r2, [pc, #36]	; (8006ee8 <prvCheckTasksWaitingTermination+0x58>)
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8006ec8:	4a05      	ldr	r2, [pc, #20]	; (8006ee0 <prvCheckTasksWaitingTermination+0x50>)
 8006eca:	6813      	ldr	r3, [r2, #0]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8006ed0:	f7fe ff82 	bl	8005dd8 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7ff fca5 	bl	8006824 <prvDeleteTCB>
 8006eda:	e7e4      	b.n	8006ea6 <prvCheckTasksWaitingTermination+0x16>
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	20006810 	.word	0x20006810
 8006ee4:	20006870 	.word	0x20006870
 8006ee8:	2000680c 	.word	0x2000680c

08006eec <prvIdleTask>:
{
 8006eec:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8006eee:	f7ff ffcf 	bl	8006e90 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <prvIdleTask+0x20>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d9f9      	bls.n	8006eee <prvIdleTask+0x2>
				taskYIELD();
 8006efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efe:	4b04      	ldr	r3, [pc, #16]	; (8006f10 <prvIdleTask+0x24>)
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	e7f0      	b.n	8006eee <prvIdleTask+0x2>
 8006f0c:	20006780 	.word	0x20006780
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f14:	4b21      	ldr	r3, [pc, #132]	; (8006f9c <vTaskSwitchContext+0x88>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	b9c3      	cbnz	r3, 8006f4c <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	4b20      	ldr	r3, [pc, #128]	; (8006fa0 <vTaskSwitchContext+0x8c>)
 8006f1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f20:	4b20      	ldr	r3, [pc, #128]	; (8006fa4 <vTaskSwitchContext+0x90>)
 8006f22:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8006f24:	fab3 f383 	clz	r3, r3
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	f1c3 031f 	rsb	r3, r3, #31
 8006f2e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006f32:	008a      	lsls	r2, r1, #2
 8006f34:	491c      	ldr	r1, [pc, #112]	; (8006fa8 <vTaskSwitchContext+0x94>)
 8006f36:	588a      	ldr	r2, [r1, r2]
 8006f38:	b962      	cbnz	r2, 8006f54 <vTaskSwitchContext+0x40>
	__asm volatile
 8006f3a:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	e7fe      	b.n	8006f4a <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	4b14      	ldr	r3, [pc, #80]	; (8006fa0 <vTaskSwitchContext+0x8c>)
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	4770      	bx	lr
{
 8006f54:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f56:	4814      	ldr	r0, [pc, #80]	; (8006fa8 <vTaskSwitchContext+0x94>)
 8006f58:	009a      	lsls	r2, r3, #2
 8006f5a:	18d4      	adds	r4, r2, r3
 8006f5c:	00a1      	lsls	r1, r4, #2
 8006f5e:	4401      	add	r1, r0
 8006f60:	684c      	ldr	r4, [r1, #4]
 8006f62:	6864      	ldr	r4, [r4, #4]
 8006f64:	604c      	str	r4, [r1, #4]
 8006f66:	441a      	add	r2, r3
 8006f68:	0091      	lsls	r1, r2, #2
 8006f6a:	3108      	adds	r1, #8
 8006f6c:	4408      	add	r0, r1
 8006f6e:	4284      	cmp	r4, r0
 8006f70:	d00b      	beq.n	8006f8a <vTaskSwitchContext+0x76>
 8006f72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006f76:	009a      	lsls	r2, r3, #2
 8006f78:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <vTaskSwitchContext+0x94>)
 8006f7a:	4413      	add	r3, r2
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <vTaskSwitchContext+0x98>)
 8006f82:	601a      	str	r2, [r3, #0]
}
 8006f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f88:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f8a:	6860      	ldr	r0, [r4, #4]
 8006f8c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006f90:	0091      	lsls	r1, r2, #2
 8006f92:	4a05      	ldr	r2, [pc, #20]	; (8006fa8 <vTaskSwitchContext+0x94>)
 8006f94:	440a      	add	r2, r1
 8006f96:	6050      	str	r0, [r2, #4]
 8006f98:	e7eb      	b.n	8006f72 <vTaskSwitchContext+0x5e>
 8006f9a:	bf00      	nop
 8006f9c:	20006818 	.word	0x20006818
 8006fa0:	20006888 	.word	0x20006888
 8006fa4:	20006820 	.word	0x20006820
 8006fa8:	20006780 	.word	0x20006780
 8006fac:	20006774 	.word	0x20006774

08006fb0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006fb0:	b940      	cbnz	r0, 8006fc4 <vTaskPlaceOnEventList+0x14>
 8006fb2:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	e7fe      	b.n	8006fc2 <vTaskPlaceOnEventList+0x12>
{
 8006fc4:	b510      	push	{r4, lr}
 8006fc6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fc8:	4b04      	ldr	r3, [pc, #16]	; (8006fdc <vTaskPlaceOnEventList+0x2c>)
 8006fca:	6819      	ldr	r1, [r3, #0]
 8006fcc:	3118      	adds	r1, #24
 8006fce:	f7fe fe51 	bl	8005c74 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f7ff fcf1 	bl	80069bc <prvAddCurrentTaskToDelayedList>
 8006fda:	bd10      	pop	{r4, pc}
 8006fdc:	20006774 	.word	0x20006774

08006fe0 <xTaskRemoveFromEventList>:
{
 8006fe0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006fe2:	68c3      	ldr	r3, [r0, #12]
 8006fe4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006fe6:	b324      	cbz	r4, 8007032 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fe8:	f104 0518 	add.w	r5, r4, #24
 8006fec:	4628      	mov	r0, r5
 8006fee:	f7fe fe5b 	bl	8005ca8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ff2:	4b18      	ldr	r3, [pc, #96]	; (8007054 <xTaskRemoveFromEventList+0x74>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	bb2b      	cbnz	r3, 8007044 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ff8:	1d25      	adds	r5, r4, #4
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f7fe fe54 	bl	8005ca8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007000:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007002:	2201      	movs	r2, #1
 8007004:	409a      	lsls	r2, r3
 8007006:	4914      	ldr	r1, [pc, #80]	; (8007058 <xTaskRemoveFromEventList+0x78>)
 8007008:	6808      	ldr	r0, [r1, #0]
 800700a:	4302      	orrs	r2, r0
 800700c:	600a      	str	r2, [r1, #0]
 800700e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007012:	009a      	lsls	r2, r3, #2
 8007014:	4629      	mov	r1, r5
 8007016:	4811      	ldr	r0, [pc, #68]	; (800705c <xTaskRemoveFromEventList+0x7c>)
 8007018:	4410      	add	r0, r2
 800701a:	f7fe fe1f 	bl	8005c5c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800701e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <xTaskRemoveFromEventList+0x80>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007026:	429a      	cmp	r2, r3
 8007028:	d911      	bls.n	800704e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800702a:	2001      	movs	r0, #1
 800702c:	4b0d      	ldr	r3, [pc, #52]	; (8007064 <xTaskRemoveFromEventList+0x84>)
 800702e:	6018      	str	r0, [r3, #0]
 8007030:	bd38      	pop	{r3, r4, r5, pc}
 8007032:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	e7fe      	b.n	8007042 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007044:	4629      	mov	r1, r5
 8007046:	4808      	ldr	r0, [pc, #32]	; (8007068 <xTaskRemoveFromEventList+0x88>)
 8007048:	f7fe fe08 	bl	8005c5c <vListInsertEnd>
 800704c:	e7e7      	b.n	800701e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800704e:	2000      	movs	r0, #0
}
 8007050:	bd38      	pop	{r3, r4, r5, pc}
 8007052:	bf00      	nop
 8007054:	20006818 	.word	0x20006818
 8007058:	20006820 	.word	0x20006820
 800705c:	20006780 	.word	0x20006780
 8007060:	20006774 	.word	0x20006774
 8007064:	20006888 	.word	0x20006888
 8007068:	20006858 	.word	0x20006858

0800706c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800706c:	b130      	cbz	r0, 800707c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800706e:	4a08      	ldr	r2, [pc, #32]	; (8007090 <vTaskSetTimeOutState+0x24>)
 8007070:	6812      	ldr	r2, [r2, #0]
 8007072:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007074:	4a07      	ldr	r2, [pc, #28]	; (8007094 <vTaskSetTimeOutState+0x28>)
 8007076:	6812      	ldr	r2, [r2, #0]
 8007078:	6042      	str	r2, [r0, #4]
 800707a:	4770      	bx	lr
 800707c:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	e7fe      	b.n	800708c <vTaskSetTimeOutState+0x20>
 800708e:	bf00      	nop
 8007090:	20006854 	.word	0x20006854
 8007094:	20006884 	.word	0x20006884

08007098 <xTaskCheckForTimeOut>:
{
 8007098:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 800709a:	b1f0      	cbz	r0, 80070da <xTaskCheckForTimeOut+0x42>
 800709c:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 800709e:	b329      	cbz	r1, 80070ec <xTaskCheckForTimeOut+0x54>
 80070a0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80070a2:	f7fe fe77 	bl	8005d94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80070a6:	4b18      	ldr	r3, [pc, #96]	; (8007108 <xTaskCheckForTimeOut+0x70>)
 80070a8:	6819      	ldr	r1, [r3, #0]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	4b17      	ldr	r3, [pc, #92]	; (800710c <xTaskCheckForTimeOut+0x74>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d002      	beq.n	80070ba <xTaskCheckForTimeOut+0x22>
 80070b4:	6863      	ldr	r3, [r4, #4]
 80070b6:	4299      	cmp	r1, r3
 80070b8:	d221      	bcs.n	80070fe <xTaskCheckForTimeOut+0x66>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070ba:	6862      	ldr	r2, [r4, #4]
 80070bc:	1a88      	subs	r0, r1, r2
 80070be:	682b      	ldr	r3, [r5, #0]
 80070c0:	4298      	cmp	r0, r3
 80070c2:	d21e      	bcs.n	8007102 <xTaskCheckForTimeOut+0x6a>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80070c4:	1a52      	subs	r2, r2, r1
 80070c6:	4413      	add	r3, r2
 80070c8:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80070ca:	4620      	mov	r0, r4
 80070cc:	f7ff ffce 	bl	800706c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80070d0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80070d2:	f7fe fe81 	bl	8005dd8 <vPortExitCritical>
}
 80070d6:	4620      	mov	r0, r4
 80070d8:	bd38      	pop	{r3, r4, r5, pc}
 80070da:	f04f 0370 	mov.w	r3, #112	; 0x70
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	e7fe      	b.n	80070ea <xTaskCheckForTimeOut+0x52>
 80070ec:	f04f 0370 	mov.w	r3, #112	; 0x70
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	e7fe      	b.n	80070fc <xTaskCheckForTimeOut+0x64>
			xReturn = pdTRUE;
 80070fe:	2401      	movs	r4, #1
 8007100:	e7e7      	b.n	80070d2 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
 8007102:	2401      	movs	r4, #1
 8007104:	e7e5      	b.n	80070d2 <xTaskCheckForTimeOut+0x3a>
 8007106:	bf00      	nop
 8007108:	20006884 	.word	0x20006884
 800710c:	20006854 	.word	0x20006854

08007110 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007110:	2201      	movs	r2, #1
 8007112:	4b01      	ldr	r3, [pc, #4]	; (8007118 <vTaskMissedYield+0x8>)
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	4770      	bx	lr
 8007118:	20006888 	.word	0x20006888

0800711c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800711c:	4b05      	ldr	r3, [pc, #20]	; (8007134 <xTaskGetSchedulerState+0x18>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	b123      	cbz	r3, 800712c <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007122:	4b05      	ldr	r3, [pc, #20]	; (8007138 <xTaskGetSchedulerState+0x1c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	b91b      	cbnz	r3, 8007130 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8007128:	2002      	movs	r0, #2
 800712a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800712c:	2001      	movs	r0, #1
 800712e:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 8007130:	2000      	movs	r0, #0
	}
 8007132:	4770      	bx	lr
 8007134:	2000686c 	.word	0x2000686c
 8007138:	20006818 	.word	0x20006818

0800713c <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800713c:	2800      	cmp	r0, #0
 800713e:	d047      	beq.n	80071d0 <vTaskPriorityInherit+0x94>
	{
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007144:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007146:	4923      	ldr	r1, [pc, #140]	; (80071d4 <vTaskPriorityInherit+0x98>)
 8007148:	6809      	ldr	r1, [r1, #0]
 800714a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800714c:	428b      	cmp	r3, r1
 800714e:	d216      	bcs.n	800717e <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007150:	6981      	ldr	r1, [r0, #24]
 8007152:	2900      	cmp	r1, #0
 8007154:	db05      	blt.n	8007162 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007156:	491f      	ldr	r1, [pc, #124]	; (80071d4 <vTaskPriorityInherit+0x98>)
 8007158:	6809      	ldr	r1, [r1, #0]
 800715a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800715c:	f1c1 0107 	rsb	r1, r1, #7
 8007160:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007162:	6960      	ldr	r0, [r4, #20]
 8007164:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007168:	0099      	lsls	r1, r3, #2
 800716a:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <vTaskPriorityInherit+0x9c>)
 800716c:	440b      	add	r3, r1
 800716e:	4298      	cmp	r0, r3
 8007170:	d006      	beq.n	8007180 <vTaskPriorityInherit+0x44>
 8007172:	2300      	movs	r3, #0
 8007174:	b933      	cbnz	r3, 8007184 <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007176:	4b17      	ldr	r3, [pc, #92]	; (80071d4 <vTaskPriorityInherit+0x98>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800717e:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007180:	2301      	movs	r3, #1
 8007182:	e7f7      	b.n	8007174 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007184:	1d25      	adds	r5, r4, #4
 8007186:	4628      	mov	r0, r5
 8007188:	f7fe fd8e 	bl	8005ca8 <uxListRemove>
 800718c:	b968      	cbnz	r0, 80071aa <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800718e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007190:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007194:	008a      	lsls	r2, r1, #2
 8007196:	4910      	ldr	r1, [pc, #64]	; (80071d8 <vTaskPriorityInherit+0x9c>)
 8007198:	588a      	ldr	r2, [r1, r2]
 800719a:	b932      	cbnz	r2, 80071aa <vTaskPriorityInherit+0x6e>
 800719c:	2201      	movs	r2, #1
 800719e:	409a      	lsls	r2, r3
 80071a0:	490e      	ldr	r1, [pc, #56]	; (80071dc <vTaskPriorityInherit+0xa0>)
 80071a2:	680b      	ldr	r3, [r1, #0]
 80071a4:	ea23 0302 	bic.w	r3, r3, r2
 80071a8:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071aa:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <vTaskPriorityInherit+0x98>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80071b2:	2201      	movs	r2, #1
 80071b4:	409a      	lsls	r2, r3
 80071b6:	4909      	ldr	r1, [pc, #36]	; (80071dc <vTaskPriorityInherit+0xa0>)
 80071b8:	6808      	ldr	r0, [r1, #0]
 80071ba:	4302      	orrs	r2, r0
 80071bc:	600a      	str	r2, [r1, #0]
 80071be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80071c2:	009a      	lsls	r2, r3, #2
 80071c4:	4629      	mov	r1, r5
 80071c6:	4804      	ldr	r0, [pc, #16]	; (80071d8 <vTaskPriorityInherit+0x9c>)
 80071c8:	4410      	add	r0, r2
 80071ca:	f7fe fd47 	bl	8005c5c <vListInsertEnd>
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	20006774 	.word	0x20006774
 80071d8:	20006780 	.word	0x20006780
 80071dc:	20006820 	.word	0x20006820

080071e0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d04a      	beq.n	800727a <xTaskPriorityDisinherit+0x9a>
	{
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80071e8:	4a27      	ldr	r2, [pc, #156]	; (8007288 <xTaskPriorityDisinherit+0xa8>)
 80071ea:	6812      	ldr	r2, [r2, #0]
 80071ec:	4290      	cmp	r0, r2
 80071ee:	d008      	beq.n	8007202 <xTaskPriorityDisinherit+0x22>
 80071f0:	f04f 0370 	mov.w	r3, #112	; 0x70
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	e7fe      	b.n	8007200 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8007202:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8007204:	b942      	cbnz	r2, 8007218 <xTaskPriorityDisinherit+0x38>
 8007206:	f04f 0370 	mov.w	r3, #112	; 0x70
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	e7fe      	b.n	8007216 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8007218:	3a01      	subs	r2, #1
 800721a:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800721c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800721e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007220:	4288      	cmp	r0, r1
 8007222:	d02c      	beq.n	800727e <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007224:	bb6a      	cbnz	r2, 8007282 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007226:	1d25      	adds	r5, r4, #4
 8007228:	4628      	mov	r0, r5
 800722a:	f7fe fd3d 	bl	8005ca8 <uxListRemove>
 800722e:	b970      	cbnz	r0, 800724e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007230:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007232:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007236:	008b      	lsls	r3, r1, #2
 8007238:	4914      	ldr	r1, [pc, #80]	; (800728c <xTaskPriorityDisinherit+0xac>)
 800723a:	58cb      	ldr	r3, [r1, r3]
 800723c:	b93b      	cbnz	r3, 800724e <xTaskPriorityDisinherit+0x6e>
 800723e:	2301      	movs	r3, #1
 8007240:	fa03 f202 	lsl.w	r2, r3, r2
 8007244:	4912      	ldr	r1, [pc, #72]	; (8007290 <xTaskPriorityDisinherit+0xb0>)
 8007246:	680b      	ldr	r3, [r1, #0]
 8007248:	ea23 0302 	bic.w	r3, r3, r2
 800724c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800724e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007250:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007252:	f1c3 0207 	rsb	r2, r3, #7
 8007256:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007258:	2401      	movs	r4, #1
 800725a:	fa04 f203 	lsl.w	r2, r4, r3
 800725e:	490c      	ldr	r1, [pc, #48]	; (8007290 <xTaskPriorityDisinherit+0xb0>)
 8007260:	6808      	ldr	r0, [r1, #0]
 8007262:	4302      	orrs	r2, r0
 8007264:	600a      	str	r2, [r1, #0]
 8007266:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800726a:	009a      	lsls	r2, r3, #2
 800726c:	4629      	mov	r1, r5
 800726e:	4807      	ldr	r0, [pc, #28]	; (800728c <xTaskPriorityDisinherit+0xac>)
 8007270:	4410      	add	r0, r2
 8007272:	f7fe fcf3 	bl	8005c5c <vListInsertEnd>
					xReturn = pdTRUE;
 8007276:	4620      	mov	r0, r4
 8007278:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800727a:	2000      	movs	r0, #0
 800727c:	4770      	bx	lr
 800727e:	2000      	movs	r0, #0
 8007280:	bd38      	pop	{r3, r4, r5, pc}
 8007282:	2000      	movs	r0, #0
	}
 8007284:	bd38      	pop	{r3, r4, r5, pc}
 8007286:	bf00      	nop
 8007288:	20006774 	.word	0x20006774
 800728c:	20006780 	.word	0x20006780
 8007290:	20006820 	.word	0x20006820

08007294 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007294:	4b05      	ldr	r3, [pc, #20]	; (80072ac <pvTaskIncrementMutexHeldCount+0x18>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	b123      	cbz	r3, 80072a4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800729a:	4b04      	ldr	r3, [pc, #16]	; (80072ac <pvTaskIncrementMutexHeldCount+0x18>)
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80072a0:	3301      	adds	r3, #1
 80072a2:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 80072a4:	4b01      	ldr	r3, [pc, #4]	; (80072ac <pvTaskIncrementMutexHeldCount+0x18>)
 80072a6:	6818      	ldr	r0, [r3, #0]
	}
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	20006774 	.word	0x20006774

080072b0 <ulTaskNotifyTake>:
	{
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	4605      	mov	r5, r0
 80072b4:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 80072b6:	f7fe fd6d 	bl	8005d94 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80072ba:	4b19      	ldr	r3, [pc, #100]	; (8007320 <ulTaskNotifyTake+0x70>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c0:	b92b      	cbnz	r3, 80072ce <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80072c2:	4b17      	ldr	r3, [pc, #92]	; (8007320 <ulTaskNotifyTake+0x70>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 80072cc:	b9ac      	cbnz	r4, 80072fa <ulTaskNotifyTake+0x4a>
		taskEXIT_CRITICAL();
 80072ce:	f7fe fd83 	bl	8005dd8 <vPortExitCritical>
		taskENTER_CRITICAL();
 80072d2:	f7fe fd5f 	bl	8005d94 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80072d6:	4b12      	ldr	r3, [pc, #72]	; (8007320 <ulTaskNotifyTake+0x70>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
			if( ulReturn != 0UL )
 80072dc:	b124      	cbz	r4, 80072e8 <ulTaskNotifyTake+0x38>
				if( xClearCountOnExit != pdFALSE )
 80072de:	b9cd      	cbnz	r5, 8007314 <ulTaskNotifyTake+0x64>
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 80072e0:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <ulTaskNotifyTake+0x70>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	1e62      	subs	r2, r4, #1
 80072e6:	64da      	str	r2, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072e8:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <ulTaskNotifyTake+0x70>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 80072f2:	f7fe fd71 	bl	8005dd8 <vPortExitCritical>
	}
 80072f6:	4620      	mov	r0, r4
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072fa:	4611      	mov	r1, r2
 80072fc:	4620      	mov	r0, r4
 80072fe:	f7ff fb5d 	bl	80069bc <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8007302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007306:	4b07      	ldr	r3, [pc, #28]	; (8007324 <ulTaskNotifyTake+0x74>)
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	e7dc      	b.n	80072ce <ulTaskNotifyTake+0x1e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007314:	4b02      	ldr	r3, [pc, #8]	; (8007320 <ulTaskNotifyTake+0x70>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2200      	movs	r2, #0
 800731a:	64da      	str	r2, [r3, #76]	; 0x4c
 800731c:	e7e4      	b.n	80072e8 <ulTaskNotifyTake+0x38>
 800731e:	bf00      	nop
 8007320:	20006774 	.word	0x20006774
 8007324:	e000ed04 	.word	0xe000ed04

08007328 <vTaskNotifyGiveFromISR>:
	{
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800732a:	b318      	cbz	r0, 8007374 <vTaskNotifyGiveFromISR+0x4c>
 800732c:	4604      	mov	r4, r0
 800732e:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007330:	f7fe fe42 	bl	8005fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8007334:	f3ef 8711 	mrs	r7, BASEPRI
 8007338:	f04f 0370 	mov.w	r3, #112	; 0x70
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007348:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800734c:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800734e:	2202      	movs	r2, #2
 8007350:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
			( pxTCB->ulNotifiedValue )++;
 8007354:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007356:	3201      	adds	r2, #1
 8007358:	64e2      	str	r2, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800735a:	2b01      	cmp	r3, #1
 800735c:	d132      	bne.n	80073c4 <vTaskNotifyGiveFromISR+0x9c>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800735e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007360:	b18b      	cbz	r3, 8007386 <vTaskNotifyGiveFromISR+0x5e>
	__asm volatile
 8007362:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	e7fe      	b.n	8007372 <vTaskNotifyGiveFromISR+0x4a>
 8007374:	f04f 0370 	mov.w	r3, #112	; 0x70
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	e7fe      	b.n	8007384 <vTaskNotifyGiveFromISR+0x5c>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007386:	4b16      	ldr	r3, [pc, #88]	; (80073e0 <vTaskNotifyGiveFromISR+0xb8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	b9f3      	cbnz	r3, 80073ca <vTaskNotifyGiveFromISR+0xa2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800738c:	1d26      	adds	r6, r4, #4
 800738e:	4630      	mov	r0, r6
 8007390:	f7fe fc8a 	bl	8005ca8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007394:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007396:	2201      	movs	r2, #1
 8007398:	409a      	lsls	r2, r3
 800739a:	4912      	ldr	r1, [pc, #72]	; (80073e4 <vTaskNotifyGiveFromISR+0xbc>)
 800739c:	6808      	ldr	r0, [r1, #0]
 800739e:	4302      	orrs	r2, r0
 80073a0:	600a      	str	r2, [r1, #0]
 80073a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073a6:	009a      	lsls	r2, r3, #2
 80073a8:	4631      	mov	r1, r6
 80073aa:	480f      	ldr	r0, [pc, #60]	; (80073e8 <vTaskNotifyGiveFromISR+0xc0>)
 80073ac:	4410      	add	r0, r2
 80073ae:	f7fe fc55 	bl	8005c5c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80073b4:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <vTaskNotifyGiveFromISR+0xc4>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d902      	bls.n	80073c4 <vTaskNotifyGiveFromISR+0x9c>
					if( pxHigherPriorityTaskWoken != NULL )
 80073be:	b155      	cbz	r5, 80073d6 <vTaskNotifyGiveFromISR+0xae>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80073c0:	2301      	movs	r3, #1
 80073c2:	602b      	str	r3, [r5, #0]
	__asm volatile
 80073c4:	f387 8811 	msr	BASEPRI, r7
 80073c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80073ca:	f104 0118 	add.w	r1, r4, #24
 80073ce:	4808      	ldr	r0, [pc, #32]	; (80073f0 <vTaskNotifyGiveFromISR+0xc8>)
 80073d0:	f7fe fc44 	bl	8005c5c <vListInsertEnd>
 80073d4:	e7ed      	b.n	80073b2 <vTaskNotifyGiveFromISR+0x8a>
						xYieldPending = pdTRUE;
 80073d6:	2201      	movs	r2, #1
 80073d8:	4b06      	ldr	r3, [pc, #24]	; (80073f4 <vTaskNotifyGiveFromISR+0xcc>)
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e7f2      	b.n	80073c4 <vTaskNotifyGiveFromISR+0x9c>
 80073de:	bf00      	nop
 80073e0:	20006818 	.word	0x20006818
 80073e4:	20006820 	.word	0x20006820
 80073e8:	20006780 	.word	0x20006780
 80073ec:	20006774 	.word	0x20006774
 80073f0:	20006858 	.word	0x20006858
 80073f4:	20006888 	.word	0x20006888

080073f8 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 80073f8:	b508      	push	{r3, lr}
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;

  if (msg->msg.common.errtfunc != NULL) {
 80073fa:	68c3      	ldr	r3, [r0, #12]
 80073fc:	b113      	cbz	r3, 8007404 <netifapi_do_netif_common+0xc>
    return msg->msg.common.errtfunc(msg->netif);
 80073fe:	6840      	ldr	r0, [r0, #4]
 8007400:	4798      	blx	r3
 8007402:	bd08      	pop	{r3, pc}
  } else {
    msg->msg.common.voidfunc(msg->netif);
 8007404:	6883      	ldr	r3, [r0, #8]
 8007406:	6840      	ldr	r0, [r0, #4]
 8007408:	4798      	blx	r3
    return ERR_OK;
 800740a:	2000      	movs	r0, #0
  }
}
 800740c:	bd08      	pop	{r3, pc}
	...

08007410 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 8007410:	b500      	push	{lr}
 8007412:	b089      	sub	sp, #36	; 0x24
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 8007414:	9001      	str	r0, [sp, #4]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 8007416:	9102      	str	r1, [sp, #8]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 8007418:	9203      	str	r2, [sp, #12]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800741a:	4669      	mov	r1, sp
 800741c:	4802      	ldr	r0, [pc, #8]	; (8007428 <netifapi_netif_common+0x18>)
 800741e:	f000 f8ff 	bl	8007620 <tcpip_api_call>
  NETIFAPI_VAR_FREE(msg);
  return err;
}
 8007422:	b009      	add	sp, #36	; 0x24
 8007424:	f85d fb04 	ldr.w	pc, [sp], #4
 8007428:	080073f9 	.word	0x080073f9

0800742c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	4606      	mov	r6, r0
 8007430:	460f      	mov	r7, r1
 8007432:	e01e      	b.n	8007472 <tcpip_timeouts_mbox_fetch+0x46>
again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
    UNLOCK_TCPIP_CORE();
 8007434:	4c15      	ldr	r4, [pc, #84]	; (800748c <tcpip_timeouts_mbox_fetch+0x60>)
 8007436:	4620      	mov	r0, r4
 8007438:	f00a fdb8 	bl	8011fac <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800743c:	2200      	movs	r2, #0
 800743e:	4639      	mov	r1, r7
 8007440:	4630      	mov	r0, r6
 8007442:	f00a fd5d 	bl	8011f00 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007446:	4620      	mov	r0, r4
 8007448:	f00a fda9 	bl	8011f9e <sys_mutex_lock>
    return;
 800744c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }

  UNLOCK_TCPIP_CORE();
 800744e:	4d0f      	ldr	r5, [pc, #60]	; (800748c <tcpip_timeouts_mbox_fetch+0x60>)
 8007450:	4628      	mov	r0, r5
 8007452:	f00a fdab 	bl	8011fac <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007456:	4622      	mov	r2, r4
 8007458:	4639      	mov	r1, r7
 800745a:	4630      	mov	r0, r6
 800745c:	f00a fd50 	bl	8011f00 <sys_arch_mbox_fetch>
 8007460:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8007462:	4628      	mov	r0, r5
 8007464:	f00a fd9b 	bl	8011f9e <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007468:	f1b4 3fff 	cmp.w	r4, #4294967295
 800746c:	d10c      	bne.n	8007488 <tcpip_timeouts_mbox_fetch+0x5c>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800746e:	f00a f87b 	bl	8011568 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8007472:	f00a f899 	bl	80115a8 <sys_timeouts_sleeptime>
 8007476:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8007478:	f1b0 3fff 	cmp.w	r0, #4294967295
 800747c:	d0da      	beq.n	8007434 <tcpip_timeouts_mbox_fetch+0x8>
  } else if (sleeptime == 0) {
 800747e:	2800      	cmp	r0, #0
 8007480:	d1e5      	bne.n	800744e <tcpip_timeouts_mbox_fetch+0x22>
    sys_check_timeouts();
 8007482:	f00a f871 	bl	8011568 <sys_check_timeouts>
    goto again;
 8007486:	e7f4      	b.n	8007472 <tcpip_timeouts_mbox_fetch+0x46>
 8007488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800748a:	bf00      	nop
 800748c:	200072e0 	.word	0x200072e0

08007490 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8007490:	b510      	push	{r4, lr}
 8007492:	4604      	mov	r4, r0
  switch (msg->type) {
 8007494:	7803      	ldrb	r3, [r0, #0]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d017      	beq.n	80074ca <tcpip_thread_handle_msg+0x3a>
 800749a:	b143      	cbz	r3, 80074ae <tcpip_thread_handle_msg+0x1e>
 800749c:	2b02      	cmp	r3, #2
 800749e:	d01c      	beq.n	80074da <tcpip_thread_handle_msg+0x4a>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80074a0:	4b10      	ldr	r3, [pc, #64]	; (80074e4 <tcpip_thread_handle_msg+0x54>)
 80074a2:	22cf      	movs	r2, #207	; 0xcf
 80074a4:	4910      	ldr	r1, [pc, #64]	; (80074e8 <tcpip_thread_handle_msg+0x58>)
 80074a6:	4811      	ldr	r0, [pc, #68]	; (80074ec <tcpip_thread_handle_msg+0x5c>)
 80074a8:	f00a fe60 	bl	801216c <iprintf>
 80074ac:	bd10      	pop	{r4, pc}
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80074ae:	68c3      	ldr	r3, [r0, #12]
 80074b0:	6881      	ldr	r1, [r0, #8]
 80074b2:	6840      	ldr	r0, [r0, #4]
 80074b4:	4798      	blx	r3
 80074b6:	b920      	cbnz	r0, 80074c2 <tcpip_thread_handle_msg+0x32>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80074b8:	4621      	mov	r1, r4
 80074ba:	2009      	movs	r0, #9
 80074bc:	f005 f9fe 	bl	800c8bc <memp_free>
      break;
 80074c0:	bd10      	pop	{r4, pc}
        pbuf_free(msg->msg.inp.p);
 80074c2:	6860      	ldr	r0, [r4, #4]
 80074c4:	f005 fce8 	bl	800ce98 <pbuf_free>
 80074c8:	e7f6      	b.n	80074b8 <tcpip_thread_handle_msg+0x28>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80074ca:	6843      	ldr	r3, [r0, #4]
 80074cc:	6880      	ldr	r0, [r0, #8]
 80074ce:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80074d0:	4621      	mov	r1, r4
 80074d2:	2008      	movs	r0, #8
 80074d4:	f005 f9f2 	bl	800c8bc <memp_free>
      break;
 80074d8:	bd10      	pop	{r4, pc}
      msg->msg.cb.function(msg->msg.cb.ctx);
 80074da:	6843      	ldr	r3, [r0, #4]
 80074dc:	6880      	ldr	r0, [r0, #8]
 80074de:	4798      	blx	r3
      break;
 80074e0:	bd10      	pop	{r4, pc}
 80074e2:	bf00      	nop
 80074e4:	0805e5f8 	.word	0x0805e5f8
 80074e8:	0805e634 	.word	0x0805e634
 80074ec:	0801335c 	.word	0x0801335c

080074f0 <tcpip_thread>:
{
 80074f0:	b500      	push	{lr}
 80074f2:	b083      	sub	sp, #12
  LOCK_TCPIP_CORE();
 80074f4:	480c      	ldr	r0, [pc, #48]	; (8007528 <tcpip_thread+0x38>)
 80074f6:	f00a fd52 	bl	8011f9e <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80074fa:	4b0c      	ldr	r3, [pc, #48]	; (800752c <tcpip_thread+0x3c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	b14b      	cbz	r3, 8007514 <tcpip_thread+0x24>
    tcpip_init_done(tcpip_init_done_arg);
 8007500:	4a0b      	ldr	r2, [pc, #44]	; (8007530 <tcpip_thread+0x40>)
 8007502:	6810      	ldr	r0, [r2, #0]
 8007504:	4798      	blx	r3
 8007506:	e005      	b.n	8007514 <tcpip_thread+0x24>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007508:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <tcpip_thread+0x44>)
 800750a:	2291      	movs	r2, #145	; 0x91
 800750c:	490a      	ldr	r1, [pc, #40]	; (8007538 <tcpip_thread+0x48>)
 800750e:	480b      	ldr	r0, [pc, #44]	; (800753c <tcpip_thread+0x4c>)
 8007510:	f00a fe2c 	bl	801216c <iprintf>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007514:	a901      	add	r1, sp, #4
 8007516:	480a      	ldr	r0, [pc, #40]	; (8007540 <tcpip_thread+0x50>)
 8007518:	f7ff ff88 	bl	800742c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800751c:	9801      	ldr	r0, [sp, #4]
 800751e:	2800      	cmp	r0, #0
 8007520:	d0f2      	beq.n	8007508 <tcpip_thread+0x18>
    tcpip_thread_handle_msg(msg);
 8007522:	f7ff ffb5 	bl	8007490 <tcpip_thread_handle_msg>
 8007526:	e7f5      	b.n	8007514 <tcpip_thread+0x24>
 8007528:	200072e0 	.word	0x200072e0
 800752c:	2000688c 	.word	0x2000688c
 8007530:	20006890 	.word	0x20006890
 8007534:	0805e5f8 	.word	0x0805e5f8
 8007538:	0805e634 	.word	0x0805e634
 800753c:	0801335c 	.word	0x0801335c
 8007540:	20006894 	.word	0x20006894

08007544 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	4607      	mov	r7, r0
 8007548:	460e      	mov	r6, r1
 800754a:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800754c:	4813      	ldr	r0, [pc, #76]	; (800759c <tcpip_inpkt+0x58>)
 800754e:	f00a fd03 	bl	8011f58 <sys_mbox_valid>
 8007552:	b188      	cbz	r0, 8007578 <tcpip_inpkt+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007554:	2009      	movs	r0, #9
 8007556:	f005 f997 	bl	800c888 <memp_malloc>
  if (msg == NULL) {
 800755a:	4604      	mov	r4, r0
 800755c:	b1d0      	cbz	r0, 8007594 <tcpip_inpkt+0x50>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800755e:	2300      	movs	r3, #0
 8007560:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8007562:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8007564:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 8007566:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007568:	4601      	mov	r1, r0
 800756a:	480c      	ldr	r0, [pc, #48]	; (800759c <tcpip_inpkt+0x58>)
 800756c:	f00a fcbe 	bl	8011eec <sys_mbox_trypost>
 8007570:	4603      	mov	r3, r0
 8007572:	b940      	cbnz	r0, 8007586 <tcpip_inpkt+0x42>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8007574:	4618      	mov	r0, r3
 8007576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007578:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <tcpip_inpkt+0x5c>)
 800757a:	22fc      	movs	r2, #252	; 0xfc
 800757c:	4909      	ldr	r1, [pc, #36]	; (80075a4 <tcpip_inpkt+0x60>)
 800757e:	480a      	ldr	r0, [pc, #40]	; (80075a8 <tcpip_inpkt+0x64>)
 8007580:	f00a fdf4 	bl	801216c <iprintf>
 8007584:	e7e6      	b.n	8007554 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007586:	4621      	mov	r1, r4
 8007588:	2009      	movs	r0, #9
 800758a:	f005 f997 	bl	800c8bc <memp_free>
    return ERR_MEM;
 800758e:	f04f 33ff 	mov.w	r3, #4294967295
 8007592:	e7ef      	b.n	8007574 <tcpip_inpkt+0x30>
    return ERR_MEM;
 8007594:	f04f 33ff 	mov.w	r3, #4294967295
 8007598:	e7ec      	b.n	8007574 <tcpip_inpkt+0x30>
 800759a:	bf00      	nop
 800759c:	20006894 	.word	0x20006894
 80075a0:	0805e5f8 	.word	0x0805e5f8
 80075a4:	0805e5e8 	.word	0x0805e5e8
 80075a8:	0801335c 	.word	0x0801335c

080075ac <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80075ac:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80075ae:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 80075b2:	f013 0f18 	tst.w	r3, #24
 80075b6:	d103      	bne.n	80075c0 <tcpip_input+0x14>
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80075b8:	4a03      	ldr	r2, [pc, #12]	; (80075c8 <tcpip_input+0x1c>)
 80075ba:	f7ff ffc3 	bl	8007544 <tcpip_inpkt>
}
 80075be:	bd08      	pop	{r3, pc}
    return tcpip_inpkt(p, inp, ethernet_input);
 80075c0:	4a02      	ldr	r2, [pc, #8]	; (80075cc <tcpip_input+0x20>)
 80075c2:	f7ff ffbf 	bl	8007544 <tcpip_inpkt>
 80075c6:	bd08      	pop	{r3, pc}
 80075c8:	0800b589 	.word	0x0800b589
 80075cc:	08011d99 	.word	0x08011d99

080075d0 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4605      	mov	r5, r0
 80075d4:	460c      	mov	r4, r1
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80075d6:	480e      	ldr	r0, [pc, #56]	; (8007610 <tcpip_callback+0x40>)
 80075d8:	f00a fcbe 	bl	8011f58 <sys_mbox_valid>
 80075dc:	b168      	cbz	r0, 80075fa <tcpip_callback+0x2a>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80075de:	2008      	movs	r0, #8
 80075e0:	f005 f952 	bl	800c888 <memp_malloc>
  if (msg == NULL) {
 80075e4:	4601      	mov	r1, r0
 80075e6:	b180      	cbz	r0, 800760a <tcpip_callback+0x3a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80075e8:	2301      	movs	r3, #1
 80075ea:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 80075ec:	6045      	str	r5, [r0, #4]
  msg->msg.cb.ctx = ctx;
 80075ee:	6084      	str	r4, [r0, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 80075f0:	4807      	ldr	r0, [pc, #28]	; (8007610 <tcpip_callback+0x40>)
 80075f2:	f00a fc6f 	bl	8011ed4 <sys_mbox_post>
  return ERR_OK;
 80075f6:	2000      	movs	r0, #0
 80075f8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80075fa:	4b06      	ldr	r3, [pc, #24]	; (8007614 <tcpip_callback+0x44>)
 80075fc:	f240 1239 	movw	r2, #313	; 0x139
 8007600:	4905      	ldr	r1, [pc, #20]	; (8007618 <tcpip_callback+0x48>)
 8007602:	4806      	ldr	r0, [pc, #24]	; (800761c <tcpip_callback+0x4c>)
 8007604:	f00a fdb2 	bl	801216c <iprintf>
 8007608:	e7e9      	b.n	80075de <tcpip_callback+0xe>
    return ERR_MEM;
 800760a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	20006894 	.word	0x20006894
 8007614:	0805e5f8 	.word	0x0805e5f8
 8007618:	0805e5e8 	.word	0x0805e5e8
 800761c:	0801335c 	.word	0x0801335c

08007620 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	4605      	mov	r5, r0
 8007624:	460e      	mov	r6, r1
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 8007626:	4c06      	ldr	r4, [pc, #24]	; (8007640 <tcpip_api_call+0x20>)
 8007628:	4620      	mov	r0, r4
 800762a:	f00a fcb8 	bl	8011f9e <sys_mutex_lock>
  err = fn(call);
 800762e:	4630      	mov	r0, r6
 8007630:	47a8      	blx	r5
 8007632:	4605      	mov	r5, r0
  UNLOCK_TCPIP_CORE();
 8007634:	4620      	mov	r0, r4
 8007636:	f00a fcb9 	bl	8011fac <sys_mutex_unlock>
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800763a:	4628      	mov	r0, r5
 800763c:	bd70      	pop	{r4, r5, r6, pc}
 800763e:	bf00      	nop
 8007640:	200072e0 	.word	0x200072e0

08007644 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007644:	b530      	push	{r4, r5, lr}
 8007646:	b083      	sub	sp, #12
 8007648:	4605      	mov	r5, r0
 800764a:	460c      	mov	r4, r1
  lwip_init();
 800764c:	f001 febc 	bl	80093c8 <lwip_init>

  tcpip_init_done = initfunc;
 8007650:	4b13      	ldr	r3, [pc, #76]	; (80076a0 <tcpip_init+0x5c>)
 8007652:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8007654:	4b13      	ldr	r3, [pc, #76]	; (80076a4 <tcpip_init+0x60>)
 8007656:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007658:	2106      	movs	r1, #6
 800765a:	4813      	ldr	r0, [pc, #76]	; (80076a8 <tcpip_init+0x64>)
 800765c:	f00a fc28 	bl	8011eb0 <sys_mbox_new>
 8007660:	b970      	cbnz	r0, 8007680 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007662:	4812      	ldr	r0, [pc, #72]	; (80076ac <tcpip_init+0x68>)
 8007664:	f00a fc8a 	bl	8011f7c <sys_mutex_new>
 8007668:	b990      	cbnz	r0, 8007690 <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800766a:	2302      	movs	r3, #2
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007672:	2200      	movs	r2, #0
 8007674:	490e      	ldr	r1, [pc, #56]	; (80076b0 <tcpip_init+0x6c>)
 8007676:	480f      	ldr	r0, [pc, #60]	; (80076b4 <tcpip_init+0x70>)
 8007678:	f00a fc9d 	bl	8011fb6 <sys_thread_new>
}
 800767c:	b003      	add	sp, #12
 800767e:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007680:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <tcpip_init+0x74>)
 8007682:	f240 2261 	movw	r2, #609	; 0x261
 8007686:	490d      	ldr	r1, [pc, #52]	; (80076bc <tcpip_init+0x78>)
 8007688:	480d      	ldr	r0, [pc, #52]	; (80076c0 <tcpip_init+0x7c>)
 800768a:	f00a fd6f 	bl	801216c <iprintf>
 800768e:	e7e8      	b.n	8007662 <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007690:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <tcpip_init+0x74>)
 8007692:	f240 2265 	movw	r2, #613	; 0x265
 8007696:	490b      	ldr	r1, [pc, #44]	; (80076c4 <tcpip_init+0x80>)
 8007698:	4809      	ldr	r0, [pc, #36]	; (80076c0 <tcpip_init+0x7c>)
 800769a:	f00a fd67 	bl	801216c <iprintf>
 800769e:	e7e4      	b.n	800766a <tcpip_init+0x26>
 80076a0:	2000688c 	.word	0x2000688c
 80076a4:	20006890 	.word	0x20006890
 80076a8:	20006894 	.word	0x20006894
 80076ac:	200072e0 	.word	0x200072e0
 80076b0:	080074f1 	.word	0x080074f1
 80076b4:	0805e5e0 	.word	0x0805e5e0
 80076b8:	0805e5f8 	.word	0x0805e5f8
 80076bc:	0805e598 	.word	0x0805e598
 80076c0:	0801335c 	.word	0x0801335c
 80076c4:	0805e5bc 	.word	0x0805e5bc

080076c8 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80076c8:	b1c8      	cbz	r0, 80076fe <fs_open+0x36>
{
 80076ca:	b570      	push	{r4, r5, r6, lr}
 80076cc:	4606      	mov	r6, r0
  if ((file == NULL) || (name == NULL)) {
 80076ce:	b1c9      	cbz	r1, 8007704 <fs_open+0x3c>
 80076d0:	460d      	mov	r5, r1
 80076d2:	4c0e      	ldr	r4, [pc, #56]	; (800770c <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80076d4:	b184      	cbz	r4, 80076f8 <fs_open+0x30>
    if (!strcmp(name, (const char *)f->name)) {
 80076d6:	6861      	ldr	r1, [r4, #4]
 80076d8:	4628      	mov	r0, r5
 80076da:	f7f8 fd89 	bl	80001f0 <strcmp>
 80076de:	b108      	cbz	r0, 80076e4 <fs_open+0x1c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80076e0:	6824      	ldr	r4, [r4, #0]
 80076e2:	e7f7      	b.n	80076d4 <fs_open+0xc>
      file->data = (const char *)f->data;
 80076e4:	68a3      	ldr	r3, [r4, #8]
 80076e6:	6033      	str	r3, [r6, #0]
      file->len = f->len;
 80076e8:	68e3      	ldr	r3, [r4, #12]
 80076ea:	6073      	str	r3, [r6, #4]
      file->index = f->len;
 80076ec:	68e3      	ldr	r3, [r4, #12]
 80076ee:	60b3      	str	r3, [r6, #8]
      file->pextension = NULL;
 80076f0:	60f0      	str	r0, [r6, #12]
      file->flags = f->flags;
 80076f2:	7c23      	ldrb	r3, [r4, #16]
 80076f4:	7433      	strb	r3, [r6, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  /* file not found */
  return ERR_VAL;
 80076f8:	f06f 0005 	mvn.w	r0, #5
 80076fc:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 80076fe:	f06f 000f 	mvn.w	r0, #15
 8007702:	4770      	bx	lr
 8007704:	f06f 000f 	mvn.w	r0, #15
}
 8007708:	bd70      	pop	{r4, r5, r6, pc}
 800770a:	bf00      	nop
 800770c:	08066f88 	.word	0x08066f88

08007710 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8007710:	4770      	bx	lr

08007712 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8007712:	6842      	ldr	r2, [r0, #4]
 8007714:	6880      	ldr	r0, [r0, #8]
}
 8007716:	1a10      	subs	r0, r2, r0
 8007718:	4770      	bx	lr
	...

0800771c <httpd_init_pcb>:
static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
  err_t err;

  if (pcb) {
 800771c:	b330      	cbz	r0, 800776c <httpd_init_pcb+0x50>
{
 800771e:	b538      	push	{r3, r4, r5, lr}
 8007720:	4604      	mov	r4, r0
 8007722:	460d      	mov	r5, r1
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8007724:	2101      	movs	r1, #1
 8007726:	f006 f969 	bl	800d9fc <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800772a:	462a      	mov	r2, r5
 800772c:	4910      	ldr	r1, [pc, #64]	; (8007770 <httpd_init_pcb+0x54>)
 800772e:	4620      	mov	r0, r4
 8007730:	f005 fff8 	bl	800d724 <tcp_bind>
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8007734:	b950      	cbnz	r0, 800774c <httpd_init_pcb+0x30>
    pcb = altcp_listen(pcb);
 8007736:	21ff      	movs	r1, #255	; 0xff
 8007738:	4620      	mov	r0, r4
 800773a:	f006 f8c9 	bl	800d8d0 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800773e:	4604      	mov	r4, r0
 8007740:	b160      	cbz	r0, 800775c <httpd_init_pcb+0x40>
    altcp_accept(pcb, http_accept);
 8007742:	490c      	ldr	r1, [pc, #48]	; (8007774 <httpd_init_pcb+0x58>)
 8007744:	4620      	mov	r0, r4
 8007746:	f006 f9bb 	bl	800dac0 <tcp_accept>
 800774a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800774c:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <httpd_init_pcb+0x5c>)
 800774e:	f640 2257 	movw	r2, #2647	; 0xa57
 8007752:	490a      	ldr	r1, [pc, #40]	; (800777c <httpd_init_pcb+0x60>)
 8007754:	480a      	ldr	r0, [pc, #40]	; (8007780 <httpd_init_pcb+0x64>)
 8007756:	f00a fd09 	bl	801216c <iprintf>
 800775a:	e7ec      	b.n	8007736 <httpd_init_pcb+0x1a>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <httpd_init_pcb+0x5c>)
 800775e:	f640 2259 	movw	r2, #2649	; 0xa59
 8007762:	4908      	ldr	r1, [pc, #32]	; (8007784 <httpd_init_pcb+0x68>)
 8007764:	4806      	ldr	r0, [pc, #24]	; (8007780 <httpd_init_pcb+0x64>)
 8007766:	f00a fd01 	bl	801216c <iprintf>
 800776a:	e7ea      	b.n	8007742 <httpd_init_pcb+0x26>
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	080684a4 	.word	0x080684a4
 8007774:	080081fd 	.word	0x080081fd
 8007778:	08067384 	.word	0x08067384
 800777c:	080673c4 	.word	0x080673c4
 8007780:	0801335c 	.word	0x0801335c
 8007784:	080673e0 	.word	0x080673e0

08007788 <get_http_content_length>:
{
 8007788:	b570      	push	{r4, r5, r6, lr}
 800778a:	4604      	mov	r4, r0
  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 800778c:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8007790:	b133      	cbz	r3, 80077a0 <get_http_content_length+0x18>
 8007792:	4b1a      	ldr	r3, [pc, #104]	; (80077fc <get_http_content_length+0x74>)
 8007794:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8007798:	4919      	ldr	r1, [pc, #100]	; (8007800 <get_http_content_length+0x78>)
 800779a:	481a      	ldr	r0, [pc, #104]	; (8007804 <get_http_content_length+0x7c>)
 800779c:	f00a fce6 	bl	801216c <iprintf>
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 80077a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80077a2:	b133      	cbz	r3, 80077b2 <get_http_content_length+0x2a>
  add_content_len = 0;
 80077a4:	2500      	movs	r5, #0
  if (add_content_len) {
 80077a6:	b985      	cbnz	r5, 80077ca <get_http_content_length+0x42>
  if (add_content_len) {
 80077a8:	b115      	cbz	r5, 80077b0 <get_http_content_length+0x28>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 80077aa:	4b17      	ldr	r3, [pc, #92]	; (8007808 <get_http_content_length+0x80>)
 80077ac:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80077b0:	bd70      	pop	{r4, r5, r6, pc}
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 80077b2:	6963      	ldr	r3, [r4, #20]
 80077b4:	b12b      	cbz	r3, 80077c2 <get_http_content_length+0x3a>
 80077b6:	7c1b      	ldrb	r3, [r3, #16]
 80077b8:	f013 0f02 	tst.w	r3, #2
 80077bc:	d103      	bne.n	80077c6 <get_http_content_length+0x3e>
  add_content_len = 0;
 80077be:	2500      	movs	r5, #0
 80077c0:	e7f1      	b.n	80077a6 <get_http_content_length+0x1e>
 80077c2:	2500      	movs	r5, #0
 80077c4:	e7ef      	b.n	80077a6 <get_http_content_length+0x1e>
      add_content_len = 1;
 80077c6:	2501      	movs	r5, #1
 80077c8:	e7ed      	b.n	80077a6 <get_http_content_length+0x1e>
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 80077ca:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
              hs->handle->len);
 80077ce:	6963      	ldr	r3, [r4, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	210c      	movs	r1, #12
 80077d4:	4630      	mov	r0, r6
 80077d6:	f001 fd07 	bl	80091e8 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 80077da:	4630      	mov	r0, r6
 80077dc:	f7f8 fd12 	bl	8000204 <strlen>
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 80077e0:	2809      	cmp	r0, #9
 80077e2:	d901      	bls.n	80077e8 <get_http_content_length+0x60>
      add_content_len = 0;
 80077e4:	2500      	movs	r5, #0
 80077e6:	e7df      	b.n	80077a8 <get_http_content_length+0x20>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 80077e8:	30c0      	adds	r0, #192	; 0xc0
 80077ea:	4420      	add	r0, r4
 80077ec:	4b07      	ldr	r3, [pc, #28]	; (800780c <get_http_content_length+0x84>)
 80077ee:	881a      	ldrh	r2, [r3, #0]
 80077f0:	789b      	ldrb	r3, [r3, #2]
 80077f2:	8082      	strh	r2, [r0, #4]
 80077f4:	7183      	strb	r3, [r0, #6]
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 80077f6:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
 80077fa:	e7d5      	b.n	80077a8 <get_http_content_length+0x20>
 80077fc:	08067384 	.word	0x08067384
 8007800:	08067050 	.word	0x08067050
 8007804:	0801335c 	.word	0x0801335c
 8007808:	08067064 	.word	0x08067064
 800780c:	08067648 	.word	0x08067648

08007810 <http_write>:
{
 8007810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	4605      	mov	r5, r0
 8007816:	460e      	mov	r6, r1
 8007818:	461f      	mov	r7, r3
  LWIP_ASSERT("length != NULL", length != NULL);
 800781a:	4690      	mov	r8, r2
 800781c:	b17a      	cbz	r2, 800783e <http_write+0x2e>
  len = *length;
 800781e:	f8b8 3000 	ldrh.w	r3, [r8]
  if (len == 0) {
 8007822:	2b00      	cmp	r3, #0
 8007824:	d039      	beq.n	800789a <http_write+0x8a>
  max_len = altcp_sndbuf(pcb);
 8007826:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
  if (max_len < len) {
 800782a:	4293      	cmp	r3, r2
 800782c:	d800      	bhi.n	8007830 <http_write+0x20>
  len = *length;
 800782e:	461a      	mov	r2, r3
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8007830:	8e6c      	ldrh	r4, [r5, #50]	; 0x32
 8007832:	0064      	lsls	r4, r4, #1
 8007834:	b2a4      	uxth	r4, r4
  if (len > max_len) {
 8007836:	42a2      	cmp	r2, r4
 8007838:	d80f      	bhi.n	800785a <http_write+0x4a>
 800783a:	4614      	mov	r4, r2
 800783c:	e00d      	b.n	800785a <http_write+0x4a>
  LWIP_ASSERT("length != NULL", length != NULL);
 800783e:	4b18      	ldr	r3, [pc, #96]	; (80078a0 <http_write+0x90>)
 8007840:	f240 2219 	movw	r2, #537	; 0x219
 8007844:	4917      	ldr	r1, [pc, #92]	; (80078a4 <http_write+0x94>)
 8007846:	4818      	ldr	r0, [pc, #96]	; (80078a8 <http_write+0x98>)
 8007848:	f00a fc90 	bl	801216c <iprintf>
 800784c:	e7e7      	b.n	800781e <http_write+0xe>
        len = 1;
 800784e:	2401      	movs	r4, #1
  } while ((err == ERR_MEM) && (len > 1));
 8007850:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007854:	d117      	bne.n	8007886 <http_write+0x76>
 8007856:	2c01      	cmp	r4, #1
 8007858:	d915      	bls.n	8007886 <http_write+0x76>
    err = altcp_write(pcb, ptr, len, apiflags);
 800785a:	463b      	mov	r3, r7
 800785c:	4622      	mov	r2, r4
 800785e:	4631      	mov	r1, r6
 8007860:	4628      	mov	r0, r5
 8007862:	f008 fdb7 	bl	80103d4 <tcp_write>
    if (err == ERR_MEM) {
 8007866:	f1b0 3fff 	cmp.w	r0, #4294967295
 800786a:	d1f1      	bne.n	8007850 <http_write+0x40>
      if ((altcp_sndbuf(pcb) == 0) ||
 800786c:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8007870:	2b00      	cmp	r3, #0
 8007872:	d0ec      	beq.n	800784e <http_write+0x3e>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8007874:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8007878:	2b07      	cmp	r3, #7
 800787a:	d802      	bhi.n	8007882 <http_write+0x72>
        len /= 2;
 800787c:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8007880:	e7e6      	b.n	8007850 <http_write+0x40>
        len = 1;
 8007882:	2401      	movs	r4, #1
 8007884:	e7e4      	b.n	8007850 <http_write+0x40>
  if (err == ERR_OK) {
 8007886:	b120      	cbz	r0, 8007892 <http_write+0x82>
    *length = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	f8a8 3000 	strh.w	r3, [r8]
 800788e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *length = len;
 8007892:	f8a8 4000 	strh.w	r4, [r8]
 8007896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 800789a:	2000      	movs	r0, #0
}
 800789c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a0:	08067384 	.word	0x08067384
 80078a4:	08067330 	.word	0x08067330
 80078a8:	0801335c 	.word	0x0801335c

080078ac <http_send_data_nonssi>:
{
 80078ac:	b510      	push	{r4, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	460c      	mov	r4, r1
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80078b2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80078b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d813      	bhi.n	80078e4 <http_send_data_nonssi+0x38>
 80078bc:	b29b      	uxth	r3, r3
 80078be:	aa02      	add	r2, sp, #8
 80078c0:	f822 3d02 	strh.w	r3, [r2, #-2]!
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80078c4:	2300      	movs	r3, #0
 80078c6:	69a1      	ldr	r1, [r4, #24]
 80078c8:	f7ff ffa2 	bl	8007810 <http_write>
  if (err == ERR_OK) {
 80078cc:	b968      	cbnz	r0, 80078ea <http_send_data_nonssi+0x3e>
    hs->file += len;
 80078ce:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80078d2:	69a2      	ldr	r2, [r4, #24]
 80078d4:	440a      	add	r2, r1
 80078d6:	61a2      	str	r2, [r4, #24]
    hs->left -= len;
 80078d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078da:	1a5b      	subs	r3, r3, r1
 80078dc:	6263      	str	r3, [r4, #36]	; 0x24
    data_to_send = 1;
 80078de:	2001      	movs	r0, #1
}
 80078e0:	b002      	add	sp, #8
 80078e2:	bd10      	pop	{r4, pc}
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80078e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078e8:	e7e9      	b.n	80078be <http_send_data_nonssi+0x12>
  u8_t data_to_send = 0;
 80078ea:	2000      	movs	r0, #0
 80078ec:	e7f8      	b.n	80078e0 <http_send_data_nonssi+0x34>
	...

080078f0 <get_tag_insert>:
{
 80078f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80078f4:	4604      	mov	r4, r0
 80078f6:	b1c8      	cbz	r0, 800792c <get_tag_insert+0x3c>
  ssi = hs->ssi;
 80078f8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80078fa:	b1fd      	cbz	r5, 800793c <get_tag_insert+0x4c>
  if (httpd_ssi_handler
 80078fc:	4b3a      	ldr	r3, [pc, #232]	; (80079e8 <get_tag_insert+0xf8>)
 80078fe:	f8d3 8000 	ldr.w	r8, [r3]
 8007902:	f1b8 0f00 	cmp.w	r8, #0
 8007906:	d005      	beq.n	8007914 <get_tag_insert+0x24>
      && httpd_tags && httpd_num_tags
 8007908:	4b38      	ldr	r3, [pc, #224]	; (80079ec <get_tag_insert+0xfc>)
 800790a:	681e      	ldr	r6, [r3, #0]
 800790c:	b116      	cbz	r6, 8007914 <get_tag_insert+0x24>
 800790e:	4b38      	ldr	r3, [pc, #224]	; (80079f0 <get_tag_insert+0x100>)
 8007910:	681f      	ldr	r7, [r3, #0]
 8007912:	bb1f      	cbnz	r7, 800795c <get_tag_insert+0x6c>
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8007914:	f105 0812 	add.w	r8, r5, #18
 8007918:	4640      	mov	r0, r8
 800791a:	f7f8 fc73 	bl	8000204 <strlen>
 800791e:	4604      	mov	r4, r0
 8007920:	28a6      	cmp	r0, #166	; 0xa6
 8007922:	d828      	bhi.n	8007976 <get_tag_insert+0x86>
 8007924:	2811      	cmp	r0, #17
 8007926:	d927      	bls.n	8007978 <get_tag_insert+0x88>
 8007928:	2411      	movs	r4, #17
 800792a:	e025      	b.n	8007978 <get_tag_insert+0x88>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800792c:	4b31      	ldr	r3, [pc, #196]	; (80079f4 <get_tag_insert+0x104>)
 800792e:	f44f 7241 	mov.w	r2, #772	; 0x304
 8007932:	4931      	ldr	r1, [pc, #196]	; (80079f8 <get_tag_insert+0x108>)
 8007934:	4831      	ldr	r0, [pc, #196]	; (80079fc <get_tag_insert+0x10c>)
 8007936:	f00a fc19 	bl	801216c <iprintf>
 800793a:	e7dd      	b.n	80078f8 <get_tag_insert+0x8>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800793c:	4b2d      	ldr	r3, [pc, #180]	; (80079f4 <get_tag_insert+0x104>)
 800793e:	f240 3206 	movw	r2, #774	; 0x306
 8007942:	492f      	ldr	r1, [pc, #188]	; (8007a00 <get_tag_insert+0x110>)
 8007944:	482d      	ldr	r0, [pc, #180]	; (80079fc <get_tag_insert+0x10c>)
 8007946:	f00a fc11 	bl	801216c <iprintf>
 800794a:	e7d7      	b.n	80078fc <get_tag_insert+0xc>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800794c:	22c0      	movs	r2, #192	; 0xc0
 800794e:	f105 0123 	add.w	r1, r5, #35	; 0x23
 8007952:	4620      	mov	r0, r4
 8007954:	47c0      	blx	r8
 8007956:	81e8      	strh	r0, [r5, #14]
          return;
 8007958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800795c:	2400      	movs	r4, #0
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800795e:	42bc      	cmp	r4, r7
 8007960:	dad8      	bge.n	8007914 <get_tag_insert+0x24>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8007962:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8007966:	f105 0012 	add.w	r0, r5, #18
 800796a:	f7f8 fc41 	bl	80001f0 <strcmp>
 800796e:	2800      	cmp	r0, #0
 8007970:	d0ec      	beq.n	800794c <get_tag_insert+0x5c>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8007972:	3401      	adds	r4, #1
 8007974:	e7f3      	b.n	800795e <get_tag_insert+0x6e>
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8007976:	2411      	movs	r4, #17
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8007978:	f105 0623 	add.w	r6, r5, #35	; 0x23
 800797c:	4f21      	ldr	r7, [pc, #132]	; (8007a04 <get_tag_insert+0x114>)
 800797e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007980:	f8c5 0023 	str.w	r0, [r5, #35]	; 0x23
 8007984:	f8c5 1027 	str.w	r1, [r5, #39]	; 0x27
 8007988:	f8c5 202b 	str.w	r2, [r5, #43]	; 0x2b
 800798c:	f8c5 302f 	str.w	r3, [r5, #47]	; 0x2f
 8007990:	883b      	ldrh	r3, [r7, #0]
 8007992:	f8a5 3033 	strh.w	r3, [r5, #51]	; 0x33
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8007996:	4622      	mov	r2, r4
 8007998:	4641      	mov	r1, r8
 800799a:	f105 0035 	add.w	r0, r5, #53	; 0x35
 800799e:	f00a fbb7 	bl	8012110 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80079a2:	f104 0332 	add.w	r3, r4, #50	; 0x32
 80079a6:	442b      	add	r3, r5
 80079a8:	1cd9      	adds	r1, r3, #3
 80079aa:	4a17      	ldr	r2, [pc, #92]	; (8007a08 <get_tag_insert+0x118>)
 80079ac:	6810      	ldr	r0, [r2, #0]
 80079ae:	f8c3 0003 	str.w	r0, [r3, #3]
 80079b2:	8890      	ldrh	r0, [r2, #4]
 80079b4:	7993      	ldrb	r3, [r2, #6]
 80079b6:	8088      	strh	r0, [r1, #4]
 80079b8:	718b      	strb	r3, [r1, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80079ba:	3419      	adds	r4, #25
 80079bc:	442c      	add	r4, r5
 80079be:	2300      	movs	r3, #0
 80079c0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  len = strlen(ssi->tag_insert);
 80079c4:	4630      	mov	r0, r6
 80079c6:	f7f8 fc1d 	bl	8000204 <strlen>
 80079ca:	4604      	mov	r4, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80079cc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80079d0:	d202      	bcs.n	80079d8 <get_tag_insert+0xe8>
  ssi->tag_insert_len = (u16_t)len;
 80079d2:	81ec      	strh	r4, [r5, #14]
 80079d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80079d8:	4b06      	ldr	r3, [pc, #24]	; (80079f4 <get_tag_insert+0x104>)
 80079da:	f240 323f 	movw	r2, #831	; 0x33f
 80079de:	490b      	ldr	r1, [pc, #44]	; (8007a0c <get_tag_insert+0x11c>)
 80079e0:	4806      	ldr	r0, [pc, #24]	; (80079fc <get_tag_insert+0x10c>)
 80079e2:	f00a fbc3 	bl	801216c <iprintf>
 80079e6:	e7f4      	b.n	80079d2 <get_tag_insert+0xe2>
 80079e8:	20006ce4 	.word	0x20006ce4
 80079ec:	20006ce8 	.word	0x20006ce8
 80079f0:	200068e0 	.word	0x200068e0
 80079f4:	08067384 	.word	0x08067384
 80079f8:	080671d0 	.word	0x080671d0
 80079fc:	0801335c 	.word	0x0801335c
 8007a00:	080671dc 	.word	0x080671dc
 8007a04:	080671e8 	.word	0x080671e8
 8007a08:	080671fc 	.word	0x080671fc
 8007a0c:	08067204 	.word	0x08067204

08007a10 <http_send_data_ssi>:
{
 8007a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	4607      	mov	r7, r0
 8007a18:	460e      	mov	r6, r1
  struct http_ssi_state *ssi = hs->ssi;
 8007a1a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8007a1c:	b15c      	cbz	r4, 8007a36 <http_send_data_ssi+0x26>
  len = altcp_sndbuf(pcb);
 8007a1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a22:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (ssi->parsed > hs->file) {
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	69b1      	ldr	r1, [r6, #24]
 8007a2a:	428b      	cmp	r3, r1
 8007a2c:	d80b      	bhi.n	8007a46 <http_send_data_ssi+0x36>
  u8_t data_to_send = 0;
 8007a2e:	f04f 0800 	mov.w	r8, #0
  err_t err = ERR_OK;
 8007a32:	4645      	mov	r5, r8
 8007a34:	e038      	b.n	8007aa8 <http_send_data_ssi+0x98>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8007a36:	4ba1      	ldr	r3, [pc, #644]	; (8007cbc <http_send_data_ssi+0x2ac>)
 8007a38:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8007a3c:	49a0      	ldr	r1, [pc, #640]	; (8007cc0 <http_send_data_ssi+0x2b0>)
 8007a3e:	48a1      	ldr	r0, [pc, #644]	; (8007cc4 <http_send_data_ssi+0x2b4>)
 8007a40:	f00a fb94 	bl	801216c <iprintf>
 8007a44:	e7eb      	b.n	8007a1e <http_send_data_ssi+0xe>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8007a46:	1a5b      	subs	r3, r3, r1
 8007a48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	dc01      	bgt.n	8007a54 <http_send_data_ssi+0x44>
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	e001      	b.n	8007a58 <http_send_data_ssi+0x48>
 8007a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a58:	aa02      	add	r2, sp, #8
 8007a5a:	f822 3d02 	strh.w	r3, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8007a5e:	2300      	movs	r3, #0
 8007a60:	4638      	mov	r0, r7
 8007a62:	f7ff fed5 	bl	8007810 <http_write>
    if (err == ERR_OK) {
 8007a66:	4605      	mov	r5, r0
 8007a68:	b950      	cbnz	r0, 8007a80 <http_send_data_ssi+0x70>
      hs->file += len;
 8007a6a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8007a6e:	69b2      	ldr	r2, [r6, #24]
 8007a70:	440a      	add	r2, r1
 8007a72:	61b2      	str	r2, [r6, #24]
      hs->left -= len;
 8007a74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a76:	1a5b      	subs	r3, r3, r1
 8007a78:	6273      	str	r3, [r6, #36]	; 0x24
      data_to_send = 1;
 8007a7a:	f04f 0801 	mov.w	r8, #1
 8007a7e:	e001      	b.n	8007a84 <http_send_data_ssi+0x74>
  u8_t data_to_send = 0;
 8007a80:	f04f 0800 	mov.w	r8, #0
    if (altcp_sndbuf(pcb) == 0) {
 8007a84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a88:	b973      	cbnz	r3, 8007aa8 <http_send_data_ssi+0x98>
}
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	b002      	add	sp, #8
 8007a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ssi->tag_type = tag_type;
 8007a92:	7423      	strb	r3, [r4, #16]
            ssi->tag_state = TAG_LEADIN;
 8007a94:	2301      	movs	r3, #1
 8007a96:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
            ssi->tag_index = 1;
 8007a9a:	81a3      	strh	r3, [r4, #12]
        ssi->parse_left--;
 8007a9c:	68a3      	ldr	r3, [r4, #8]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	60a3      	str	r3, [r4, #8]
        ssi->parsed++;
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	6023      	str	r3, [r4, #0]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8007aa8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d003      	beq.n	8007ab8 <http_send_data_ssi+0xa8>
 8007ab0:	68a2      	ldr	r2, [r4, #8]
 8007ab2:	2a00      	cmp	r2, #0
 8007ab4:	f000 8147 	beq.w	8007d46 <http_send_data_ssi+0x336>
 8007ab8:	2d00      	cmp	r5, #0
 8007aba:	f040 8144 	bne.w	8007d46 <http_send_data_ssi+0x336>
    if (len == 0) {
 8007abe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007ac2:	2a00      	cmp	r2, #0
 8007ac4:	d0e1      	beq.n	8007a8a <http_send_data_ssi+0x7a>
    switch (ssi->tag_state) {
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d8ee      	bhi.n	8007aa8 <http_send_data_ssi+0x98>
 8007aca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007ace:	0005      	.short	0x0005
 8007ad0:	002f0013 	.word	0x002f0013
 8007ad4:	00eb008c 	.word	0x00eb008c
 8007ad8:	2300      	movs	r3, #0
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d8de      	bhi.n	8007a9c <http_send_data_ssi+0x8c>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8007ade:	6822      	ldr	r2, [r4, #0]
 8007ae0:	7811      	ldrb	r1, [r2, #0]
 8007ae2:	4a79      	ldr	r2, [pc, #484]	; (8007cc8 <http_send_data_ssi+0x2b8>)
 8007ae4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007ae8:	7812      	ldrb	r2, [r2, #0]
 8007aea:	4291      	cmp	r1, r2
 8007aec:	d0d1      	beq.n	8007a92 <http_send_data_ssi+0x82>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8007aee:	3301      	adds	r3, #1
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	e7f2      	b.n	8007ada <http_send_data_ssi+0xca>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8007af4:	7c22      	ldrb	r2, [r4, #16]
 8007af6:	4b74      	ldr	r3, [pc, #464]	; (8007cc8 <http_send_data_ssi+0x2b8>)
 8007af8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8007afc:	89a1      	ldrh	r1, [r4, #12]
 8007afe:	5c5b      	ldrb	r3, [r3, r1]
 8007b00:	b923      	cbnz	r3, 8007b0c <http_send_data_ssi+0xfc>
          ssi->tag_index = 0;
 8007b02:	81a3      	strh	r3, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8007b04:	2302      	movs	r3, #2
 8007b06:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8007b0a:	e7cd      	b.n	8007aa8 <http_send_data_ssi+0x98>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8007b0c:	6822      	ldr	r2, [r4, #0]
 8007b0e:	7810      	ldrb	r0, [r2, #0]
 8007b10:	4283      	cmp	r3, r0
 8007b12:	d008      	beq.n	8007b26 <http_send_data_ssi+0x116>
            ssi->tag_state = TAG_NONE;
 8007b14:	2300      	movs	r3, #0
 8007b16:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
          ssi->parse_left--;
 8007b1a:	68a3      	ldr	r3, [r4, #8]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	60a3      	str	r3, [r4, #8]
          ssi->parsed++;
 8007b20:	3201      	adds	r2, #1
 8007b22:	6022      	str	r2, [r4, #0]
 8007b24:	e7c0      	b.n	8007aa8 <http_send_data_ssi+0x98>
            ssi->tag_index++;
 8007b26:	3101      	adds	r1, #1
 8007b28:	81a1      	strh	r1, [r4, #12]
 8007b2a:	e7f6      	b.n	8007b1a <http_send_data_ssi+0x10a>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	b94b      	cbnz	r3, 8007b44 <http_send_data_ssi+0x134>
 8007b30:	6822      	ldr	r2, [r4, #0]
 8007b32:	7811      	ldrb	r1, [r2, #0]
 8007b34:	2920      	cmp	r1, #32
 8007b36:	d020      	beq.n	8007b7a <http_send_data_ssi+0x16a>
 8007b38:	2909      	cmp	r1, #9
 8007b3a:	d01e      	beq.n	8007b7a <http_send_data_ssi+0x16a>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8007b3c:	290a      	cmp	r1, #10
 8007b3e:	d01c      	beq.n	8007b7a <http_send_data_ssi+0x16a>
 8007b40:	290d      	cmp	r1, #13
 8007b42:	d01a      	beq.n	8007b7a <http_send_data_ssi+0x16a>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8007b44:	6820      	ldr	r0, [r4, #0]
 8007b46:	7801      	ldrb	r1, [r0, #0]
 8007b48:	f894 e010 	ldrb.w	lr, [r4, #16]
 8007b4c:	4a5e      	ldr	r2, [pc, #376]	; (8007cc8 <http_send_data_ssi+0x2b8>)
 8007b4e:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8007b52:	6852      	ldr	r2, [r2, #4]
 8007b54:	7812      	ldrb	r2, [r2, #0]
 8007b56:	4291      	cmp	r1, r2
 8007b58:	d015      	beq.n	8007b86 <http_send_data_ssi+0x176>
 8007b5a:	2920      	cmp	r1, #32
 8007b5c:	d013      	beq.n	8007b86 <http_send_data_ssi+0x176>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8007b5e:	2909      	cmp	r1, #9
 8007b60:	d011      	beq.n	8007b86 <http_send_data_ssi+0x176>
 8007b62:	290a      	cmp	r1, #10
 8007b64:	d00f      	beq.n	8007b86 <http_send_data_ssi+0x176>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8007b66:	290d      	cmp	r1, #13
 8007b68:	d00d      	beq.n	8007b86 <http_send_data_ssi+0x176>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8007b6a:	2b0f      	cmp	r3, #15
 8007b6c:	d837      	bhi.n	8007bde <http_send_data_ssi+0x1ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	81a2      	strh	r2, [r4, #12]
 8007b72:	7802      	ldrb	r2, [r0, #0]
 8007b74:	4423      	add	r3, r4
 8007b76:	749a      	strb	r2, [r3, #18]
 8007b78:	e008      	b.n	8007b8c <http_send_data_ssi+0x17c>
          ssi->parse_left--;
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	60a3      	str	r3, [r4, #8]
          ssi->parsed++;
 8007b80:	3201      	adds	r2, #1
 8007b82:	6022      	str	r2, [r4, #0]
          break;
 8007b84:	e790      	b.n	8007aa8 <http_send_data_ssi+0x98>
          if (ssi->tag_index == 0) {
 8007b86:	b943      	cbnz	r3, 8007b9a <http_send_data_ssi+0x18a>
            ssi->tag_state = TAG_NONE;
 8007b88:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
        ssi->parse_left--;
 8007b8c:	68a3      	ldr	r3, [r4, #8]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	60a3      	str	r3, [r4, #8]
        ssi->parsed++;
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	3301      	adds	r3, #1
 8007b96:	6023      	str	r3, [r4, #0]
        break;
 8007b98:	e786      	b.n	8007aa8 <http_send_data_ssi+0x98>
            ssi->tag_state = TAG_LEADOUT;
 8007b9a:	2203      	movs	r2, #3
 8007b9c:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8007ba0:	2bff      	cmp	r3, #255	; 0xff
 8007ba2:	d811      	bhi.n	8007bc8 <http_send_data_ssi+0x1b8>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	7463      	strb	r3, [r4, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8007ba8:	4423      	add	r3, r4
 8007baa:	2200      	movs	r2, #0
 8007bac:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	781a      	ldrb	r2, [r3, #0]
 8007bb2:	7c21      	ldrb	r1, [r4, #16]
 8007bb4:	4b44      	ldr	r3, [pc, #272]	; (8007cc8 <http_send_data_ssi+0x2b8>)
 8007bb6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d00a      	beq.n	8007bd8 <http_send_data_ssi+0x1c8>
              ssi->tag_index = 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	81a3      	strh	r3, [r4, #12]
 8007bc6:	e7e1      	b.n	8007b8c <http_send_data_ssi+0x17c>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8007bc8:	4b3c      	ldr	r3, [pc, #240]	; (8007cbc <http_send_data_ssi+0x2ac>)
 8007bca:	f240 523a 	movw	r2, #1338	; 0x53a
 8007bce:	493f      	ldr	r1, [pc, #252]	; (8007ccc <http_send_data_ssi+0x2bc>)
 8007bd0:	483c      	ldr	r0, [pc, #240]	; (8007cc4 <http_send_data_ssi+0x2b4>)
 8007bd2:	f00a facb 	bl	801216c <iprintf>
 8007bd6:	e7e5      	b.n	8007ba4 <http_send_data_ssi+0x194>
              ssi->tag_index = 1;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	81a3      	strh	r3, [r4, #12]
 8007bdc:	e7d6      	b.n	8007b8c <http_send_data_ssi+0x17c>
            ssi->tag_state = TAG_NONE;
 8007bde:	2300      	movs	r3, #0
 8007be0:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8007be4:	e7d2      	b.n	8007b8c <http_send_data_ssi+0x17c>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	b94b      	cbnz	r3, 8007bfe <http_send_data_ssi+0x1ee>
 8007bea:	6822      	ldr	r2, [r4, #0]
 8007bec:	7811      	ldrb	r1, [r2, #0]
 8007bee:	2920      	cmp	r1, #32
 8007bf0:	d019      	beq.n	8007c26 <http_send_data_ssi+0x216>
 8007bf2:	2909      	cmp	r1, #9
 8007bf4:	d017      	beq.n	8007c26 <http_send_data_ssi+0x216>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8007bf6:	290a      	cmp	r1, #10
 8007bf8:	d015      	beq.n	8007c26 <http_send_data_ssi+0x216>
 8007bfa:	290d      	cmp	r1, #13
 8007bfc:	d013      	beq.n	8007c26 <http_send_data_ssi+0x216>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	f892 e000 	ldrb.w	lr, [r2]
 8007c04:	7c20      	ldrb	r0, [r4, #16]
 8007c06:	4930      	ldr	r1, [pc, #192]	; (8007cc8 <http_send_data_ssi+0x2b8>)
 8007c08:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007c0c:	6849      	ldr	r1, [r1, #4]
 8007c0e:	5cc8      	ldrb	r0, [r1, r3]
 8007c10:	4586      	cmp	lr, r0
 8007c12:	d00e      	beq.n	8007c32 <http_send_data_ssi+0x222>
          ssi->parse_left--;
 8007c14:	68a3      	ldr	r3, [r4, #8]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	60a3      	str	r3, [r4, #8]
          ssi->parsed++;
 8007c1a:	3201      	adds	r2, #1
 8007c1c:	6022      	str	r2, [r4, #0]
          ssi->tag_state = TAG_NONE;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8007c24:	e740      	b.n	8007aa8 <http_send_data_ssi+0x98>
          ssi->parse_left--;
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	60a3      	str	r3, [r4, #8]
          ssi->parsed++;
 8007c2c:	3201      	adds	r2, #1
 8007c2e:	6022      	str	r2, [r4, #0]
          break;
 8007c30:	e73a      	b.n	8007aa8 <http_send_data_ssi+0x98>
          ssi->parse_left--;
 8007c32:	68a0      	ldr	r0, [r4, #8]
 8007c34:	3801      	subs	r0, #1
 8007c36:	60a0      	str	r0, [r4, #8]
          ssi->parsed++;
 8007c38:	3201      	adds	r2, #1
 8007c3a:	6022      	str	r2, [r4, #0]
          ssi->tag_index++;
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	81a3      	strh	r3, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8007c42:	5ccb      	ldrb	r3, [r1, r3]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f47f af2f 	bne.w	8007aa8 <http_send_data_ssi+0x98>
            get_tag_insert(hs);
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7ff fe50 	bl	80078f0 <get_tag_insert>
            ssi->tag_index = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	81a3      	strh	r3, [r4, #12]
            ssi->tag_state = TAG_SENDING;
 8007c54:	2304      	movs	r3, #4
 8007c56:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
            ssi->tag_end = ssi->parsed;
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	6063      	str	r3, [r4, #4]
            if (ssi->tag_end > hs->file) {
 8007c5e:	69b1      	ldr	r1, [r6, #24]
 8007c60:	428b      	cmp	r3, r1
 8007c62:	f67f af21 	bls.w	8007aa8 <http_send_data_ssi+0x98>
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8007c66:	1a5b      	subs	r3, r3, r1
 8007c68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	dc01      	bgt.n	8007c74 <http_send_data_ssi+0x264>
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	e001      	b.n	8007c78 <http_send_data_ssi+0x268>
 8007c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c78:	aa02      	add	r2, sp, #8
 8007c7a:	f822 3d02 	strh.w	r3, [r2, #-2]!
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8007c7e:	2300      	movs	r3, #0
 8007c80:	4638      	mov	r0, r7
 8007c82:	f7ff fdc5 	bl	8007810 <http_write>
              if (err == ERR_OK) {
 8007c86:	4605      	mov	r5, r0
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	f47f af0d 	bne.w	8007aa8 <http_send_data_ssi+0x98>
                hs->file += len;
 8007c8e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007c92:	69b3      	ldr	r3, [r6, #24]
 8007c94:	4413      	add	r3, r2
 8007c96:	61b3      	str	r3, [r6, #24]
                hs->left -= len;
 8007c98:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007c9a:	1a9b      	subs	r3, r3, r2
 8007c9c:	6273      	str	r3, [r6, #36]	; 0x24
                data_to_send = 1;
 8007c9e:	f04f 0801 	mov.w	r8, #1
 8007ca2:	e701      	b.n	8007aa8 <http_send_data_ssi+0x98>
        if (ssi->tag_end > hs->file) {
 8007ca4:	6863      	ldr	r3, [r4, #4]
 8007ca6:	69b1      	ldr	r1, [r6, #24]
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	d92c      	bls.n	8007d06 <http_send_data_ssi+0x2f6>
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8007cac:	1a5b      	subs	r3, r3, r1
 8007cae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	dc0c      	bgt.n	8007cd0 <http_send_data_ssi+0x2c0>
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	e00c      	b.n	8007cd4 <http_send_data_ssi+0x2c4>
 8007cba:	bf00      	nop
 8007cbc:	08067384 	.word	0x08067384
 8007cc0:	080671dc 	.word	0x080671dc
 8007cc4:	0801335c 	.word	0x0801335c
 8007cc8:	08067320 	.word	0x08067320
 8007ccc:	080672dc 	.word	0x080672dc
 8007cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007cd4:	f8ad 3006 	strh.w	r3, [sp, #6]
          if (len != 0) {
 8007cd8:	b96b      	cbnz	r3, 8007cf6 <http_send_data_ssi+0x2e6>
          if (err == ERR_OK) {
 8007cda:	2d00      	cmp	r5, #0
 8007cdc:	f47f aee4 	bne.w	8007aa8 <http_send_data_ssi+0x98>
            hs->file += len;
 8007ce0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8007ce4:	69b2      	ldr	r2, [r6, #24]
 8007ce6:	440a      	add	r2, r1
 8007ce8:	61b2      	str	r2, [r6, #24]
            hs->left -= len;
 8007cea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007cec:	1a5b      	subs	r3, r3, r1
 8007cee:	6273      	str	r3, [r6, #36]	; 0x24
            data_to_send = 1;
 8007cf0:	f04f 0801 	mov.w	r8, #1
 8007cf4:	e6d8      	b.n	8007aa8 <http_send_data_ssi+0x98>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f10d 0206 	add.w	r2, sp, #6
 8007cfc:	4638      	mov	r0, r7
 8007cfe:	f7ff fd87 	bl	8007810 <http_write>
 8007d02:	4605      	mov	r5, r0
 8007d04:	e7e9      	b.n	8007cda <http_send_data_ssi+0x2ca>
          if (ssi->tag_index < ssi->tag_insert_len) {
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	89e2      	ldrh	r2, [r4, #14]
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d304      	bcc.n	8007d18 <http_send_data_ssi+0x308>
              ssi->tag_index = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	81a3      	strh	r3, [r4, #12]
              ssi->tag_state = TAG_NONE;
 8007d12:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8007d16:	e6c7      	b.n	8007aa8 <http_send_data_ssi+0x98>
            len = (ssi->tag_insert_len - ssi->tag_index);
 8007d18:	1ad1      	subs	r1, r2, r3
 8007d1a:	aa02      	add	r2, sp, #8
 8007d1c:	f822 1d02 	strh.w	r1, [r2, #-2]!
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8007d20:	3320      	adds	r3, #32
 8007d22:	18e1      	adds	r1, r4, r3
 8007d24:	2301      	movs	r3, #1
 8007d26:	3103      	adds	r1, #3
 8007d28:	4638      	mov	r0, r7
 8007d2a:	f7ff fd71 	bl	8007810 <http_write>
            if (err == ERR_OK) {
 8007d2e:	4605      	mov	r5, r0
 8007d30:	2800      	cmp	r0, #0
 8007d32:	f47f aeb9 	bne.w	8007aa8 <http_send_data_ssi+0x98>
              ssi->tag_index += len;
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	81a3      	strh	r3, [r4, #12]
              data_to_send = 1;
 8007d40:	f04f 0801 	mov.w	r8, #1
 8007d44:	e6b0      	b.n	8007aa8 <http_send_data_ssi+0x98>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	f43f ae9f 	beq.w	8007a8a <http_send_data_ssi+0x7a>
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	69b1      	ldr	r1, [r6, #24]
 8007d50:	428b      	cmp	r3, r1
 8007d52:	f67f ae9a 	bls.w	8007a8a <http_send_data_ssi+0x7a>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8007d56:	1a5b      	subs	r3, r3, r1
 8007d58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	dc01      	bgt.n	8007d64 <http_send_data_ssi+0x354>
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	e001      	b.n	8007d68 <http_send_data_ssi+0x358>
 8007d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d68:	aa02      	add	r2, sp, #8
 8007d6a:	f822 3d02 	strh.w	r3, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8007d6e:	2300      	movs	r3, #0
 8007d70:	4638      	mov	r0, r7
 8007d72:	f7ff fd4d 	bl	8007810 <http_write>
    if (err == ERR_OK) {
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f47f ae87 	bne.w	8007a8a <http_send_data_ssi+0x7a>
      hs->file += len;
 8007d7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007d80:	69b3      	ldr	r3, [r6, #24]
 8007d82:	4413      	add	r3, r2
 8007d84:	61b3      	str	r3, [r6, #24]
      hs->left -= len;
 8007d86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007d88:	1a9b      	subs	r3, r3, r2
 8007d8a:	6273      	str	r3, [r6, #36]	; 0x24
      data_to_send = 1;
 8007d8c:	f04f 0801 	mov.w	r8, #1
 8007d90:	e67b      	b.n	8007a8a <http_send_data_ssi+0x7a>
 8007d92:	bf00      	nop

08007d94 <http_ssi_state_free>:
  if (ssi != NULL) {
 8007d94:	b118      	cbz	r0, 8007d9e <http_ssi_state_free+0xa>
{
 8007d96:	b508      	push	{r3, lr}
    HTTP_FREE_SSI_STATE(ssi);
 8007d98:	f004 fb02 	bl	800c3a0 <mem_free>
 8007d9c:	bd08      	pop	{r3, pc}
 8007d9e:	4770      	bx	lr

08007da0 <http_state_eof>:
{
 8007da0:	b510      	push	{r4, lr}
 8007da2:	4604      	mov	r4, r0
  if (hs->handle) {
 8007da4:	6940      	ldr	r0, [r0, #20]
 8007da6:	b118      	cbz	r0, 8007db0 <http_state_eof+0x10>
    fs_close(hs->handle);
 8007da8:	f7ff fcb2 	bl	8007710 <fs_close>
    hs->handle = NULL;
 8007dac:	2300      	movs	r3, #0
 8007dae:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8007db0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007db2:	b118      	cbz	r0, 8007dbc <http_state_eof+0x1c>
    http_ssi_state_free(hs->ssi);
 8007db4:	f7ff ffee 	bl	8007d94 <http_ssi_state_free>
    hs->ssi = NULL;
 8007db8:	2300      	movs	r3, #0
 8007dba:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8007dbc:	6a20      	ldr	r0, [r4, #32]
 8007dbe:	b118      	cbz	r0, 8007dc8 <http_state_eof+0x28>
    pbuf_free(hs->req);
 8007dc0:	f005 f86a 	bl	800ce98 <pbuf_free>
    hs->req = NULL;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	6223      	str	r3, [r4, #32]
 8007dc8:	bd10      	pop	{r4, pc}

08007dca <http_state_free>:
  if (hs != NULL) {
 8007dca:	b138      	cbz	r0, 8007ddc <http_state_free+0x12>
{
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	4604      	mov	r4, r0
    http_state_eof(hs);
 8007dd0:	f7ff ffe6 	bl	8007da0 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f004 fae3 	bl	800c3a0 <mem_free>
 8007dda:	bd10      	pop	{r4, pc}
 8007ddc:	4770      	bx	lr
	...

08007de0 <http_close_or_abort_conn>:
{
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	4604      	mov	r4, r0
 8007de4:	460d      	mov	r5, r1
 8007de6:	4616      	mov	r6, r2
  altcp_arg(pcb, NULL);
 8007de8:	2100      	movs	r1, #0
 8007dea:	f005 fe19 	bl	800da20 <tcp_arg>
  altcp_recv(pcb, NULL);
 8007dee:	2100      	movs	r1, #0
 8007df0:	4620      	mov	r0, r4
 8007df2:	f005 fe19 	bl	800da28 <tcp_recv>
  altcp_err(pcb, NULL);
 8007df6:	2100      	movs	r1, #0
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f005 fe47 	bl	800da8c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8007dfe:	2200      	movs	r2, #0
 8007e00:	4611      	mov	r1, r2
 8007e02:	4620      	mov	r0, r4
 8007e04:	f005 fe64 	bl	800dad0 <tcp_poll>
  altcp_sent(pcb, NULL);
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f005 fe26 	bl	800da5c <tcp_sent>
  if (hs != NULL) {
 8007e10:	b115      	cbz	r5, 8007e18 <http_close_or_abort_conn+0x38>
    http_state_free(hs);
 8007e12:	4628      	mov	r0, r5
 8007e14:	f7ff ffd9 	bl	8007dca <http_state_free>
  if (abort_conn) {
 8007e18:	b956      	cbnz	r6, 8007e30 <http_close_or_abort_conn+0x50>
  err = altcp_close(pcb);
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f006 f9f0 	bl	800e200 <tcp_close>
  if (err != ERR_OK) {
 8007e20:	4605      	mov	r5, r0
 8007e22:	b148      	cbz	r0, 8007e38 <http_close_or_abort_conn+0x58>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8007e24:	2204      	movs	r2, #4
 8007e26:	4905      	ldr	r1, [pc, #20]	; (8007e3c <http_close_or_abort_conn+0x5c>)
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f005 fe51 	bl	800dad0 <tcp_poll>
 8007e2e:	e003      	b.n	8007e38 <http_close_or_abort_conn+0x58>
    altcp_abort(pcb);
 8007e30:	4620      	mov	r0, r4
 8007e32:	f006 fb47 	bl	800e4c4 <tcp_abort>
    return ERR_OK;
 8007e36:	2500      	movs	r5, #0
}
 8007e38:	4628      	mov	r0, r5
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	0800805b 	.word	0x0800805b

08007e40 <http_close_conn>:
{
 8007e40:	b508      	push	{r3, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 8007e42:	2200      	movs	r2, #0
 8007e44:	f7ff ffcc 	bl	8007de0 <http_close_or_abort_conn>
}
 8007e48:	bd08      	pop	{r3, pc}

08007e4a <http_eof>:
{
 8007e4a:	b508      	push	{r3, lr}
    http_close_conn(pcb, hs);
 8007e4c:	f7ff fff8 	bl	8007e40 <http_close_conn>
 8007e50:	bd08      	pop	{r3, pc}
	...

08007e54 <http_check_eof>:
{
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4605      	mov	r5, r0
 8007e58:	460c      	mov	r4, r1
  if (hs->handle == NULL) {
 8007e5a:	6948      	ldr	r0, [r1, #20]
 8007e5c:	b160      	cbz	r0, 8007e78 <http_check_eof+0x24>
  bytes_left = fs_bytes_left(hs->handle);
 8007e5e:	f7ff fc58 	bl	8007712 <fs_bytes_left>
  if (bytes_left <= 0) {
 8007e62:	2800      	cmp	r0, #0
 8007e64:	dd0d      	ble.n	8007e82 <http_check_eof+0x2e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8007e66:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <http_check_eof+0x3c>)
 8007e68:	f240 429d 	movw	r2, #1181	; 0x49d
 8007e6c:	4909      	ldr	r1, [pc, #36]	; (8007e94 <http_check_eof+0x40>)
 8007e6e:	480a      	ldr	r0, [pc, #40]	; (8007e98 <http_check_eof+0x44>)
 8007e70:	f00a f97c 	bl	801216c <iprintf>
  return 1;
 8007e74:	2001      	movs	r0, #1
}
 8007e76:	bd38      	pop	{r3, r4, r5, pc}
    http_eof(pcb, hs);
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f7ff ffe6 	bl	8007e4a <http_eof>
    return 0;
 8007e7e:	2000      	movs	r0, #0
 8007e80:	bd38      	pop	{r3, r4, r5, pc}
    http_eof(pcb, hs);
 8007e82:	4621      	mov	r1, r4
 8007e84:	4628      	mov	r0, r5
 8007e86:	f7ff ffe0 	bl	8007e4a <http_eof>
    return 0;
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	bd38      	pop	{r3, r4, r5, pc}
 8007e8e:	bf00      	nop
 8007e90:	08067384 	.word	0x08067384
 8007e94:	08067214 	.word	0x08067214
 8007e98:	0801335c 	.word	0x0801335c

08007e9c <http_send_headers>:
{
 8007e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460c      	mov	r4, r1
  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 8007ea6:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
 8007eaa:	b12b      	cbz	r3, 8007eb8 <http_send_headers+0x1c>
  len = altcp_sndbuf(pcb);
 8007eac:	f8b6 5064 	ldrh.w	r5, [r6, #100]	; 0x64
  sendlen = len;
 8007eb0:	f8ad 5006 	strh.w	r5, [sp, #6]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8007eb4:	2700      	movs	r7, #0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8007eb6:	e015      	b.n	8007ee4 <http_send_headers+0x48>
    get_http_content_length(hs);
 8007eb8:	4608      	mov	r0, r1
 8007eba:	f7ff fc65 	bl	8007788 <get_http_content_length>
 8007ebe:	e7f5      	b.n	8007eac <http_send_headers+0x10>
      apiflags |= TCP_WRITE_FLAG_COPY;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e033      	b.n	8007f2c <http_send_headers+0x90>
    } else if (err != ERR_OK) {
 8007ec4:	b113      	cbz	r3, 8007ecc <http_send_headers+0x30>
      sendlen = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f8ad 3006 	strh.w	r3, [sp, #6]
    hs->hdr_pos += sendlen;
 8007ecc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007ed0:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 8007ed4:	4413      	add	r3, r2
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    len -= sendlen;
 8007edc:	1aad      	subs	r5, r5, r2
 8007ede:	b2ad      	uxth	r5, r5
    if (hs->hdr_pos == hdrlen) {
 8007ee0:	4598      	cmp	r8, r3
 8007ee2:	d036      	beq.n	8007f52 <http_send_headers+0xb6>
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	d04b      	beq.n	8007f80 <http_send_headers+0xe4>
 8007ee8:	f8b4 a0d2 	ldrh.w	sl, [r4, #210]	; 0xd2
 8007eec:	f1ba 0f04 	cmp.w	sl, #4
 8007ef0:	d846      	bhi.n	8007f80 <http_send_headers+0xe4>
 8007ef2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d042      	beq.n	8007f80 <http_send_headers+0xe4>
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 8007efa:	f10a 032c 	add.w	r3, sl, #44	; 0x2c
 8007efe:	f854 b023 	ldr.w	fp, [r4, r3, lsl #2]
 8007f02:	4658      	mov	r0, fp
 8007f04:	f7f8 f97e 	bl	8000204 <strlen>
 8007f08:	fa1f f880 	uxth.w	r8, r0
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8007f0c:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	; 0xd0
 8007f10:	eba8 0901 	sub.w	r9, r8, r1
 8007f14:	45a9      	cmp	r9, r5
 8007f16:	bfa8      	it	ge
 8007f18:	46a9      	movge	r9, r5
 8007f1a:	fa1f f989 	uxth.w	r9, r9
 8007f1e:	f8ad 9006 	strh.w	r9, [sp, #6]
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 8007f22:	4459      	add	r1, fp
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 8007f24:	f1ba 0f03 	cmp.w	sl, #3
 8007f28:	d0ca      	beq.n	8007ec0 <http_send_headers+0x24>
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 8007f2a:	2300      	movs	r3, #0
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 8007f2c:	f1ba 0f03 	cmp.w	sl, #3
 8007f30:	d801      	bhi.n	8007f36 <http_send_headers+0x9a>
      apiflags |= TCP_WRITE_FLAG_MORE;
 8007f32:	f043 0302 	orr.w	r3, r3, #2
    err = http_write(pcb, ptr, &sendlen, apiflags);
 8007f36:	f10d 0206 	add.w	r2, sp, #6
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7ff fc68 	bl	8007810 <http_write>
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 8007f40:	4603      	mov	r3, r0
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d1be      	bne.n	8007ec4 <http_send_headers+0x28>
 8007f46:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007f4a:	4591      	cmp	r9, r2
 8007f4c:	d0ba      	beq.n	8007ec4 <http_send_headers+0x28>
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 8007f4e:	2701      	movs	r7, #1
 8007f50:	e7bc      	b.n	8007ecc <http_send_headers+0x30>
      hs->hdr_index++;
 8007f52:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 8007f56:	3301      	adds	r3, #1
 8007f58:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8007f5c:	e002      	b.n	8007f64 <http_send_headers+0xc8>
        hs->hdr_index++;
 8007f5e:	3301      	adds	r3, #1
 8007f60:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8007f64:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	d805      	bhi.n	8007f78 <http_send_headers+0xdc>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 8007f6c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8007f70:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8007f74:	2a00      	cmp	r2, #0
 8007f76:	d0f2      	beq.n	8007f5e <http_send_headers+0xc2>
      hs->hdr_pos = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
 8007f7e:	e7b1      	b.n	8007ee4 <http_send_headers+0x48>
  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 8007f80:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d901      	bls.n	8007f8c <http_send_headers+0xf0>
 8007f88:	69a3      	ldr	r3, [r4, #24]
 8007f8a:	b143      	cbz	r3, 8007f9e <http_send_headers+0x102>
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 8007f8c:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	d80d      	bhi.n	8007fb0 <http_send_headers+0x114>
    return HTTP_DATA_TO_SEND_BREAK;
 8007f94:	2702      	movs	r7, #2
}
 8007f96:	4638      	mov	r0, r7
 8007f98:	b003      	add	sp, #12
 8007f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (http_check_eof(pcb, hs)) {
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f7ff ff57 	bl	8007e54 <http_check_eof>
 8007fa6:	b908      	cbnz	r0, 8007fac <http_send_headers+0x110>
      return HTTP_DATA_TO_SEND_FREED;
 8007fa8:	2703      	movs	r7, #3
 8007faa:	e7f4      	b.n	8007f96 <http_send_headers+0xfa>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 8007fac:	2702      	movs	r7, #2
 8007fae:	e7ed      	b.n	8007f8c <http_send_headers+0xf0>
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 8007fb0:	69a3      	ldr	r3, [r4, #24]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1ef      	bne.n	8007f96 <http_send_headers+0xfa>
    return HTTP_DATA_TO_SEND_BREAK;
 8007fb6:	2702      	movs	r7, #2
 8007fb8:	e7ed      	b.n	8007f96 <http_send_headers+0xfa>

08007fba <http_send>:
{
 8007fba:	b570      	push	{r4, r5, r6, lr}
  if (hs == NULL) {
 8007fbc:	b3b9      	cbz	r1, 800802e <http_send+0x74>
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	4605      	mov	r5, r0
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 8007fc2:	f8b1 30d2 	ldrh.w	r3, [r1, #210]	; 0xd2
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d90c      	bls.n	8007fe4 <http_send+0x2a>
  if (hs->left == 0) {
 8007fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fcc:	b1b3      	cbz	r3, 8007ffc <http_send+0x42>
  if (hs->ssi) {
 8007fce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007fd0:	b1e3      	cbz	r3, 800800c <http_send+0x52>
    data_to_send = http_send_data_ssi(pcb, hs);
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f7ff fd1b 	bl	8007a10 <http_send_data_ssi>
 8007fda:	4606      	mov	r6, r0
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8007fdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fde:	b1db      	cbz	r3, 8008018 <http_send+0x5e>
}
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}
    data_to_send = http_send_headers(pcb, hs);
 8007fe4:	f7ff ff5a 	bl	8007e9c <http_send_headers>
 8007fe8:	4606      	mov	r6, r0
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 8007fea:	2803      	cmp	r0, #3
 8007fec:	d0f8      	beq.n	8007fe0 <http_send+0x26>
 8007fee:	2801      	cmp	r0, #1
 8007ff0:	d0eb      	beq.n	8007fca <http_send+0x10>
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 8007ff2:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	d8e7      	bhi.n	8007fca <http_send+0x10>
 8007ffa:	e7f1      	b.n	8007fe0 <http_send+0x26>
    if (!http_check_eof(pcb, hs)) {
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4628      	mov	r0, r5
 8008000:	f7ff ff28 	bl	8007e54 <http_check_eof>
 8008004:	4606      	mov	r6, r0
 8008006:	2800      	cmp	r0, #0
 8008008:	d1e1      	bne.n	8007fce <http_send+0x14>
 800800a:	e7e9      	b.n	8007fe0 <http_send+0x26>
    data_to_send = http_send_data_nonssi(pcb, hs);
 800800c:	4621      	mov	r1, r4
 800800e:	4628      	mov	r0, r5
 8008010:	f7ff fc4c 	bl	80078ac <http_send_data_nonssi>
 8008014:	4606      	mov	r6, r0
 8008016:	e7e1      	b.n	8007fdc <http_send+0x22>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8008018:	6960      	ldr	r0, [r4, #20]
 800801a:	f7ff fb7a 	bl	8007712 <fs_bytes_left>
 800801e:	2800      	cmp	r0, #0
 8008020:	dcde      	bgt.n	8007fe0 <http_send+0x26>
    http_eof(pcb, hs);
 8008022:	4621      	mov	r1, r4
 8008024:	4628      	mov	r0, r5
 8008026:	f7ff ff10 	bl	8007e4a <http_eof>
    return 0;
 800802a:	2600      	movs	r6, #0
 800802c:	e7d8      	b.n	8007fe0 <http_send+0x26>
    return 0;
 800802e:	2600      	movs	r6, #0
 8008030:	e7d6      	b.n	8007fe0 <http_send+0x26>

08008032 <http_sent>:
  if (hs == NULL) {
 8008032:	b150      	cbz	r0, 800804a <http_sent+0x18>
{
 8008034:	b508      	push	{r3, lr}
 8008036:	4603      	mov	r3, r0
 8008038:	4608      	mov	r0, r1
  hs->retries = 0;
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8008040:	4619      	mov	r1, r3
 8008042:	f7ff ffba 	bl	8007fba <http_send>
}
 8008046:	2000      	movs	r0, #0
 8008048:	bd08      	pop	{r3, pc}
 800804a:	2000      	movs	r0, #0
 800804c:	4770      	bx	lr

0800804e <http_err>:
  if (hs != NULL) {
 800804e:	b118      	cbz	r0, 8008058 <http_err+0xa>
{
 8008050:	b508      	push	{r3, lr}
    http_state_free(hs);
 8008052:	f7ff feba 	bl	8007dca <http_state_free>
 8008056:	bd08      	pop	{r3, pc}
 8008058:	4770      	bx	lr

0800805a <http_poll>:
{
 800805a:	b510      	push	{r4, lr}
 800805c:	460c      	mov	r4, r1
  if (hs == NULL) {
 800805e:	b180      	cbz	r0, 8008082 <http_poll+0x28>
 8008060:	4601      	mov	r1, r0
    hs->retries++;
 8008062:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8008066:	3301      	adds	r3, #1
 8008068:	b2db      	uxtb	r3, r3
 800806a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800806e:	2b04      	cmp	r3, #4
 8008070:	d00c      	beq.n	800808c <http_poll+0x32>
    if (hs->handle) {
 8008072:	6943      	ldr	r3, [r0, #20]
 8008074:	b11b      	cbz	r3, 800807e <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8008076:	4620      	mov	r0, r4
 8008078:	f7ff ff9f 	bl	8007fba <http_send>
 800807c:	b950      	cbnz	r0, 8008094 <http_poll+0x3a>
}
 800807e:	2000      	movs	r0, #0
 8008080:	bd10      	pop	{r4, pc}
    closed = http_close_conn(pcb, NULL);
 8008082:	2100      	movs	r1, #0
 8008084:	4620      	mov	r0, r4
 8008086:	f7ff fedb 	bl	8007e40 <http_close_conn>
    return ERR_OK;
 800808a:	e7f8      	b.n	800807e <http_poll+0x24>
      http_close_conn(pcb, hs);
 800808c:	4620      	mov	r0, r4
 800808e:	f7ff fed7 	bl	8007e40 <http_close_conn>
      return ERR_OK;
 8008092:	e7f4      	b.n	800807e <http_poll+0x24>
        altcp_output(pcb);
 8008094:	4620      	mov	r0, r4
 8008096:	f008 ff69 	bl	8010f6c <tcp_output>
 800809a:	e7f0      	b.n	800807e <http_poll+0x24>

0800809c <http_get_404_file>:
{
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	4605      	mov	r5, r0
 80080a0:	460c      	mov	r4, r1
  *uri = "/404.html";
 80080a2:	490c      	ldr	r1, [pc, #48]	; (80080d4 <http_get_404_file+0x38>)
 80080a4:	6021      	str	r1, [r4, #0]
  err = fs_open(&hs->file_handle, *uri);
 80080a6:	4606      	mov	r6, r0
 80080a8:	f7ff fb0e 	bl	80076c8 <fs_open>
  if (err != ERR_OK) {
 80080ac:	b908      	cbnz	r0, 80080b2 <http_get_404_file+0x16>
}
 80080ae:	4630      	mov	r0, r6
 80080b0:	bd70      	pop	{r4, r5, r6, pc}
    *uri = "/404.htm";
 80080b2:	4909      	ldr	r1, [pc, #36]	; (80080d8 <http_get_404_file+0x3c>)
 80080b4:	6021      	str	r1, [r4, #0]
    err = fs_open(&hs->file_handle, *uri);
 80080b6:	4628      	mov	r0, r5
 80080b8:	f7ff fb06 	bl	80076c8 <fs_open>
    if (err != ERR_OK) {
 80080bc:	2800      	cmp	r0, #0
 80080be:	d0f6      	beq.n	80080ae <http_get_404_file+0x12>
      *uri = "/404.shtml";
 80080c0:	4906      	ldr	r1, [pc, #24]	; (80080dc <http_get_404_file+0x40>)
 80080c2:	6021      	str	r1, [r4, #0]
      err = fs_open(&hs->file_handle, *uri);
 80080c4:	4628      	mov	r0, r5
 80080c6:	f7ff faff 	bl	80076c8 <fs_open>
      if (err != ERR_OK) {
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d0ef      	beq.n	80080ae <http_get_404_file+0x12>
        *uri = NULL;
 80080ce:	2600      	movs	r6, #0
 80080d0:	6026      	str	r6, [r4, #0]
        return NULL;
 80080d2:	e7ec      	b.n	80080ae <http_get_404_file+0x12>
 80080d4:	0806724c 	.word	0x0806724c
 80080d8:	08067258 	.word	0x08067258
 80080dc:	08067264 	.word	0x08067264

080080e0 <extract_uri_parameters>:
{
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!params || (params[0] == '\0')) {
 80080e2:	b3a9      	cbz	r1, 8008150 <extract_uri_parameters+0x70>
 80080e4:	4607      	mov	r7, r0
 80080e6:	460c      	mov	r4, r1
 80080e8:	780b      	ldrb	r3, [r1, #0]
 80080ea:	b39b      	cbz	r3, 8008154 <extract_uri_parameters+0x74>
 80080ec:	2500      	movs	r5, #0
 80080ee:	e010      	b.n	8008112 <extract_uri_parameters+0x32>
      pair = strchr(equals, ' ');
 80080f0:	2120      	movs	r1, #32
 80080f2:	4620      	mov	r0, r4
 80080f4:	f00a f8ff 	bl	80122f6 <strchr>
      if (pair) {
 80080f8:	b110      	cbz	r0, 8008100 <extract_uri_parameters+0x20>
        *pair = '\0';
 80080fa:	2200      	movs	r2, #0
 80080fc:	7002      	strb	r2, [r0, #0]
 80080fe:	e019      	b.n	8008134 <extract_uri_parameters+0x54>
      pair = NULL;
 8008100:	4606      	mov	r6, r0
 8008102:	e017      	b.n	8008134 <extract_uri_parameters+0x54>
      http_cgi_param_vals[loop] = NULL;
 8008104:	f105 031c 	add.w	r3, r5, #28
 8008108:	2200      	movs	r2, #0
 800810a:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800810e:	3501      	adds	r5, #1
 8008110:	4634      	mov	r4, r6
 8008112:	2d0f      	cmp	r5, #15
 8008114:	dc1f      	bgt.n	8008156 <extract_uri_parameters+0x76>
 8008116:	b1f4      	cbz	r4, 8008156 <extract_uri_parameters+0x76>
    http_cgi_params[loop] = pair;
 8008118:	f105 030c 	add.w	r3, r5, #12
 800811c:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
    pair = strchr(pair, '&');
 8008120:	2126      	movs	r1, #38	; 0x26
 8008122:	4620      	mov	r0, r4
 8008124:	f00a f8e7 	bl	80122f6 <strchr>
    if (pair) {
 8008128:	4606      	mov	r6, r0
 800812a:	2800      	cmp	r0, #0
 800812c:	d0e0      	beq.n	80080f0 <extract_uri_parameters+0x10>
      *pair = '\0';
 800812e:	2300      	movs	r3, #0
 8008130:	f806 3b01 	strb.w	r3, [r6], #1
    equals = strchr(equals, '=');
 8008134:	213d      	movs	r1, #61	; 0x3d
 8008136:	4620      	mov	r0, r4
 8008138:	f00a f8dd 	bl	80122f6 <strchr>
    if (equals) {
 800813c:	2800      	cmp	r0, #0
 800813e:	d0e1      	beq.n	8008104 <extract_uri_parameters+0x24>
      *equals = '\0';
 8008140:	2300      	movs	r3, #0
 8008142:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8008146:	f105 031c 	add.w	r3, r5, #28
 800814a:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
 800814e:	e7de      	b.n	800810e <extract_uri_parameters+0x2e>
    return (0);
 8008150:	2500      	movs	r5, #0
 8008152:	e000      	b.n	8008156 <extract_uri_parameters+0x76>
 8008154:	2500      	movs	r5, #0
}
 8008156:	4628      	mov	r0, r5
 8008158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800815c <http_uri_is_ssi>:
  if (file != NULL) {
 800815c:	b348      	cbz	r0, 80081b2 <http_uri_is_ssi+0x56>
{
 800815e:	b570      	push	{r4, r5, r6, lr}
 8008160:	460d      	mov	r5, r1
    char *param = (char *)strstr(uri, "?");
 8008162:	213f      	movs	r1, #63	; 0x3f
 8008164:	4628      	mov	r0, r5
 8008166:	f00a f8c6 	bl	80122f6 <strchr>
    if (param != NULL) {
 800816a:	4606      	mov	r6, r0
 800816c:	b108      	cbz	r0, 8008172 <http_uri_is_ssi+0x16>
      *param = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	7003      	strb	r3, [r0, #0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8008172:	212e      	movs	r1, #46	; 0x2e
 8008174:	4628      	mov	r0, r5
 8008176:	f00a f8be 	bl	80122f6 <strchr>
 800817a:	4604      	mov	r4, r0
 800817c:	e005      	b.n	800818a <http_uri_is_ssi+0x2e>
 800817e:	212e      	movs	r1, #46	; 0x2e
 8008180:	1c60      	adds	r0, r4, #1
 8008182:	f00a f8b8 	bl	80122f6 <strchr>
      ext = sub;
 8008186:	4625      	mov	r5, r4
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8008188:	4604      	mov	r4, r0
 800818a:	2c00      	cmp	r4, #0
 800818c:	d1f7      	bne.n	800817e <http_uri_is_ssi+0x22>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800818e:	2c04      	cmp	r4, #4
 8008190:	d808      	bhi.n	80081a4 <http_uri_is_ssi+0x48>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <http_uri_is_ssi+0x5c>)
 8008194:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8008198:	4628      	mov	r0, r5
 800819a:	f001 f808 	bl	80091ae <lwip_stricmp>
 800819e:	b130      	cbz	r0, 80081ae <http_uri_is_ssi+0x52>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80081a0:	3401      	adds	r4, #1
 80081a2:	e7f4      	b.n	800818e <http_uri_is_ssi+0x32>
  u8_t tag_check = 0;
 80081a4:	2000      	movs	r0, #0
    if (param != NULL) {
 80081a6:	b136      	cbz	r6, 80081b6 <http_uri_is_ssi+0x5a>
      *param = '?';
 80081a8:	233f      	movs	r3, #63	; 0x3f
 80081aa:	7033      	strb	r3, [r6, #0]
 80081ac:	bd70      	pop	{r4, r5, r6, pc}
        tag_check = 1;
 80081ae:	2001      	movs	r0, #1
 80081b0:	e7f9      	b.n	80081a6 <http_uri_is_ssi+0x4a>
  u8_t tag_check = 0;
 80081b2:	2000      	movs	r0, #0
 80081b4:	4770      	bx	lr
}
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	08066f9c 	.word	0x08066f9c

080081bc <http_ssi_state_alloc>:
{
 80081bc:	b510      	push	{r4, lr}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80081be:	20e8      	movs	r0, #232	; 0xe8
 80081c0:	f004 fa3a 	bl	800c638 <mem_malloc>
  if (ret != NULL) {
 80081c4:	4604      	mov	r4, r0
 80081c6:	b118      	cbz	r0, 80081d0 <http_ssi_state_alloc+0x14>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80081c8:	22e8      	movs	r2, #232	; 0xe8
 80081ca:	2100      	movs	r1, #0
 80081cc:	f009 ffc5 	bl	801215a <memset>
}
 80081d0:	4620      	mov	r0, r4
 80081d2:	bd10      	pop	{r4, pc}

080081d4 <http_state_init>:
{
 80081d4:	b510      	push	{r4, lr}
 80081d6:	4604      	mov	r4, r0
  memset(hs, 0, sizeof(struct http_state));
 80081d8:	22d4      	movs	r2, #212	; 0xd4
 80081da:	2100      	movs	r1, #0
 80081dc:	f009 ffbd 	bl	801215a <memset>
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 80081e0:	2305      	movs	r3, #5
 80081e2:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
 80081e6:	bd10      	pop	{r4, pc}

080081e8 <http_state_alloc>:
{
 80081e8:	b510      	push	{r4, lr}
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80081ea:	20d4      	movs	r0, #212	; 0xd4
 80081ec:	f004 fa24 	bl	800c638 <mem_malloc>
  if (ret != NULL) {
 80081f0:	4604      	mov	r4, r0
 80081f2:	b108      	cbz	r0, 80081f8 <http_state_alloc+0x10>
    http_state_init(ret);
 80081f4:	f7ff ffee 	bl	80081d4 <http_state_init>
}
 80081f8:	4620      	mov	r0, r4
 80081fa:	bd10      	pop	{r4, pc}

080081fc <http_accept>:
  if ((err != ERR_OK) || (pcb == NULL)) {
 80081fc:	bb12      	cbnz	r2, 8008244 <http_accept+0x48>
{
 80081fe:	b538      	push	{r3, r4, r5, lr}
 8008200:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (pcb == NULL)) {
 8008202:	b311      	cbz	r1, 800824a <http_accept+0x4e>
 8008204:	460c      	mov	r4, r1
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8008206:	2101      	movs	r1, #1
 8008208:	4620      	mov	r0, r4
 800820a:	f005 fbf7 	bl	800d9fc <tcp_setprio>
  hs = http_state_alloc();
 800820e:	f7ff ffeb 	bl	80081e8 <http_state_alloc>
  if (hs == NULL) {
 8008212:	4601      	mov	r1, r0
 8008214:	b1e0      	cbz	r0, 8008250 <http_accept+0x54>
  hs->pcb = pcb;
 8008216:	61c4      	str	r4, [r0, #28]
  altcp_arg(pcb, hs);
 8008218:	4620      	mov	r0, r4
 800821a:	f005 fc01 	bl	800da20 <tcp_arg>
  altcp_recv(pcb, http_recv);
 800821e:	490e      	ldr	r1, [pc, #56]	; (8008258 <http_accept+0x5c>)
 8008220:	4620      	mov	r0, r4
 8008222:	f005 fc01 	bl	800da28 <tcp_recv>
  altcp_err(pcb, http_err);
 8008226:	490d      	ldr	r1, [pc, #52]	; (800825c <http_accept+0x60>)
 8008228:	4620      	mov	r0, r4
 800822a:	f005 fc2f 	bl	800da8c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800822e:	2204      	movs	r2, #4
 8008230:	490b      	ldr	r1, [pc, #44]	; (8008260 <http_accept+0x64>)
 8008232:	4620      	mov	r0, r4
 8008234:	f005 fc4c 	bl	800dad0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8008238:	490a      	ldr	r1, [pc, #40]	; (8008264 <http_accept+0x68>)
 800823a:	4620      	mov	r0, r4
 800823c:	f005 fc0e 	bl	800da5c <tcp_sent>
  return ERR_OK;
 8008240:	4628      	mov	r0, r5
 8008242:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_VAL;
 8008244:	f06f 0005 	mvn.w	r0, #5
 8008248:	4770      	bx	lr
 800824a:	f06f 0005 	mvn.w	r0, #5
 800824e:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_MEM;
 8008250:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008254:	bd38      	pop	{r3, r4, r5, pc}
 8008256:	bf00      	nop
 8008258:	0800874d 	.word	0x0800874d
 800825c:	0800804f 	.word	0x0800804f
 8008260:	0800805b 	.word	0x0800805b
 8008264:	08008033 	.word	0x08008033

08008268 <get_http_headers>:
{
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800826a:	4b39      	ldr	r3, [pc, #228]	; (8008350 <get_http_headers+0xe8>)
 800826c:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 8008270:	2300      	movs	r3, #0
 8008272:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 8008276:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
  if (uri == NULL) {
 800827a:	b1b9      	cbz	r1, 80082ac <get_http_headers+0x44>
 800827c:	460c      	mov	r4, r1
 800827e:	4606      	mov	r6, r0
  if (strstr(uri, "404")) {
 8008280:	4934      	ldr	r1, [pc, #208]	; (8008354 <get_http_headers+0xec>)
 8008282:	4620      	mov	r0, r4
 8008284:	f00a f85f 	bl	8012346 <strstr>
 8008288:	b1e0      	cbz	r0, 80082c4 <get_http_headers+0x5c>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800828a:	4b33      	ldr	r3, [pc, #204]	; (8008358 <get_http_headers+0xf0>)
 800828c:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
  vars = strchr(uri, '?');
 8008290:	213f      	movs	r1, #63	; 0x3f
 8008292:	4620      	mov	r0, r4
 8008294:	f00a f82f 	bl	80122f6 <strchr>
  if (vars) {
 8008298:	4607      	mov	r7, r0
 800829a:	b108      	cbz	r0, 80082a0 <get_http_headers+0x38>
    *vars = '\0';
 800829c:	2300      	movs	r3, #0
 800829e:	7003      	strb	r3, [r0, #0]
  tmp = strchr(uri, '.');
 80082a0:	212e      	movs	r1, #46	; 0x2e
 80082a2:	4620      	mov	r0, r4
 80082a4:	f00a f827 	bl	80122f6 <strchr>
  ext = NULL;
 80082a8:	2500      	movs	r5, #0
  while (tmp) {
 80082aa:	e026      	b.n	80082fa <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 80082ac:	4b2a      	ldr	r3, [pc, #168]	; (8008358 <get_http_headers+0xf0>)
 80082ae:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 80082b2:	4b2a      	ldr	r3, [pc, #168]	; (800835c <get_http_headers+0xf4>)
 80082b4:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    hs->hdr_index = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	f8a0 30d2 	strh.w	r3, [r0, #210]	; 0xd2
    hs->hdr_pos = 0;
 80082be:	f8a0 30d0 	strh.w	r3, [r0, #208]	; 0xd0
    return;
 80082c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (strstr(uri, "400")) {
 80082c4:	4926      	ldr	r1, [pc, #152]	; (8008360 <get_http_headers+0xf8>)
 80082c6:	4620      	mov	r0, r4
 80082c8:	f00a f83d 	bl	8012346 <strstr>
 80082cc:	b118      	cbz	r0, 80082d6 <get_http_headers+0x6e>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 80082ce:	4b25      	ldr	r3, [pc, #148]	; (8008364 <get_http_headers+0xfc>)
 80082d0:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
 80082d4:	e7dc      	b.n	8008290 <get_http_headers+0x28>
  } else if (strstr(uri, "501")) {
 80082d6:	4924      	ldr	r1, [pc, #144]	; (8008368 <get_http_headers+0x100>)
 80082d8:	4620      	mov	r0, r4
 80082da:	f00a f834 	bl	8012346 <strstr>
 80082de:	b118      	cbz	r0, 80082e8 <get_http_headers+0x80>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 80082e0:	4b22      	ldr	r3, [pc, #136]	; (800836c <get_http_headers+0x104>)
 80082e2:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
 80082e6:	e7d3      	b.n	8008290 <get_http_headers+0x28>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 80082e8:	4b21      	ldr	r3, [pc, #132]	; (8008370 <get_http_headers+0x108>)
 80082ea:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
 80082ee:	e7cf      	b.n	8008290 <get_http_headers+0x28>
    ext = tmp + 1;
 80082f0:	1c45      	adds	r5, r0, #1
    tmp = strchr(ext, '.');
 80082f2:	212e      	movs	r1, #46	; 0x2e
 80082f4:	4628      	mov	r0, r5
 80082f6:	f009 fffe 	bl	80122f6 <strchr>
  while (tmp) {
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d1f8      	bne.n	80082f0 <get_http_headers+0x88>
  if (ext != NULL) {
 80082fe:	b15d      	cbz	r5, 8008318 <get_http_headers+0xb0>
 8008300:	2400      	movs	r4, #0
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8008302:	2c13      	cmp	r4, #19
 8008304:	d809      	bhi.n	800831a <get_http_headers+0xb2>
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 8008306:	4629      	mov	r1, r5
 8008308:	4b1a      	ldr	r3, [pc, #104]	; (8008374 <get_http_headers+0x10c>)
 800830a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800830e:	f000 ff4e 	bl	80091ae <lwip_stricmp>
 8008312:	b110      	cbz	r0, 800831a <get_http_headers+0xb2>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8008314:	3401      	adds	r4, #1
 8008316:	e7f4      	b.n	8008302 <get_http_headers+0x9a>
    content_type = NUM_HTTP_HEADERS;
 8008318:	2414      	movs	r4, #20
  if (vars) {
 800831a:	b10f      	cbz	r7, 8008320 <get_http_headers+0xb8>
    *vars = '?';
 800831c:	233f      	movs	r3, #63	; 0x3f
 800831e:	703b      	strb	r3, [r7, #0]
  if (content_type < NUM_HTTP_HEADERS) {
 8008320:	2c13      	cmp	r4, #19
 8008322:	d80b      	bhi.n	800833c <get_http_headers+0xd4>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 8008324:	4b13      	ldr	r3, [pc, #76]	; (8008374 <get_http_headers+0x10c>)
 8008326:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800832a:	6863      	ldr	r3, [r4, #4]
 800832c:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
  hs->hdr_index = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	f8a6 30d2 	strh.w	r3, [r6, #210]	; 0xd2
  hs->hdr_pos = 0;
 8008336:	f8a6 30d0 	strh.w	r3, [r6, #208]	; 0xd0
 800833a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (!ext) {
 800833c:	b11d      	cbz	r5, 8008346 <get_http_headers+0xde>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800833e:	4b0e      	ldr	r3, [pc, #56]	; (8008378 <get_http_headers+0x110>)
 8008340:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 8008344:	e7f4      	b.n	8008330 <get_http_headers+0xc8>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 8008346:	4b0d      	ldr	r3, [pc, #52]	; (800837c <get_http_headers+0x114>)
 8008348:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 800834c:	e7f0      	b.n	8008330 <get_http_headers+0xc8>
 800834e:	bf00      	nop
 8008350:	08067078 	.word	0x08067078
 8008354:	08067128 	.word	0x08067128
 8008358:	080670b8 	.word	0x080670b8
 800835c:	080670d8 	.word	0x080670d8
 8008360:	0806712c 	.word	0x0806712c
 8008364:	08067130 	.word	0x08067130
 8008368:	0806714c 	.word	0x0806714c
 800836c:	08067150 	.word	0x08067150
 8008370:	08067170 	.word	0x08067170
 8008374:	08066fb0 	.word	0x08066fb0
 8008378:	080671b0 	.word	0x080671b0
 800837c:	08067184 	.word	0x08067184

08008380 <http_init_file>:
{
 8008380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008384:	4604      	mov	r4, r0
 8008386:	4698      	mov	r8, r3
 8008388:	f89d 7018 	ldrb.w	r7, [sp, #24]
  if (file != NULL) {
 800838c:	2900      	cmp	r1, #0
 800838e:	d051      	beq.n	8008434 <http_init_file+0xb4>
 8008390:	4616      	mov	r6, r2
 8008392:	460d      	mov	r5, r1
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8008394:	680b      	ldr	r3, [r1, #0]
 8008396:	b1f3      	cbz	r3, 80083d6 <http_init_file+0x56>
    if (tag_check) {
 8008398:	bb2f      	cbnz	r7, 80083e6 <http_init_file+0x66>
    hs->handle = file;
 800839a:	6165      	str	r5, [r4, #20]
    hs->file = file->data;
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80083a0:	686b      	ldr	r3, [r5, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	db2f      	blt.n	8008406 <http_init_file+0x86>
      hs->left = (u32_t)file->len;
 80083a6:	686a      	ldr	r2, [r5, #4]
 80083a8:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80083b0:	b126      	cbz	r6, 80083bc <http_init_file+0x3c>
 80083b2:	6963      	ldr	r3, [r4, #20]
 80083b4:	7c1b      	ldrb	r3, [r3, #16]
 80083b6:	f013 0f01 	tst.w	r3, #1
 80083ba:	d12c      	bne.n	8008416 <http_init_file+0x96>
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 80083bc:	6963      	ldr	r3, [r4, #20]
 80083be:	b11b      	cbz	r3, 80083c8 <http_init_file+0x48>
 80083c0:	7c1b      	ldrb	r3, [r3, #16]
 80083c2:	f013 0f01 	tst.w	r3, #1
 80083c6:	d103      	bne.n	80083d0 <http_init_file+0x50>
    get_http_headers(hs, uri);
 80083c8:	4641      	mov	r1, r8
 80083ca:	4620      	mov	r0, r4
 80083cc:	f7ff ff4c 	bl	8008268 <get_http_headers>
}
 80083d0:	2000      	movs	r0, #0
 80083d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80083d6:	4b1b      	ldr	r3, [pc, #108]	; (8008444 <http_init_file+0xc4>)
 80083d8:	f640 120b 	movw	r2, #2315	; 0x90b
 80083dc:	491a      	ldr	r1, [pc, #104]	; (8008448 <http_init_file+0xc8>)
 80083de:	481b      	ldr	r0, [pc, #108]	; (800844c <http_init_file+0xcc>)
 80083e0:	f009 fec4 	bl	801216c <iprintf>
 80083e4:	e7d8      	b.n	8008398 <http_init_file+0x18>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 80083e6:	f7ff fee9 	bl	80081bc <http_ssi_state_alloc>
      if (ssi != NULL) {
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d0d5      	beq.n	800839a <http_init_file+0x1a>
        ssi->tag_index = 0;
 80083ee:	2200      	movs	r2, #0
 80083f0:	8182      	strh	r2, [r0, #12]
        ssi->tag_state = TAG_NONE;
 80083f2:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
        ssi->parsed = file->data;
 80083f6:	682a      	ldr	r2, [r5, #0]
 80083f8:	6002      	str	r2, [r0, #0]
        ssi->parse_left = file->len;
 80083fa:	686a      	ldr	r2, [r5, #4]
 80083fc:	6082      	str	r2, [r0, #8]
        ssi->tag_end = file->data;
 80083fe:	682a      	ldr	r2, [r5, #0]
 8008400:	6042      	str	r2, [r0, #4]
        hs->ssi = ssi;
 8008402:	62e0      	str	r0, [r4, #44]	; 0x2c
 8008404:	e7c9      	b.n	800839a <http_init_file+0x1a>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8008406:	4b0f      	ldr	r3, [pc, #60]	; (8008444 <http_init_file+0xc4>)
 8008408:	f640 1234 	movw	r2, #2356	; 0x934
 800840c:	4910      	ldr	r1, [pc, #64]	; (8008450 <http_init_file+0xd0>)
 800840e:	480f      	ldr	r0, [pc, #60]	; (800844c <http_init_file+0xcc>)
 8008410:	f009 feac 	bl	801216c <iprintf>
 8008414:	e7c7      	b.n	80083a6 <http_init_file+0x26>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8008416:	490f      	ldr	r1, [pc, #60]	; (8008454 <http_init_file+0xd4>)
 8008418:	69a0      	ldr	r0, [r4, #24]
 800841a:	f000 fe9e 	bl	800915a <lwip_strnstr>
      if (file_start != NULL) {
 800841e:	4603      	mov	r3, r0
 8008420:	2800      	cmp	r0, #0
 8008422:	d0cb      	beq.n	80083bc <http_init_file+0x3c>
        int diff = file_start + 4 - hs->file;
 8008424:	3304      	adds	r3, #4
 8008426:	69a2      	ldr	r2, [r4, #24]
 8008428:	1a9a      	subs	r2, r3, r2
        hs->file += diff;
 800842a:	61a3      	str	r3, [r4, #24]
        hs->left -= (u32_t)diff;
 800842c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	6263      	str	r3, [r4, #36]	; 0x24
 8008432:	e7c3      	b.n	80083bc <http_init_file+0x3c>
    hs->handle = NULL;
 8008434:	2300      	movs	r3, #0
 8008436:	6143      	str	r3, [r0, #20]
    hs->file = NULL;
 8008438:	6183      	str	r3, [r0, #24]
    hs->left = 0;
 800843a:	6243      	str	r3, [r0, #36]	; 0x24
    hs->retries = 0;
 800843c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8008440:	e7bc      	b.n	80083bc <http_init_file+0x3c>
 8008442:	bf00      	nop
 8008444:	08067384 	.word	0x08067384
 8008448:	08067270 	.word	0x08067270
 800844c:	0801335c 	.word	0x0801335c
 8008450:	08067284 	.word	0x08067284
 8008454:	0806754c 	.word	0x0806754c

08008458 <http_find_file>:
{
 8008458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845c:	b085      	sub	sp, #20
 800845e:	4605      	mov	r5, r0
 8008460:	9103      	str	r1, [sp, #12]
 8008462:	4690      	mov	r8, r2
  size_t uri_len = strlen(uri);
 8008464:	460c      	mov	r4, r1
 8008466:	4608      	mov	r0, r1
 8008468:	f7f7 fecc 	bl	8000204 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800846c:	2800      	cmp	r0, #0
 800846e:	d050      	beq.n	8008512 <http_find_file+0xba>
 8008470:	1e46      	subs	r6, r0, #1
 8008472:	5da2      	ldrb	r2, [r4, r6]
 8008474:	2a2f      	cmp	r2, #47	; 0x2f
 8008476:	d002      	beq.n	800847e <http_find_file+0x26>
  u8_t tag_check = 0;
 8008478:	2600      	movs	r6, #0
  struct fs_file *file = NULL;
 800847a:	4634      	mov	r4, r6
 800847c:	e04b      	b.n	8008516 <http_find_file+0xbe>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800847e:	4a57      	ldr	r2, [pc, #348]	; (80085dc <http_find_file+0x184>)
 8008480:	4294      	cmp	r4, r2
 8008482:	d005      	beq.n	8008490 <http_find_file+0x38>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8008484:	2e3f      	cmp	r6, #63	; 0x3f
 8008486:	bf28      	it	cs
 8008488:	263f      	movcs	r6, #63	; 0x3f
    if (copy_len > 0) {
 800848a:	b936      	cbnz	r6, 800849a <http_find_file+0x42>
        file_name = http_uri_buf;
 800848c:	2700      	movs	r7, #0
 800848e:	e02c      	b.n	80084ea <http_find_file+0x92>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8008490:	2801      	cmp	r0, #1
 8008492:	d0f7      	beq.n	8008484 <http_find_file+0x2c>
  u8_t tag_check = 0;
 8008494:	2600      	movs	r6, #0
  struct fs_file *file = NULL;
 8008496:	4634      	mov	r4, r6
 8008498:	e03d      	b.n	8008516 <http_find_file+0xbe>
      MEMCPY(http_uri_buf, uri, copy_len);
 800849a:	4f50      	ldr	r7, [pc, #320]	; (80085dc <http_find_file+0x184>)
 800849c:	4632      	mov	r2, r6
 800849e:	4621      	mov	r1, r4
 80084a0:	4638      	mov	r0, r7
 80084a2:	f009 fe35 	bl	8012110 <memcpy>
      http_uri_buf[copy_len] = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	55bb      	strb	r3, [r7, r6]
 80084aa:	e7ef      	b.n	800848c <http_find_file+0x34>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80084ac:	4b4c      	ldr	r3, [pc, #304]	; (80085e0 <http_find_file+0x188>)
 80084ae:	f853 a037 	ldr.w	sl, [r3, r7, lsl #3]
 80084b2:	4650      	mov	r0, sl
 80084b4:	f7f7 fea6 	bl	8000204 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80084b8:	4581      	cmp	r9, r0
 80084ba:	bf28      	it	cs
 80084bc:	4681      	movcs	r9, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80084be:	4c47      	ldr	r4, [pc, #284]	; (80085dc <http_find_file+0x184>)
 80084c0:	464a      	mov	r2, r9
 80084c2:	4651      	mov	r1, sl
 80084c4:	19a0      	adds	r0, r4, r6
 80084c6:	f009 fe23 	bl	8012110 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80084ca:	44b1      	add	r9, r6
 80084cc:	2300      	movs	r3, #0
 80084ce:	f804 3009 	strb.w	r3, [r4, r9]
        file_name = http_uri_buf;
 80084d2:	46a1      	mov	r9, r4
 80084d4:	e002      	b.n	80084dc <http_find_file+0x84>
        file_name = httpd_default_filenames[loop].name;
 80084d6:	4b42      	ldr	r3, [pc, #264]	; (80085e0 <http_find_file+0x188>)
 80084d8:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 80084dc:	462c      	mov	r4, r5
 80084de:	4649      	mov	r1, r9
 80084e0:	4628      	mov	r0, r5
 80084e2:	f7ff f8f1 	bl	80076c8 <fs_open>
      if (err == ERR_OK) {
 80084e6:	b150      	cbz	r0, 80084fe <http_find_file+0xa6>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80084e8:	3701      	adds	r7, #1
 80084ea:	2f04      	cmp	r7, #4
 80084ec:	d80e      	bhi.n	800850c <http_find_file+0xb4>
      if (copy_len > 0) {
 80084ee:	2e00      	cmp	r6, #0
 80084f0:	d0f1      	beq.n	80084d6 <http_find_file+0x7e>
        if (len_left > 0) {
 80084f2:	f1d6 093f 	rsbs	r9, r6, #63	; 0x3f
 80084f6:	d1d9      	bne.n	80084ac <http_find_file+0x54>
        file_name = http_uri_buf;
 80084f8:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80085dc <http_find_file+0x184>
 80084fc:	e7ee      	b.n	80084dc <http_find_file+0x84>
        uri = file_name;
 80084fe:	f8cd 900c 	str.w	r9, [sp, #12]
        tag_check = httpd_default_filenames[loop].shtml;
 8008502:	4b37      	ldr	r3, [pc, #220]	; (80085e0 <http_find_file+0x188>)
 8008504:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008508:	793e      	ldrb	r6, [r7, #4]
        break;
 800850a:	e004      	b.n	8008516 <http_find_file+0xbe>
  u8_t tag_check = 0;
 800850c:	2600      	movs	r6, #0
  struct fs_file *file = NULL;
 800850e:	4634      	mov	r4, r6
 8008510:	e001      	b.n	8008516 <http_find_file+0xbe>
  u8_t tag_check = 0;
 8008512:	2600      	movs	r6, #0
  struct fs_file *file = NULL;
 8008514:	4634      	mov	r4, r6
  if (file == NULL) {
 8008516:	b16c      	cbz	r4, 8008534 <http_find_file+0xdc>
  char *params = NULL;
 8008518:	2700      	movs	r7, #0
  if (file == NULL) {
 800851a:	2c00      	cmp	r4, #0
 800851c:	d057      	beq.n	80085ce <http_find_file+0x176>
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800851e:	9701      	str	r7, [sp, #4]
 8008520:	9600      	str	r6, [sp, #0]
 8008522:	9b03      	ldr	r3, [sp, #12]
 8008524:	4642      	mov	r2, r8
 8008526:	4621      	mov	r1, r4
 8008528:	4628      	mov	r0, r5
 800852a:	f7ff ff29 	bl	8008380 <http_init_file>
}
 800852e:	b005      	add	sp, #20
 8008530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    params = (char *)strchr(uri, '?');
 8008534:	213f      	movs	r1, #63	; 0x3f
 8008536:	9803      	ldr	r0, [sp, #12]
 8008538:	f009 fedd 	bl	80122f6 <strchr>
    if (params != NULL) {
 800853c:	4607      	mov	r7, r0
 800853e:	b110      	cbz	r0, 8008546 <http_find_file+0xee>
      *params = '\0';
 8008540:	2300      	movs	r3, #0
 8008542:	f807 3b01 	strb.w	r3, [r7], #1
    if (httpd_num_cgis && httpd_cgis) {
 8008546:	4b27      	ldr	r3, [pc, #156]	; (80085e4 <http_find_file+0x18c>)
 8008548:	f8d3 9000 	ldr.w	r9, [r3]
 800854c:	f1b9 0f00 	cmp.w	r9, #0
 8008550:	d023      	beq.n	800859a <http_find_file+0x142>
 8008552:	4b25      	ldr	r3, [pc, #148]	; (80085e8 <http_find_file+0x190>)
 8008554:	f8d3 a000 	ldr.w	sl, [r3]
 8008558:	f1ba 0f00 	cmp.w	sl, #0
 800855c:	d01d      	beq.n	800859a <http_find_file+0x142>
 800855e:	2400      	movs	r4, #0
      for (i = 0; i < httpd_num_cgis; i++) {
 8008560:	454c      	cmp	r4, r9
 8008562:	da1a      	bge.n	800859a <http_find_file+0x142>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8008564:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8008568:	f85a 1034 	ldr.w	r1, [sl, r4, lsl #3]
 800856c:	9803      	ldr	r0, [sp, #12]
 800856e:	f7f7 fe3f 	bl	80001f0 <strcmp>
 8008572:	b108      	cbz	r0, 8008578 <http_find_file+0x120>
      for (i = 0; i < httpd_num_cgis; i++) {
 8008574:	3401      	adds	r4, #1
 8008576:	e7f3      	b.n	8008560 <http_find_file+0x108>
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8008578:	4639      	mov	r1, r7
 800857a:	4628      	mov	r0, r5
 800857c:	f7ff fdb0 	bl	80080e0 <extract_uri_parameters>
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8008580:	4b19      	ldr	r3, [pc, #100]	; (80085e8 <http_find_file+0x190>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	449b      	add	fp, r3
 8008586:	f8db 9004 	ldr.w	r9, [fp, #4]
 800858a:	f105 0370 	add.w	r3, r5, #112	; 0x70
 800858e:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8008592:	4601      	mov	r1, r0
 8008594:	4620      	mov	r0, r4
 8008596:	47c8      	blx	r9
 8008598:	9003      	str	r0, [sp, #12]
    err = fs_open(&hs->file_handle, uri);
 800859a:	462c      	mov	r4, r5
 800859c:	9903      	ldr	r1, [sp, #12]
 800859e:	4628      	mov	r0, r5
 80085a0:	f7ff f892 	bl	80076c8 <fs_open>
    if (err == ERR_OK) {
 80085a4:	b938      	cbnz	r0, 80085b6 <http_find_file+0x15e>
    if (file != NULL) {
 80085a6:	2c00      	cmp	r4, #0
 80085a8:	d0b7      	beq.n	800851a <http_find_file+0xc2>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80085aa:	7c23      	ldrb	r3, [r4, #16]
 80085ac:	f013 0f08 	tst.w	r3, #8
 80085b0:	d007      	beq.n	80085c2 <http_find_file+0x16a>
        tag_check = 1;
 80085b2:	2601      	movs	r6, #1
 80085b4:	e7b1      	b.n	800851a <http_find_file+0xc2>
      file = http_get_404_file(hs, &uri);
 80085b6:	a903      	add	r1, sp, #12
 80085b8:	4628      	mov	r0, r5
 80085ba:	f7ff fd6f 	bl	800809c <http_get_404_file>
 80085be:	4604      	mov	r4, r0
 80085c0:	e7f1      	b.n	80085a6 <http_find_file+0x14e>
        tag_check = http_uri_is_ssi(file, uri);
 80085c2:	9903      	ldr	r1, [sp, #12]
 80085c4:	4620      	mov	r0, r4
 80085c6:	f7ff fdc9 	bl	800815c <http_uri_is_ssi>
 80085ca:	4606      	mov	r6, r0
 80085cc:	e7a5      	b.n	800851a <http_find_file+0xc2>
    file = http_get_404_file(hs, &uri);
 80085ce:	a903      	add	r1, sp, #12
 80085d0:	4628      	mov	r0, r5
 80085d2:	f7ff fd63 	bl	800809c <http_get_404_file>
 80085d6:	4604      	mov	r4, r0
 80085d8:	e7a1      	b.n	800851e <http_find_file+0xc6>
 80085da:	bf00      	nop
 80085dc:	20006898 	.word	0x20006898
 80085e0:	08067340 	.word	0x08067340
 80085e4:	200068dc 	.word	0x200068dc
 80085e8:	200068d8 	.word	0x200068d8

080085ec <http_parse_request>:
{
 80085ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f0:	460c      	mov	r4, r1
  LWIP_ASSERT("p != NULL", p != NULL);
 80085f2:	4605      	mov	r5, r0
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d051      	beq.n	800869c <http_parse_request+0xb0>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80085f8:	2c00      	cmp	r4, #0
 80085fa:	d057      	beq.n	80086ac <http_parse_request+0xc0>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80085fc:	6963      	ldr	r3, [r4, #20]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f040 8082 	bne.w	8008708 <http_parse_request+0x11c>
 8008604:	69a3      	ldr	r3, [r4, #24]
 8008606:	2b00      	cmp	r3, #0
 8008608:	f040 8082 	bne.w	8008710 <http_parse_request+0x124>
  if (hs->req == NULL) {
 800860c:	6a20      	ldr	r0, [r4, #32]
 800860e:	2800      	cmp	r0, #0
 8008610:	d054      	beq.n	80086bc <http_parse_request+0xd0>
    pbuf_cat(hs->req, p);
 8008612:	4629      	mov	r1, r5
 8008614:	f004 fdd0 	bl	800d1b8 <pbuf_cat>
  pbuf_ref(p);
 8008618:	4628      	mov	r0, r5
 800861a:	f004 fdb1 	bl	800d180 <pbuf_ref>
  if (hs->req->next != NULL) {
 800861e:	6a20      	ldr	r0, [r4, #32]
 8008620:	6803      	ldr	r3, [r0, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d04c      	beq.n	80086c0 <http_parse_request+0xd4>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8008626:	8905      	ldrh	r5, [r0, #8]
 8008628:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800862c:	429d      	cmp	r5, r3
 800862e:	bf28      	it	cs
 8008630:	461d      	movcs	r5, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8008632:	4e3d      	ldr	r6, [pc, #244]	; (8008728 <http_parse_request+0x13c>)
 8008634:	2300      	movs	r3, #0
 8008636:	462a      	mov	r2, r5
 8008638:	4631      	mov	r1, r6
 800863a:	f004 fe95 	bl	800d368 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 800863e:	2d06      	cmp	r5, #6
 8008640:	d91e      	bls.n	8008680 <http_parse_request+0x94>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8008642:	46a9      	mov	r9, r5
 8008644:	462a      	mov	r2, r5
 8008646:	4939      	ldr	r1, [pc, #228]	; (800872c <http_parse_request+0x140>)
 8008648:	4630      	mov	r0, r6
 800864a:	f000 fd86 	bl	800915a <lwip_strnstr>
    if (crlf != NULL) {
 800864e:	b1b8      	cbz	r0, 8008680 <http_parse_request+0x94>
      if (!strncmp(data, "GET ", 4)) {
 8008650:	2204      	movs	r2, #4
 8008652:	4937      	ldr	r1, [pc, #220]	; (8008730 <http_parse_request+0x144>)
 8008654:	4630      	mov	r0, r6
 8008656:	f009 fe64 	bl	8012322 <strncmp>
 800865a:	4682      	mov	sl, r0
 800865c:	2800      	cmp	r0, #0
 800865e:	d132      	bne.n	80086c6 <http_parse_request+0xda>
        sp1 = data + 3;
 8008660:	f106 0803 	add.w	r8, r6, #3
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8008664:	1d37      	adds	r7, r6, #4
 8008666:	3d04      	subs	r5, #4
 8008668:	b2ad      	uxth	r5, r5
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800866a:	462a      	mov	r2, r5
 800866c:	4931      	ldr	r1, [pc, #196]	; (8008734 <http_parse_request+0x148>)
 800866e:	4638      	mov	r0, r7
 8008670:	f000 fd73 	bl	800915a <lwip_strnstr>
      if (sp2 == NULL) {
 8008674:	4603      	mov	r3, r0
 8008676:	b360      	cbz	r0, 80086d2 <http_parse_request+0xe6>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8008678:	1bdd      	subs	r5, r3, r7
      if ((sp2 != 0) && (sp2 > sp1)) {
 800867a:	b10b      	cbz	r3, 8008680 <http_parse_request+0x94>
 800867c:	4543      	cmp	r3, r8
 800867e:	d831      	bhi.n	80086e4 <http_parse_request+0xf8>
  clen = pbuf_clen(hs->req);
 8008680:	6a20      	ldr	r0, [r4, #32]
 8008682:	f004 fd73 	bl	800d16c <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8008686:	6a23      	ldr	r3, [r4, #32]
 8008688:	891b      	ldrh	r3, [r3, #8]
 800868a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800868e:	d243      	bcs.n	8008718 <http_parse_request+0x12c>
 8008690:	2805      	cmp	r0, #5
 8008692:	d945      	bls.n	8008720 <http_parse_request+0x134>
    return http_find_error_file(hs, 400);
 8008694:	f06f 000f 	mvn.w	r0, #15
 8008698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800869c:	4b26      	ldr	r3, [pc, #152]	; (8008738 <http_parse_request+0x14c>)
 800869e:	f240 72ae 	movw	r2, #1966	; 0x7ae
 80086a2:	4926      	ldr	r1, [pc, #152]	; (800873c <http_parse_request+0x150>)
 80086a4:	4826      	ldr	r0, [pc, #152]	; (8008740 <http_parse_request+0x154>)
 80086a6:	f009 fd61 	bl	801216c <iprintf>
 80086aa:	e7a5      	b.n	80085f8 <http_parse_request+0xc>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80086ac:	4b22      	ldr	r3, [pc, #136]	; (8008738 <http_parse_request+0x14c>)
 80086ae:	f240 72af 	movw	r2, #1967	; 0x7af
 80086b2:	4924      	ldr	r1, [pc, #144]	; (8008744 <http_parse_request+0x158>)
 80086b4:	4822      	ldr	r0, [pc, #136]	; (8008740 <http_parse_request+0x154>)
 80086b6:	f009 fd59 	bl	801216c <iprintf>
 80086ba:	e79f      	b.n	80085fc <http_parse_request+0x10>
    hs->req = p;
 80086bc:	6225      	str	r5, [r4, #32]
 80086be:	e7ab      	b.n	8008618 <http_parse_request+0x2c>
    data = (char *)p->payload;
 80086c0:	686e      	ldr	r6, [r5, #4]
    data_len = p->len;
 80086c2:	896d      	ldrh	r5, [r5, #10]
 80086c4:	e7bb      	b.n	800863e <http_parse_request+0x52>
        data[4] = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	7133      	strb	r3, [r6, #4]
        return http_find_error_file(hs, 501);
 80086ca:	f06f 000f 	mvn.w	r0, #15
 80086ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80086d2:	462a      	mov	r2, r5
 80086d4:	4915      	ldr	r1, [pc, #84]	; (800872c <http_parse_request+0x140>)
 80086d6:	4638      	mov	r0, r7
 80086d8:	f000 fd3f 	bl	800915a <lwip_strnstr>
 80086dc:	4603      	mov	r3, r0
        is_09 = 1;
 80086de:	f04f 0a01 	mov.w	sl, #1
 80086e2:	e7c9      	b.n	8008678 <http_parse_request+0x8c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80086e4:	464a      	mov	r2, r9
 80086e6:	4918      	ldr	r1, [pc, #96]	; (8008748 <http_parse_request+0x15c>)
 80086e8:	4630      	mov	r0, r6
 80086ea:	f000 fd36 	bl	800915a <lwip_strnstr>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d0c6      	beq.n	8008680 <http_parse_request+0x94>
          *sp1 = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	70f3      	strb	r3, [r6, #3]
          uri[uri_len] = 0;
 80086f6:	b2ad      	uxth	r5, r5
 80086f8:	557b      	strb	r3, [r7, r5]
            return http_find_file(hs, uri, is_09);
 80086fa:	4652      	mov	r2, sl
 80086fc:	4639      	mov	r1, r7
 80086fe:	4620      	mov	r0, r4
 8008700:	f7ff feaa 	bl	8008458 <http_find_file>
 8008704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_USE;
 8008708:	f06f 0007 	mvn.w	r0, #7
 800870c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008710:	f06f 0007 	mvn.w	r0, #7
 8008714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return http_find_error_file(hs, 400);
 8008718:	f06f 000f 	mvn.w	r0, #15
 800871c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_INPROGRESS;
 8008720:	f06f 0004 	mvn.w	r0, #4
}
 8008724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008728:	200068e4 	.word	0x200068e4
 800872c:	08067648 	.word	0x08067648
 8008730:	080672a4 	.word	0x080672a4
 8008734:	080672ac 	.word	0x080672ac
 8008738:	08067384 	.word	0x08067384
 800873c:	08067e60 	.word	0x08067e60
 8008740:	0801335c 	.word	0x0801335c
 8008744:	080671d0 	.word	0x080671d0
 8008748:	0806754c 	.word	0x0806754c

0800874c <http_recv>:
{
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	4606      	mov	r6, r0
 8008750:	460d      	mov	r5, r1
 8008752:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8008754:	b95b      	cbnz	r3, 800876e <http_recv+0x22>
 8008756:	b152      	cbz	r2, 800876e <http_recv+0x22>
 8008758:	b148      	cbz	r0, 800876e <http_recv+0x22>
    altcp_recved(pcb, p->tot_len);
 800875a:	8911      	ldrh	r1, [r2, #8]
 800875c:	4628      	mov	r0, r5
 800875e:	f005 f8f7 	bl	800d950 <tcp_recved>
    if (hs->handle == NULL) {
 8008762:	6973      	ldr	r3, [r6, #20]
 8008764:	b18b      	cbz	r3, 800878a <http_recv+0x3e>
      pbuf_free(p);
 8008766:	4620      	mov	r0, r4
 8008768:	f004 fb96 	bl	800ce98 <pbuf_free>
 800876c:	e00b      	b.n	8008786 <http_recv+0x3a>
    if (p != NULL) {
 800876e:	b134      	cbz	r4, 800877e <http_recv+0x32>
      altcp_recved(pcb, p->tot_len);
 8008770:	8921      	ldrh	r1, [r4, #8]
 8008772:	4628      	mov	r0, r5
 8008774:	f005 f8ec 	bl	800d950 <tcp_recved>
      pbuf_free(p);
 8008778:	4620      	mov	r0, r4
 800877a:	f004 fb8d 	bl	800ce98 <pbuf_free>
    http_close_conn(pcb, hs);
 800877e:	4631      	mov	r1, r6
 8008780:	4628      	mov	r0, r5
 8008782:	f7ff fb5d 	bl	8007e40 <http_close_conn>
}
 8008786:	2000      	movs	r0, #0
 8008788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      err_t parsed = http_parse_request(p, hs, pcb);
 800878a:	462a      	mov	r2, r5
 800878c:	4631      	mov	r1, r6
 800878e:	4620      	mov	r0, r4
 8008790:	f7ff ff2c 	bl	80085ec <http_parse_request>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8008794:	4607      	mov	r7, r0
 8008796:	b178      	cbz	r0, 80087b8 <http_recv+0x6c>
 8008798:	f110 0f05 	cmn.w	r0, #5
 800879c:	d00c      	beq.n	80087b8 <http_recv+0x6c>
 800879e:	f110 0f10 	cmn.w	r0, #16
 80087a2:	d009      	beq.n	80087b8 <http_recv+0x6c>
 80087a4:	f110 0f08 	cmn.w	r0, #8
 80087a8:	d006      	beq.n	80087b8 <http_recv+0x6c>
 80087aa:	4b10      	ldr	r3, [pc, #64]	; (80087ec <http_recv+0xa0>)
 80087ac:	f640 2205 	movw	r2, #2565	; 0xa05
 80087b0:	490f      	ldr	r1, [pc, #60]	; (80087f0 <http_recv+0xa4>)
 80087b2:	4810      	ldr	r0, [pc, #64]	; (80087f4 <http_recv+0xa8>)
 80087b4:	f009 fcda 	bl	801216c <iprintf>
      if (parsed != ERR_INPROGRESS) {
 80087b8:	f117 0f05 	cmn.w	r7, #5
 80087bc:	d005      	beq.n	80087ca <http_recv+0x7e>
        if (hs->req != NULL) {
 80087be:	6a30      	ldr	r0, [r6, #32]
 80087c0:	b118      	cbz	r0, 80087ca <http_recv+0x7e>
          pbuf_free(hs->req);
 80087c2:	f004 fb69 	bl	800ce98 <pbuf_free>
          hs->req = NULL;
 80087c6:	2300      	movs	r3, #0
 80087c8:	6233      	str	r3, [r6, #32]
      pbuf_free(p);
 80087ca:	4620      	mov	r0, r4
 80087cc:	f004 fb64 	bl	800ce98 <pbuf_free>
      if (parsed == ERR_OK) {
 80087d0:	b13f      	cbz	r7, 80087e2 <http_recv+0x96>
      } else if (parsed == ERR_ARG) {
 80087d2:	f117 0f10 	cmn.w	r7, #16
 80087d6:	d1d6      	bne.n	8008786 <http_recv+0x3a>
        http_close_conn(pcb, hs);
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	f7ff fb30 	bl	8007e40 <http_close_conn>
 80087e0:	e7d1      	b.n	8008786 <http_recv+0x3a>
          http_send(pcb, hs);
 80087e2:	4631      	mov	r1, r6
 80087e4:	4628      	mov	r0, r5
 80087e6:	f7ff fbe8 	bl	8007fba <http_send>
 80087ea:	e7cc      	b.n	8008786 <http_recv+0x3a>
 80087ec:	08067384 	.word	0x08067384
 80087f0:	080672b0 	.word	0x080672b0
 80087f4:	0801335c 	.word	0x0801335c

080087f8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80087f8:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80087fa:	202e      	movs	r0, #46	; 0x2e
 80087fc:	f005 ff74 	bl	800e6e8 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8008800:	4604      	mov	r4, r0
 8008802:	b120      	cbz	r0, 800880e <httpd_init+0x16>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8008804:	2150      	movs	r1, #80	; 0x50
 8008806:	4620      	mov	r0, r4
 8008808:	f7fe ff88 	bl	800771c <httpd_init_pcb>
 800880c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800880e:	4b04      	ldr	r3, [pc, #16]	; (8008820 <httpd_init+0x28>)
 8008810:	f640 2272 	movw	r2, #2674	; 0xa72
 8008814:	4903      	ldr	r1, [pc, #12]	; (8008824 <httpd_init+0x2c>)
 8008816:	4804      	ldr	r0, [pc, #16]	; (8008828 <httpd_init+0x30>)
 8008818:	f009 fca8 	bl	801216c <iprintf>
 800881c:	e7f2      	b.n	8008804 <httpd_init+0xc>
 800881e:	bf00      	nop
 8008820:	08067384 	.word	0x08067384
 8008824:	08067368 	.word	0x08067368
 8008828:	0801335c 	.word	0x0801335c

0800882c <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	460c      	mov	r4, r1
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8008830:	4605      	mov	r5, r0
 8008832:	b130      	cbz	r0, 8008842 <http_set_cgi_handlers+0x16>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8008834:	2c00      	cmp	r4, #0
 8008836:	dd0c      	ble.n	8008852 <http_set_cgi_handlers+0x26>

  httpd_cgis = cgis;
 8008838:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <http_set_cgi_handlers+0x38>)
 800883a:	601d      	str	r5, [r3, #0]
  httpd_num_cgis = num_handlers;
 800883c:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <http_set_cgi_handlers+0x3c>)
 800883e:	601c      	str	r4, [r3, #0]
 8008840:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8008842:	4b0a      	ldr	r3, [pc, #40]	; (800886c <http_set_cgi_handlers+0x40>)
 8008844:	f640 22b2 	movw	r2, #2738	; 0xab2
 8008848:	4909      	ldr	r1, [pc, #36]	; (8008870 <http_set_cgi_handlers+0x44>)
 800884a:	480a      	ldr	r0, [pc, #40]	; (8008874 <http_set_cgi_handlers+0x48>)
 800884c:	f009 fc8e 	bl	801216c <iprintf>
 8008850:	e7f0      	b.n	8008834 <http_set_cgi_handlers+0x8>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8008852:	4b06      	ldr	r3, [pc, #24]	; (800886c <http_set_cgi_handlers+0x40>)
 8008854:	f640 22b3 	movw	r2, #2739	; 0xab3
 8008858:	4907      	ldr	r1, [pc, #28]	; (8008878 <http_set_cgi_handlers+0x4c>)
 800885a:	4806      	ldr	r0, [pc, #24]	; (8008874 <http_set_cgi_handlers+0x48>)
 800885c:	f009 fc86 	bl	801216c <iprintf>
 8008860:	e7ea      	b.n	8008838 <http_set_cgi_handlers+0xc>
 8008862:	bf00      	nop
 8008864:	200068d8 	.word	0x200068d8
 8008868:	200068dc 	.word	0x200068dc
 800886c:	08067384 	.word	0x08067384
 8008870:	080672f4 	.word	0x080672f4
 8008874:	0801335c 	.word	0x0801335c
 8008878:	08067304 	.word	0x08067304

0800887c <lwiperf_list_add>:

/** Add an iperf session to the 'active' list */
static void
lwiperf_list_add(lwiperf_state_base_t *item)
{
  item->next = lwiperf_all_connections;
 800887c:	4b02      	ldr	r3, [pc, #8]	; (8008888 <lwiperf_list_add+0xc>)
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	6002      	str	r2, [r0, #0]
  lwiperf_all_connections = item;
 8008882:	6018      	str	r0, [r3, #0]
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	20006cec 	.word	0x20006cec

0800888c <lwiperf_list_find>:

static lwiperf_state_base_t *
lwiperf_list_find(lwiperf_state_base_t *item)
{
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800888c:	4b04      	ldr	r3, [pc, #16]	; (80088a0 <lwiperf_list_find+0x14>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	b123      	cbz	r3, 800889c <lwiperf_list_find+0x10>
    if (iter == item) {
 8008892:	4283      	cmp	r3, r0
 8008894:	d001      	beq.n	800889a <lwiperf_list_find+0xe>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	e7fa      	b.n	8008890 <lwiperf_list_find+0x4>
      return item;
 800889a:	4603      	mov	r3, r0
    }
  }
  return NULL;
}
 800889c:	4618      	mov	r0, r3
 800889e:	4770      	bx	lr
 80088a0:	20006cec 	.word	0x20006cec

080088a4 <lwiperf_list_remove>:
{
 80088a4:	b538      	push	{r3, r4, r5, lr}
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80088a6:	4b10      	ldr	r3, [pc, #64]	; (80088e8 <lwiperf_list_remove+0x44>)
 80088a8:	681b      	ldr	r3, [r3, #0]
  lwiperf_state_base_t *prev = NULL;
 80088aa:	2200      	movs	r2, #0
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80088ac:	b1d3      	cbz	r3, 80088e4 <lwiperf_list_remove+0x40>
    if (iter == item) {
 80088ae:	4283      	cmp	r3, r0
 80088b0:	d002      	beq.n	80088b8 <lwiperf_list_remove+0x14>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80088b2:	461a      	mov	r2, r3
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	e7f9      	b.n	80088ac <lwiperf_list_remove+0x8>
      if (prev == NULL) {
 80088b8:	b122      	cbz	r2, 80088c4 <lwiperf_list_remove+0x20>
        prev->next = iter->next;
 80088ba:	6819      	ldr	r1, [r3, #0]
 80088bc:	6011      	str	r1, [r2, #0]
 80088be:	4605      	mov	r5, r0
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80088c0:	681c      	ldr	r4, [r3, #0]
 80088c2:	e004      	b.n	80088ce <lwiperf_list_remove+0x2a>
        lwiperf_all_connections = iter->next;
 80088c4:	6819      	ldr	r1, [r3, #0]
 80088c6:	4a08      	ldr	r2, [pc, #32]	; (80088e8 <lwiperf_list_remove+0x44>)
 80088c8:	6011      	str	r1, [r2, #0]
 80088ca:	e7f8      	b.n	80088be <lwiperf_list_remove+0x1a>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80088cc:	6824      	ldr	r4, [r4, #0]
 80088ce:	b144      	cbz	r4, 80088e2 <lwiperf_list_remove+0x3e>
        LWIP_ASSERT("duplicate entry", iter != item);
 80088d0:	42ac      	cmp	r4, r5
 80088d2:	d1fb      	bne.n	80088cc <lwiperf_list_remove+0x28>
 80088d4:	4b05      	ldr	r3, [pc, #20]	; (80088ec <lwiperf_list_remove+0x48>)
 80088d6:	22ce      	movs	r2, #206	; 0xce
 80088d8:	4905      	ldr	r1, [pc, #20]	; (80088f0 <lwiperf_list_remove+0x4c>)
 80088da:	4806      	ldr	r0, [pc, #24]	; (80088f4 <lwiperf_list_remove+0x50>)
 80088dc:	f009 fc46 	bl	801216c <iprintf>
 80088e0:	e7f4      	b.n	80088cc <lwiperf_list_remove+0x28>
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	bd38      	pop	{r3, r4, r5, pc}
 80088e6:	bf00      	nop
 80088e8:	20006cec 	.word	0x20006cec
 80088ec:	080676a4 	.word	0x080676a4
 80088f0:	080676e8 	.word	0x080676e8
 80088f4:	0801335c 	.word	0x0801335c

080088f8 <lwiperf_start_tcp_server_impl>:
}

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
                                           lwiperf_report_fn report_fn, void *report_arg,
                                           lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **state)
{
 80088f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088fc:	4605      	mov	r5, r0
 80088fe:	4689      	mov	r9, r1
 8008900:	4690      	mov	r8, r2
 8008902:	461f      	mov	r7, r3
 8008904:	9e09      	ldr	r6, [sp, #36]	; 0x24
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("state != NULL", state != NULL);
 8008906:	b30e      	cbz	r6, 800894c <lwiperf_start_tcp_server_impl+0x54>

  if (local_addr == NULL) {
 8008908:	2d00      	cmp	r5, #0
 800890a:	d042      	beq.n	8008992 <lwiperf_start_tcp_server_impl+0x9a>
    return ERR_ARG;
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800890c:	2048      	movs	r0, #72	; 0x48
 800890e:	f003 fe93 	bl	800c638 <mem_malloc>
  if (s == NULL) {
 8008912:	4604      	mov	r4, r0
 8008914:	2800      	cmp	r0, #0
 8008916:	d03f      	beq.n	8008998 <lwiperf_start_tcp_server_impl+0xa0>
    return ERR_MEM;
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 8008918:	2248      	movs	r2, #72	; 0x48
 800891a:	2100      	movs	r1, #0
 800891c:	f009 fc1d 	bl	801215a <memset>
  s->base.tcp = 1;
 8008920:	2301      	movs	r3, #1
 8008922:	7123      	strb	r3, [r4, #4]
  s->base.server = 1;
 8008924:	7163      	strb	r3, [r4, #5]
  s->base.related_master_state = related_master_state;
 8008926:	9b08      	ldr	r3, [sp, #32]
 8008928:	60a3      	str	r3, [r4, #8]
  s->report_fn = report_fn;
 800892a:	f8c4 8018 	str.w	r8, [r4, #24]
  s->report_arg = report_arg;
 800892e:	61e7      	str	r7, [r4, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8008930:	202e      	movs	r0, #46	; 0x2e
 8008932:	f005 fed9 	bl	800e6e8 <tcp_new_ip_type>
  if (pcb == NULL) {
 8008936:	4607      	mov	r7, r0
 8008938:	b388      	cbz	r0, 800899e <lwiperf_start_tcp_server_impl+0xa6>
    return ERR_MEM;
  }
  err = tcp_bind(pcb, local_addr, local_port);
 800893a:	464a      	mov	r2, r9
 800893c:	4629      	mov	r1, r5
 800893e:	f004 fef1 	bl	800d724 <tcp_bind>
  if (err != ERR_OK) {
 8008942:	4605      	mov	r5, r0
 8008944:	b150      	cbz	r0, 800895c <lwiperf_start_tcp_server_impl+0x64>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);

  lwiperf_list_add(&s->base);
  *state = s;
  return ERR_OK;
}
 8008946:	4628      	mov	r0, r5
 8008948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("state != NULL", state != NULL);
 800894c:	4b15      	ldr	r3, [pc, #84]	; (80089a4 <lwiperf_start_tcp_server_impl+0xac>)
 800894e:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8008952:	4915      	ldr	r1, [pc, #84]	; (80089a8 <lwiperf_start_tcp_server_impl+0xb0>)
 8008954:	4815      	ldr	r0, [pc, #84]	; (80089ac <lwiperf_start_tcp_server_impl+0xb4>)
 8008956:	f009 fc09 	bl	801216c <iprintf>
 800895a:	e7d5      	b.n	8008908 <lwiperf_start_tcp_server_impl+0x10>
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 800895c:	2101      	movs	r1, #1
 800895e:	4638      	mov	r0, r7
 8008960:	f004 ffb6 	bl	800d8d0 <tcp_listen_with_backlog>
 8008964:	60e0      	str	r0, [r4, #12]
  if (s->server_pcb == NULL) {
 8008966:	b158      	cbz	r0, 8008980 <lwiperf_start_tcp_server_impl+0x88>
  tcp_arg(s->server_pcb, s);
 8008968:	4621      	mov	r1, r4
 800896a:	f005 f859 	bl	800da20 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 800896e:	4910      	ldr	r1, [pc, #64]	; (80089b0 <lwiperf_start_tcp_server_impl+0xb8>)
 8008970:	68e0      	ldr	r0, [r4, #12]
 8008972:	f005 f8a5 	bl	800dac0 <tcp_accept>
  lwiperf_list_add(&s->base);
 8008976:	4620      	mov	r0, r4
 8008978:	f7ff ff80 	bl	800887c <lwiperf_list_add>
  *state = s;
 800897c:	6034      	str	r4, [r6, #0]
  return ERR_OK;
 800897e:	e7e2      	b.n	8008946 <lwiperf_start_tcp_server_impl+0x4e>
      tcp_close(pcb);
 8008980:	4638      	mov	r0, r7
 8008982:	f005 fc3d 	bl	800e200 <tcp_close>
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 8008986:	4620      	mov	r0, r4
 8008988:	f003 fd0a 	bl	800c3a0 <mem_free>
    return ERR_MEM;
 800898c:	f04f 35ff 	mov.w	r5, #4294967295
 8008990:	e7d9      	b.n	8008946 <lwiperf_start_tcp_server_impl+0x4e>
    return ERR_ARG;
 8008992:	f06f 050f 	mvn.w	r5, #15
 8008996:	e7d6      	b.n	8008946 <lwiperf_start_tcp_server_impl+0x4e>
    return ERR_MEM;
 8008998:	f04f 35ff 	mov.w	r5, #4294967295
 800899c:	e7d3      	b.n	8008946 <lwiperf_start_tcp_server_impl+0x4e>
    return ERR_MEM;
 800899e:	f04f 35ff 	mov.w	r5, #4294967295
 80089a2:	e7d0      	b.n	8008946 <lwiperf_start_tcp_server_impl+0x4e>
 80089a4:	080676a4 	.word	0x080676a4
 80089a8:	080676f8 	.word	0x080676f8
 80089ac:	0801335c 	.word	0x0801335c
 80089b0:	08008a7d 	.word	0x08008a7d

080089b4 <lwip_tcp_conn_report>:
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 80089b4:	b318      	cbz	r0, 80089fe <lwip_tcp_conn_report+0x4a>
{
 80089b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	4604      	mov	r4, r0
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 80089be:	6983      	ldr	r3, [r0, #24]
 80089c0:	b1d3      	cbz	r3, 80089f8 <lwip_tcp_conn_report+0x44>
 80089c2:	460f      	mov	r7, r1
    now = sys_now();
 80089c4:	f7f8 fe0c 	bl	80015e0 <sys_now>
    duration_ms = now - conn->time_started;
 80089c8:	6963      	ldr	r3, [r4, #20]
    if (duration_ms == 0) {
 80089ca:	1ac5      	subs	r5, r0, r3
 80089cc:	d004      	beq.n	80089d8 <lwip_tcp_conn_report+0x24>
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80089ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80089d0:	fbb6 f6f5 	udiv	r6, r6, r5
 80089d4:	00f6      	lsls	r6, r6, #3
 80089d6:	e000      	b.n	80089da <lwip_tcp_conn_report+0x26>
      bandwidth_kbitpsec = 0;
 80089d8:	462e      	mov	r6, r5
    conn->report_fn(conn->report_arg, report_type,
 80089da:	f8d4 8018 	ldr.w	r8, [r4, #24]
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 80089de:	6922      	ldr	r2, [r4, #16]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 80089e0:	1d11      	adds	r1, r2, #4
    conn->report_fn(conn->report_arg, report_type,
 80089e2:	8ad3      	ldrh	r3, [r2, #22]
 80089e4:	69e0      	ldr	r0, [r4, #28]
 80089e6:	9604      	str	r6, [sp, #16]
 80089e8:	9503      	str	r5, [sp, #12]
 80089ea:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80089ec:	9402      	str	r4, [sp, #8]
 80089ee:	8b14      	ldrh	r4, [r2, #24]
 80089f0:	9401      	str	r4, [sp, #4]
 80089f2:	9100      	str	r1, [sp, #0]
 80089f4:	4639      	mov	r1, r7
 80089f6:	47c0      	blx	r8
}
 80089f8:	b006      	add	sp, #24
 80089fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089fe:	4770      	bx	lr

08008a00 <lwiperf_tcp_close>:
{
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4604      	mov	r4, r0
 8008a04:	460d      	mov	r5, r1
  lwiperf_list_remove(&conn->base);
 8008a06:	f7ff ff4d 	bl	80088a4 <lwiperf_list_remove>
  lwip_tcp_conn_report(conn, report_type);
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f7ff ffd1 	bl	80089b4 <lwip_tcp_conn_report>
  if (conn->conn_pcb != NULL) {
 8008a12:	6920      	ldr	r0, [r4, #16]
 8008a14:	b1f8      	cbz	r0, 8008a56 <lwiperf_tcp_close+0x56>
    tcp_arg(conn->conn_pcb, NULL);
 8008a16:	2100      	movs	r1, #0
 8008a18:	f005 f802 	bl	800da20 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4611      	mov	r1, r2
 8008a20:	6920      	ldr	r0, [r4, #16]
 8008a22:	f005 f855 	bl	800dad0 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 8008a26:	2100      	movs	r1, #0
 8008a28:	6920      	ldr	r0, [r4, #16]
 8008a2a:	f005 f817 	bl	800da5c <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 8008a2e:	2100      	movs	r1, #0
 8008a30:	6920      	ldr	r0, [r4, #16]
 8008a32:	f004 fff9 	bl	800da28 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8008a36:	2100      	movs	r1, #0
 8008a38:	6920      	ldr	r0, [r4, #16]
 8008a3a:	f005 f827 	bl	800da8c <tcp_err>
    err = tcp_close(conn->conn_pcb);
 8008a3e:	6920      	ldr	r0, [r4, #16]
 8008a40:	f005 fbde 	bl	800e200 <tcp_close>
    if (err != ERR_OK) {
 8008a44:	b918      	cbnz	r0, 8008a4e <lwiperf_tcp_close+0x4e>
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8008a46:	4620      	mov	r0, r4
 8008a48:	f003 fcaa 	bl	800c3a0 <mem_free>
 8008a4c:	bd38      	pop	{r3, r4, r5, pc}
      tcp_abort(conn->conn_pcb);
 8008a4e:	6920      	ldr	r0, [r4, #16]
 8008a50:	f005 fd38 	bl	800e4c4 <tcp_abort>
 8008a54:	e7f7      	b.n	8008a46 <lwiperf_tcp_close+0x46>
    err = tcp_close(conn->server_pcb);
 8008a56:	68e0      	ldr	r0, [r4, #12]
 8008a58:	f005 fbd2 	bl	800e200 <tcp_close>
    LWIP_ASSERT("error", err == ERR_OK);
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d0f2      	beq.n	8008a46 <lwiperf_tcp_close+0x46>
 8008a60:	4b03      	ldr	r3, [pc, #12]	; (8008a70 <lwiperf_tcp_close+0x70>)
 8008a62:	f240 120b 	movw	r2, #267	; 0x10b
 8008a66:	4903      	ldr	r1, [pc, #12]	; (8008a74 <lwiperf_tcp_close+0x74>)
 8008a68:	4803      	ldr	r0, [pc, #12]	; (8008a78 <lwiperf_tcp_close+0x78>)
 8008a6a:	f009 fb7f 	bl	801216c <iprintf>
 8008a6e:	e7ea      	b.n	8008a46 <lwiperf_tcp_close+0x46>
 8008a70:	080676a4 	.word	0x080676a4
 8008a74:	080677b0 	.word	0x080677b0
 8008a78:	0801335c 	.word	0x0801335c

08008a7c <lwiperf_tcp_accept>:
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	f040 8085 	bne.w	8008b8c <lwiperf_tcp_accept+0x110>
{
 8008a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a84:	4617      	mov	r7, r2
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 8008a86:	2900      	cmp	r1, #0
 8008a88:	f000 8083 	beq.w	8008b92 <lwiperf_tcp_accept+0x116>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	f000 8083 	beq.w	8008b98 <lwiperf_tcp_accept+0x11c>
 8008a92:	460e      	mov	r6, r1
 8008a94:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid session", s->base.server);
 8008a96:	7943      	ldrb	r3, [r0, #5]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d054      	beq.n	8008b46 <lwiperf_tcp_accept+0xca>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 8008a9c:	68e3      	ldr	r3, [r4, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d059      	beq.n	8008b56 <lwiperf_tcp_accept+0xda>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 8008aa2:	6923      	ldr	r3, [r4, #16]
 8008aa4:	b133      	cbz	r3, 8008ab4 <lwiperf_tcp_accept+0x38>
 8008aa6:	4b41      	ldr	r3, [pc, #260]	; (8008bac <lwiperf_tcp_accept+0x130>)
 8008aa8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008aac:	4940      	ldr	r1, [pc, #256]	; (8008bb0 <lwiperf_tcp_accept+0x134>)
 8008aae:	4841      	ldr	r0, [pc, #260]	; (8008bb4 <lwiperf_tcp_accept+0x138>)
 8008ab0:	f009 fb5c 	bl	801216c <iprintf>
  if (s->specific_remote) {
 8008ab4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d05c      	beq.n	8008b76 <lwiperf_tcp_accept+0xfa>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8008abc:	68a3      	ldr	r3, [r4, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d051      	beq.n	8008b66 <lwiperf_tcp_accept+0xea>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 8008ac2:	6872      	ldr	r2, [r6, #4]
 8008ac4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d169      	bne.n	8008b9e <lwiperf_tcp_accept+0x122>
  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8008aca:	2048      	movs	r0, #72	; 0x48
 8008acc:	f003 fdb4 	bl	800c638 <mem_malloc>
  if (conn == NULL) {
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d066      	beq.n	8008ba4 <lwiperf_tcp_accept+0x128>
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 8008ad6:	2248      	movs	r2, #72	; 0x48
 8008ad8:	2100      	movs	r1, #0
 8008ada:	f009 fb3e 	bl	801215a <memset>
  conn->base.tcp = 1;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	712b      	strb	r3, [r5, #4]
  conn->base.server = 1;
 8008ae2:	716b      	strb	r3, [r5, #5]
  conn->base.related_master_state = &s->base;
 8008ae4:	60ac      	str	r4, [r5, #8]
  conn->conn_pcb = newpcb;
 8008ae6:	612e      	str	r6, [r5, #16]
  conn->time_started = sys_now();
 8008ae8:	f7f8 fd7a 	bl	80015e0 <sys_now>
 8008aec:	6168      	str	r0, [r5, #20]
  conn->report_fn = s->report_fn;
 8008aee:	69a3      	ldr	r3, [r4, #24]
 8008af0:	61ab      	str	r3, [r5, #24]
  conn->report_arg = s->report_arg;
 8008af2:	69e3      	ldr	r3, [r4, #28]
 8008af4:	61eb      	str	r3, [r5, #28]
  tcp_arg(newpcb, conn);
 8008af6:	4629      	mov	r1, r5
 8008af8:	4630      	mov	r0, r6
 8008afa:	f004 ff91 	bl	800da20 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 8008afe:	492e      	ldr	r1, [pc, #184]	; (8008bb8 <lwiperf_tcp_accept+0x13c>)
 8008b00:	4630      	mov	r0, r6
 8008b02:	f004 ff91 	bl	800da28 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8008b06:	2202      	movs	r2, #2
 8008b08:	492c      	ldr	r1, [pc, #176]	; (8008bbc <lwiperf_tcp_accept+0x140>)
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f004 ffe0 	bl	800dad0 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 8008b10:	492b      	ldr	r1, [pc, #172]	; (8008bc0 <lwiperf_tcp_accept+0x144>)
 8008b12:	6928      	ldr	r0, [r5, #16]
 8008b14:	f004 ffba 	bl	800da8c <tcp_err>
  if (s->specific_remote) {
 8008b18:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008b1c:	b173      	cbz	r3, 8008b3c <lwiperf_tcp_accept+0xc0>
    conn->base.related_master_state = s->base.related_master_state;
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	60ab      	str	r3, [r5, #8]
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 8008b22:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8008b26:	b11b      	cbz	r3, 8008b30 <lwiperf_tcp_accept+0xb4>
 8008b28:	68a0      	ldr	r0, [r4, #8]
 8008b2a:	f7ff feaf 	bl	800888c <lwiperf_list_find>
 8008b2e:	b928      	cbnz	r0, 8008b3c <lwiperf_tcp_accept+0xc0>
      s->report_fn = NULL;
 8008b30:	2300      	movs	r3, #0
 8008b32:	61a3      	str	r3, [r4, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 8008b34:	2102      	movs	r1, #2
 8008b36:	4620      	mov	r0, r4
 8008b38:	f7ff ff62 	bl	8008a00 <lwiperf_tcp_close>
  lwiperf_list_add(&conn->base);
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f7ff fe9d 	bl	800887c <lwiperf_list_add>
  return ERR_OK;
 8008b42:	4638      	mov	r0, r7
 8008b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("invalid session", s->base.server);
 8008b46:	4b19      	ldr	r3, [pc, #100]	; (8008bac <lwiperf_tcp_accept+0x130>)
 8008b48:	f240 2256 	movw	r2, #598	; 0x256
 8008b4c:	491d      	ldr	r1, [pc, #116]	; (8008bc4 <lwiperf_tcp_accept+0x148>)
 8008b4e:	4819      	ldr	r0, [pc, #100]	; (8008bb4 <lwiperf_tcp_accept+0x138>)
 8008b50:	f009 fb0c 	bl	801216c <iprintf>
 8008b54:	e7a2      	b.n	8008a9c <lwiperf_tcp_accept+0x20>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 8008b56:	4b15      	ldr	r3, [pc, #84]	; (8008bac <lwiperf_tcp_accept+0x130>)
 8008b58:	f240 2257 	movw	r2, #599	; 0x257
 8008b5c:	491a      	ldr	r1, [pc, #104]	; (8008bc8 <lwiperf_tcp_accept+0x14c>)
 8008b5e:	4815      	ldr	r0, [pc, #84]	; (8008bb4 <lwiperf_tcp_accept+0x138>)
 8008b60:	f009 fb04 	bl	801216c <iprintf>
 8008b64:	e79d      	b.n	8008aa2 <lwiperf_tcp_accept+0x26>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8008b66:	4b11      	ldr	r3, [pc, #68]	; (8008bac <lwiperf_tcp_accept+0x130>)
 8008b68:	f240 225a 	movw	r2, #602	; 0x25a
 8008b6c:	4917      	ldr	r1, [pc, #92]	; (8008bcc <lwiperf_tcp_accept+0x150>)
 8008b6e:	4811      	ldr	r0, [pc, #68]	; (8008bb4 <lwiperf_tcp_accept+0x138>)
 8008b70:	f009 fafc 	bl	801216c <iprintf>
 8008b74:	e7a5      	b.n	8008ac2 <lwiperf_tcp_accept+0x46>
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 8008b76:	68a3      	ldr	r3, [r4, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0a6      	beq.n	8008aca <lwiperf_tcp_accept+0x4e>
 8008b7c:	4b0b      	ldr	r3, [pc, #44]	; (8008bac <lwiperf_tcp_accept+0x130>)
 8008b7e:	f44f 7218 	mov.w	r2, #608	; 0x260
 8008b82:	4913      	ldr	r1, [pc, #76]	; (8008bd0 <lwiperf_tcp_accept+0x154>)
 8008b84:	480b      	ldr	r0, [pc, #44]	; (8008bb4 <lwiperf_tcp_accept+0x138>)
 8008b86:	f009 faf1 	bl	801216c <iprintf>
 8008b8a:	e79e      	b.n	8008aca <lwiperf_tcp_accept+0x4e>
    return ERR_VAL;
 8008b8c:	f06f 0005 	mvn.w	r0, #5
 8008b90:	4770      	bx	lr
 8008b92:	f06f 0005 	mvn.w	r0, #5
 8008b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b98:	f06f 0005 	mvn.w	r0, #5
 8008b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ERR_VAL;
 8008b9e:	f06f 0005 	mvn.w	r0, #5
 8008ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8008ba4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008baa:	bf00      	nop
 8008bac:	080676a4 	.word	0x080676a4
 8008bb0:	0806772c 	.word	0x0806772c
 8008bb4:	0801335c 	.word	0x0801335c
 8008bb8:	08008f29 	.word	0x08008f29
 8008bbc:	08008d39 	.word	0x08008d39
 8008bc0:	08008bd5 	.word	0x08008bd5
 8008bc4:	08067708 	.word	0x08067708
 8008bc8:	08067718 	.word	0x08067718
 8008bcc:	08067740 	.word	0x08067740
 8008bd0:	08067768 	.word	0x08067768

08008bd4 <lwiperf_tcp_err>:
{
 8008bd4:	b508      	push	{r3, lr}
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8008bd6:	2105      	movs	r1, #5
 8008bd8:	f7ff ff12 	bl	8008a00 <lwiperf_tcp_close>
 8008bdc:	bd08      	pop	{r3, pc}
	...

08008be0 <lwiperf_tcp_client_send_more>:
{
 8008be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8008be4:	4605      	mov	r5, r0
 8008be6:	b120      	cbz	r0, 8008bf2 <lwiperf_tcp_client_send_more+0x12>
 8008be8:	7903      	ldrb	r3, [r0, #4]
 8008bea:	b113      	cbz	r3, 8008bf2 <lwiperf_tcp_client_send_more+0x12>
 8008bec:	7943      	ldrb	r3, [r0, #5]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d056      	beq.n	8008ca0 <lwiperf_tcp_client_send_more+0xc0>
 8008bf2:	4b3f      	ldr	r3, [pc, #252]	; (8008cf0 <lwiperf_tcp_client_send_more+0x110>)
 8008bf4:	f240 121b 	movw	r2, #283	; 0x11b
 8008bf8:	493e      	ldr	r1, [pc, #248]	; (8008cf4 <lwiperf_tcp_client_send_more+0x114>)
 8008bfa:	483f      	ldr	r0, [pc, #252]	; (8008cf8 <lwiperf_tcp_client_send_more+0x118>)
 8008bfc:	f009 fab6 	bl	801216c <iprintf>
 8008c00:	e04e      	b.n	8008ca0 <lwiperf_tcp_client_send_more+0xc0>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8008c02:	2101      	movs	r1, #1
 8008c04:	4628      	mov	r0, r5
 8008c06:	f7ff fefb 	bl	8008a00 <lwiperf_tcp_close>
        return ERR_OK;
 8008c0a:	e06e      	b.n	8008cea <lwiperf_tcp_client_send_more+0x10a>
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 8008c0c:	f000 fa99 	bl	8009142 <lwip_htonl>
      if (amount_bytes >= conn->bytes_transferred) {
 8008c10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c12:	4298      	cmp	r0, r3
 8008c14:	d355      	bcc.n	8008cc2 <lwiperf_tcp_client_send_more+0xe2>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8008c16:	2101      	movs	r1, #1
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f7ff fef1 	bl	8008a00 <lwiperf_tcp_close>
        return ERR_OK;
 8008c1e:	e064      	b.n	8008cea <lwiperf_tcp_client_send_more+0x10a>
    } else if (conn->bytes_transferred < 48) {
 8008c20:	2c2f      	cmp	r4, #47	; 0x2f
 8008c22:	d80c      	bhi.n	8008c3e <lwiperf_tcp_client_send_more+0x5e>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 8008c24:	f105 0628 	add.w	r6, r5, #40	; 0x28
 8008c28:	f1a4 0218 	sub.w	r2, r4, #24
 8008c2c:	4416      	add	r6, r2
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 8008c2e:	b2a4      	uxth	r4, r4
 8008c30:	f1c4 0430 	rsb	r4, r4, #48	; 0x30
 8008c34:	b2a4      	uxth	r4, r4
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 8008c36:	2703      	movs	r7, #3
      send_more = 1;
 8008c38:	f04f 0801 	mov.w	r8, #1
 8008c3c:	e01e      	b.n	8008c7c <lwiperf_tcp_client_send_more+0x9c>
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8008c3e:	4e2f      	ldr	r6, [pc, #188]	; (8008cfc <lwiperf_tcp_client_send_more+0x11c>)
 8008c40:	fba6 3604 	umull	r3, r6, r6, r4
 8008c44:	08f2      	lsrs	r2, r6, #3
 8008c46:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 8008c4a:	0072      	lsls	r2, r6, #1
 8008c4c:	1aa2      	subs	r2, r4, r2
 8008c4e:	4e2c      	ldr	r6, [pc, #176]	; (8008d00 <lwiperf_tcp_client_send_more+0x120>)
 8008c50:	4416      	add	r6, r2
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 8008c52:	2c30      	cmp	r4, #48	; 0x30
 8008c54:	d005      	beq.n	8008c62 <lwiperf_tcp_client_send_more+0x82>
      apiflags = 0; /* no copying needed */
 8008c56:	2700      	movs	r7, #0
      txlen_max = TCP_MSS;
 8008c58:	f240 54b4 	movw	r4, #1460	; 0x5b4
      send_more = 1;
 8008c5c:	f04f 0801 	mov.w	r8, #1
 8008c60:	e00c      	b.n	8008c7c <lwiperf_tcp_client_send_more+0x9c>
      apiflags = 0; /* no copying needed */
 8008c62:	2700      	movs	r7, #0
        txlen_max = TCP_MSS - 24;
 8008c64:	f240 549c 	movw	r4, #1436	; 0x59c
      send_more = 1;
 8008c68:	f04f 0801 	mov.w	r8, #1
 8008c6c:	e006      	b.n	8008c7c <lwiperf_tcp_client_send_more+0x9c>
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8008c6e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008c72:	d10e      	bne.n	8008c92 <lwiperf_tcp_client_send_more+0xb2>
 8008c74:	f240 23d9 	movw	r3, #729	; 0x2d9
 8008c78:	429c      	cmp	r4, r3
 8008c7a:	d90a      	bls.n	8008c92 <lwiperf_tcp_client_send_more+0xb2>
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8008c7c:	463b      	mov	r3, r7
 8008c7e:	4622      	mov	r2, r4
 8008c80:	4631      	mov	r1, r6
 8008c82:	6928      	ldr	r0, [r5, #16]
 8008c84:	f007 fba6 	bl	80103d4 <tcp_write>
      if (err ==  ERR_MEM) {
 8008c88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008c8c:	d1ef      	bne.n	8008c6e <lwiperf_tcp_client_send_more+0x8e>
        txlen /= 2;
 8008c8e:	0864      	lsrs	r4, r4, #1
 8008c90:	e7ed      	b.n	8008c6e <lwiperf_tcp_client_send_more+0x8e>
    if (err == ERR_OK) {
 8008c92:	bb20      	cbnz	r0, 8008cde <lwiperf_tcp_client_send_more+0xfe>
      conn->bytes_transferred += txlen;
 8008c94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c96:	441c      	add	r4, r3
 8008c98:	626c      	str	r4, [r5, #36]	; 0x24
  } while (send_more);
 8008c9a:	f1b8 0f00 	cmp.w	r8, #0
 8008c9e:	d021      	beq.n	8008ce4 <lwiperf_tcp_client_send_more+0x104>
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8008ca0:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8008ca2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008ca6:	d0b1      	beq.n	8008c0c <lwiperf_tcp_client_send_more+0x2c>
      u32_t now = sys_now();
 8008ca8:	f7f8 fc9a 	bl	80015e0 <sys_now>
      u32_t diff_ms = now - conn->time_started;
 8008cac:	696b      	ldr	r3, [r5, #20]
 8008cae:	1ac4      	subs	r4, r0, r3
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8008cb0:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8008cb2:	f000 fa46 	bl	8009142 <lwip_htonl>
      u32_t time_ms = time * 10;
 8008cb6:	f06f 0309 	mvn.w	r3, #9
 8008cba:	fb03 f000 	mul.w	r0, r3, r0
      if (diff_ms >= time_ms) {
 8008cbe:	4284      	cmp	r4, r0
 8008cc0:	d29f      	bcs.n	8008c02 <lwiperf_tcp_client_send_more+0x22>
    if (conn->bytes_transferred < 24) {
 8008cc2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8008cc4:	2c17      	cmp	r4, #23
 8008cc6:	d8ab      	bhi.n	8008c20 <lwiperf_tcp_client_send_more+0x40>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 8008cc8:	f105 0628 	add.w	r6, r5, #40	; 0x28
 8008ccc:	4426      	add	r6, r4
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8008cce:	b2a4      	uxth	r4, r4
 8008cd0:	f1c4 0418 	rsb	r4, r4, #24
 8008cd4:	b2a4      	uxth	r4, r4
      apiflags = TCP_WRITE_FLAG_COPY;
 8008cd6:	2701      	movs	r7, #1
    send_more = 0;
 8008cd8:	f04f 0800 	mov.w	r8, #0
 8008cdc:	e7ce      	b.n	8008c7c <lwiperf_tcp_client_send_more+0x9c>
      send_more = 0;
 8008cde:	f04f 0800 	mov.w	r8, #0
 8008ce2:	e7da      	b.n	8008c9a <lwiperf_tcp_client_send_more+0xba>
  tcp_output(conn->conn_pcb);
 8008ce4:	6928      	ldr	r0, [r5, #16]
 8008ce6:	f008 f941 	bl	8010f6c <tcp_output>
}
 8008cea:	2000      	movs	r0, #0
 8008cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf0:	080676a4 	.word	0x080676a4
 8008cf4:	08067790 	.word	0x08067790
 8008cf8:	0801335c 	.word	0x0801335c
 8008cfc:	cccccccd 	.word	0xcccccccd
 8008d00:	0806781c 	.word	0x0806781c

08008d04 <lwiperf_tcp_client_sent>:
{
 8008d04:	b510      	push	{r4, lr}
 8008d06:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8008d08:	6903      	ldr	r3, [r0, #16]
 8008d0a:	428b      	cmp	r3, r1
 8008d0c:	d006      	beq.n	8008d1c <lwiperf_tcp_client_sent+0x18>
 8008d0e:	4b07      	ldr	r3, [pc, #28]	; (8008d2c <lwiperf_tcp_client_sent+0x28>)
 8008d10:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008d14:	4906      	ldr	r1, [pc, #24]	; (8008d30 <lwiperf_tcp_client_sent+0x2c>)
 8008d16:	4807      	ldr	r0, [pc, #28]	; (8008d34 <lwiperf_tcp_client_sent+0x30>)
 8008d18:	f009 fa28 	bl	801216c <iprintf>
  conn->poll_count = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f884 3020 	strb.w	r3, [r4, #32]
  return lwiperf_tcp_client_send_more(conn);
 8008d22:	4620      	mov	r0, r4
 8008d24:	f7ff ff5c 	bl	8008be0 <lwiperf_tcp_client_send_more>
}
 8008d28:	bd10      	pop	{r4, pc}
 8008d2a:	bf00      	nop
 8008d2c:	080676a4 	.word	0x080676a4
 8008d30:	080677a0 	.word	0x080677a0
 8008d34:	0801335c 	.word	0x0801335c

08008d38 <lwiperf_tcp_poll>:
{
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8008d3c:	6903      	ldr	r3, [r0, #16]
 8008d3e:	428b      	cmp	r3, r1
 8008d40:	d006      	beq.n	8008d50 <lwiperf_tcp_poll+0x18>
 8008d42:	4b0e      	ldr	r3, [pc, #56]	; (8008d7c <lwiperf_tcp_poll+0x44>)
 8008d44:	f240 223e 	movw	r2, #574	; 0x23e
 8008d48:	490d      	ldr	r1, [pc, #52]	; (8008d80 <lwiperf_tcp_poll+0x48>)
 8008d4a:	480e      	ldr	r0, [pc, #56]	; (8008d84 <lwiperf_tcp_poll+0x4c>)
 8008d4c:	f009 fa0e 	bl	801216c <iprintf>
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 8008d50:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008d54:	3301      	adds	r3, #1
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	f884 3020 	strb.w	r3, [r4, #32]
 8008d5c:	2b09      	cmp	r3, #9
 8008d5e:	d803      	bhi.n	8008d68 <lwiperf_tcp_poll+0x30>
  if (!conn->base.server) {
 8008d60:	7963      	ldrb	r3, [r4, #5]
 8008d62:	b133      	cbz	r3, 8008d72 <lwiperf_tcp_poll+0x3a>
}
 8008d64:	2000      	movs	r0, #0
 8008d66:	bd10      	pop	{r4, pc}
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8008d68:	2102      	movs	r1, #2
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f7ff fe48 	bl	8008a00 <lwiperf_tcp_close>
    return ERR_OK; /* lwiperf_tcp_close frees conn */
 8008d70:	e7f8      	b.n	8008d64 <lwiperf_tcp_poll+0x2c>
    lwiperf_tcp_client_send_more(conn);
 8008d72:	4620      	mov	r0, r4
 8008d74:	f7ff ff34 	bl	8008be0 <lwiperf_tcp_client_send_more>
 8008d78:	e7f4      	b.n	8008d64 <lwiperf_tcp_poll+0x2c>
 8008d7a:	bf00      	nop
 8008d7c:	080676a4 	.word	0x080676a4
 8008d80:	080677b8 	.word	0x080677b8
 8008d84:	0801335c 	.word	0x0801335c

08008d88 <lwiperf_tx_start_impl>:
{
 8008d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	4689      	mov	r9, r1
 8008d90:	4615      	mov	r5, r2
 8008d92:	469b      	mov	fp, r3
 8008d94:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8008d96:	4682      	mov	sl, r0
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d05e      	beq.n	8008e5a <lwiperf_tx_start_impl+0xd2>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
 8008d9c:	2d00      	cmp	r5, #0
 8008d9e:	d064      	beq.n	8008e6a <lwiperf_tx_start_impl+0xe2>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8008da0:	2f00      	cmp	r7, #0
 8008da2:	d06a      	beq.n	8008e7a <lwiperf_tx_start_impl+0xf2>
  *new_conn = NULL;
 8008da4:	2300      	movs	r3, #0
 8008da6:	603b      	str	r3, [r7, #0]
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8008da8:	2048      	movs	r0, #72	; 0x48
 8008daa:	f003 fc45 	bl	800c638 <mem_malloc>
  if (client_conn == NULL) {
 8008dae:	4604      	mov	r4, r0
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d075      	beq.n	8008ea0 <lwiperf_tx_start_impl+0x118>
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 8008db4:	2000      	movs	r0, #0
 8008db6:	f005 fc97 	bl	800e6e8 <tcp_new_ip_type>
  if (newpcb == NULL) {
 8008dba:	4606      	mov	r6, r0
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d064      	beq.n	8008e8a <lwiperf_tx_start_impl+0x102>
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8008dc0:	2248      	movs	r2, #72	; 0x48
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f009 f9c8 	bl	801215a <memset>
  client_conn->base.tcp = 1;
 8008dca:	f04f 0801 	mov.w	r8, #1
 8008dce:	f884 8004 	strb.w	r8, [r4, #4]
  client_conn->base.related_master_state = related_master_state;
 8008dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dd4:	60a3      	str	r3, [r4, #8]
  client_conn->conn_pcb = newpcb;
 8008dd6:	6126      	str	r6, [r4, #16]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8008dd8:	f7f8 fc02 	bl	80015e0 <sys_now>
 8008ddc:	6160      	str	r0, [r4, #20]
  client_conn->report_fn = report_fn;
 8008dde:	f8c4 b018 	str.w	fp, [r4, #24]
  client_conn->report_arg = report_arg;
 8008de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008de4:	61e3      	str	r3, [r4, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8008de6:	2304      	movs	r3, #4
 8008de8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  client_conn->bytes_transferred = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	6263      	str	r3, [r4, #36]	; 0x24
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8008df0:	6829      	ldr	r1, [r5, #0]
 8008df2:	686a      	ldr	r2, [r5, #4]
 8008df4:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8008df8:	68e8      	ldr	r0, [r5, #12]
 8008dfa:	62a1      	str	r1, [r4, #40]	; 0x28
 8008dfc:	62e2      	str	r2, [r4, #44]	; 0x2c
 8008dfe:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
 8008e02:	6360      	str	r0, [r4, #52]	; 0x34
 8008e04:	6929      	ldr	r1, [r5, #16]
 8008e06:	696a      	ldr	r2, [r5, #20]
 8008e08:	63a1      	str	r1, [r4, #56]	; 0x38
 8008e0a:	63e2      	str	r2, [r4, #60]	; 0x3c
  client_conn->have_settings_buf = 1;
 8008e0c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
  tcp_arg(newpcb, client_conn);
 8008e10:	4621      	mov	r1, r4
 8008e12:	4630      	mov	r0, r6
 8008e14:	f004 fe04 	bl	800da20 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8008e18:	4923      	ldr	r1, [pc, #140]	; (8008ea8 <lwiperf_tx_start_impl+0x120>)
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f004 fe1e 	bl	800da5c <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8008e20:	2202      	movs	r2, #2
 8008e22:	4922      	ldr	r1, [pc, #136]	; (8008eac <lwiperf_tx_start_impl+0x124>)
 8008e24:	4630      	mov	r0, r6
 8008e26:	f004 fe53 	bl	800dad0 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8008e2a:	4921      	ldr	r1, [pc, #132]	; (8008eb0 <lwiperf_tx_start_impl+0x128>)
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f004 fe2d 	bl	800da8c <tcp_err>
  ip_addr_copy(remote_addr, *remote_ip);
 8008e32:	f8da 3000 	ldr.w	r3, [sl]
 8008e36:	a902      	add	r1, sp, #8
 8008e38:	f841 3d04 	str.w	r3, [r1, #-4]!
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8008e3c:	4b1d      	ldr	r3, [pc, #116]	; (8008eb4 <lwiperf_tx_start_impl+0x12c>)
 8008e3e:	464a      	mov	r2, r9
 8008e40:	4630      	mov	r0, r6
 8008e42:	f005 fc97 	bl	800e774 <tcp_connect>
  if (err != ERR_OK) {
 8008e46:	4605      	mov	r5, r0
 8008e48:	bb28      	cbnz	r0, 8008e96 <lwiperf_tx_start_impl+0x10e>
  lwiperf_list_add(&client_conn->base);
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f7ff fd16 	bl	800887c <lwiperf_list_add>
  *new_conn = client_conn;
 8008e50:	603c      	str	r4, [r7, #0]
}
 8008e52:	4628      	mov	r0, r5
 8008e54:	b003      	add	sp, #12
 8008e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8008e5a:	4b17      	ldr	r3, [pc, #92]	; (8008eb8 <lwiperf_tx_start_impl+0x130>)
 8008e5c:	f240 1289 	movw	r2, #393	; 0x189
 8008e60:	4916      	ldr	r1, [pc, #88]	; (8008ebc <lwiperf_tx_start_impl+0x134>)
 8008e62:	4817      	ldr	r0, [pc, #92]	; (8008ec0 <lwiperf_tx_start_impl+0x138>)
 8008e64:	f009 f982 	bl	801216c <iprintf>
 8008e68:	e798      	b.n	8008d9c <lwiperf_tx_start_impl+0x14>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
 8008e6a:	4b13      	ldr	r3, [pc, #76]	; (8008eb8 <lwiperf_tx_start_impl+0x130>)
 8008e6c:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8008e70:	4912      	ldr	r1, [pc, #72]	; (8008ebc <lwiperf_tx_start_impl+0x134>)
 8008e72:	4813      	ldr	r0, [pc, #76]	; (8008ec0 <lwiperf_tx_start_impl+0x138>)
 8008e74:	f009 f97a 	bl	801216c <iprintf>
 8008e78:	e792      	b.n	8008da0 <lwiperf_tx_start_impl+0x18>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <lwiperf_tx_start_impl+0x130>)
 8008e7c:	f240 128b 	movw	r2, #395	; 0x18b
 8008e80:	4910      	ldr	r1, [pc, #64]	; (8008ec4 <lwiperf_tx_start_impl+0x13c>)
 8008e82:	480f      	ldr	r0, [pc, #60]	; (8008ec0 <lwiperf_tx_start_impl+0x138>)
 8008e84:	f009 f972 	bl	801216c <iprintf>
 8008e88:	e78c      	b.n	8008da4 <lwiperf_tx_start_impl+0x1c>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f003 fa88 	bl	800c3a0 <mem_free>
    return ERR_MEM;
 8008e90:	f04f 35ff 	mov.w	r5, #4294967295
 8008e94:	e7dd      	b.n	8008e52 <lwiperf_tx_start_impl+0xca>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8008e96:	2102      	movs	r1, #2
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f7ff fdb1 	bl	8008a00 <lwiperf_tcp_close>
    return err;
 8008e9e:	e7d8      	b.n	8008e52 <lwiperf_tx_start_impl+0xca>
    return ERR_MEM;
 8008ea0:	f04f 35ff 	mov.w	r5, #4294967295
 8008ea4:	e7d5      	b.n	8008e52 <lwiperf_tx_start_impl+0xca>
 8008ea6:	bf00      	nop
 8008ea8:	08008d05 	.word	0x08008d05
 8008eac:	08008d39 	.word	0x08008d39
 8008eb0:	08008bd5 	.word	0x08008bd5
 8008eb4:	080090b9 	.word	0x080090b9
 8008eb8:	080676a4 	.word	0x080676a4
 8008ebc:	080677f4 	.word	0x080677f4
 8008ec0:	0801335c 	.word	0x0801335c
 8008ec4:	08067808 	.word	0x08067808

08008ec8 <lwiperf_tx_start_passive>:
{
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	4604      	mov	r4, r0
  lwiperf_state_tcp_t *new_conn = NULL;
 8008ece:	ad06      	add	r5, sp, #24
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f845 3d04 	str.w	r3, [r5, #-4]!
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8008ed6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008ed8:	f000 f933 	bl	8009142 <lwip_htonl>
  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 8008edc:	6926      	ldr	r6, [r4, #16]
 8008ede:	69e3      	ldr	r3, [r4, #28]
 8008ee0:	68a2      	ldr	r2, [r4, #8]
 8008ee2:	9502      	str	r5, [sp, #8]
 8008ee4:	9201      	str	r2, [sp, #4]
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	69a3      	ldr	r3, [r4, #24]
 8008eea:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8008eee:	b281      	uxth	r1, r0
 8008ef0:	1d30      	adds	r0, r6, #4
 8008ef2:	f7ff ff49 	bl	8008d88 <lwiperf_tx_start_impl>
  if (ret == ERR_OK) {
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	b920      	cbnz	r0, 8008f04 <lwiperf_tx_start_passive+0x3c>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8008efa:	9b05      	ldr	r3, [sp, #20]
 8008efc:	b12b      	cbz	r3, 8008f0a <lwiperf_tx_start_passive+0x42>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8008efe:	2200      	movs	r2, #0
 8008f00:	9b05      	ldr	r3, [sp, #20]
 8008f02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008f04:	4620      	mov	r0, r4
 8008f06:	b006      	add	sp, #24
 8008f08:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8008f0a:	4b04      	ldr	r3, [pc, #16]	; (8008f1c <lwiperf_tx_start_passive+0x54>)
 8008f0c:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8008f10:	4903      	ldr	r1, [pc, #12]	; (8008f20 <lwiperf_tx_start_passive+0x58>)
 8008f12:	4804      	ldr	r0, [pc, #16]	; (8008f24 <lwiperf_tx_start_passive+0x5c>)
 8008f14:	f009 f92a 	bl	801216c <iprintf>
 8008f18:	e7f1      	b.n	8008efe <lwiperf_tx_start_passive+0x36>
 8008f1a:	bf00      	nop
 8008f1c:	080676a4 	.word	0x080676a4
 8008f20:	08067808 	.word	0x08067808
 8008f24:	0801335c 	.word	0x0801335c

08008f28 <lwiperf_tcp_recv>:
{
 8008f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	460f      	mov	r7, r1
 8008f30:	4616      	mov	r6, r2
 8008f32:	461c      	mov	r4, r3
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8008f34:	6903      	ldr	r3, [r0, #16]
 8008f36:	428b      	cmp	r3, r1
 8008f38:	d006      	beq.n	8008f48 <lwiperf_tcp_recv+0x20>
 8008f3a:	4b5a      	ldr	r3, [pc, #360]	; (80090a4 <lwiperf_tcp_recv+0x17c>)
 8008f3c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8008f40:	4959      	ldr	r1, [pc, #356]	; (80090a8 <lwiperf_tcp_recv+0x180>)
 8008f42:	485a      	ldr	r0, [pc, #360]	; (80090ac <lwiperf_tcp_recv+0x184>)
 8008f44:	f009 f912 	bl	801216c <iprintf>
  if (err != ERR_OK) {
 8008f48:	bb34      	cbnz	r4, 8008f98 <lwiperf_tcp_recv+0x70>
  if (p == NULL) {
 8008f4a:	b356      	cbz	r6, 8008fa2 <lwiperf_tcp_recv+0x7a>
  tot_len = p->tot_len;
 8008f4c:	f8b6 8008 	ldrh.w	r8, [r6, #8]
  conn->poll_count = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	f885 3020 	strb.w	r3, [r5, #32]
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8008f56:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 8008f5a:	b122      	cbz	r2, 8008f66 <lwiperf_tcp_recv+0x3e>
 8008f5c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f5e:	3b18      	subs	r3, #24
 8008f60:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8008f64:	b9ab      	cbnz	r3, 8008f92 <lwiperf_tcp_recv+0x6a>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8008f66:	8933      	ldrh	r3, [r6, #8]
 8008f68:	2b17      	cmp	r3, #23
 8008f6a:	d92a      	bls.n	8008fc2 <lwiperf_tcp_recv+0x9a>
    if (!conn->have_settings_buf) {
 8008f6c:	b38a      	cbz	r2, 8008fd2 <lwiperf_tcp_recv+0xaa>
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8008f6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008f70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f74:	d155      	bne.n	8009022 <lwiperf_tcp_recv+0xfa>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8008f76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f78:	3318      	adds	r3, #24
 8008f7a:	626b      	str	r3, [r5, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 8008f7c:	2b18      	cmp	r3, #24
 8008f7e:	d961      	bls.n	8009044 <lwiperf_tcp_recv+0x11c>
    conn->next_num = 4; /* 24 bytes received... */
 8008f80:	2304      	movs	r3, #4
 8008f82:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    tmp = pbuf_remove_header(p, 24);
 8008f86:	2118      	movs	r1, #24
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f003 ff3f 	bl	800ce0c <pbuf_remove_header>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d163      	bne.n	800905a <lwiperf_tcp_recv+0x132>
  for (q = p; q != NULL; q = q->next) {
 8008f92:	4633      	mov	r3, r6
  packet_idx = 0;
 8008f94:	2400      	movs	r4, #0
  for (q = p; q != NULL; q = q->next) {
 8008f96:	e06b      	b.n	8009070 <lwiperf_tcp_recv+0x148>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8008f98:	2105      	movs	r1, #5
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f7ff fd30 	bl	8008a00 <lwiperf_tcp_close>
    return ERR_OK;
 8008fa0:	e07c      	b.n	800909c <lwiperf_tcp_recv+0x174>
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8008fa2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008fa4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008fa8:	d002      	beq.n	8008fb0 <lwiperf_tcp_recv+0x88>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8008faa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8008fae:	d004      	beq.n	8008fba <lwiperf_tcp_recv+0x92>
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f7ff fd24 	bl	8008a00 <lwiperf_tcp_close>
    return ERR_OK;
 8008fb8:	e070      	b.n	800909c <lwiperf_tcp_recv+0x174>
        lwiperf_tx_start_passive(conn);
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f7ff ff84 	bl	8008ec8 <lwiperf_tx_start_passive>
 8008fc0:	e7f6      	b.n	8008fb0 <lwiperf_tcp_recv+0x88>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8008fc2:	2103      	movs	r1, #3
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f7ff fd1b 	bl	8008a00 <lwiperf_tcp_close>
      pbuf_free(p);
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f003 ff64 	bl	800ce98 <pbuf_free>
      return ERR_OK;
 8008fd0:	e064      	b.n	800909c <lwiperf_tcp_recv+0x174>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	2218      	movs	r2, #24
 8008fd6:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f004 f9c4 	bl	800d368 <pbuf_copy_partial>
 8008fe0:	2818      	cmp	r0, #24
 8008fe2:	d116      	bne.n	8009012 <lwiperf_tcp_recv+0xea>
      conn->have_settings_buf = 1;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8008fea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008fec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ff0:	d0c1      	beq.n	8008f76 <lwiperf_tcp_recv+0x4e>
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8008ff2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8008ff6:	d0be      	beq.n	8008f76 <lwiperf_tcp_recv+0x4e>
          err_t err2 = lwiperf_tx_start_passive(conn);
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	f7ff ff65 	bl	8008ec8 <lwiperf_tx_start_passive>
          if (err2 != ERR_OK) {
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d0b9      	beq.n	8008f76 <lwiperf_tcp_recv+0x4e>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8009002:	2104      	movs	r1, #4
 8009004:	4628      	mov	r0, r5
 8009006:	f7ff fcfb 	bl	8008a00 <lwiperf_tcp_close>
            pbuf_free(p);
 800900a:	4630      	mov	r0, r6
 800900c:	f003 ff44 	bl	800ce98 <pbuf_free>
            return ERR_OK;
 8009010:	e044      	b.n	800909c <lwiperf_tcp_recv+0x174>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8009012:	2102      	movs	r1, #2
 8009014:	4628      	mov	r0, r5
 8009016:	f7ff fcf3 	bl	8008a00 <lwiperf_tcp_close>
        pbuf_free(p);
 800901a:	4630      	mov	r0, r6
 800901c:	f003 ff3c 	bl	800ce98 <pbuf_free>
        return ERR_OK;
 8009020:	e03c      	b.n	800909c <lwiperf_tcp_recv+0x174>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8009022:	2318      	movs	r3, #24
 8009024:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8009028:	2100      	movs	r1, #0
 800902a:	4630      	mov	r0, r6
 800902c:	f004 fa33 	bl	800d496 <pbuf_memcmp>
 8009030:	2800      	cmp	r0, #0
 8009032:	d0a0      	beq.n	8008f76 <lwiperf_tcp_recv+0x4e>
          lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8009034:	2103      	movs	r1, #3
 8009036:	4628      	mov	r0, r5
 8009038:	f7ff fce2 	bl	8008a00 <lwiperf_tcp_close>
          pbuf_free(p);
 800903c:	4630      	mov	r0, r6
 800903e:	f003 ff2b 	bl	800ce98 <pbuf_free>
          return ERR_OK;
 8009042:	e02b      	b.n	800909c <lwiperf_tcp_recv+0x174>
      conn->time_started = sys_now();
 8009044:	f7f8 facc 	bl	80015e0 <sys_now>
 8009048:	6168      	str	r0, [r5, #20]
      tcp_recved(tpcb, p->tot_len);
 800904a:	8931      	ldrh	r1, [r6, #8]
 800904c:	4638      	mov	r0, r7
 800904e:	f004 fc7f 	bl	800d950 <tcp_recved>
      pbuf_free(p);
 8009052:	4630      	mov	r0, r6
 8009054:	f003 ff20 	bl	800ce98 <pbuf_free>
      return ERR_OK;
 8009058:	e020      	b.n	800909c <lwiperf_tcp_recv+0x174>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <lwiperf_tcp_recv+0x17c>)
 800905c:	f240 220f 	movw	r2, #527	; 0x20f
 8009060:	4913      	ldr	r1, [pc, #76]	; (80090b0 <lwiperf_tcp_recv+0x188>)
 8009062:	4812      	ldr	r0, [pc, #72]	; (80090ac <lwiperf_tcp_recv+0x184>)
 8009064:	f009 f882 	bl	801216c <iprintf>
 8009068:	e793      	b.n	8008f92 <lwiperf_tcp_recv+0x6a>
    packet_idx += q->len;
 800906a:	895a      	ldrh	r2, [r3, #10]
 800906c:	4414      	add	r4, r2
  for (q = p; q != NULL; q = q->next) {
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1fa      	bne.n	800906a <lwiperf_tcp_recv+0x142>
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8009074:	8933      	ldrh	r3, [r6, #8]
 8009076:	429c      	cmp	r4, r3
 8009078:	d006      	beq.n	8009088 <lwiperf_tcp_recv+0x160>
 800907a:	4b0a      	ldr	r3, [pc, #40]	; (80090a4 <lwiperf_tcp_recv+0x17c>)
 800907c:	f240 2229 	movw	r2, #553	; 0x229
 8009080:	490c      	ldr	r1, [pc, #48]	; (80090b4 <lwiperf_tcp_recv+0x18c>)
 8009082:	480a      	ldr	r0, [pc, #40]	; (80090ac <lwiperf_tcp_recv+0x184>)
 8009084:	f009 f872 	bl	801216c <iprintf>
  conn->bytes_transferred += packet_idx;
 8009088:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800908a:	441c      	add	r4, r3
 800908c:	626c      	str	r4, [r5, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 800908e:	4641      	mov	r1, r8
 8009090:	4638      	mov	r0, r7
 8009092:	f004 fc5d 	bl	800d950 <tcp_recved>
  pbuf_free(p);
 8009096:	4630      	mov	r0, r6
 8009098:	f003 fefe 	bl	800ce98 <pbuf_free>
}
 800909c:	2000      	movs	r0, #0
 800909e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a2:	bf00      	nop
 80090a4:	080676a4 	.word	0x080676a4
 80090a8:	080677b8 	.word	0x080677b8
 80090ac:	0801335c 	.word	0x0801335c
 80090b0:	080677c8 	.word	0x080677c8
 80090b4:	080677e4 	.word	0x080677e4

080090b8 <lwiperf_tcp_client_connected>:
{
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4604      	mov	r4, r0
 80090bc:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 80090be:	6903      	ldr	r3, [r0, #16]
 80090c0:	428b      	cmp	r3, r1
 80090c2:	d006      	beq.n	80090d2 <lwiperf_tcp_client_connected+0x1a>
 80090c4:	4b0b      	ldr	r3, [pc, #44]	; (80090f4 <lwiperf_tcp_client_connected+0x3c>)
 80090c6:	f44f 72b9 	mov.w	r2, #370	; 0x172
 80090ca:	490b      	ldr	r1, [pc, #44]	; (80090f8 <lwiperf_tcp_client_connected+0x40>)
 80090cc:	480b      	ldr	r0, [pc, #44]	; (80090fc <lwiperf_tcp_client_connected+0x44>)
 80090ce:	f009 f84d 	bl	801216c <iprintf>
  if (err != ERR_OK) {
 80090d2:	b94d      	cbnz	r5, 80090e8 <lwiperf_tcp_client_connected+0x30>
  conn->poll_count = 0;
 80090d4:	2300      	movs	r3, #0
 80090d6:	f884 3020 	strb.w	r3, [r4, #32]
  conn->time_started = sys_now();
 80090da:	f7f8 fa81 	bl	80015e0 <sys_now>
 80090de:	6160      	str	r0, [r4, #20]
  return lwiperf_tcp_client_send_more(conn);
 80090e0:	4620      	mov	r0, r4
 80090e2:	f7ff fd7d 	bl	8008be0 <lwiperf_tcp_client_send_more>
}
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 80090e8:	2105      	movs	r1, #5
 80090ea:	4620      	mov	r0, r4
 80090ec:	f7ff fc88 	bl	8008a00 <lwiperf_tcp_close>
    return ERR_OK;
 80090f0:	2000      	movs	r0, #0
 80090f2:	bd38      	pop	{r3, r4, r5, pc}
 80090f4:	080676a4 	.word	0x080676a4
 80090f8:	080677a0 	.word	0x080677a0
 80090fc:	0801335c 	.word	0x0801335c

08009100 <lwiperf_start_tcp_server>:
{
 8009100:	b530      	push	{r4, r5, lr}
 8009102:	b085      	sub	sp, #20
  lwiperf_state_tcp_t *state = NULL;
 8009104:	2500      	movs	r5, #0
 8009106:	ac04      	add	r4, sp, #16
 8009108:	f844 5d04 	str.w	r5, [r4, #-4]!
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 800910c:	9401      	str	r4, [sp, #4]
 800910e:	9500      	str	r5, [sp, #0]
 8009110:	f7ff fbf2 	bl	80088f8 <lwiperf_start_tcp_server_impl>
  if (err == ERR_OK) {
 8009114:	b910      	cbnz	r0, 800911c <lwiperf_start_tcp_server+0x1c>
    return state;
 8009116:	9803      	ldr	r0, [sp, #12]
}
 8009118:	b005      	add	sp, #20
 800911a:	bd30      	pop	{r4, r5, pc}
  return NULL;
 800911c:	2000      	movs	r0, #0
 800911e:	e7fb      	b.n	8009118 <lwiperf_start_tcp_server+0x18>

08009120 <lwiperf_start_tcp_server_default>:
{
 8009120:	b508      	push	{r3, lr}
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 8009122:	460b      	mov	r3, r1
 8009124:	4602      	mov	r2, r0
 8009126:	f241 3189 	movw	r1, #5001	; 0x1389
 800912a:	4802      	ldr	r0, [pc, #8]	; (8009134 <lwiperf_start_tcp_server_default+0x14>)
 800912c:	f7ff ffe8 	bl	8009100 <lwiperf_start_tcp_server>
}
 8009130:	bd08      	pop	{r3, pc}
 8009132:	bf00      	nop
 8009134:	080684a4 	.word	0x080684a4

08009138 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8009138:	0a03      	lsrs	r3, r0, #8
 800913a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 800913e:	b280      	uxth	r0, r0
 8009140:	4770      	bx	lr

08009142 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 8009142:	0203      	lsls	r3, r0, #8
 8009144:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009148:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800914c:	0a02      	lsrs	r2, r0, #8
 800914e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8009152:	4313      	orrs	r3, r2
}
 8009154:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8009158:	4770      	bx	lr

0800915a <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800915a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800915e:	4606      	mov	r6, r0
 8009160:	460d      	mov	r5, r1
 8009162:	4690      	mov	r8, r2
  const char *p;
  size_t tokenlen = strlen(token);
 8009164:	4608      	mov	r0, r1
 8009166:	f7f7 f84d 	bl	8000204 <strlen>
  if (tokenlen == 0) {
 800916a:	b1d0      	cbz	r0, 80091a2 <lwip_strnstr+0x48>
 800916c:	4607      	mov	r7, r0
 800916e:	4634      	mov	r4, r6
 8009170:	e000      	b.n	8009174 <lwip_strnstr+0x1a>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8009172:	3401      	adds	r4, #1
 8009174:	7822      	ldrb	r2, [r4, #0]
 8009176:	b1ba      	cbz	r2, 80091a8 <lwip_strnstr+0x4e>
 8009178:	19e3      	adds	r3, r4, r7
 800917a:	eb06 0108 	add.w	r1, r6, r8
 800917e:	428b      	cmp	r3, r1
 8009180:	d80c      	bhi.n	800919c <lwip_strnstr+0x42>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8009182:	782b      	ldrb	r3, [r5, #0]
 8009184:	429a      	cmp	r2, r3
 8009186:	d1f4      	bne.n	8009172 <lwip_strnstr+0x18>
 8009188:	463a      	mov	r2, r7
 800918a:	4629      	mov	r1, r5
 800918c:	4620      	mov	r0, r4
 800918e:	f009 f8c8 	bl	8012322 <strncmp>
 8009192:	2800      	cmp	r0, #0
 8009194:	d1ed      	bne.n	8009172 <lwip_strnstr+0x18>
      return LWIP_CONST_CAST(char *, p);
 8009196:	4620      	mov	r0, r4
 8009198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  return NULL;
 800919c:	2000      	movs	r0, #0
 800919e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LWIP_CONST_CAST(char *, buffer);
 80091a2:	4630      	mov	r0, r6
 80091a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 80091a8:	2000      	movs	r0, #0
}
 80091aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080091ae <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 80091ae:	b430      	push	{r4, r5}
 80091b0:	e002      	b.n	80091b8 <lwip_stricmp+0xa>
  char c1, c2;

  do {
    c1 = *str1++;
 80091b2:	4628      	mov	r0, r5
    c2 = *str2++;
 80091b4:	4621      	mov	r1, r4
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 80091b6:	b192      	cbz	r2, 80091de <lwip_stricmp+0x30>
    c1 = *str1++;
 80091b8:	1c45      	adds	r5, r0, #1
 80091ba:	7802      	ldrb	r2, [r0, #0]
    c2 = *str2++;
 80091bc:	1c4c      	adds	r4, r1, #1
 80091be:	780b      	ldrb	r3, [r1, #0]
    if (c1 != c2) {
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d0f6      	beq.n	80091b2 <lwip_stricmp+0x4>
      char c1_upc = c1 | 0x20;
 80091c4:	f042 0020 	orr.w	r0, r2, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80091c8:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 80091cc:	b2c9      	uxtb	r1, r1
 80091ce:	2919      	cmp	r1, #25
 80091d0:	d808      	bhi.n	80091e4 <lwip_stricmp+0x36>
        char c2_upc = c2 | 0x20;
 80091d2:	f043 0320 	orr.w	r3, r3, #32
        if (c1_upc != c2_upc) {
 80091d6:	4298      	cmp	r0, r3
 80091d8:	d0eb      	beq.n	80091b2 <lwip_stricmp+0x4>
          return 1;
 80091da:	2001      	movs	r0, #1
 80091dc:	e000      	b.n	80091e0 <lwip_stricmp+0x32>
  return 0;
 80091de:	2000      	movs	r0, #0
}
 80091e0:	bc30      	pop	{r4, r5}
 80091e2:	4770      	bx	lr
        return 1;
 80091e4:	2001      	movs	r0, #1
 80091e6:	e7fb      	b.n	80091e0 <lwip_stricmp+0x32>

080091e8 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  char *res = result;
  char *tmp = result + bufsize - 1;
 80091ea:	1e4b      	subs	r3, r1, #1
 80091ec:	18c5      	adds	r5, r0, r3
  int n = (number >= 0) ? number : -number;
 80091ee:	ea82 74e2 	eor.w	r4, r2, r2, asr #31
 80091f2:	eba4 74e2 	sub.w	r4, r4, r2, asr #31

  /* handle invalid bufsize */
  if (bufsize < 2) {
 80091f6:	2901      	cmp	r1, #1
 80091f8:	d905      	bls.n	8009206 <lwip_itoa+0x1e>
    }
    return;
  }

  /* First, add sign */
  if (number < 0) {
 80091fa:	2a00      	cmp	r2, #0
 80091fc:	db08      	blt.n	8009210 <lwip_itoa+0x28>
  char *res = result;
 80091fe:	4606      	mov	r6, r0
    *res++ = '-';
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 8009200:	2200      	movs	r2, #0
 8009202:	54c2      	strb	r2, [r0, r3]
  while ((n != 0) && (tmp > res)) {
 8009204:	e018      	b.n	8009238 <lwip_itoa+0x50>
    if (bufsize == 1) {
 8009206:	d000      	beq.n	800920a <lwip_itoa+0x22>
 8009208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *result = 0;
 800920a:	2300      	movs	r3, #0
 800920c:	7003      	strb	r3, [r0, #0]
 800920e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *res++ = '-';
 8009210:	1c46      	adds	r6, r0, #1
 8009212:	222d      	movs	r2, #45	; 0x2d
 8009214:	7002      	strb	r2, [r0, #0]
 8009216:	e7f3      	b.n	8009200 <lwip_itoa+0x18>
    char val = (char)('0' + (n % 10));
 8009218:	4a12      	ldr	r2, [pc, #72]	; (8009264 <lwip_itoa+0x7c>)
 800921a:	fb82 3204 	smull	r3, r2, r2, r4
 800921e:	17e3      	asrs	r3, r4, #31
 8009220:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8009224:	461f      	mov	r7, r3
 8009226:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800922a:	005a      	lsls	r2, r3, #1
 800922c:	1aa3      	subs	r3, r4, r2
 800922e:	b2db      	uxtb	r3, r3
 8009230:	3330      	adds	r3, #48	; 0x30
    tmp--;
    *tmp = val;
 8009232:	f805 3d01 	strb.w	r3, [r5, #-1]!
    n = n / 10;
 8009236:	463c      	mov	r4, r7
  while ((n != 0) && (tmp > res)) {
 8009238:	b10c      	cbz	r4, 800923e <lwip_itoa+0x56>
 800923a:	42ae      	cmp	r6, r5
 800923c:	d3ec      	bcc.n	8009218 <lwip_itoa+0x30>
  }
  if (n) {
 800923e:	b934      	cbnz	r4, 800924e <lwip_itoa+0x66>
    /* buffer is too small */
    *result = 0;
    return;
  }
  if (*tmp == 0) {
 8009240:	782b      	ldrb	r3, [r5, #0]
 8009242:	b93b      	cbnz	r3, 8009254 <lwip_itoa+0x6c>
    /* Nothing added? */
    *res++ = '0';
 8009244:	2330      	movs	r3, #48	; 0x30
 8009246:	7033      	strb	r3, [r6, #0]
    *res++ = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	7073      	strb	r3, [r6, #1]
    return;
 800924c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *result = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	7003      	strb	r3, [r0, #0]
    return;
 8009252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 8009254:	1842      	adds	r2, r0, r1
 8009256:	1b52      	subs	r2, r2, r5
 8009258:	4629      	mov	r1, r5
 800925a:	4630      	mov	r0, r6
 800925c:	f008 ff63 	bl	8012126 <memmove>
 8009260:	e7d2      	b.n	8009208 <lwip_itoa+0x20>
 8009262:	bf00      	nop
 8009264:	66666667 	.word	0x66666667

08009268 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009268:	b410      	push	{r4}
 800926a:	b083      	sub	sp, #12
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009272:	f010 0401 	ands.w	r4, r0, #1
 8009276:	d007      	beq.n	8009288 <lwip_standard_chksum+0x20>
 8009278:	4299      	cmp	r1, r3
 800927a:	dd08      	ble.n	800928e <lwip_standard_chksum+0x26>
    ((u8_t *)&t)[1] = *pb++;
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	7802      	ldrb	r2, [r0, #0]
 8009280:	f88d 2007 	strb.w	r2, [sp, #7]
    len--;
 8009284:	3901      	subs	r1, #1
 8009286:	e000      	b.n	800928a <lwip_standard_chksum+0x22>
  const u8_t *pb = (const u8_t *)dataptr;
 8009288:	4603      	mov	r3, r0
  u32_t sum = 0;
 800928a:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800928c:	e005      	b.n	800929a <lwip_standard_chksum+0x32>
  const u8_t *pb = (const u8_t *)dataptr;
 800928e:	4603      	mov	r3, r0
 8009290:	e7fb      	b.n	800928a <lwip_standard_chksum+0x22>
    sum += *ps++;
 8009292:	8818      	ldrh	r0, [r3, #0]
 8009294:	4402      	add	r2, r0
    len -= 2;
 8009296:	3902      	subs	r1, #2
    sum += *ps++;
 8009298:	3302      	adds	r3, #2
  while (len > 1) {
 800929a:	2901      	cmp	r1, #1
 800929c:	dcf9      	bgt.n	8009292 <lwip_standard_chksum+0x2a>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800929e:	2900      	cmp	r1, #0
 80092a0:	dd02      	ble.n	80092a8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	f88d 3006 	strb.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 80092a8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80092ac:	4402      	add	r2, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80092ae:	b290      	uxth	r0, r2
 80092b0:	eb00 4212 	add.w	r2, r0, r2, lsr #16
  sum = FOLD_U32T(sum);
 80092b4:	b290      	uxth	r0, r2
 80092b6:	eb00 4012 	add.w	r0, r0, r2, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80092ba:	b124      	cbz	r4, 80092c6 <lwip_standard_chksum+0x5e>
    sum = SWAP_BYTES_IN_WORD(sum);
 80092bc:	0203      	lsls	r3, r0, #8
 80092be:	b29b      	uxth	r3, r3
 80092c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80092c4:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80092c6:	b280      	uxth	r0, r0
 80092c8:	b003      	add	sp, #12
 80092ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 80092d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d4:	4605      	mov	r5, r0
 80092d6:	4688      	mov	r8, r1
 80092d8:	4617      	mov	r7, r2
 80092da:	461c      	mov	r4, r3
  struct pbuf *q;
  int swapped = 0;
 80092dc:	2600      	movs	r6, #0

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 80092de:	e000      	b.n	80092e2 <inet_cksum_pseudo_base+0x12>
 80092e0:	682d      	ldr	r5, [r5, #0]
 80092e2:	b19d      	cbz	r5, 800930c <inet_cksum_pseudo_base+0x3c>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 80092e4:	8969      	ldrh	r1, [r5, #10]
 80092e6:	6868      	ldr	r0, [r5, #4]
 80092e8:	f7ff ffbe 	bl	8009268 <lwip_standard_chksum>
 80092ec:	4404      	add	r4, r0
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 80092ee:	b2a0      	uxth	r0, r4
 80092f0:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 80092f4:	896b      	ldrh	r3, [r5, #10]
 80092f6:	f013 0f01 	tst.w	r3, #1
 80092fa:	d0f1      	beq.n	80092e0 <inet_cksum_pseudo_base+0x10>
      swapped = !swapped;
 80092fc:	f086 0601 	eor.w	r6, r6, #1
      acc = SWAP_BYTES_IN_WORD(acc);
 8009300:	0223      	lsls	r3, r4, #8
 8009302:	b29b      	uxth	r3, r3
 8009304:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009308:	431c      	orrs	r4, r3
 800930a:	e7e9      	b.n	80092e0 <inet_cksum_pseudo_base+0x10>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800930c:	b126      	cbz	r6, 8009318 <inet_cksum_pseudo_base+0x48>
    acc = SWAP_BYTES_IN_WORD(acc);
 800930e:	0223      	lsls	r3, r4, #8
 8009310:	b29b      	uxth	r3, r3
 8009312:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009316:	431c      	orrs	r4, r3
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8009318:	4640      	mov	r0, r8
 800931a:	f7ff ff0d 	bl	8009138 <lwip_htons>
 800931e:	4404      	add	r4, r0
  acc += (u32_t)lwip_htons(proto_len);
 8009320:	4638      	mov	r0, r7
 8009322:	f7ff ff09 	bl	8009138 <lwip_htons>
 8009326:	4420      	add	r0, r4

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8009328:	b284      	uxth	r4, r0
 800932a:	eb04 4410 	add.w	r4, r4, r0, lsr #16
  acc = FOLD_U32T(acc);
 800932e:	b2a0      	uxth	r0, r4
 8009330:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8009334:	43c0      	mvns	r0, r0
}
 8009336:	b280      	uxth	r0, r0
 8009338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800933c <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800933c:	b510      	push	{r4, lr}
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800933e:	681b      	ldr	r3, [r3, #0]
  acc = (addr & 0xffffUL);
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8009340:	0c1c      	lsrs	r4, r3, #16
 8009342:	fa14 f383 	uxtah	r3, r4, r3
  addr = ip4_addr_get_u32(dest);
 8009346:	9c02      	ldr	r4, [sp, #8]
 8009348:	6824      	ldr	r4, [r4, #0]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800934a:	fa13 f384 	uxtah	r3, r3, r4
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800934e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8009352:	b29c      	uxth	r4, r3
 8009354:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 8009358:	b29c      	uxth	r4, r3

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800935a:	eb04 4313 	add.w	r3, r4, r3, lsr #16
 800935e:	f7ff ffb7 	bl	80092d0 <inet_cksum_pseudo_base>
}
 8009362:	bd10      	pop	{r4, pc}

08009364 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8009364:	b510      	push	{r4, lr}
 8009366:	b082      	sub	sp, #8
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8009368:	9c04      	ldr	r4, [sp, #16]
 800936a:	9400      	str	r4, [sp, #0]
 800936c:	f7ff ffe6 	bl	800933c <inet_chksum_pseudo>
  }
#endif /* LWIP_IPV4 */
}
 8009370:	b002      	add	sp, #8
 8009372:	bd10      	pop	{r4, pc}

08009374 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8009374:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8009376:	f7ff ff77 	bl	8009268 <lwip_standard_chksum>
 800937a:	43c0      	mvns	r0, r0
}
 800937c:	b280      	uxth	r0, r0
 800937e:	bd08      	pop	{r3, pc}

08009380 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	4605      	mov	r5, r0
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8009384:	2600      	movs	r6, #0

  acc = 0;
 8009386:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 8009388:	e000      	b.n	800938c <inet_chksum_pbuf+0xc>
 800938a:	682d      	ldr	r5, [r5, #0]
 800938c:	b19d      	cbz	r5, 80093b6 <inet_chksum_pbuf+0x36>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800938e:	8969      	ldrh	r1, [r5, #10]
 8009390:	6868      	ldr	r0, [r5, #4]
 8009392:	f7ff ff69 	bl	8009268 <lwip_standard_chksum>
 8009396:	4420      	add	r0, r4
    acc = FOLD_U32T(acc);
 8009398:	b284      	uxth	r4, r0
 800939a:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
 800939e:	896b      	ldrh	r3, [r5, #10]
 80093a0:	f013 0f01 	tst.w	r3, #1
 80093a4:	d0f1      	beq.n	800938a <inet_chksum_pbuf+0xa>
      swapped = !swapped;
 80093a6:	f086 0601 	eor.w	r6, r6, #1
      acc = SWAP_BYTES_IN_WORD(acc);
 80093aa:	0223      	lsls	r3, r4, #8
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80093b2:	431c      	orrs	r4, r3
 80093b4:	e7e9      	b.n	800938a <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 80093b6:	b126      	cbz	r6, 80093c2 <inet_chksum_pbuf+0x42>
    acc = SWAP_BYTES_IN_WORD(acc);
 80093b8:	0223      	lsls	r3, r4, #8
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80093c0:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 80093c2:	43e0      	mvns	r0, r4
}
 80093c4:	b280      	uxth	r0, r0
 80093c6:	bd70      	pop	{r4, r5, r6, pc}

080093c8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80093c8:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80093ca:	f008 fdcb 	bl	8011f64 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80093ce:	f002 ffb3 	bl	800c338 <mem_init>
  memp_init();
 80093d2:	f003 fa49 	bl	800c868 <memp_init>
  pbuf_init();
  netif_init();
 80093d6:	f003 fb0f 	bl	800c9f8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80093da:	f008 f96d 	bl	80116b8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80093de:	f004 f97d 	bl	800d6dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80093e2:	f008 f8ad 	bl	8011540 <sys_timeouts_init>
 80093e6:	bd08      	pop	{r3, pc}

080093e8 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 80093e8:	7943      	ldrb	r3, [r0, #5]
 80093ea:	428b      	cmp	r3, r1
 80093ec:	d003      	beq.n	80093f6 <dhcp_set_state+0xe>
    dhcp->state = new_state;
 80093ee:	7141      	strb	r1, [r0, #5]
    dhcp->tries = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	7183      	strb	r3, [r0, #6]
    dhcp->request_timeout = 0;
 80093f4:	8103      	strh	r3, [r0, #8]
 80093f6:	4770      	bx	lr

080093f8 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	4604      	mov	r4, r0
 80093fc:	460d      	mov	r5, r1
 80093fe:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8009400:	1c83      	adds	r3, r0, #2
 8009402:	2b44      	cmp	r3, #68	; 0x44
 8009404:	d807      	bhi.n	8009416 <dhcp_option_short+0x1e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8009406:	1c63      	adds	r3, r4, #1
 8009408:	b29b      	uxth	r3, r3
 800940a:	0a32      	lsrs	r2, r6, #8
 800940c:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800940e:	1ca0      	adds	r0, r4, #2
 8009410:	54ee      	strb	r6, [r5, r3]
  return options_out_len;
}
 8009412:	b280      	uxth	r0, r0
 8009414:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8009416:	4b04      	ldr	r3, [pc, #16]	; (8009428 <dhcp_option_short+0x30>)
 8009418:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800941c:	4903      	ldr	r1, [pc, #12]	; (800942c <dhcp_option_short+0x34>)
 800941e:	4804      	ldr	r0, [pc, #16]	; (8009430 <dhcp_option_short+0x38>)
 8009420:	f008 fea4 	bl	801216c <iprintf>
 8009424:	e7ef      	b.n	8009406 <dhcp_option_short+0xe>
 8009426:	bf00      	nop
 8009428:	08067fc8 	.word	0x08067fc8
 800942c:	08068008 	.word	0x08068008
 8009430:	0801335c 	.word	0x0801335c

08009434 <dhcp_option>:
{
 8009434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009436:	4604      	mov	r4, r0
 8009438:	460d      	mov	r5, r1
 800943a:	4617      	mov	r7, r2
 800943c:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800943e:	4403      	add	r3, r0
 8009440:	3302      	adds	r3, #2
 8009442:	2b44      	cmp	r3, #68	; 0x44
 8009444:	d806      	bhi.n	8009454 <dhcp_option+0x20>
  options[options_out_len++] = option_type;
 8009446:	1c63      	adds	r3, r4, #1
 8009448:	b29b      	uxth	r3, r3
 800944a:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 800944c:	1ca0      	adds	r0, r4, #2
 800944e:	54ee      	strb	r6, [r5, r3]
}
 8009450:	b280      	uxth	r0, r0
 8009452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8009454:	4b03      	ldr	r3, [pc, #12]	; (8009464 <dhcp_option+0x30>)
 8009456:	f240 529a 	movw	r2, #1434	; 0x59a
 800945a:	4903      	ldr	r1, [pc, #12]	; (8009468 <dhcp_option+0x34>)
 800945c:	4803      	ldr	r0, [pc, #12]	; (800946c <dhcp_option+0x38>)
 800945e:	f008 fe85 	bl	801216c <iprintf>
 8009462:	e7f0      	b.n	8009446 <dhcp_option+0x12>
 8009464:	08067fc8 	.word	0x08067fc8
 8009468:	08067f10 	.word	0x08067f10
 800946c:	0801335c 	.word	0x0801335c

08009470 <dhcp_option_byte>:
{
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	4604      	mov	r4, r0
 8009474:	460d      	mov	r5, r1
 8009476:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8009478:	2843      	cmp	r0, #67	; 0x43
 800947a:	d803      	bhi.n	8009484 <dhcp_option_byte+0x14>
  options[options_out_len++] = value;
 800947c:	1c60      	adds	r0, r4, #1
 800947e:	552e      	strb	r6, [r5, r4]
}
 8009480:	b280      	uxth	r0, r0
 8009482:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8009484:	4b03      	ldr	r3, [pc, #12]	; (8009494 <dhcp_option_byte+0x24>)
 8009486:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800948a:	4903      	ldr	r1, [pc, #12]	; (8009498 <dhcp_option_byte+0x28>)
 800948c:	4803      	ldr	r0, [pc, #12]	; (800949c <dhcp_option_byte+0x2c>)
 800948e:	f008 fe6d 	bl	801216c <iprintf>
 8009492:	e7f3      	b.n	800947c <dhcp_option_byte+0xc>
 8009494:	08067fc8 	.word	0x08067fc8
 8009498:	08067f54 	.word	0x08067f54
 800949c:	0801335c 	.word	0x0801335c

080094a0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	4604      	mov	r4, r0
 80094a4:	460d      	mov	r5, r1
 80094a6:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80094a8:	1d03      	adds	r3, r0, #4
 80094aa:	2b44      	cmp	r3, #68	; 0x44
 80094ac:	d811      	bhi.n	80094d2 <dhcp_option_long+0x32>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80094ae:	1c63      	adds	r3, r4, #1
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	0e32      	lsrs	r2, r6, #24
 80094b4:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80094b6:	1ca2      	adds	r2, r4, #2
 80094b8:	b292      	uxth	r2, r2
 80094ba:	f3c6 4107 	ubfx	r1, r6, #16, #8
 80094be:	54e9      	strb	r1, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80094c0:	1ce3      	adds	r3, r4, #3
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80094c8:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80094ca:	1d20      	adds	r0, r4, #4
 80094cc:	54ee      	strb	r6, [r5, r3]
  return options_out_len;
}
 80094ce:	b280      	uxth	r0, r0
 80094d0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80094d2:	4b04      	ldr	r3, [pc, #16]	; (80094e4 <dhcp_option_long+0x44>)
 80094d4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80094d8:	4903      	ldr	r1, [pc, #12]	; (80094e8 <dhcp_option_long+0x48>)
 80094da:	4804      	ldr	r0, [pc, #16]	; (80094ec <dhcp_option_long+0x4c>)
 80094dc:	f008 fe46 	bl	801216c <iprintf>
 80094e0:	e7e5      	b.n	80094ae <dhcp_option_long+0xe>
 80094e2:	bf00      	nop
 80094e4:	08067fc8 	.word	0x08067fc8
 80094e8:	08067f8c 	.word	0x08067f8c
 80094ec:	0801335c 	.word	0x0801335c

080094f0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80094f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d042      	beq.n	800957e <dhcp_create_msg+0x8e>
 80094f8:	4689      	mov	r9, r1
 80094fa:	4615      	mov	r5, r2
 80094fc:	461f      	mov	r7, r3
 80094fe:	4680      	mov	r8, r0
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8009500:	2900      	cmp	r1, #0
 8009502:	d045      	beq.n	8009590 <dhcp_create_msg+0xa0>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8009504:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009508:	f44f 719a 	mov.w	r1, #308	; 0x134
 800950c:	2036      	movs	r0, #54	; 0x36
 800950e:	f003 fd2d 	bl	800cf6c <pbuf_alloc>
  if (p_out == NULL) {
 8009512:	4606      	mov	r6, r0
 8009514:	2800      	cmp	r0, #0
 8009516:	d079      	beq.n	800960c <dhcp_create_msg+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8009518:	8943      	ldrh	r3, [r0, #10]
 800951a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800951e:	d340      	bcc.n	80095a2 <dhcp_create_msg+0xb2>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8009520:	2d03      	cmp	r5, #3
 8009522:	d046      	beq.n	80095b2 <dhcp_create_msg+0xc2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8009524:	f899 3006 	ldrb.w	r3, [r9, #6]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d047      	beq.n	80095bc <dhcp_create_msg+0xcc>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800952c:	4b39      	ldr	r3, [pc, #228]	; (8009614 <dhcp_create_msg+0x124>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f8c9 3000 	str.w	r3, [r9]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8009534:	6874      	ldr	r4, [r6, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8009536:	f44f 729a 	mov.w	r2, #308	; 0x134
 800953a:	2100      	movs	r1, #0
 800953c:	4620      	mov	r0, r4
 800953e:	f008 fe0c 	bl	801215a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8009542:	2301      	movs	r3, #1
 8009544:	7023      	strb	r3, [r4, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8009546:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 8009548:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 800954c:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800954e:	f8d9 0000 	ldr.w	r0, [r9]
 8009552:	f7ff fdf6 	bl	8009142 <lwip_htonl>
 8009556:	6060      	str	r0, [r4, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8009558:	2d08      	cmp	r5, #8
 800955a:	d00b      	beq.n	8009574 <dhcp_create_msg+0x84>
 800955c:	2d04      	cmp	r5, #4
 800955e:	d009      	beq.n	8009574 <dhcp_create_msg+0x84>
 8009560:	2d07      	cmp	r5, #7
 8009562:	d007      	beq.n	8009574 <dhcp_create_msg+0x84>
 8009564:	2d03      	cmp	r5, #3
 8009566:	d108      	bne.n	800957a <dhcp_create_msg+0x8a>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8009568:	f899 3005 	ldrb.w	r3, [r9, #5]
 800956c:	3b04      	subs	r3, #4
 800956e:	b2db      	uxtb	r3, r3
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8009570:	2b01      	cmp	r3, #1
 8009572:	d802      	bhi.n	800957a <dhcp_create_msg+0x8a>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8009574:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009578:	60e3      	str	r3, [r4, #12]
{
 800957a:	2300      	movs	r3, #0
 800957c:	e02b      	b.n	80095d6 <dhcp_create_msg+0xe6>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800957e:	4b26      	ldr	r3, [pc, #152]	; (8009618 <dhcp_create_msg+0x128>)
 8009580:	f240 7269 	movw	r2, #1897	; 0x769
 8009584:	4925      	ldr	r1, [pc, #148]	; (800961c <dhcp_create_msg+0x12c>)
 8009586:	4826      	ldr	r0, [pc, #152]	; (8009620 <dhcp_create_msg+0x130>)
 8009588:	f008 fdf0 	bl	801216c <iprintf>
 800958c:	2600      	movs	r6, #0
 800958e:	e03d      	b.n	800960c <dhcp_create_msg+0x11c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8009590:	4b21      	ldr	r3, [pc, #132]	; (8009618 <dhcp_create_msg+0x128>)
 8009592:	f240 726a 	movw	r2, #1898	; 0x76a
 8009596:	4923      	ldr	r1, [pc, #140]	; (8009624 <dhcp_create_msg+0x134>)
 8009598:	4821      	ldr	r0, [pc, #132]	; (8009620 <dhcp_create_msg+0x130>)
 800959a:	f008 fde7 	bl	801216c <iprintf>
 800959e:	2600      	movs	r6, #0
 80095a0:	e034      	b.n	800960c <dhcp_create_msg+0x11c>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80095a2:	4b1d      	ldr	r3, [pc, #116]	; (8009618 <dhcp_create_msg+0x128>)
 80095a4:	f240 7272 	movw	r2, #1906	; 0x772
 80095a8:	491f      	ldr	r1, [pc, #124]	; (8009628 <dhcp_create_msg+0x138>)
 80095aa:	481d      	ldr	r0, [pc, #116]	; (8009620 <dhcp_create_msg+0x130>)
 80095ac:	f008 fdde 	bl	801216c <iprintf>
 80095b0:	e7b6      	b.n	8009520 <dhcp_create_msg+0x30>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80095b2:	f899 3005 	ldrb.w	r3, [r9, #5]
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d1bc      	bne.n	8009534 <dhcp_create_msg+0x44>
 80095ba:	e7b3      	b.n	8009524 <dhcp_create_msg+0x34>
      xid = LWIP_RAND();
 80095bc:	f008 fe52 	bl	8012264 <rand>
 80095c0:	4b14      	ldr	r3, [pc, #80]	; (8009614 <dhcp_create_msg+0x124>)
 80095c2:	6018      	str	r0, [r3, #0]
 80095c4:	e7b2      	b.n	800952c <dhcp_create_msg+0x3c>
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80095c6:	eb08 0203 	add.w	r2, r8, r3
 80095ca:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80095ce:	18e2      	adds	r2, r4, r3
 80095d0:	7711      	strb	r1, [r2, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80095d2:	3301      	adds	r3, #1
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	2b05      	cmp	r3, #5
 80095d8:	d9f5      	bls.n	80095c6 <dhcp_create_msg+0xd6>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80095da:	2363      	movs	r3, #99	; 0x63
 80095dc:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 80095e0:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80095e4:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 80095e8:	2253      	movs	r2, #83	; 0x53
 80095ea:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
 80095ee:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80095f2:	34f0      	adds	r4, #240	; 0xf0
 80095f4:	2301      	movs	r3, #1
 80095f6:	2235      	movs	r2, #53	; 0x35
 80095f8:	4621      	mov	r1, r4
 80095fa:	2000      	movs	r0, #0
 80095fc:	f7ff ff1a 	bl	8009434 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8009600:	462a      	mov	r2, r5
 8009602:	4621      	mov	r1, r4
 8009604:	f7ff ff34 	bl	8009470 <dhcp_option_byte>
  if (options_out_len) {
 8009608:	b107      	cbz	r7, 800960c <dhcp_create_msg+0x11c>
    *options_out_len = options_out_len_loc;
 800960a:	8038      	strh	r0, [r7, #0]
  }
  return p_out;
}
 800960c:	4630      	mov	r0, r6
 800960e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009612:	bf00      	nop
 8009614:	20006cf8 	.word	0x20006cf8
 8009618:	08067fc8 	.word	0x08067fc8
 800961c:	08067e2c 	.word	0x08067e2c
 8009620:	0801335c 	.word	0x0801335c
 8009624:	08067e4c 	.word	0x08067e4c
 8009628:	08067e6c 	.word	0x08067e6c

0800962c <dhcp_handle_ack>:
{
 800962c:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800962e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8009630:	2300      	movs	r3, #0
 8009632:	6223      	str	r3, [r4, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8009634:	6263      	str	r3, [r4, #36]	; 0x24
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8009636:	4b1a      	ldr	r3, [pc, #104]	; (80096a0 <dhcp_handle_ack+0x74>)
 8009638:	78db      	ldrb	r3, [r3, #3]
 800963a:	b113      	cbz	r3, 8009642 <dhcp_handle_ack+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800963c:	4b19      	ldr	r3, [pc, #100]	; (80096a4 <dhcp_handle_ack+0x78>)
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	62a3      	str	r3, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8009642:	4b17      	ldr	r3, [pc, #92]	; (80096a0 <dhcp_handle_ack+0x74>)
 8009644:	791b      	ldrb	r3, [r3, #4]
 8009646:	b1eb      	cbz	r3, 8009684 <dhcp_handle_ack+0x58>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8009648:	4b16      	ldr	r3, [pc, #88]	; (80096a4 <dhcp_handle_ack+0x78>)
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800964e:	4b14      	ldr	r3, [pc, #80]	; (80096a0 <dhcp_handle_ack+0x74>)
 8009650:	795b      	ldrb	r3, [r3, #5]
 8009652:	b1db      	cbz	r3, 800968c <dhcp_handle_ack+0x60>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8009654:	4b13      	ldr	r3, [pc, #76]	; (80096a4 <dhcp_handle_ack+0x78>)
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800965a:	690b      	ldr	r3, [r1, #16]
 800965c:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800965e:	4b10      	ldr	r3, [pc, #64]	; (80096a0 <dhcp_handle_ack+0x74>)
 8009660:	799b      	ldrb	r3, [r3, #6]
 8009662:	b1cb      	cbz	r3, 8009698 <dhcp_handle_ack+0x6c>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8009664:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <dhcp_handle_ack+0x78>)
 8009666:	6998      	ldr	r0, [r3, #24]
 8009668:	f7ff fd6b 	bl	8009142 <lwip_htonl>
 800966c:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 800966e:	2301      	movs	r3, #1
 8009670:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8009672:	4b0b      	ldr	r3, [pc, #44]	; (80096a0 <dhcp_handle_ack+0x74>)
 8009674:	79db      	ldrb	r3, [r3, #7]
 8009676:	b123      	cbz	r3, 8009682 <dhcp_handle_ack+0x56>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8009678:	4b0a      	ldr	r3, [pc, #40]	; (80096a4 <dhcp_handle_ack+0x78>)
 800967a:	69d8      	ldr	r0, [r3, #28]
 800967c:	f7ff fd61 	bl	8009142 <lwip_htonl>
 8009680:	6260      	str	r0, [r4, #36]	; 0x24
 8009682:	bd10      	pop	{r4, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8009684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009686:	085b      	lsrs	r3, r3, #1
 8009688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800968a:	e7e0      	b.n	800964e <dhcp_handle_ack+0x22>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800968c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800968e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009692:	08db      	lsrs	r3, r3, #3
 8009694:	6323      	str	r3, [r4, #48]	; 0x30
 8009696:	e7e0      	b.n	800965a <dhcp_handle_ack+0x2e>
    dhcp->subnet_mask_given = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	71e3      	strb	r3, [r4, #7]
 800969c:	e7e9      	b.n	8009672 <dhcp_handle_ack+0x46>
 800969e:	bf00      	nop
 80096a0:	200072fc 	.word	0x200072fc
 80096a4:	20007304 	.word	0x20007304

080096a8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80096a8:	b538      	push	{r3, r4, r5, lr}
  options[options_out_len++] = DHCP_OPTION_END;
 80096aa:	1c43      	adds	r3, r0, #1
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	24ff      	movs	r4, #255	; 0xff
 80096b0:	540c      	strb	r4, [r1, r0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80096b2:	e003      	b.n	80096bc <dhcp_option_trailer+0x14>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80096b4:	1c5c      	adds	r4, r3, #1
 80096b6:	2500      	movs	r5, #0
 80096b8:	54cd      	strb	r5, [r1, r3]
 80096ba:	b2a3      	uxth	r3, r4
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80096bc:	2b43      	cmp	r3, #67	; 0x43
 80096be:	d808      	bhi.n	80096d2 <dhcp_option_trailer+0x2a>
 80096c0:	2b43      	cmp	r3, #67	; 0x43
 80096c2:	d9f7      	bls.n	80096b4 <dhcp_option_trailer+0xc>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80096c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80096c8:	b289      	uxth	r1, r1
 80096ca:	4610      	mov	r0, r2
 80096cc:	f003 fcfa 	bl	800d0c4 <pbuf_realloc>
 80096d0:	bd38      	pop	{r3, r4, r5, pc}
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80096d2:	f013 0f03 	tst.w	r3, #3
 80096d6:	d1f3      	bne.n	80096c0 <dhcp_option_trailer+0x18>
 80096d8:	e7f4      	b.n	80096c4 <dhcp_option_trailer+0x1c>
	...

080096dc <dhcp_rebind>:
{
 80096dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80096e4:	6a45      	ldr	r5, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80096e6:	2104      	movs	r1, #4
 80096e8:	4628      	mov	r0, r5
 80096ea:	f7ff fe7d 	bl	80093e8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80096ee:	f10d 030e 	add.w	r3, sp, #14
 80096f2:	2203      	movs	r2, #3
 80096f4:	4629      	mov	r1, r5
 80096f6:	4640      	mov	r0, r8
 80096f8:	f7ff fefa 	bl	80094f0 <dhcp_create_msg>
  if (p_out != NULL) {
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d057      	beq.n	80097b0 <dhcp_rebind+0xd4>
 8009700:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8009702:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009704:	36f0      	adds	r6, #240	; 0xf0
 8009706:	2302      	movs	r3, #2
 8009708:	2239      	movs	r2, #57	; 0x39
 800970a:	4631      	mov	r1, r6
 800970c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8009710:	f7ff fe90 	bl	8009434 <dhcp_option>
 8009714:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8009718:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800971c:	4631      	mov	r1, r6
 800971e:	f7ff fe6b 	bl	80093f8 <dhcp_option_short>
 8009722:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009726:	2303      	movs	r3, #3
 8009728:	2237      	movs	r2, #55	; 0x37
 800972a:	4631      	mov	r1, r6
 800972c:	f7ff fe82 	bl	8009434 <dhcp_option>
 8009730:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009734:	2400      	movs	r4, #0
 8009736:	e00a      	b.n	800974e <dhcp_rebind+0x72>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8009738:	4b20      	ldr	r3, [pc, #128]	; (80097bc <dhcp_rebind+0xe0>)
 800973a:	5d1a      	ldrb	r2, [r3, r4]
 800973c:	4631      	mov	r1, r6
 800973e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8009742:	f7ff fe95 	bl	8009470 <dhcp_option_byte>
 8009746:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800974a:	3401      	adds	r4, #1
 800974c:	b2e4      	uxtb	r4, r4
 800974e:	2c02      	cmp	r4, #2
 8009750:	d9f2      	bls.n	8009738 <dhcp_rebind+0x5c>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8009752:	463a      	mov	r2, r7
 8009754:	4631      	mov	r1, r6
 8009756:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800975a:	f7ff ffa5 	bl	80096a8 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800975e:	4b18      	ldr	r3, [pc, #96]	; (80097c0 <dhcp_rebind+0xe4>)
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	f8cd 8000 	str.w	r8, [sp]
 8009766:	2343      	movs	r3, #67	; 0x43
 8009768:	4a16      	ldr	r2, [pc, #88]	; (80097c4 <dhcp_rebind+0xe8>)
 800976a:	4639      	mov	r1, r7
 800976c:	f008 f9b6 	bl	8011adc <udp_sendto_if>
 8009770:	4604      	mov	r4, r0
    pbuf_free(p_out);
 8009772:	4638      	mov	r0, r7
 8009774:	f003 fb90 	bl	800ce98 <pbuf_free>
  if (dhcp->tries < 255) {
 8009778:	79ab      	ldrb	r3, [r5, #6]
 800977a:	2bff      	cmp	r3, #255	; 0xff
 800977c:	d001      	beq.n	8009782 <dhcp_rebind+0xa6>
    dhcp->tries++;
 800977e:	3301      	adds	r3, #1
 8009780:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8009782:	79ab      	ldrb	r3, [r5, #6]
 8009784:	2b09      	cmp	r3, #9
 8009786:	d816      	bhi.n	80097b6 <dhcp_rebind+0xda>
 8009788:	b29b      	uxth	r3, r3
 800978a:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800978e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009792:	00d3      	lsls	r3, r2, #3
 8009794:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8009796:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800979a:	4a0b      	ldr	r2, [pc, #44]	; (80097c8 <dhcp_rebind+0xec>)
 800979c:	fb82 1203 	smull	r1, r2, r2, r3
 80097a0:	17db      	asrs	r3, r3, #31
 80097a2:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80097a6:	812b      	strh	r3, [r5, #8]
}
 80097a8:	4620      	mov	r0, r4
 80097aa:	b004      	add	sp, #16
 80097ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 80097b0:	f04f 34ff 	mov.w	r4, #4294967295
 80097b4:	e7e0      	b.n	8009778 <dhcp_rebind+0x9c>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80097b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80097ba:	e7ec      	b.n	8009796 <dhcp_rebind+0xba>
 80097bc:	08067ed0 	.word	0x08067ed0
 80097c0:	20006cf0 	.word	0x20006cf0
 80097c4:	080684a8 	.word	0x080684a8
 80097c8:	10624dd3 	.word	0x10624dd3

080097cc <dhcp_t2_timeout>:
{
 80097cc:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80097ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80097d0:	7963      	ldrb	r3, [r4, #5]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d005      	beq.n	80097e2 <dhcp_t2_timeout+0x16>
 80097d6:	2b0a      	cmp	r3, #10
 80097d8:	d003      	beq.n	80097e2 <dhcp_t2_timeout+0x16>
 80097da:	2b05      	cmp	r3, #5
 80097dc:	d001      	beq.n	80097e2 <dhcp_t2_timeout+0x16>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80097de:	2b04      	cmp	r3, #4
 80097e0:	d10b      	bne.n	80097fa <dhcp_t2_timeout+0x2e>
    dhcp_rebind(netif);
 80097e2:	f7ff ff7b 	bl	80096dc <dhcp_rebind>
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80097e6:	8aa3      	ldrh	r3, [r4, #20]
 80097e8:	8a62      	ldrh	r2, [r4, #18]
 80097ea:	1a9b      	subs	r3, r3, r2
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	dd04      	ble.n	80097fa <dhcp_t2_timeout+0x2e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80097f0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80097f4:	f3c3 034f 	ubfx	r3, r3, #1, #16
 80097f8:	8223      	strh	r3, [r4, #16]
 80097fa:	bd10      	pop	{r4, pc}

080097fc <dhcp_reboot>:
{
 80097fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009804:	6a46      	ldr	r6, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8009806:	2103      	movs	r1, #3
 8009808:	4630      	mov	r0, r6
 800980a:	f7ff fded 	bl	80093e8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800980e:	f10d 030e 	add.w	r3, sp, #14
 8009812:	2203      	movs	r2, #3
 8009814:	4631      	mov	r1, r6
 8009816:	4640      	mov	r0, r8
 8009818:	f7ff fe6a 	bl	80094f0 <dhcp_create_msg>
  if (p_out != NULL) {
 800981c:	2800      	cmp	r0, #0
 800981e:	d069      	beq.n	80098f4 <dhcp_reboot+0xf8>
 8009820:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8009822:	6845      	ldr	r5, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009824:	35f0      	adds	r5, #240	; 0xf0
 8009826:	2302      	movs	r3, #2
 8009828:	2239      	movs	r2, #57	; 0x39
 800982a:	4629      	mov	r1, r5
 800982c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8009830:	f7ff fe00 	bl	8009434 <dhcp_option>
 8009834:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8009838:	f44f 7210 	mov.w	r2, #576	; 0x240
 800983c:	4629      	mov	r1, r5
 800983e:	f7ff fddb 	bl	80093f8 <dhcp_option_short>
 8009842:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8009846:	2304      	movs	r3, #4
 8009848:	2232      	movs	r2, #50	; 0x32
 800984a:	4629      	mov	r1, r5
 800984c:	f7ff fdf2 	bl	8009434 <dhcp_option>
 8009850:	4604      	mov	r4, r0
 8009852:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009856:	69f0      	ldr	r0, [r6, #28]
 8009858:	f7ff fc73 	bl	8009142 <lwip_htonl>
 800985c:	4602      	mov	r2, r0
 800985e:	4629      	mov	r1, r5
 8009860:	4620      	mov	r0, r4
 8009862:	f7ff fe1d 	bl	80094a0 <dhcp_option_long>
 8009866:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800986a:	2303      	movs	r3, #3
 800986c:	2237      	movs	r2, #55	; 0x37
 800986e:	4629      	mov	r1, r5
 8009870:	f7ff fde0 	bl	8009434 <dhcp_option>
 8009874:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009878:	2400      	movs	r4, #0
 800987a:	e00a      	b.n	8009892 <dhcp_reboot+0x96>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800987c:	4b20      	ldr	r3, [pc, #128]	; (8009900 <dhcp_reboot+0x104>)
 800987e:	5d1a      	ldrb	r2, [r3, r4]
 8009880:	4629      	mov	r1, r5
 8009882:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8009886:	f7ff fdf3 	bl	8009470 <dhcp_option_byte>
 800988a:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800988e:	3401      	adds	r4, #1
 8009890:	b2e4      	uxtb	r4, r4
 8009892:	2c02      	cmp	r4, #2
 8009894:	d9f2      	bls.n	800987c <dhcp_reboot+0x80>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8009896:	463a      	mov	r2, r7
 8009898:	4629      	mov	r1, r5
 800989a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800989e:	f7ff ff03 	bl	80096a8 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80098a2:	4b18      	ldr	r3, [pc, #96]	; (8009904 <dhcp_reboot+0x108>)
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	f8cd 8000 	str.w	r8, [sp]
 80098aa:	2343      	movs	r3, #67	; 0x43
 80098ac:	4a16      	ldr	r2, [pc, #88]	; (8009908 <dhcp_reboot+0x10c>)
 80098ae:	4639      	mov	r1, r7
 80098b0:	f008 f914 	bl	8011adc <udp_sendto_if>
 80098b4:	4604      	mov	r4, r0
    pbuf_free(p_out);
 80098b6:	4638      	mov	r0, r7
 80098b8:	f003 faee 	bl	800ce98 <pbuf_free>
  if (dhcp->tries < 255) {
 80098bc:	79b3      	ldrb	r3, [r6, #6]
 80098be:	2bff      	cmp	r3, #255	; 0xff
 80098c0:	d001      	beq.n	80098c6 <dhcp_reboot+0xca>
    dhcp->tries++;
 80098c2:	3301      	adds	r3, #1
 80098c4:	71b3      	strb	r3, [r6, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80098c6:	79b3      	ldrb	r3, [r6, #6]
 80098c8:	2b09      	cmp	r3, #9
 80098ca:	d816      	bhi.n	80098fa <dhcp_reboot+0xfe>
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80098d2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80098d6:	00d3      	lsls	r3, r2, #3
 80098d8:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80098da:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80098de:	4a0b      	ldr	r2, [pc, #44]	; (800990c <dhcp_reboot+0x110>)
 80098e0:	fb82 1203 	smull	r1, r2, r2, r3
 80098e4:	17db      	asrs	r3, r3, #31
 80098e6:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80098ea:	8133      	strh	r3, [r6, #8]
}
 80098ec:	4620      	mov	r0, r4
 80098ee:	b004      	add	sp, #16
 80098f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 80098f4:	f04f 34ff 	mov.w	r4, #4294967295
 80098f8:	e7e0      	b.n	80098bc <dhcp_reboot+0xc0>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80098fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80098fe:	e7ec      	b.n	80098da <dhcp_reboot+0xde>
 8009900:	08067ed0 	.word	0x08067ed0
 8009904:	20006cf0 	.word	0x20006cf0
 8009908:	080684a8 	.word	0x080684a8
 800990c:	10624dd3 	.word	0x10624dd3

08009910 <dhcp_select>:
{
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	b084      	sub	sp, #16
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8009916:	2800      	cmp	r0, #0
 8009918:	d050      	beq.n	80099bc <dhcp_select+0xac>
 800991a:	4607      	mov	r7, r0
  dhcp = netif_dhcp_data(netif);
 800991c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800991e:	2d00      	cmp	r5, #0
 8009920:	d056      	beq.n	80099d0 <dhcp_select+0xc0>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8009922:	2101      	movs	r1, #1
 8009924:	4628      	mov	r0, r5
 8009926:	f7ff fd5f 	bl	80093e8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800992a:	f10d 030e 	add.w	r3, sp, #14
 800992e:	2203      	movs	r2, #3
 8009930:	4629      	mov	r1, r5
 8009932:	4638      	mov	r0, r7
 8009934:	f7ff fddc 	bl	80094f0 <dhcp_create_msg>
  if (p_out != NULL) {
 8009938:	4680      	mov	r8, r0
 800993a:	2800      	cmp	r0, #0
 800993c:	f000 8090 	beq.w	8009a60 <dhcp_select+0x150>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8009940:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009942:	36f0      	adds	r6, #240	; 0xf0
 8009944:	2302      	movs	r3, #2
 8009946:	2239      	movs	r2, #57	; 0x39
 8009948:	4631      	mov	r1, r6
 800994a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800994e:	f7ff fd71 	bl	8009434 <dhcp_option>
 8009952:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8009956:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009958:	4631      	mov	r1, r6
 800995a:	f7ff fd4d 	bl	80093f8 <dhcp_option_short>
 800995e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8009962:	2304      	movs	r3, #4
 8009964:	2232      	movs	r2, #50	; 0x32
 8009966:	4631      	mov	r1, r6
 8009968:	f7ff fd64 	bl	8009434 <dhcp_option>
 800996c:	4604      	mov	r4, r0
 800996e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009972:	69e8      	ldr	r0, [r5, #28]
 8009974:	f7ff fbe5 	bl	8009142 <lwip_htonl>
 8009978:	4602      	mov	r2, r0
 800997a:	4631      	mov	r1, r6
 800997c:	4620      	mov	r0, r4
 800997e:	f7ff fd8f 	bl	80094a0 <dhcp_option_long>
 8009982:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8009986:	2304      	movs	r3, #4
 8009988:	2236      	movs	r2, #54	; 0x36
 800998a:	4631      	mov	r1, r6
 800998c:	f7ff fd52 	bl	8009434 <dhcp_option>
 8009990:	4604      	mov	r4, r0
 8009992:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8009996:	69a8      	ldr	r0, [r5, #24]
 8009998:	f7ff fbd3 	bl	8009142 <lwip_htonl>
 800999c:	4602      	mov	r2, r0
 800999e:	4631      	mov	r1, r6
 80099a0:	4620      	mov	r0, r4
 80099a2:	f7ff fd7d 	bl	80094a0 <dhcp_option_long>
 80099a6:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80099aa:	2303      	movs	r3, #3
 80099ac:	2237      	movs	r2, #55	; 0x37
 80099ae:	4631      	mov	r1, r6
 80099b0:	f7ff fd40 	bl	8009434 <dhcp_option>
 80099b4:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80099b8:	2400      	movs	r4, #0
 80099ba:	e01e      	b.n	80099fa <dhcp_select+0xea>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80099bc:	4b2b      	ldr	r3, [pc, #172]	; (8009a6c <dhcp_select+0x15c>)
 80099be:	f240 1277 	movw	r2, #375	; 0x177
 80099c2:	492b      	ldr	r1, [pc, #172]	; (8009a70 <dhcp_select+0x160>)
 80099c4:	482b      	ldr	r0, [pc, #172]	; (8009a74 <dhcp_select+0x164>)
 80099c6:	f008 fbd1 	bl	801216c <iprintf>
 80099ca:	f06f 040f 	mvn.w	r4, #15
 80099ce:	e043      	b.n	8009a58 <dhcp_select+0x148>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80099d0:	4b26      	ldr	r3, [pc, #152]	; (8009a6c <dhcp_select+0x15c>)
 80099d2:	f240 1279 	movw	r2, #377	; 0x179
 80099d6:	4928      	ldr	r1, [pc, #160]	; (8009a78 <dhcp_select+0x168>)
 80099d8:	4826      	ldr	r0, [pc, #152]	; (8009a74 <dhcp_select+0x164>)
 80099da:	f008 fbc7 	bl	801216c <iprintf>
 80099de:	f06f 0405 	mvn.w	r4, #5
 80099e2:	e039      	b.n	8009a58 <dhcp_select+0x148>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80099e4:	4b25      	ldr	r3, [pc, #148]	; (8009a7c <dhcp_select+0x16c>)
 80099e6:	5d1a      	ldrb	r2, [r3, r4]
 80099e8:	4631      	mov	r1, r6
 80099ea:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80099ee:	f7ff fd3f 	bl	8009470 <dhcp_option_byte>
 80099f2:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80099f6:	3401      	adds	r4, #1
 80099f8:	b2e4      	uxtb	r4, r4
 80099fa:	2c02      	cmp	r4, #2
 80099fc:	d9f2      	bls.n	80099e4 <dhcp_select+0xd4>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80099fe:	4642      	mov	r2, r8
 8009a00:	4631      	mov	r1, r6
 8009a02:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8009a06:	f7ff fe4f 	bl	80096a8 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8009a0a:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <dhcp_select+0x170>)
 8009a0c:	6818      	ldr	r0, [r3, #0]
 8009a0e:	4b1d      	ldr	r3, [pc, #116]	; (8009a84 <dhcp_select+0x174>)
 8009a10:	9301      	str	r3, [sp, #4]
 8009a12:	9700      	str	r7, [sp, #0]
 8009a14:	2343      	movs	r3, #67	; 0x43
 8009a16:	4a1c      	ldr	r2, [pc, #112]	; (8009a88 <dhcp_select+0x178>)
 8009a18:	4641      	mov	r1, r8
 8009a1a:	f007 ff91 	bl	8011940 <udp_sendto_if_src>
 8009a1e:	4604      	mov	r4, r0
    pbuf_free(p_out);
 8009a20:	4640      	mov	r0, r8
 8009a22:	f003 fa39 	bl	800ce98 <pbuf_free>
  if (dhcp->tries < 255) {
 8009a26:	79ab      	ldrb	r3, [r5, #6]
 8009a28:	2bff      	cmp	r3, #255	; 0xff
 8009a2a:	d001      	beq.n	8009a30 <dhcp_select+0x120>
    dhcp->tries++;
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8009a30:	79aa      	ldrb	r2, [r5, #6]
 8009a32:	2a05      	cmp	r2, #5
 8009a34:	d817      	bhi.n	8009a66 <dhcp_select+0x156>
 8009a36:	2301      	movs	r3, #1
 8009a38:	4093      	lsls	r3, r2
 8009a3a:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8009a3e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009a42:	00d3      	lsls	r3, r2, #3
 8009a44:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8009a46:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009a4a:	4a10      	ldr	r2, [pc, #64]	; (8009a8c <dhcp_select+0x17c>)
 8009a4c:	fb82 1203 	smull	r1, r2, r2, r3
 8009a50:	17db      	asrs	r3, r3, #31
 8009a52:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8009a56:	812b      	strh	r3, [r5, #8]
}
 8009a58:	4620      	mov	r0, r4
 8009a5a:	b004      	add	sp, #16
 8009a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8009a60:	f04f 34ff 	mov.w	r4, #4294967295
 8009a64:	e7df      	b.n	8009a26 <dhcp_select+0x116>
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8009a66:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009a6a:	e7ec      	b.n	8009a46 <dhcp_select+0x136>
 8009a6c:	08067fc8 	.word	0x08067fc8
 8009a70:	080680dc 	.word	0x080680dc
 8009a74:	0801335c 	.word	0x0801335c
 8009a78:	080680f8 	.word	0x080680f8
 8009a7c:	08067ed0 	.word	0x08067ed0
 8009a80:	20006cf0 	.word	0x20006cf0
 8009a84:	080684a4 	.word	0x080684a4
 8009a88:	080684a8 	.word	0x080684a8
 8009a8c:	10624dd3 	.word	0x10624dd3

08009a90 <dhcp_handle_offer>:
{
 8009a90:	b570      	push	{r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009a92:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8009a94:	4b08      	ldr	r3, [pc, #32]	; (8009ab8 <dhcp_handle_offer+0x28>)
 8009a96:	789b      	ldrb	r3, [r3, #2]
 8009a98:	b16b      	cbz	r3, 8009ab6 <dhcp_handle_offer+0x26>
 8009a9a:	460e      	mov	r6, r1
 8009a9c:	4604      	mov	r4, r0
    dhcp->request_timeout = 0; /* stop timer */
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8009aa2:	4b06      	ldr	r3, [pc, #24]	; (8009abc <dhcp_handle_offer+0x2c>)
 8009aa4:	6898      	ldr	r0, [r3, #8]
 8009aa6:	f7ff fb4c 	bl	8009142 <lwip_htonl>
 8009aaa:	61a8      	str	r0, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8009aac:	6933      	ldr	r3, [r6, #16]
 8009aae:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f7ff ff2d 	bl	8009910 <dhcp_select>
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	200072fc 	.word	0x200072fc
 8009abc:	20007304 	.word	0x20007304

08009ac0 <dhcp_discover>:
{
 8009ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009ac8:	6a45      	ldr	r5, [r0, #36]	; 0x24
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8009aca:	2300      	movs	r3, #0
 8009acc:	61eb      	str	r3, [r5, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8009ace:	2106      	movs	r1, #6
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	f7ff fc89 	bl	80093e8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8009ad6:	f10d 030e 	add.w	r3, sp, #14
 8009ada:	2201      	movs	r2, #1
 8009adc:	4629      	mov	r1, r5
 8009ade:	4638      	mov	r0, r7
 8009ae0:	f7ff fd06 	bl	80094f0 <dhcp_create_msg>
  if (p_out != NULL) {
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d03a      	beq.n	8009b5e <dhcp_discover+0x9e>
 8009ae8:	4680      	mov	r8, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8009aea:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009aec:	36f0      	adds	r6, #240	; 0xf0
 8009aee:	2302      	movs	r3, #2
 8009af0:	2239      	movs	r2, #57	; 0x39
 8009af2:	4631      	mov	r1, r6
 8009af4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8009af8:	f7ff fc9c 	bl	8009434 <dhcp_option>
 8009afc:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8009b00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009b02:	4631      	mov	r1, r6
 8009b04:	f7ff fc78 	bl	80093f8 <dhcp_option_short>
 8009b08:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	2237      	movs	r2, #55	; 0x37
 8009b10:	4631      	mov	r1, r6
 8009b12:	f7ff fc8f 	bl	8009434 <dhcp_option>
 8009b16:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009b1a:	2400      	movs	r4, #0
 8009b1c:	e00a      	b.n	8009b34 <dhcp_discover+0x74>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8009b1e:	4b20      	ldr	r3, [pc, #128]	; (8009ba0 <dhcp_discover+0xe0>)
 8009b20:	5d1a      	ldrb	r2, [r3, r4]
 8009b22:	4631      	mov	r1, r6
 8009b24:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8009b28:	f7ff fca2 	bl	8009470 <dhcp_option_byte>
 8009b2c:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009b30:	3401      	adds	r4, #1
 8009b32:	b2e4      	uxtb	r4, r4
 8009b34:	2c02      	cmp	r4, #2
 8009b36:	d9f2      	bls.n	8009b1e <dhcp_discover+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8009b38:	4642      	mov	r2, r8
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8009b40:	f7ff fdb2 	bl	80096a8 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8009b44:	4b17      	ldr	r3, [pc, #92]	; (8009ba4 <dhcp_discover+0xe4>)
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	4b17      	ldr	r3, [pc, #92]	; (8009ba8 <dhcp_discover+0xe8>)
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	9700      	str	r7, [sp, #0]
 8009b4e:	2343      	movs	r3, #67	; 0x43
 8009b50:	4a16      	ldr	r2, [pc, #88]	; (8009bac <dhcp_discover+0xec>)
 8009b52:	4641      	mov	r1, r8
 8009b54:	f007 fef4 	bl	8011940 <udp_sendto_if_src>
    pbuf_free(p_out);
 8009b58:	4640      	mov	r0, r8
 8009b5a:	f003 f99d 	bl	800ce98 <pbuf_free>
  if (dhcp->tries < 255) {
 8009b5e:	79ab      	ldrb	r3, [r5, #6]
 8009b60:	2bff      	cmp	r3, #255	; 0xff
 8009b62:	d001      	beq.n	8009b68 <dhcp_discover+0xa8>
    dhcp->tries++;
 8009b64:	3301      	adds	r3, #1
 8009b66:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8009b68:	79aa      	ldrb	r2, [r5, #6]
 8009b6a:	2a05      	cmp	r2, #5
 8009b6c:	d814      	bhi.n	8009b98 <dhcp_discover+0xd8>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	4093      	lsls	r3, r2
 8009b72:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8009b76:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8009b7a:	00d3      	lsls	r3, r2, #3
 8009b7c:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8009b7e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009b82:	4a0b      	ldr	r2, [pc, #44]	; (8009bb0 <dhcp_discover+0xf0>)
 8009b84:	fb82 1203 	smull	r1, r2, r2, r3
 8009b88:	17db      	asrs	r3, r3, #31
 8009b8a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8009b8e:	812b      	strh	r3, [r5, #8]
}
 8009b90:	2000      	movs	r0, #0
 8009b92:	b004      	add	sp, #16
 8009b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8009b98:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009b9c:	e7ef      	b.n	8009b7e <dhcp_discover+0xbe>
 8009b9e:	bf00      	nop
 8009ba0:	08067ed0 	.word	0x08067ed0
 8009ba4:	20006cf0 	.word	0x20006cf0
 8009ba8:	080684a4 	.word	0x080684a4
 8009bac:	080684a8 	.word	0x080684a8
 8009bb0:	10624dd3 	.word	0x10624dd3

08009bb4 <dhcp_decline>:
{
 8009bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009bbc:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8009bbe:	210c      	movs	r1, #12
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f7ff fc11 	bl	80093e8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8009bc6:	f10d 030e 	add.w	r3, sp, #14
 8009bca:	2204      	movs	r2, #4
 8009bcc:	4621      	mov	r1, r4
 8009bce:	4638      	mov	r0, r7
 8009bd0:	f7ff fc8e 	bl	80094f0 <dhcp_create_msg>
  if (p_out != NULL) {
 8009bd4:	b398      	cbz	r0, 8009c3e <dhcp_decline+0x8a>
 8009bd6:	4606      	mov	r6, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8009bd8:	6845      	ldr	r5, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8009bda:	35f0      	adds	r5, #240	; 0xf0
 8009bdc:	2304      	movs	r3, #4
 8009bde:	2232      	movs	r2, #50	; 0x32
 8009be0:	4629      	mov	r1, r5
 8009be2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8009be6:	f7ff fc25 	bl	8009434 <dhcp_option>
 8009bea:	4680      	mov	r8, r0
 8009bec:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009bf0:	69e0      	ldr	r0, [r4, #28]
 8009bf2:	f7ff faa6 	bl	8009142 <lwip_htonl>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	f7ff fc50 	bl	80094a0 <dhcp_option_long>
 8009c00:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8009c04:	4632      	mov	r2, r6
 8009c06:	4629      	mov	r1, r5
 8009c08:	f7ff fd4e 	bl	80096a8 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8009c0c:	4b0d      	ldr	r3, [pc, #52]	; (8009c44 <dhcp_decline+0x90>)
 8009c0e:	6818      	ldr	r0, [r3, #0]
 8009c10:	4b0d      	ldr	r3, [pc, #52]	; (8009c48 <dhcp_decline+0x94>)
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	9700      	str	r7, [sp, #0]
 8009c16:	2343      	movs	r3, #67	; 0x43
 8009c18:	4a0c      	ldr	r2, [pc, #48]	; (8009c4c <dhcp_decline+0x98>)
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	f007 fe90 	bl	8011940 <udp_sendto_if_src>
 8009c20:	4605      	mov	r5, r0
    pbuf_free(p_out);
 8009c22:	4630      	mov	r0, r6
 8009c24:	f003 f938 	bl	800ce98 <pbuf_free>
  if (dhcp->tries < 255) {
 8009c28:	79a3      	ldrb	r3, [r4, #6]
 8009c2a:	2bff      	cmp	r3, #255	; 0xff
 8009c2c:	d001      	beq.n	8009c32 <dhcp_decline+0x7e>
    dhcp->tries++;
 8009c2e:	3301      	adds	r3, #1
 8009c30:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8009c32:	2314      	movs	r3, #20
 8009c34:	8123      	strh	r3, [r4, #8]
}
 8009c36:	4628      	mov	r0, r5
 8009c38:	b004      	add	sp, #16
 8009c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8009c3e:	f04f 35ff 	mov.w	r5, #4294967295
 8009c42:	e7f1      	b.n	8009c28 <dhcp_decline+0x74>
 8009c44:	20006cf0 	.word	0x20006cf0
 8009c48:	080684a4 	.word	0x080684a4
 8009c4c:	080684a8 	.word	0x080684a8

08009c50 <dhcp_check>:
{
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009c54:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8009c56:	2108      	movs	r1, #8
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f7ff fbc5 	bl	80093e8 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f104 011c 	add.w	r1, r4, #28
 8009c64:	4628      	mov	r0, r5
 8009c66:	f001 f953 	bl	800af10 <etharp_query>
  if (dhcp->tries < 255) {
 8009c6a:	79a3      	ldrb	r3, [r4, #6]
 8009c6c:	2bff      	cmp	r3, #255	; 0xff
 8009c6e:	d001      	beq.n	8009c74 <dhcp_check+0x24>
    dhcp->tries++;
 8009c70:	3301      	adds	r3, #1
 8009c72:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8009c74:	2301      	movs	r3, #1
 8009c76:	8123      	strh	r3, [r4, #8]
 8009c78:	bd38      	pop	{r3, r4, r5, pc}
	...

08009c7c <dhcp_bind>:
{
 8009c7c:	b530      	push	{r4, r5, lr}
 8009c7e:	b083      	sub	sp, #12
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d063      	beq.n	8009d4c <dhcp_bind+0xd0>
 8009c84:	4605      	mov	r5, r0
  dhcp = netif_dhcp_data(netif);
 8009c86:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8009c88:	2c00      	cmp	r4, #0
 8009c8a:	d067      	beq.n	8009d5c <dhcp_bind+0xe0>
  dhcp->lease_used = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	8263      	strh	r3, [r4, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8009c90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c96:	d00e      	beq.n	8009cb6 <dhcp_bind+0x3a>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009c98:	331e      	adds	r3, #30
 8009c9a:	4a3d      	ldr	r2, [pc, #244]	; (8009d90 <dhcp_bind+0x114>)
 8009c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca0:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 8009ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ca6:	d301      	bcc.n	8009cac <dhcp_bind+0x30>
      timeout = 0xffff;
 8009ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t0_timeout = (u16_t)timeout;
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	82a3      	strh	r3, [r4, #20]
    if (dhcp->t0_timeout == 0) {
 8009cb0:	b90b      	cbnz	r3, 8009cb6 <dhcp_bind+0x3a>
      dhcp->t0_timeout = 1;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	82a3      	strh	r3, [r4, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8009cb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbc:	d010      	beq.n	8009ce0 <dhcp_bind+0x64>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009cbe:	331e      	adds	r3, #30
 8009cc0:	4a33      	ldr	r2, [pc, #204]	; (8009d90 <dhcp_bind+0x114>)
 8009cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc6:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 8009cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ccc:	d301      	bcc.n	8009cd2 <dhcp_bind+0x56>
      timeout = 0xffff;
 8009cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t1_timeout = (u16_t)timeout;
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	8163      	strh	r3, [r4, #10]
    if (dhcp->t1_timeout == 0) {
 8009cd6:	b90b      	cbnz	r3, 8009cdc <dhcp_bind+0x60>
      dhcp->t1_timeout = 1;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	8163      	strh	r3, [r4, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8009cdc:	8963      	ldrh	r3, [r4, #10]
 8009cde:	81e3      	strh	r3, [r4, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8009ce0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce6:	d010      	beq.n	8009d0a <dhcp_bind+0x8e>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009ce8:	331e      	adds	r3, #30
 8009cea:	4a29      	ldr	r2, [pc, #164]	; (8009d90 <dhcp_bind+0x114>)
 8009cec:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf0:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 8009cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cf6:	d301      	bcc.n	8009cfc <dhcp_bind+0x80>
      timeout = 0xffff;
 8009cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t2_timeout = (u16_t)timeout;
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	81a3      	strh	r3, [r4, #12]
    if (dhcp->t2_timeout == 0) {
 8009d00:	b90b      	cbnz	r3, 8009d06 <dhcp_bind+0x8a>
      dhcp->t2_timeout = 1;
 8009d02:	2301      	movs	r3, #1
 8009d04:	81a3      	strh	r3, [r4, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	8223      	strh	r3, [r4, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8009d0a:	8962      	ldrh	r2, [r4, #10]
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d302      	bcc.n	8009d18 <dhcp_bind+0x9c>
 8009d12:	b10b      	cbz	r3, 8009d18 <dhcp_bind+0x9c>
    dhcp->t1_timeout = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	8163      	strh	r3, [r4, #10]
  if (dhcp->subnet_mask_given) {
 8009d18:	79e3      	ldrb	r3, [r4, #7]
 8009d1a:	b33b      	cbz	r3, 8009d6c <dhcp_bind+0xf0>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8009d1c:	6a23      	ldr	r3, [r4, #32]
 8009d1e:	9301      	str	r3, [sp, #4]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8009d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d22:	9300      	str	r3, [sp, #0]
  if (ip4_addr_isany_val(gw_addr)) {
 8009d24:	b92b      	cbnz	r3, 8009d32 <dhcp_bind+0xb6>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8009d26:	69e3      	ldr	r3, [r4, #28]
 8009d28:	9a01      	ldr	r2, [sp, #4]
 8009d2a:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8009d2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d30:	9300      	str	r3, [sp, #0]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8009d32:	210a      	movs	r1, #10
 8009d34:	4620      	mov	r0, r4
 8009d36:	f7ff fb57 	bl	80093e8 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8009d3a:	466b      	mov	r3, sp
 8009d3c:	aa01      	add	r2, sp, #4
 8009d3e:	f104 011c 	add.w	r1, r4, #28
 8009d42:	4628      	mov	r0, r5
 8009d44:	f002 fe5a 	bl	800c9fc <netif_set_addr>
}
 8009d48:	b003      	add	sp, #12
 8009d4a:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8009d4c:	4b11      	ldr	r3, [pc, #68]	; (8009d94 <dhcp_bind+0x118>)
 8009d4e:	f240 4215 	movw	r2, #1045	; 0x415
 8009d52:	4911      	ldr	r1, [pc, #68]	; (8009d98 <dhcp_bind+0x11c>)
 8009d54:	4811      	ldr	r0, [pc, #68]	; (8009d9c <dhcp_bind+0x120>)
 8009d56:	f008 fa09 	bl	801216c <iprintf>
 8009d5a:	e7f5      	b.n	8009d48 <dhcp_bind+0xcc>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	; (8009d94 <dhcp_bind+0x118>)
 8009d5e:	f240 4217 	movw	r2, #1047	; 0x417
 8009d62:	490f      	ldr	r1, [pc, #60]	; (8009da0 <dhcp_bind+0x124>)
 8009d64:	480d      	ldr	r0, [pc, #52]	; (8009d9c <dhcp_bind+0x120>)
 8009d66:	f008 fa01 	bl	801216c <iprintf>
 8009d6a:	e7ed      	b.n	8009d48 <dhcp_bind+0xcc>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8009d6c:	7f23      	ldrb	r3, [r4, #28]
    if (first_octet <= 127) {
 8009d6e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d72:	d102      	bne.n	8009d7a <dhcp_bind+0xfe>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8009d74:	23ff      	movs	r3, #255	; 0xff
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	e7d2      	b.n	8009d20 <dhcp_bind+0xa4>
    } else if (first_octet >= 192) {
 8009d7a:	2bbf      	cmp	r3, #191	; 0xbf
 8009d7c:	d903      	bls.n	8009d86 <dhcp_bind+0x10a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8009d7e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8009d82:	9301      	str	r3, [sp, #4]
 8009d84:	e7cc      	b.n	8009d20 <dhcp_bind+0xa4>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8009d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d8a:	9301      	str	r3, [sp, #4]
 8009d8c:	e7c8      	b.n	8009d20 <dhcp_bind+0xa4>
 8009d8e:	bf00      	nop
 8009d90:	88888889 	.word	0x88888889
 8009d94:	08067fc8 	.word	0x08067fc8
 8009d98:	08067df8 	.word	0x08067df8
 8009d9c:	0801335c 	.word	0x0801335c
 8009da0:	08067e14 	.word	0x08067e14

08009da4 <dhcp_handle_nak>:
{
 8009da4:	b510      	push	{r4, lr}
 8009da6:	4604      	mov	r4, r0
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8009da8:	210c      	movs	r1, #12
 8009daa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009dac:	f7ff fb1c 	bl	80093e8 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8009db0:	4904      	ldr	r1, [pc, #16]	; (8009dc4 <dhcp_handle_nak+0x20>)
 8009db2:	460b      	mov	r3, r1
 8009db4:	460a      	mov	r2, r1
 8009db6:	4620      	mov	r0, r4
 8009db8:	f002 fe20 	bl	800c9fc <netif_set_addr>
  dhcp_discover(netif);
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f7ff fe7f 	bl	8009ac0 <dhcp_discover>
 8009dc2:	bd10      	pop	{r4, pc}
 8009dc4:	080684a4 	.word	0x080684a4

08009dc8 <dhcp_dec_pcb_refcount>:
{
 8009dc8:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8009dca:	4b0c      	ldr	r3, [pc, #48]	; (8009dfc <dhcp_dec_pcb_refcount+0x34>)
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	b133      	cbz	r3, 8009dde <dhcp_dec_pcb_refcount+0x16>
  dhcp_pcb_refcount--;
 8009dd0:	4a0a      	ldr	r2, [pc, #40]	; (8009dfc <dhcp_dec_pcb_refcount+0x34>)
 8009dd2:	7813      	ldrb	r3, [r2, #0]
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	7013      	strb	r3, [r2, #0]
  if (dhcp_pcb_refcount == 0) {
 8009dda:	b13b      	cbz	r3, 8009dec <dhcp_dec_pcb_refcount+0x24>
 8009ddc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8009dde:	4b08      	ldr	r3, [pc, #32]	; (8009e00 <dhcp_dec_pcb_refcount+0x38>)
 8009de0:	22ff      	movs	r2, #255	; 0xff
 8009de2:	4908      	ldr	r1, [pc, #32]	; (8009e04 <dhcp_dec_pcb_refcount+0x3c>)
 8009de4:	4808      	ldr	r0, [pc, #32]	; (8009e08 <dhcp_dec_pcb_refcount+0x40>)
 8009de6:	f008 f9c1 	bl	801216c <iprintf>
 8009dea:	e7f1      	b.n	8009dd0 <dhcp_dec_pcb_refcount+0x8>
    udp_remove(dhcp_pcb);
 8009dec:	4c07      	ldr	r4, [pc, #28]	; (8009e0c <dhcp_dec_pcb_refcount+0x44>)
 8009dee:	6820      	ldr	r0, [r4, #0]
 8009df0:	f007 ff80 	bl	8011cf4 <udp_remove>
    dhcp_pcb = NULL;
 8009df4:	2300      	movs	r3, #0
 8009df6:	6023      	str	r3, [r4, #0]
}
 8009df8:	e7f0      	b.n	8009ddc <dhcp_dec_pcb_refcount+0x14>
 8009dfa:	bf00      	nop
 8009dfc:	20006cf4 	.word	0x20006cf4
 8009e00:	08067fc8 	.word	0x08067fc8
 8009e04:	08067eac 	.word	0x08067eac
 8009e08:	0801335c 	.word	0x0801335c
 8009e0c:	20006cf0 	.word	0x20006cf0

08009e10 <dhcp_inc_pcb_refcount>:
{
 8009e10:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 8009e12:	4b17      	ldr	r3, [pc, #92]	; (8009e70 <dhcp_inc_pcb_refcount+0x60>)
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	bb0b      	cbnz	r3, 8009e5c <dhcp_inc_pcb_refcount+0x4c>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8009e18:	4b16      	ldr	r3, [pc, #88]	; (8009e74 <dhcp_inc_pcb_refcount+0x64>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	b12b      	cbz	r3, 8009e2a <dhcp_inc_pcb_refcount+0x1a>
 8009e1e:	4b16      	ldr	r3, [pc, #88]	; (8009e78 <dhcp_inc_pcb_refcount+0x68>)
 8009e20:	22e5      	movs	r2, #229	; 0xe5
 8009e22:	4916      	ldr	r1, [pc, #88]	; (8009e7c <dhcp_inc_pcb_refcount+0x6c>)
 8009e24:	4816      	ldr	r0, [pc, #88]	; (8009e80 <dhcp_inc_pcb_refcount+0x70>)
 8009e26:	f008 f9a1 	bl	801216c <iprintf>
    dhcp_pcb = udp_new();
 8009e2a:	f007 ff8d 	bl	8011d48 <udp_new>
 8009e2e:	4b11      	ldr	r3, [pc, #68]	; (8009e74 <dhcp_inc_pcb_refcount+0x64>)
 8009e30:	6018      	str	r0, [r3, #0]
    if (dhcp_pcb == NULL) {
 8009e32:	b1c8      	cbz	r0, 8009e68 <dhcp_inc_pcb_refcount+0x58>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8009e34:	7a43      	ldrb	r3, [r0, #9]
 8009e36:	f043 0320 	orr.w	r3, r3, #32
 8009e3a:	7243      	strb	r3, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8009e3c:	4d11      	ldr	r5, [pc, #68]	; (8009e84 <dhcp_inc_pcb_refcount+0x74>)
 8009e3e:	2244      	movs	r2, #68	; 0x44
 8009e40:	4629      	mov	r1, r5
 8009e42:	f007 fd1f 	bl	8011884 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8009e46:	4c0b      	ldr	r4, [pc, #44]	; (8009e74 <dhcp_inc_pcb_refcount+0x64>)
 8009e48:	2243      	movs	r2, #67	; 0x43
 8009e4a:	4629      	mov	r1, r5
 8009e4c:	6820      	ldr	r0, [r4, #0]
 8009e4e:	f007 fedf 	bl	8011c10 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8009e52:	2200      	movs	r2, #0
 8009e54:	490c      	ldr	r1, [pc, #48]	; (8009e88 <dhcp_inc_pcb_refcount+0x78>)
 8009e56:	6820      	ldr	r0, [r4, #0]
 8009e58:	f007 ff38 	bl	8011ccc <udp_recv>
  dhcp_pcb_refcount++;
 8009e5c:	4a04      	ldr	r2, [pc, #16]	; (8009e70 <dhcp_inc_pcb_refcount+0x60>)
 8009e5e:	7813      	ldrb	r3, [r2, #0]
 8009e60:	3301      	adds	r3, #1
 8009e62:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 8009e64:	2000      	movs	r0, #0
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 8009e68:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009e6c:	bd38      	pop	{r3, r4, r5, pc}
 8009e6e:	bf00      	nop
 8009e70:	20006cf4 	.word	0x20006cf4
 8009e74:	20006cf0 	.word	0x20006cf0
 8009e78:	08067fc8 	.word	0x08067fc8
 8009e7c:	08067ed4 	.word	0x08067ed4
 8009e80:	0801335c 	.word	0x0801335c
 8009e84:	080684a4 	.word	0x080684a4
 8009e88:	0800a31d 	.word	0x0800a31d

08009e8c <dhcp_parse_reply>:
  dhcp_clear_all_options(dhcp);
 8009e8c:	4bc5      	ldr	r3, [pc, #788]	; (800a1a4 <dhcp_parse_reply+0x318>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 8009e94:	8943      	ldrh	r3, [r0, #10]
 8009e96:	2b2b      	cmp	r3, #43	; 0x2b
 8009e98:	f240 8222 	bls.w	800a2e0 <dhcp_parse_reply+0x454>
{
 8009e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	b087      	sub	sp, #28
 8009ea2:	9001      	str	r0, [sp, #4]
  options_idx_max = p->tot_len;
 8009ea4:	f8b0 b008 	ldrh.w	fp, [r0, #8]
  int parse_sname_as_options = 0;
 8009ea8:	9203      	str	r2, [sp, #12]
  int parse_file_as_options = 0;
 8009eaa:	9202      	str	r2, [sp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8009eac:	f04f 08f0 	mov.w	r8, #240	; 0xf0
  q = p;
 8009eb0:	9c01      	ldr	r4, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 8009eb2:	e00f      	b.n	8009ed4 <dhcp_parse_reply+0x48>
    parse_file_as_options = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	9302      	str	r3, [sp, #8]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8009eb8:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8009ebc:	f04f 086c 	mov.w	r8, #108	; 0x6c
 8009ec0:	e7f6      	b.n	8009eb0 <dhcp_parse_reply+0x24>
    options_idx = (u16_t)(options_idx - q->len);
 8009ec2:	eba8 0803 	sub.w	r8, r8, r3
 8009ec6:	fa1f f888 	uxth.w	r8, r8
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8009eca:	ebab 0b03 	sub.w	fp, fp, r3
 8009ece:	fa1f fb8b 	uxth.w	fp, fp
    q = q->next;
 8009ed2:	6824      	ldr	r4, [r4, #0]
  while ((q != NULL) && (options_idx >= q->len)) {
 8009ed4:	b114      	cbz	r4, 8009edc <dhcp_parse_reply+0x50>
 8009ed6:	8963      	ldrh	r3, [r4, #10]
 8009ed8:	4598      	cmp	r8, r3
 8009eda:	d2f2      	bcs.n	8009ec2 <dhcp_parse_reply+0x36>
  if (q == NULL) {
 8009edc:	2c00      	cmp	r4, #0
 8009ede:	f000 8202 	beq.w	800a2e6 <dhcp_parse_reply+0x45a>
  options = (u8_t *)q->payload;
 8009ee2:	6863      	ldr	r3, [r4, #4]
 8009ee4:	9300      	str	r3, [sp, #0]
  offset = options_idx;
 8009ee6:	4645      	mov	r5, r8
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8009ee8:	e021      	b.n	8009f2e <dhcp_parse_reply+0xa2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	b113      	cbz	r3, 8009ef4 <dhcp_parse_reply+0x68>
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	e037      	b.n	8009f64 <dhcp_parse_reply+0xd8>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	e035      	b.n	8009f64 <dhcp_parse_reply+0xd8>
    int decode_idx = -1;
 8009ef8:	f04f 37ff 	mov.w	r7, #4294967295
        decode_len = len = 0;
 8009efc:	2600      	movs	r6, #0
 8009efe:	4633      	mov	r3, r6
    if (op == DHCP_OPTION_PAD) {
 8009f00:	2a00      	cmp	r2, #0
 8009f02:	f040 8136 	bne.w	800a172 <dhcp_parse_reply+0x2e6>
      offset++;
 8009f06:	3501      	adds	r5, #1
 8009f08:	b2ad      	uxth	r5, r5
    if (offset >= q->len) {
 8009f0a:	8963      	ldrh	r3, [r4, #10]
 8009f0c:	429d      	cmp	r5, r3
 8009f0e:	d30e      	bcc.n	8009f2e <dhcp_parse_reply+0xa2>
      offset = (u16_t)(offset - q->len);
 8009f10:	1aed      	subs	r5, r5, r3
 8009f12:	b2ad      	uxth	r5, r5
      offset_max = (u16_t)(offset_max - q->len);
 8009f14:	ebab 0b03 	sub.w	fp, fp, r3
 8009f18:	fa1f fb8b 	uxth.w	fp, fp
      if (offset < offset_max) {
 8009f1c:	455d      	cmp	r5, fp
 8009f1e:	f080 81eb 	bcs.w	800a2f8 <dhcp_parse_reply+0x46c>
        q = q->next;
 8009f22:	6824      	ldr	r4, [r4, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8009f24:	2c00      	cmp	r4, #0
 8009f26:	f000 81aa 	beq.w	800a27e <dhcp_parse_reply+0x3f2>
        options = (u8_t *)q->payload;
 8009f2a:	6863      	ldr	r3, [r4, #4]
 8009f2c:	9300      	str	r3, [sp, #0]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8009f2e:	2c00      	cmp	r4, #0
 8009f30:	f000 81af 	beq.w	800a292 <dhcp_parse_reply+0x406>
 8009f34:	455d      	cmp	r5, fp
 8009f36:	f080 81ac 	bcs.w	800a292 <dhcp_parse_reply+0x406>
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	9b00      	ldr	r3, [sp, #0]
 8009f3e:	5d5a      	ldrb	r2, [r3, r5]
 8009f40:	2aff      	cmp	r2, #255	; 0xff
 8009f42:	f000 81a6 	beq.w	800a292 <dhcp_parse_reply+0x406>
    u16_t val_offset = (u16_t)(offset + 2);
 8009f46:	f105 0902 	add.w	r9, r5, #2
 8009f4a:	fa1f f989 	uxth.w	r9, r9
    if (val_offset < offset) {
 8009f4e:	454d      	cmp	r5, r9
 8009f50:	f200 81cc 	bhi.w	800a2ec <dhcp_parse_reply+0x460>
    if ((offset + 1) < q->len) {
 8009f54:	4629      	mov	r1, r5
 8009f56:	1c6b      	adds	r3, r5, #1
 8009f58:	8966      	ldrh	r6, [r4, #10]
 8009f5a:	42b3      	cmp	r3, r6
 8009f5c:	dac5      	bge.n	8009eea <dhcp_parse_reply+0x5e>
      len = options[offset + 1];
 8009f5e:	3001      	adds	r0, #1
 8009f60:	9b00      	ldr	r3, [sp, #0]
 8009f62:	5c1b      	ldrb	r3, [r3, r0]
    switch (op) {
 8009f64:	2a3b      	cmp	r2, #59	; 0x3b
 8009f66:	f200 8100 	bhi.w	800a16a <dhcp_parse_reply+0x2de>
 8009f6a:	a001      	add	r0, pc, #4	; (adr r0, 8009f70 <dhcp_parse_reply+0xe4>)
 8009f6c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8009f70:	08009ef9 	.word	0x08009ef9
 8009f74:	0800a061 	.word	0x0800a061
 8009f78:	0800a16b 	.word	0x0800a16b
 8009f7c:	0800a07f 	.word	0x0800a07f
 8009f80:	0800a16b 	.word	0x0800a16b
 8009f84:	0800a16b 	.word	0x0800a16b
 8009f88:	0800a16b 	.word	0x0800a16b
 8009f8c:	0800a16b 	.word	0x0800a16b
 8009f90:	0800a16b 	.word	0x0800a16b
 8009f94:	0800a16b 	.word	0x0800a16b
 8009f98:	0800a16b 	.word	0x0800a16b
 8009f9c:	0800a16b 	.word	0x0800a16b
 8009fa0:	0800a16b 	.word	0x0800a16b
 8009fa4:	0800a16b 	.word	0x0800a16b
 8009fa8:	0800a16b 	.word	0x0800a16b
 8009fac:	0800a16b 	.word	0x0800a16b
 8009fb0:	0800a16b 	.word	0x0800a16b
 8009fb4:	0800a16b 	.word	0x0800a16b
 8009fb8:	0800a16b 	.word	0x0800a16b
 8009fbc:	0800a16b 	.word	0x0800a16b
 8009fc0:	0800a16b 	.word	0x0800a16b
 8009fc4:	0800a16b 	.word	0x0800a16b
 8009fc8:	0800a16b 	.word	0x0800a16b
 8009fcc:	0800a16b 	.word	0x0800a16b
 8009fd0:	0800a16b 	.word	0x0800a16b
 8009fd4:	0800a16b 	.word	0x0800a16b
 8009fd8:	0800a16b 	.word	0x0800a16b
 8009fdc:	0800a16b 	.word	0x0800a16b
 8009fe0:	0800a16b 	.word	0x0800a16b
 8009fe4:	0800a16b 	.word	0x0800a16b
 8009fe8:	0800a16b 	.word	0x0800a16b
 8009fec:	0800a16b 	.word	0x0800a16b
 8009ff0:	0800a16b 	.word	0x0800a16b
 8009ff4:	0800a16b 	.word	0x0800a16b
 8009ff8:	0800a16b 	.word	0x0800a16b
 8009ffc:	0800a16b 	.word	0x0800a16b
 800a000:	0800a16b 	.word	0x0800a16b
 800a004:	0800a16b 	.word	0x0800a16b
 800a008:	0800a16b 	.word	0x0800a16b
 800a00c:	0800a16b 	.word	0x0800a16b
 800a010:	0800a16b 	.word	0x0800a16b
 800a014:	0800a16b 	.word	0x0800a16b
 800a018:	0800a16b 	.word	0x0800a16b
 800a01c:	0800a16b 	.word	0x0800a16b
 800a020:	0800a16b 	.word	0x0800a16b
 800a024:	0800a16b 	.word	0x0800a16b
 800a028:	0800a16b 	.word	0x0800a16b
 800a02c:	0800a16b 	.word	0x0800a16b
 800a030:	0800a16b 	.word	0x0800a16b
 800a034:	0800a16b 	.word	0x0800a16b
 800a038:	0800a16b 	.word	0x0800a16b
 800a03c:	0800a09d 	.word	0x0800a09d
 800a040:	0800a0bb 	.word	0x0800a0bb
 800a044:	0800a0f3 	.word	0x0800a0f3
 800a048:	0800a111 	.word	0x0800a111
 800a04c:	0800a16b 	.word	0x0800a16b
 800a050:	0800a16b 	.word	0x0800a16b
 800a054:	0800a16b 	.word	0x0800a16b
 800a058:	0800a12f 	.word	0x0800a12f
 800a05c:	0800a14d 	.word	0x0800a14d
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a060:	2b04      	cmp	r3, #4
 800a062:	d102      	bne.n	800a06a <dhcp_parse_reply+0x1de>
    decode_len = len;
 800a064:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800a066:	2706      	movs	r7, #6
 800a068:	e74a      	b.n	8009f00 <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a06a:	4b4f      	ldr	r3, [pc, #316]	; (800a1a8 <dhcp_parse_reply+0x31c>)
 800a06c:	f240 622e 	movw	r2, #1582	; 0x62e
 800a070:	494e      	ldr	r1, [pc, #312]	; (800a1ac <dhcp_parse_reply+0x320>)
 800a072:	484f      	ldr	r0, [pc, #316]	; (800a1b0 <dhcp_parse_reply+0x324>)
 800a074:	f008 f87a 	bl	801216c <iprintf>
 800a078:	f06f 0005 	mvn.w	r0, #5
 800a07c:	e0f9      	b.n	800a272 <dhcp_parse_reply+0x3e6>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800a07e:	2b03      	cmp	r3, #3
 800a080:	d902      	bls.n	800a088 <dhcp_parse_reply+0x1fc>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800a082:	2707      	movs	r7, #7
        decode_len = 4; /* only copy the first given router */
 800a084:	2604      	movs	r6, #4
 800a086:	e73b      	b.n	8009f00 <dhcp_parse_reply+0x74>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800a088:	4b47      	ldr	r3, [pc, #284]	; (800a1a8 <dhcp_parse_reply+0x31c>)
 800a08a:	f240 6233 	movw	r2, #1587	; 0x633
 800a08e:	4949      	ldr	r1, [pc, #292]	; (800a1b4 <dhcp_parse_reply+0x328>)
 800a090:	4847      	ldr	r0, [pc, #284]	; (800a1b0 <dhcp_parse_reply+0x324>)
 800a092:	f008 f86b 	bl	801216c <iprintf>
 800a096:	f06f 0005 	mvn.w	r0, #5
 800a09a:	e0ea      	b.n	800a272 <dhcp_parse_reply+0x3e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a09c:	2b04      	cmp	r3, #4
 800a09e:	d102      	bne.n	800a0a6 <dhcp_parse_reply+0x21a>
    decode_len = len;
 800a0a0:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800a0a2:	2703      	movs	r7, #3
 800a0a4:	e72c      	b.n	8009f00 <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a0a6:	4b40      	ldr	r3, [pc, #256]	; (800a1a8 <dhcp_parse_reply+0x31c>)
 800a0a8:	f240 6241 	movw	r2, #1601	; 0x641
 800a0ac:	493f      	ldr	r1, [pc, #252]	; (800a1ac <dhcp_parse_reply+0x320>)
 800a0ae:	4840      	ldr	r0, [pc, #256]	; (800a1b0 <dhcp_parse_reply+0x324>)
 800a0b0:	f008 f85c 	bl	801216c <iprintf>
 800a0b4:	f06f 0005 	mvn.w	r0, #5
 800a0b8:	e0db      	b.n	800a272 <dhcp_parse_reply+0x3e6>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d105      	bne.n	800a0ca <dhcp_parse_reply+0x23e>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800a0be:	f1b8 0ff0 	cmp.w	r8, #240	; 0xf0
 800a0c2:	d10c      	bne.n	800a0de <dhcp_parse_reply+0x252>
    decode_len = len;
 800a0c4:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800a0c6:	2700      	movs	r7, #0
 800a0c8:	e71a      	b.n	8009f00 <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800a0ca:	4b37      	ldr	r3, [pc, #220]	; (800a1a8 <dhcp_parse_reply+0x31c>)
 800a0cc:	f240 624f 	movw	r2, #1615	; 0x64f
 800a0d0:	4939      	ldr	r1, [pc, #228]	; (800a1b8 <dhcp_parse_reply+0x32c>)
 800a0d2:	4837      	ldr	r0, [pc, #220]	; (800a1b0 <dhcp_parse_reply+0x324>)
 800a0d4:	f008 f84a 	bl	801216c <iprintf>
 800a0d8:	f06f 0005 	mvn.w	r0, #5
 800a0dc:	e0c9      	b.n	800a272 <dhcp_parse_reply+0x3e6>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800a0de:	4b32      	ldr	r3, [pc, #200]	; (800a1a8 <dhcp_parse_reply+0x31c>)
 800a0e0:	f240 6251 	movw	r2, #1617	; 0x651
 800a0e4:	4935      	ldr	r1, [pc, #212]	; (800a1bc <dhcp_parse_reply+0x330>)
 800a0e6:	4832      	ldr	r0, [pc, #200]	; (800a1b0 <dhcp_parse_reply+0x324>)
 800a0e8:	f008 f840 	bl	801216c <iprintf>
 800a0ec:	f06f 0005 	mvn.w	r0, #5
 800a0f0:	e0bf      	b.n	800a272 <dhcp_parse_reply+0x3e6>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d102      	bne.n	800a0fc <dhcp_parse_reply+0x270>
    decode_len = len;
 800a0f6:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800a0f8:	2701      	movs	r7, #1
 800a0fa:	e701      	b.n	8009f00 <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800a0fc:	4b2a      	ldr	r3, [pc, #168]	; (800a1a8 <dhcp_parse_reply+0x31c>)
 800a0fe:	f240 6255 	movw	r2, #1621	; 0x655
 800a102:	492d      	ldr	r1, [pc, #180]	; (800a1b8 <dhcp_parse_reply+0x32c>)
 800a104:	482a      	ldr	r0, [pc, #168]	; (800a1b0 <dhcp_parse_reply+0x324>)
 800a106:	f008 f831 	bl	801216c <iprintf>
 800a10a:	f06f 0005 	mvn.w	r0, #5
 800a10e:	e0b0      	b.n	800a272 <dhcp_parse_reply+0x3e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a110:	2b04      	cmp	r3, #4
 800a112:	d102      	bne.n	800a11a <dhcp_parse_reply+0x28e>
    decode_len = len;
 800a114:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800a116:	2702      	movs	r7, #2
 800a118:	e6f2      	b.n	8009f00 <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a11a:	4b23      	ldr	r3, [pc, #140]	; (800a1a8 <dhcp_parse_reply+0x31c>)
 800a11c:	f240 6259 	movw	r2, #1625	; 0x659
 800a120:	4922      	ldr	r1, [pc, #136]	; (800a1ac <dhcp_parse_reply+0x320>)
 800a122:	4823      	ldr	r0, [pc, #140]	; (800a1b0 <dhcp_parse_reply+0x324>)
 800a124:	f008 f822 	bl	801216c <iprintf>
 800a128:	f06f 0005 	mvn.w	r0, #5
 800a12c:	e0a1      	b.n	800a272 <dhcp_parse_reply+0x3e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a12e:	2b04      	cmp	r3, #4
 800a130:	d102      	bne.n	800a138 <dhcp_parse_reply+0x2ac>
    decode_len = len;
 800a132:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 800a134:	2704      	movs	r7, #4
 800a136:	e6e3      	b.n	8009f00 <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a138:	4b1b      	ldr	r3, [pc, #108]	; (800a1a8 <dhcp_parse_reply+0x31c>)
 800a13a:	f240 625d 	movw	r2, #1629	; 0x65d
 800a13e:	491b      	ldr	r1, [pc, #108]	; (800a1ac <dhcp_parse_reply+0x320>)
 800a140:	481b      	ldr	r0, [pc, #108]	; (800a1b0 <dhcp_parse_reply+0x324>)
 800a142:	f008 f813 	bl	801216c <iprintf>
 800a146:	f06f 0005 	mvn.w	r0, #5
 800a14a:	e092      	b.n	800a272 <dhcp_parse_reply+0x3e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a14c:	2b04      	cmp	r3, #4
 800a14e:	d102      	bne.n	800a156 <dhcp_parse_reply+0x2ca>
    decode_len = len;
 800a150:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800a152:	2705      	movs	r7, #5
 800a154:	e6d4      	b.n	8009f00 <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a156:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <dhcp_parse_reply+0x31c>)
 800a158:	f240 6261 	movw	r2, #1633	; 0x661
 800a15c:	4913      	ldr	r1, [pc, #76]	; (800a1ac <dhcp_parse_reply+0x320>)
 800a15e:	4814      	ldr	r0, [pc, #80]	; (800a1b0 <dhcp_parse_reply+0x324>)
 800a160:	f008 f804 	bl	801216c <iprintf>
 800a164:	f06f 0005 	mvn.w	r0, #5
 800a168:	e083      	b.n	800a272 <dhcp_parse_reply+0x3e6>
    int decode_idx = -1;
 800a16a:	f04f 37ff 	mov.w	r7, #4294967295
        decode_len = 0;
 800a16e:	2600      	movs	r6, #0
 800a170:	e6c6      	b.n	8009f00 <dhcp_parse_reply+0x74>
      if (offset + len + 2 > 0xFFFF) {
 800a172:	4419      	add	r1, r3
 800a174:	3102      	adds	r1, #2
 800a176:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a17a:	f280 80ba 	bge.w	800a2f2 <dhcp_parse_reply+0x466>
      offset = (u16_t)(offset + len + 2);
 800a17e:	441d      	add	r5, r3
 800a180:	b2ad      	uxth	r5, r5
 800a182:	3502      	adds	r5, #2
 800a184:	b2ad      	uxth	r5, r5
      if (decode_len > 0) {
 800a186:	2e00      	cmp	r6, #0
 800a188:	f43f aebf 	beq.w	8009f0a <dhcp_parse_reply+0x7e>
        u32_t value = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	9305      	str	r3, [sp, #20]
 800a190:	e039      	b.n	800a206 <dhcp_parse_reply+0x37a>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800a192:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <dhcp_parse_reply+0x31c>)
 800a194:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800a198:	4909      	ldr	r1, [pc, #36]	; (800a1c0 <dhcp_parse_reply+0x334>)
 800a19a:	4805      	ldr	r0, [pc, #20]	; (800a1b0 <dhcp_parse_reply+0x324>)
 800a19c:	f007 ffe6 	bl	801216c <iprintf>
 800a1a0:	e033      	b.n	800a20a <dhcp_parse_reply+0x37e>
 800a1a2:	bf00      	nop
 800a1a4:	200072fc 	.word	0x200072fc
 800a1a8:	08067fc8 	.word	0x08067fc8
 800a1ac:	08068044 	.word	0x08068044
 800a1b0:	0801335c 	.word	0x0801335c
 800a1b4:	08068050 	.word	0x08068050
 800a1b8:	08068064 	.word	0x08068064
 800a1bc:	08068070 	.word	0x08068070
 800a1c0:	08068088 	.word	0x08068088
          copy_len = LWIP_MIN(decode_len, 4);
 800a1c4:	f04f 0a04 	mov.w	sl, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800a1c8:	464b      	mov	r3, r9
 800a1ca:	4652      	mov	r2, sl
 800a1cc:	a905      	add	r1, sp, #20
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f003 f8ca 	bl	800d368 <pbuf_copy_partial>
 800a1d4:	4582      	cmp	sl, r0
 800a1d6:	d14a      	bne.n	800a26e <dhcp_parse_reply+0x3e2>
          if (decode_len > 4) {
 800a1d8:	2e04      	cmp	r6, #4
 800a1da:	d92a      	bls.n	800a232 <dhcp_parse_reply+0x3a6>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800a1dc:	f016 0f03 	tst.w	r6, #3
 800a1e0:	d11d      	bne.n	800a21e <dhcp_parse_reply+0x392>
            dhcp_got_option(dhcp, decode_idx);
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	4b46      	ldr	r3, [pc, #280]	; (800a300 <dhcp_parse_reply+0x474>)
 800a1e6:	55da      	strb	r2, [r3, r7]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800a1e8:	9805      	ldr	r0, [sp, #20]
 800a1ea:	f7fe ffaa 	bl	8009142 <lwip_htonl>
 800a1ee:	4b45      	ldr	r3, [pc, #276]	; (800a304 <dhcp_parse_reply+0x478>)
 800a1f0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800a1f4:	3e04      	subs	r6, #4
 800a1f6:	b2f6      	uxtb	r6, r6
            next_val_offset = (u16_t)(val_offset + 4);
 800a1f8:	f109 0304 	add.w	r3, r9, #4
 800a1fc:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 800a1fe:	4599      	cmp	r9, r3
 800a200:	d83a      	bhi.n	800a278 <dhcp_parse_reply+0x3ec>
            decode_idx++;
 800a202:	3701      	adds	r7, #1
            val_offset = next_val_offset;
 800a204:	4699      	mov	r9, r3
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800a206:	2f07      	cmp	r7, #7
 800a208:	d8c3      	bhi.n	800a192 <dhcp_parse_reply+0x306>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800a20a:	4b3d      	ldr	r3, [pc, #244]	; (800a300 <dhcp_parse_reply+0x474>)
 800a20c:	5ddb      	ldrb	r3, [r3, r7]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f47f ae7b 	bne.w	8009f0a <dhcp_parse_reply+0x7e>
          copy_len = LWIP_MIN(decode_len, 4);
 800a214:	2e03      	cmp	r6, #3
 800a216:	d8d5      	bhi.n	800a1c4 <dhcp_parse_reply+0x338>
 800a218:	fa1f fa86 	uxth.w	sl, r6
 800a21c:	e7d4      	b.n	800a1c8 <dhcp_parse_reply+0x33c>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800a21e:	4b3a      	ldr	r3, [pc, #232]	; (800a308 <dhcp_parse_reply+0x47c>)
 800a220:	f240 6281 	movw	r2, #1665	; 0x681
 800a224:	4939      	ldr	r1, [pc, #228]	; (800a30c <dhcp_parse_reply+0x480>)
 800a226:	483a      	ldr	r0, [pc, #232]	; (800a310 <dhcp_parse_reply+0x484>)
 800a228:	f007 ffa0 	bl	801216c <iprintf>
 800a22c:	f06f 0005 	mvn.w	r0, #5
 800a230:	e01f      	b.n	800a272 <dhcp_parse_reply+0x3e6>
          } else if (decode_len == 4) {
 800a232:	2e04      	cmp	r6, #4
 800a234:	d00c      	beq.n	800a250 <dhcp_parse_reply+0x3c4>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800a236:	2e01      	cmp	r6, #1
 800a238:	d10f      	bne.n	800a25a <dhcp_parse_reply+0x3ce>
            value = ((u8_t *)&value)[0];
 800a23a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a23e:	9305      	str	r3, [sp, #20]
          dhcp_got_option(dhcp, decode_idx);
 800a240:	2201      	movs	r2, #1
 800a242:	4b2f      	ldr	r3, [pc, #188]	; (800a300 <dhcp_parse_reply+0x474>)
 800a244:	55da      	strb	r2, [r3, r7]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800a246:	9a05      	ldr	r2, [sp, #20]
 800a248:	4b2e      	ldr	r3, [pc, #184]	; (800a304 <dhcp_parse_reply+0x478>)
 800a24a:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
 800a24e:	e65c      	b.n	8009f0a <dhcp_parse_reply+0x7e>
            value = lwip_ntohl(value);
 800a250:	9805      	ldr	r0, [sp, #20]
 800a252:	f7fe ff76 	bl	8009142 <lwip_htonl>
 800a256:	9005      	str	r0, [sp, #20]
 800a258:	e7f2      	b.n	800a240 <dhcp_parse_reply+0x3b4>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800a25a:	4b2b      	ldr	r3, [pc, #172]	; (800a308 <dhcp_parse_reply+0x47c>)
 800a25c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800a260:	492c      	ldr	r1, [pc, #176]	; (800a314 <dhcp_parse_reply+0x488>)
 800a262:	482b      	ldr	r0, [pc, #172]	; (800a310 <dhcp_parse_reply+0x484>)
 800a264:	f007 ff82 	bl	801216c <iprintf>
 800a268:	f06f 0005 	mvn.w	r0, #5
 800a26c:	e001      	b.n	800a272 <dhcp_parse_reply+0x3e6>
            return ERR_BUF;
 800a26e:	f06f 0001 	mvn.w	r0, #1
}
 800a272:	b007      	add	sp, #28
 800a274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return ERR_BUF;
 800a278:	f06f 0001 	mvn.w	r0, #1
 800a27c:	e7f9      	b.n	800a272 <dhcp_parse_reply+0x3e6>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800a27e:	4b22      	ldr	r3, [pc, #136]	; (800a308 <dhcp_parse_reply+0x47c>)
 800a280:	f240 629d 	movw	r2, #1693	; 0x69d
 800a284:	4924      	ldr	r1, [pc, #144]	; (800a318 <dhcp_parse_reply+0x48c>)
 800a286:	4822      	ldr	r0, [pc, #136]	; (800a310 <dhcp_parse_reply+0x484>)
 800a288:	f007 ff70 	bl	801216c <iprintf>
 800a28c:	f06f 0005 	mvn.w	r0, #5
 800a290:	e7ef      	b.n	800a272 <dhcp_parse_reply+0x3e6>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800a292:	4b1b      	ldr	r3, [pc, #108]	; (800a300 <dhcp_parse_reply+0x474>)
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	b153      	cbz	r3, 800a2ae <dhcp_parse_reply+0x422>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800a298:	4b1a      	ldr	r3, [pc, #104]	; (800a304 <dhcp_parse_reply+0x478>)
 800a29a:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800a29c:	2100      	movs	r1, #0
 800a29e:	4a18      	ldr	r2, [pc, #96]	; (800a300 <dhcp_parse_reply+0x474>)
 800a2a0:	7011      	strb	r1, [r2, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d010      	beq.n	800a2c8 <dhcp_parse_reply+0x43c>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d011      	beq.n	800a2ce <dhcp_parse_reply+0x442>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800a2aa:	2b03      	cmp	r3, #3
 800a2ac:	d012      	beq.n	800a2d4 <dhcp_parse_reply+0x448>
  if (parse_file_as_options) {
 800a2ae:	9b02      	ldr	r3, [sp, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f47f adff 	bne.w	8009eb4 <dhcp_parse_reply+0x28>
  } else if (parse_sname_as_options) {
 800a2b6:	9b03      	ldr	r3, [sp, #12]
 800a2b8:	b183      	cbz	r3, 800a2dc <dhcp_parse_reply+0x450>
    parse_sname_as_options = 0;
 800a2ba:	9b02      	ldr	r3, [sp, #8]
 800a2bc:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800a2be:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 800a2c2:	f04f 082c 	mov.w	r8, #44	; 0x2c
 800a2c6:	e5f3      	b.n	8009eb0 <dhcp_parse_reply+0x24>
      parse_file_as_options = 1;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	9302      	str	r3, [sp, #8]
 800a2cc:	e7ef      	b.n	800a2ae <dhcp_parse_reply+0x422>
      parse_sname_as_options = 1;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	9303      	str	r3, [sp, #12]
 800a2d2:	e7ec      	b.n	800a2ae <dhcp_parse_reply+0x422>
      parse_sname_as_options = 1;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	9303      	str	r3, [sp, #12]
      parse_file_as_options = 1;
 800a2d8:	9302      	str	r3, [sp, #8]
 800a2da:	e7e8      	b.n	800a2ae <dhcp_parse_reply+0x422>
  return ERR_OK;
 800a2dc:	2000      	movs	r0, #0
 800a2de:	e7c8      	b.n	800a272 <dhcp_parse_reply+0x3e6>
    return ERR_BUF;
 800a2e0:	f06f 0001 	mvn.w	r0, #1
 800a2e4:	4770      	bx	lr
    return ERR_BUF;
 800a2e6:	f06f 0001 	mvn.w	r0, #1
 800a2ea:	e7c2      	b.n	800a272 <dhcp_parse_reply+0x3e6>
      return ERR_BUF;
 800a2ec:	f06f 0001 	mvn.w	r0, #1
 800a2f0:	e7bf      	b.n	800a272 <dhcp_parse_reply+0x3e6>
        return ERR_BUF;
 800a2f2:	f06f 0001 	mvn.w	r0, #1
 800a2f6:	e7bc      	b.n	800a272 <dhcp_parse_reply+0x3e6>
        return ERR_BUF;
 800a2f8:	f06f 0001 	mvn.w	r0, #1
 800a2fc:	e7b9      	b.n	800a272 <dhcp_parse_reply+0x3e6>
 800a2fe:	bf00      	nop
 800a300:	200072fc 	.word	0x200072fc
 800a304:	20007304 	.word	0x20007304
 800a308:	08067fc8 	.word	0x08067fc8
 800a30c:	0806809c 	.word	0x0806809c
 800a310:	0801335c 	.word	0x0801335c
 800a314:	080680b4 	.word	0x080680b4
 800a318:	080680c8 	.word	0x080680c8

0800a31c <dhcp_recv>:
{
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	4614      	mov	r4, r2
  struct netif *netif = ip_current_input_netif();
 800a320:	4b36      	ldr	r3, [pc, #216]	; (800a3fc <dhcp_recv+0xe0>)
 800a322:	685d      	ldr	r5, [r3, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a324:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800a326:	6852      	ldr	r2, [r2, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800a328:	b13e      	cbz	r6, 800a33a <dhcp_recv+0x1e>
 800a32a:	7933      	ldrb	r3, [r6, #4]
 800a32c:	b12b      	cbz	r3, 800a33a <dhcp_recv+0x1e>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 800a32e:	8963      	ldrh	r3, [r4, #10]
 800a330:	2b2b      	cmp	r3, #43	; 0x2b
 800a332:	d902      	bls.n	800a33a <dhcp_recv+0x1e>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 800a334:	7813      	ldrb	r3, [r2, #0]
 800a336:	2b02      	cmp	r3, #2
 800a338:	d003      	beq.n	800a342 <dhcp_recv+0x26>
  pbuf_free(p);
 800a33a:	4620      	mov	r0, r4
 800a33c:	f002 fdac 	bl	800ce98 <pbuf_free>
 800a340:	bd70      	pop	{r4, r5, r6, pc}
 800a342:	2300      	movs	r3, #0
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800a344:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 800a348:	428b      	cmp	r3, r1
 800a34a:	d20b      	bcs.n	800a364 <dhcp_recv+0x48>
 800a34c:	2b05      	cmp	r3, #5
 800a34e:	d809      	bhi.n	800a364 <dhcp_recv+0x48>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800a350:	18e9      	adds	r1, r5, r3
 800a352:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 800a356:	18d1      	adds	r1, r2, r3
 800a358:	7f09      	ldrb	r1, [r1, #28]
 800a35a:	4288      	cmp	r0, r1
 800a35c:	d1ed      	bne.n	800a33a <dhcp_recv+0x1e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800a35e:	3301      	adds	r3, #1
 800a360:	b2db      	uxtb	r3, r3
 800a362:	e7ef      	b.n	800a344 <dhcp_recv+0x28>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800a364:	6850      	ldr	r0, [r2, #4]
 800a366:	f7fe feec 	bl	8009142 <lwip_htonl>
 800a36a:	6833      	ldr	r3, [r6, #0]
 800a36c:	4298      	cmp	r0, r3
 800a36e:	d1e4      	bne.n	800a33a <dhcp_recv+0x1e>
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800a370:	4631      	mov	r1, r6
 800a372:	4620      	mov	r0, r4
 800a374:	f7ff fd8a 	bl	8009e8c <dhcp_parse_reply>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d1de      	bne.n	800a33a <dhcp_recv+0x1e>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800a37c:	4b20      	ldr	r3, [pc, #128]	; (800a400 <dhcp_recv+0xe4>)
 800a37e:	785b      	ldrb	r3, [r3, #1]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d0da      	beq.n	800a33a <dhcp_recv+0x1e>
  msg_in = (struct dhcp_msg *)p->payload;
 800a384:	6861      	ldr	r1, [r4, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800a386:	4b1f      	ldr	r3, [pc, #124]	; (800a404 <dhcp_recv+0xe8>)
 800a388:	791b      	ldrb	r3, [r3, #4]
  if (msg_type == DHCP_ACK) {
 800a38a:	2b05      	cmp	r3, #5
 800a38c:	d00a      	beq.n	800a3a4 <dhcp_recv+0x88>
  else if ((msg_type == DHCP_NAK) &&
 800a38e:	2b06      	cmp	r3, #6
 800a390:	d026      	beq.n	800a3e0 <dhcp_recv+0xc4>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800a392:	2b02      	cmp	r3, #2
 800a394:	d1d1      	bne.n	800a33a <dhcp_recv+0x1e>
 800a396:	7973      	ldrb	r3, [r6, #5]
 800a398:	2b06      	cmp	r3, #6
 800a39a:	d1ce      	bne.n	800a33a <dhcp_recv+0x1e>
    dhcp_handle_offer(netif, msg_in);
 800a39c:	4628      	mov	r0, r5
 800a39e:	f7ff fb77 	bl	8009a90 <dhcp_handle_offer>
 800a3a2:	e7ca      	b.n	800a33a <dhcp_recv+0x1e>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800a3a4:	7973      	ldrb	r3, [r6, #5]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d00a      	beq.n	800a3c0 <dhcp_recv+0xa4>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800a3aa:	3b03      	subs	r3, #3
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d8c3      	bhi.n	800a33a <dhcp_recv+0x1e>
      dhcp_handle_ack(netif, msg_in);
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f7ff f93a 	bl	800962c <dhcp_handle_ack>
      dhcp_bind(netif);
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	f7ff fc5f 	bl	8009c7c <dhcp_bind>
 800a3be:	e7bc      	b.n	800a33a <dhcp_recv+0x1e>
      dhcp_handle_ack(netif, msg_in);
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	f7ff f933 	bl	800962c <dhcp_handle_ack>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800a3c6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800a3ca:	f013 0f08 	tst.w	r3, #8
 800a3ce:	d003      	beq.n	800a3d8 <dhcp_recv+0xbc>
        dhcp_check(netif);
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	f7ff fc3d 	bl	8009c50 <dhcp_check>
 800a3d6:	e7b0      	b.n	800a33a <dhcp_recv+0x1e>
        dhcp_bind(netif);
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f7ff fc4f 	bl	8009c7c <dhcp_bind>
 800a3de:	e7ac      	b.n	800a33a <dhcp_recv+0x1e>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800a3e0:	7972      	ldrb	r2, [r6, #5]
  else if ((msg_type == DHCP_NAK) &&
 800a3e2:	2a03      	cmp	r2, #3
 800a3e4:	d005      	beq.n	800a3f2 <dhcp_recv+0xd6>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800a3e6:	2a01      	cmp	r2, #1
 800a3e8:	d003      	beq.n	800a3f2 <dhcp_recv+0xd6>
 800a3ea:	2a04      	cmp	r2, #4
 800a3ec:	d001      	beq.n	800a3f2 <dhcp_recv+0xd6>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800a3ee:	2a05      	cmp	r2, #5
 800a3f0:	d1cf      	bne.n	800a392 <dhcp_recv+0x76>
    dhcp_handle_nak(netif);
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f7ff fcd6 	bl	8009da4 <dhcp_handle_nak>
 800a3f8:	e79f      	b.n	800a33a <dhcp_recv+0x1e>
 800a3fa:	bf00      	nop
 800a3fc:	200072e4 	.word	0x200072e4
 800a400:	200072fc 	.word	0x200072fc
 800a404:	20007304 	.word	0x20007304

0800a408 <dhcp_network_changed>:
{
 800a408:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a40a:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (!dhcp) {
 800a40c:	b1bd      	cbz	r5, 800a43e <dhcp_network_changed+0x36>
 800a40e:	4604      	mov	r4, r0
  switch (dhcp->state) {
 800a410:	796b      	ldrb	r3, [r5, #5]
 800a412:	2b0a      	cmp	r3, #10
 800a414:	d80c      	bhi.n	800a430 <dhcp_network_changed+0x28>
 800a416:	e8df f003 	tbb	[pc, r3]
 800a41a:	0b12      	.short	0x0b12
 800a41c:	0606060b 	.word	0x0606060b
 800a420:	0b0b0b0b 	.word	0x0b0b0b0b
 800a424:	06          	.byte	0x06
 800a425:	00          	.byte	0x00
      dhcp->tries = 0;
 800a426:	2300      	movs	r3, #0
 800a428:	71ab      	strb	r3, [r5, #6]
      dhcp_reboot(netif);
 800a42a:	f7ff f9e7 	bl	80097fc <dhcp_reboot>
      break;
 800a42e:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800a430:	2b0c      	cmp	r3, #12
 800a432:	d805      	bhi.n	800a440 <dhcp_network_changed+0x38>
      dhcp->tries = 0;
 800a434:	2300      	movs	r3, #0
 800a436:	71ab      	strb	r3, [r5, #6]
      dhcp_discover(netif);
 800a438:	4620      	mov	r0, r4
 800a43a:	f7ff fb41 	bl	8009ac0 <dhcp_discover>
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800a440:	4b03      	ldr	r3, [pc, #12]	; (800a450 <dhcp_network_changed+0x48>)
 800a442:	f240 326d 	movw	r2, #877	; 0x36d
 800a446:	4903      	ldr	r1, [pc, #12]	; (800a454 <dhcp_network_changed+0x4c>)
 800a448:	4803      	ldr	r0, [pc, #12]	; (800a458 <dhcp_network_changed+0x50>)
 800a44a:	f007 fe8f 	bl	801216c <iprintf>
 800a44e:	e7f1      	b.n	800a434 <dhcp_network_changed+0x2c>
 800a450:	08067fc8 	.word	0x08067fc8
 800a454:	08067efc 	.word	0x08067efc
 800a458:	0801335c 	.word	0x0801335c

0800a45c <dhcp_arp_reply>:
{
 800a45c:	b508      	push	{r3, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a45e:	b130      	cbz	r0, 800a46e <dhcp_arp_reply+0x12>
 800a460:	4602      	mov	r2, r0
  dhcp = netif_dhcp_data(netif);
 800a462:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800a464:	b113      	cbz	r3, 800a46c <dhcp_arp_reply+0x10>
 800a466:	7958      	ldrb	r0, [r3, #5]
 800a468:	2808      	cmp	r0, #8
 800a46a:	d008      	beq.n	800a47e <dhcp_arp_reply+0x22>
 800a46c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a46e:	4b08      	ldr	r3, [pc, #32]	; (800a490 <dhcp_arp_reply+0x34>)
 800a470:	f240 328b 	movw	r2, #907	; 0x38b
 800a474:	4907      	ldr	r1, [pc, #28]	; (800a494 <dhcp_arp_reply+0x38>)
 800a476:	4808      	ldr	r0, [pc, #32]	; (800a498 <dhcp_arp_reply+0x3c>)
 800a478:	f007 fe78 	bl	801216c <iprintf>
 800a47c:	bd08      	pop	{r3, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800a47e:	6809      	ldr	r1, [r1, #0]
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	4299      	cmp	r1, r3
 800a484:	d1f2      	bne.n	800a46c <dhcp_arp_reply+0x10>
      dhcp_decline(netif);
 800a486:	4610      	mov	r0, r2
 800a488:	f7ff fb94 	bl	8009bb4 <dhcp_decline>
 800a48c:	e7ee      	b.n	800a46c <dhcp_arp_reply+0x10>
 800a48e:	bf00      	nop
 800a490:	08067fc8 	.word	0x08067fc8
 800a494:	0801334c 	.word	0x0801334c
 800a498:	0801335c 	.word	0x0801335c

0800a49c <dhcp_renew>:
{
 800a49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a4a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800a4a6:	2105      	movs	r1, #5
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f7fe ff9d 	bl	80093e8 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800a4ae:	f10d 030e 	add.w	r3, sp, #14
 800a4b2:	2203      	movs	r2, #3
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	4640      	mov	r0, r8
 800a4b8:	f7ff f81a 	bl	80094f0 <dhcp_create_msg>
  if (p_out != NULL) {
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d058      	beq.n	800a572 <dhcp_renew+0xd6>
 800a4c0:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800a4c2:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a4c4:	36f0      	adds	r6, #240	; 0xf0
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	2239      	movs	r2, #57	; 0x39
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800a4d0:	f7fe ffb0 	bl	8009434 <dhcp_option>
 800a4d4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800a4d8:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800a4dc:	4631      	mov	r1, r6
 800a4de:	f7fe ff8b 	bl	80093f8 <dhcp_option_short>
 800a4e2:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	2237      	movs	r2, #55	; 0x37
 800a4ea:	4631      	mov	r1, r6
 800a4ec:	f7fe ffa2 	bl	8009434 <dhcp_option>
 800a4f0:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a4f4:	2400      	movs	r4, #0
 800a4f6:	e00a      	b.n	800a50e <dhcp_renew+0x72>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800a4f8:	4b21      	ldr	r3, [pc, #132]	; (800a580 <dhcp_renew+0xe4>)
 800a4fa:	5d1a      	ldrb	r2, [r3, r4]
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800a502:	f7fe ffb5 	bl	8009470 <dhcp_option_byte>
 800a506:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a50a:	3401      	adds	r4, #1
 800a50c:	b2e4      	uxtb	r4, r4
 800a50e:	2c02      	cmp	r4, #2
 800a510:	d9f2      	bls.n	800a4f8 <dhcp_renew+0x5c>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800a512:	463a      	mov	r2, r7
 800a514:	4631      	mov	r1, r6
 800a516:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800a51a:	f7ff f8c5 	bl	80096a8 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800a51e:	4b19      	ldr	r3, [pc, #100]	; (800a584 <dhcp_renew+0xe8>)
 800a520:	6818      	ldr	r0, [r3, #0]
 800a522:	f8cd 8000 	str.w	r8, [sp]
 800a526:	2343      	movs	r3, #67	; 0x43
 800a528:	f105 0218 	add.w	r2, r5, #24
 800a52c:	4639      	mov	r1, r7
 800a52e:	f007 fad5 	bl	8011adc <udp_sendto_if>
 800a532:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800a534:	4638      	mov	r0, r7
 800a536:	f002 fcaf 	bl	800ce98 <pbuf_free>
  if (dhcp->tries < 255) {
 800a53a:	79ab      	ldrb	r3, [r5, #6]
 800a53c:	2bff      	cmp	r3, #255	; 0xff
 800a53e:	d001      	beq.n	800a544 <dhcp_renew+0xa8>
    dhcp->tries++;
 800a540:	3301      	adds	r3, #1
 800a542:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800a544:	79ab      	ldrb	r3, [r5, #6]
 800a546:	2b09      	cmp	r3, #9
 800a548:	d816      	bhi.n	800a578 <dhcp_renew+0xdc>
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800a550:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a554:	0113      	lsls	r3, r2, #4
 800a556:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800a558:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a55c:	4a0a      	ldr	r2, [pc, #40]	; (800a588 <dhcp_renew+0xec>)
 800a55e:	fb82 1203 	smull	r1, r2, r2, r3
 800a562:	17db      	asrs	r3, r3, #31
 800a564:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800a568:	812b      	strh	r3, [r5, #8]
}
 800a56a:	4620      	mov	r0, r4
 800a56c:	b004      	add	sp, #16
 800a56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800a572:	f04f 34ff 	mov.w	r4, #4294967295
 800a576:	e7e0      	b.n	800a53a <dhcp_renew+0x9e>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800a578:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a57c:	e7ec      	b.n	800a558 <dhcp_renew+0xbc>
 800a57e:	bf00      	nop
 800a580:	08067ed0 	.word	0x08067ed0
 800a584:	20006cf0 	.word	0x20006cf0
 800a588:	10624dd3 	.word	0x10624dd3

0800a58c <dhcp_t1_timeout>:
{
 800a58c:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a58e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a590:	7963      	ldrb	r3, [r4, #5]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d003      	beq.n	800a59e <dhcp_t1_timeout+0x12>
 800a596:	2b0a      	cmp	r3, #10
 800a598:	d001      	beq.n	800a59e <dhcp_t1_timeout+0x12>
 800a59a:	2b05      	cmp	r3, #5
 800a59c:	d10b      	bne.n	800a5b6 <dhcp_t1_timeout+0x2a>
    dhcp_renew(netif);
 800a59e:	f7ff ff7d 	bl	800a49c <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	8a62      	ldrh	r2, [r4, #18]
 800a5a6:	1a9b      	subs	r3, r3, r2
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	dd04      	ble.n	800a5b6 <dhcp_t1_timeout+0x2a>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800a5ac:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a5b0:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800a5b4:	81e3      	strh	r3, [r4, #14]
 800a5b6:	bd10      	pop	{r4, pc}

0800a5b8 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800a5b8:	b188      	cbz	r0, 800a5de <dhcp_supplied_address+0x26>
 800a5ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a5bc:	b18b      	cbz	r3, 800a5e2 <dhcp_supplied_address+0x2a>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800a5be:	795b      	ldrb	r3, [r3, #5]
 800a5c0:	2b0a      	cmp	r3, #10
 800a5c2:	d008      	beq.n	800a5d6 <dhcp_supplied_address+0x1e>
 800a5c4:	2b05      	cmp	r3, #5
 800a5c6:	d008      	beq.n	800a5da <dhcp_supplied_address+0x22>
 800a5c8:	2b04      	cmp	r3, #4
 800a5ca:	d002      	beq.n	800a5d2 <dhcp_supplied_address+0x1a>
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	b2c0      	uxtb	r0, r0
 800a5d0:	4770      	bx	lr
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	e7fb      	b.n	800a5ce <dhcp_supplied_address+0x16>
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	e7f9      	b.n	800a5ce <dhcp_supplied_address+0x16>
 800a5da:	2001      	movs	r0, #1
 800a5dc:	e7f7      	b.n	800a5ce <dhcp_supplied_address+0x16>
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
 800a5de:	2000      	movs	r0, #0
 800a5e0:	4770      	bx	lr
 800a5e2:	2000      	movs	r0, #0
}
 800a5e4:	4770      	bx	lr
	...

0800a5e8 <dhcp_release_and_stop>:
{
 800a5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ec:	b084      	sub	sp, #16
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a5ee:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (dhcp == NULL) {
 800a5f0:	b1fc      	cbz	r4, 800a632 <dhcp_release_and_stop+0x4a>
  if (dhcp->state == DHCP_STATE_OFF) {
 800a5f2:	7963      	ldrb	r3, [r4, #5]
 800a5f4:	b1eb      	cbz	r3, 800a632 <dhcp_release_and_stop+0x4a>
 800a5f6:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800a5f8:	69a3      	ldr	r3, [r4, #24]
 800a5fa:	9303      	str	r3, [sp, #12]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	61a3      	str	r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800a600:	61e3      	str	r3, [r4, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800a602:	6223      	str	r3, [r4, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800a604:	6263      	str	r3, [r4, #36]	; 0x24
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800a606:	6323      	str	r3, [r4, #48]	; 0x30
 800a608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a60a:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800a60c:	82a3      	strh	r3, [r4, #20]
 800a60e:	8263      	strh	r3, [r4, #18]
 800a610:	8223      	strh	r3, [r4, #16]
 800a612:	81e3      	strh	r3, [r4, #14]
  if (dhcp_supplied_address(netif)) {
 800a614:	f7ff ffd0 	bl	800a5b8 <dhcp_supplied_address>
 800a618:	b970      	cbnz	r0, 800a638 <dhcp_release_and_stop+0x50>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800a61a:	4922      	ldr	r1, [pc, #136]	; (800a6a4 <dhcp_release_and_stop+0xbc>)
 800a61c:	460b      	mov	r3, r1
 800a61e:	460a      	mov	r2, r1
 800a620:	4628      	mov	r0, r5
 800a622:	f002 f9eb 	bl	800c9fc <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a626:	2100      	movs	r1, #0
 800a628:	4620      	mov	r0, r4
 800a62a:	f7fe fedd 	bl	80093e8 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 800a62e:	7923      	ldrb	r3, [r4, #4]
 800a630:	bb93      	cbnz	r3, 800a698 <dhcp_release_and_stop+0xb0>
}
 800a632:	b004      	add	sp, #16
 800a634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800a638:	f10d 030a 	add.w	r3, sp, #10
 800a63c:	2207      	movs	r2, #7
 800a63e:	4621      	mov	r1, r4
 800a640:	4628      	mov	r0, r5
 800a642:	f7fe ff55 	bl	80094f0 <dhcp_create_msg>
    if (p_out != NULL) {
 800a646:	4607      	mov	r7, r0
 800a648:	2800      	cmp	r0, #0
 800a64a:	d0e6      	beq.n	800a61a <dhcp_release_and_stop+0x32>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800a64c:	6846      	ldr	r6, [r0, #4]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800a64e:	36f0      	adds	r6, #240	; 0xf0
 800a650:	2304      	movs	r3, #4
 800a652:	2236      	movs	r2, #54	; 0x36
 800a654:	4631      	mov	r1, r6
 800a656:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 800a65a:	f7fe feeb 	bl	8009434 <dhcp_option>
 800a65e:	4680      	mov	r8, r0
 800a660:	f8ad 000a 	strh.w	r0, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800a664:	9803      	ldr	r0, [sp, #12]
 800a666:	f7fe fd6c 	bl	8009142 <lwip_htonl>
 800a66a:	4602      	mov	r2, r0
 800a66c:	4631      	mov	r1, r6
 800a66e:	4640      	mov	r0, r8
 800a670:	f7fe ff16 	bl	80094a0 <dhcp_option_long>
 800a674:	f8ad 000a 	strh.w	r0, [sp, #10]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800a678:	463a      	mov	r2, r7
 800a67a:	4631      	mov	r1, r6
 800a67c:	f7ff f814 	bl	80096a8 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800a680:	4b09      	ldr	r3, [pc, #36]	; (800a6a8 <dhcp_release_and_stop+0xc0>)
 800a682:	6818      	ldr	r0, [r3, #0]
 800a684:	9500      	str	r5, [sp, #0]
 800a686:	2343      	movs	r3, #67	; 0x43
 800a688:	aa03      	add	r2, sp, #12
 800a68a:	4639      	mov	r1, r7
 800a68c:	f007 fa26 	bl	8011adc <udp_sendto_if>
      pbuf_free(p_out);
 800a690:	4638      	mov	r0, r7
 800a692:	f002 fc01 	bl	800ce98 <pbuf_free>
 800a696:	e7c0      	b.n	800a61a <dhcp_release_and_stop+0x32>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800a698:	f7ff fb96 	bl	8009dc8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800a69c:	2300      	movs	r3, #0
 800a69e:	7123      	strb	r3, [r4, #4]
 800a6a0:	e7c7      	b.n	800a632 <dhcp_release_and_stop+0x4a>
 800a6a2:	bf00      	nop
 800a6a4:	080684a4 	.word	0x080684a4
 800a6a8:	20006cf0 	.word	0x20006cf0

0800a6ac <dhcp_start>:
{
 800a6ac:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800a6ae:	b328      	cbz	r0, 800a6fc <dhcp_start+0x50>
 800a6b0:	4604      	mov	r4, r0
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800a6b2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800a6b6:	f013 0f01 	tst.w	r3, #1
 800a6ba:	d029      	beq.n	800a710 <dhcp_start+0x64>
  dhcp = netif_dhcp_data(netif);
 800a6bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800a6be:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800a6c0:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800a6c4:	d343      	bcc.n	800a74e <dhcp_start+0xa2>
  if (dhcp == NULL) {
 800a6c6:	b36d      	cbz	r5, 800a724 <dhcp_start+0x78>
    if (dhcp->pcb_allocated != 0) {
 800a6c8:	792b      	ldrb	r3, [r5, #4]
 800a6ca:	bb93      	cbnz	r3, 800a732 <dhcp_start+0x86>
  memset(dhcp, 0, sizeof(struct dhcp));
 800a6cc:	2234      	movs	r2, #52	; 0x34
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f007 fd42 	bl	801215a <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800a6d6:	f7ff fb9b 	bl	8009e10 <dhcp_inc_pcb_refcount>
 800a6da:	4606      	mov	r6, r0
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d13c      	bne.n	800a75a <dhcp_start+0xae>
  dhcp->pcb_allocated = 1;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 800a6e4:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800a6e8:	f013 0f04 	tst.w	r3, #4
 800a6ec:	d024      	beq.n	800a738 <dhcp_start+0x8c>
  result = dhcp_discover(netif);
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f7ff f9e6 	bl	8009ac0 <dhcp_discover>
  if (result != ERR_OK) {
 800a6f4:	4606      	mov	r6, r0
 800a6f6:	bb20      	cbnz	r0, 800a742 <dhcp_start+0x96>
}
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800a6fc:	4b18      	ldr	r3, [pc, #96]	; (800a760 <dhcp_start+0xb4>)
 800a6fe:	f240 22e7 	movw	r2, #743	; 0x2e7
 800a702:	4918      	ldr	r1, [pc, #96]	; (800a764 <dhcp_start+0xb8>)
 800a704:	4818      	ldr	r0, [pc, #96]	; (800a768 <dhcp_start+0xbc>)
 800a706:	f007 fd31 	bl	801216c <iprintf>
 800a70a:	f06f 060f 	mvn.w	r6, #15
 800a70e:	e7f3      	b.n	800a6f8 <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800a710:	4b13      	ldr	r3, [pc, #76]	; (800a760 <dhcp_start+0xb4>)
 800a712:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800a716:	4915      	ldr	r1, [pc, #84]	; (800a76c <dhcp_start+0xc0>)
 800a718:	4813      	ldr	r0, [pc, #76]	; (800a768 <dhcp_start+0xbc>)
 800a71a:	f007 fd27 	bl	801216c <iprintf>
 800a71e:	f06f 060f 	mvn.w	r6, #15
 800a722:	e7e9      	b.n	800a6f8 <dhcp_start+0x4c>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800a724:	2034      	movs	r0, #52	; 0x34
 800a726:	f001 ff87 	bl	800c638 <mem_malloc>
    if (dhcp == NULL) {
 800a72a:	4605      	mov	r5, r0
 800a72c:	b190      	cbz	r0, 800a754 <dhcp_start+0xa8>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800a72e:	6260      	str	r0, [r4, #36]	; 0x24
 800a730:	e7cc      	b.n	800a6cc <dhcp_start+0x20>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800a732:	f7ff fb49 	bl	8009dc8 <dhcp_dec_pcb_refcount>
 800a736:	e7c9      	b.n	800a6cc <dhcp_start+0x20>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800a738:	2102      	movs	r1, #2
 800a73a:	4628      	mov	r0, r5
 800a73c:	f7fe fe54 	bl	80093e8 <dhcp_set_state>
    return ERR_OK;
 800a740:	e7da      	b.n	800a6f8 <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 800a742:	4620      	mov	r0, r4
 800a744:	f7ff ff50 	bl	800a5e8 <dhcp_release_and_stop>
    return ERR_MEM;
 800a748:	f04f 36ff 	mov.w	r6, #4294967295
 800a74c:	e7d4      	b.n	800a6f8 <dhcp_start+0x4c>
    return ERR_MEM;
 800a74e:	f04f 36ff 	mov.w	r6, #4294967295
 800a752:	e7d1      	b.n	800a6f8 <dhcp_start+0x4c>
      return ERR_MEM;
 800a754:	f04f 36ff 	mov.w	r6, #4294967295
 800a758:	e7ce      	b.n	800a6f8 <dhcp_start+0x4c>
    return ERR_MEM;
 800a75a:	f04f 36ff 	mov.w	r6, #4294967295
 800a75e:	e7cb      	b.n	800a6f8 <dhcp_start+0x4c>
 800a760:	08067fc8 	.word	0x08067fc8
 800a764:	0801334c 	.word	0x0801334c
 800a768:	0801335c 	.word	0x0801335c
 800a76c:	08068148 	.word	0x08068148

0800a770 <dhcp_coarse_tmr>:
{
 800a770:	b510      	push	{r4, lr}
  NETIF_FOREACH(netif) {
 800a772:	4b17      	ldr	r3, [pc, #92]	; (800a7d0 <dhcp_coarse_tmr+0x60>)
 800a774:	681c      	ldr	r4, [r3, #0]
 800a776:	e006      	b.n	800a786 <dhcp_coarse_tmr+0x16>
        dhcp_release_and_stop(netif);
 800a778:	4620      	mov	r0, r4
 800a77a:	f7ff ff35 	bl	800a5e8 <dhcp_release_and_stop>
        dhcp_start(netif);
 800a77e:	4620      	mov	r0, r4
 800a780:	f7ff ff94 	bl	800a6ac <dhcp_start>
  NETIF_FOREACH(netif) {
 800a784:	6824      	ldr	r4, [r4, #0]
 800a786:	b314      	cbz	r4, 800a7ce <dhcp_coarse_tmr+0x5e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a788:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d0fa      	beq.n	800a784 <dhcp_coarse_tmr+0x14>
 800a78e:	795a      	ldrb	r2, [r3, #5]
 800a790:	2a00      	cmp	r2, #0
 800a792:	d0f7      	beq.n	800a784 <dhcp_coarse_tmr+0x14>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800a794:	8a99      	ldrh	r1, [r3, #20]
 800a796:	b129      	cbz	r1, 800a7a4 <dhcp_coarse_tmr+0x34>
 800a798:	8a5a      	ldrh	r2, [r3, #18]
 800a79a:	3201      	adds	r2, #1
 800a79c:	b292      	uxth	r2, r2
 800a79e:	825a      	strh	r2, [r3, #18]
 800a7a0:	4291      	cmp	r1, r2
 800a7a2:	d0e9      	beq.n	800a778 <dhcp_coarse_tmr+0x8>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800a7a4:	8a1a      	ldrh	r2, [r3, #16]
 800a7a6:	b11a      	cbz	r2, 800a7b0 <dhcp_coarse_tmr+0x40>
 800a7a8:	1e51      	subs	r1, r2, #1
 800a7aa:	8219      	strh	r1, [r3, #16]
 800a7ac:	2a01      	cmp	r2, #1
 800a7ae:	d00a      	beq.n	800a7c6 <dhcp_coarse_tmr+0x56>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800a7b0:	89da      	ldrh	r2, [r3, #14]
 800a7b2:	2a00      	cmp	r2, #0
 800a7b4:	d0e6      	beq.n	800a784 <dhcp_coarse_tmr+0x14>
 800a7b6:	1e51      	subs	r1, r2, #1
 800a7b8:	81d9      	strh	r1, [r3, #14]
 800a7ba:	2a01      	cmp	r2, #1
 800a7bc:	d1e2      	bne.n	800a784 <dhcp_coarse_tmr+0x14>
        dhcp_t1_timeout(netif);
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f7ff fee4 	bl	800a58c <dhcp_t1_timeout>
 800a7c4:	e7de      	b.n	800a784 <dhcp_coarse_tmr+0x14>
        dhcp_t2_timeout(netif);
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f7ff f800 	bl	80097cc <dhcp_t2_timeout>
 800a7cc:	e7da      	b.n	800a784 <dhcp_coarse_tmr+0x14>
}
 800a7ce:	bd10      	pop	{r4, pc}
 800a7d0:	2000d840 	.word	0x2000d840

0800a7d4 <dhcp_timeout>:
{
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	4604      	mov	r4, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a7d8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800a7da:	7953      	ldrb	r3, [r2, #5]
 800a7dc:	2b0c      	cmp	r3, #12
 800a7de:	d008      	beq.n	800a7f2 <dhcp_timeout+0x1e>
 800a7e0:	2b06      	cmp	r3, #6
 800a7e2:	d006      	beq.n	800a7f2 <dhcp_timeout+0x1e>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d008      	beq.n	800a7fa <dhcp_timeout+0x26>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800a7e8:	2b08      	cmp	r3, #8
 800a7ea:	d012      	beq.n	800a812 <dhcp_timeout+0x3e>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800a7ec:	2b03      	cmp	r3, #3
 800a7ee:	d019      	beq.n	800a824 <dhcp_timeout+0x50>
 800a7f0:	bd10      	pop	{r4, pc}
    dhcp_discover(netif);
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f7ff f964 	bl	8009ac0 <dhcp_discover>
 800a7f8:	bd10      	pop	{r4, pc}
    if (dhcp->tries <= 5) {
 800a7fa:	7993      	ldrb	r3, [r2, #6]
 800a7fc:	2b05      	cmp	r3, #5
 800a7fe:	d802      	bhi.n	800a806 <dhcp_timeout+0x32>
      dhcp_select(netif);
 800a800:	f7ff f886 	bl	8009910 <dhcp_select>
 800a804:	bd10      	pop	{r4, pc}
      dhcp_release_and_stop(netif);
 800a806:	f7ff feef 	bl	800a5e8 <dhcp_release_and_stop>
      dhcp_start(netif);
 800a80a:	4620      	mov	r0, r4
 800a80c:	f7ff ff4e 	bl	800a6ac <dhcp_start>
 800a810:	bd10      	pop	{r4, pc}
    if (dhcp->tries <= 1) {
 800a812:	7993      	ldrb	r3, [r2, #6]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d902      	bls.n	800a81e <dhcp_timeout+0x4a>
      dhcp_bind(netif);
 800a818:	f7ff fa30 	bl	8009c7c <dhcp_bind>
 800a81c:	bd10      	pop	{r4, pc}
      dhcp_check(netif);
 800a81e:	f7ff fa17 	bl	8009c50 <dhcp_check>
 800a822:	bd10      	pop	{r4, pc}
    if (dhcp->tries < REBOOT_TRIES) {
 800a824:	7993      	ldrb	r3, [r2, #6]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d902      	bls.n	800a830 <dhcp_timeout+0x5c>
      dhcp_discover(netif);
 800a82a:	f7ff f949 	bl	8009ac0 <dhcp_discover>
}
 800a82e:	e7df      	b.n	800a7f0 <dhcp_timeout+0x1c>
      dhcp_reboot(netif);
 800a830:	f7fe ffe4 	bl	80097fc <dhcp_reboot>
 800a834:	bd10      	pop	{r4, pc}
	...

0800a838 <dhcp_fine_tmr>:
{
 800a838:	b510      	push	{r4, lr}
  NETIF_FOREACH(netif) {
 800a83a:	4b0b      	ldr	r3, [pc, #44]	; (800a868 <dhcp_fine_tmr+0x30>)
 800a83c:	681c      	ldr	r4, [r3, #0]
 800a83e:	e002      	b.n	800a846 <dhcp_fine_tmr+0xe>
      } else if (dhcp->request_timeout == 1) {
 800a840:	2b01      	cmp	r3, #1
 800a842:	d00a      	beq.n	800a85a <dhcp_fine_tmr+0x22>
  NETIF_FOREACH(netif) {
 800a844:	6824      	ldr	r4, [r4, #0]
 800a846:	b174      	cbz	r4, 800a866 <dhcp_fine_tmr+0x2e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a848:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 800a84a:	2a00      	cmp	r2, #0
 800a84c:	d0fa      	beq.n	800a844 <dhcp_fine_tmr+0xc>
      if (dhcp->request_timeout > 1) {
 800a84e:	8913      	ldrh	r3, [r2, #8]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d9f5      	bls.n	800a840 <dhcp_fine_tmr+0x8>
        dhcp->request_timeout--;
 800a854:	3b01      	subs	r3, #1
 800a856:	8113      	strh	r3, [r2, #8]
 800a858:	e7f4      	b.n	800a844 <dhcp_fine_tmr+0xc>
        dhcp->request_timeout--;
 800a85a:	3b01      	subs	r3, #1
 800a85c:	8113      	strh	r3, [r2, #8]
        dhcp_timeout(netif);
 800a85e:	4620      	mov	r0, r4
 800a860:	f7ff ffb8 	bl	800a7d4 <dhcp_timeout>
 800a864:	e7ee      	b.n	800a844 <dhcp_fine_tmr+0xc>
}
 800a866:	bd10      	pop	{r4, pc}
 800a868:	2000d840 	.word	0x2000d840

0800a86c <dhcp_stop>:
{
 800a86c:	b508      	push	{r3, lr}
  dhcp_release_and_stop(netif);
 800a86e:	f7ff febb 	bl	800a5e8 <dhcp_release_and_stop>
 800a872:	bd08      	pop	{r3, pc}

0800a874 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a874:	b510      	push	{r4, lr}
 800a876:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a878:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800a87c:	00d3      	lsls	r3, r2, #3
 800a87e:	4a09      	ldr	r2, [pc, #36]	; (800a8a4 <etharp_free_entry+0x30>)
 800a880:	58d0      	ldr	r0, [r2, r3]
 800a882:	b138      	cbz	r0, 800a894 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a884:	f002 fb08 	bl	800ce98 <pbuf_free>
    arp_table[i].q = NULL;
 800a888:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a88c:	00d3      	lsls	r3, r2, #3
 800a88e:	2100      	movs	r1, #0
 800a890:	4a04      	ldr	r2, [pc, #16]	; (800a8a4 <etharp_free_entry+0x30>)
 800a892:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a894:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a898:	00e2      	lsls	r2, r4, #3
 800a89a:	4b02      	ldr	r3, [pc, #8]	; (800a8a4 <etharp_free_entry+0x30>)
 800a89c:	4413      	add	r3, r2
 800a89e:	2200      	movs	r2, #0
 800a8a0:	751a      	strb	r2, [r3, #20]
 800a8a2:	bd10      	pop	{r4, pc}
 800a8a4:	20006cfc 	.word	0x20006cfc

0800a8a8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	b083      	sub	sp, #12
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a8ae:	f04f 0e00 	mov.w	lr, #0
 800a8b2:	f8cd e004 	str.w	lr, [sp, #4]
 800a8b6:	46f2      	mov	sl, lr
  s16_t old_queue = ARP_TABLE_SIZE;
 800a8b8:	f04f 0c0a 	mov.w	ip, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a8bc:	4673      	mov	r3, lr
  s16_t empty = ARP_TABLE_SIZE;
 800a8be:	46e0      	mov	r8, ip
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a8c0:	46e1      	mov	r9, ip
 800a8c2:	46e3      	mov	fp, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a8c4:	e003      	b.n	800a8ce <etharp_find_entry+0x26>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a8c6:	b975      	cbnz	r5, 800a8e6 <etharp_find_entry+0x3e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800a8c8:	4698      	mov	r8, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	b21b      	sxth	r3, r3
 800a8ce:	2b09      	cmp	r3, #9
 800a8d0:	dc50      	bgt.n	800a974 <etharp_find_entry+0xcc>
    u8_t state = arp_table[i].state;
 800a8d2:	461c      	mov	r4, r3
 800a8d4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 800a8d8:	00ee      	lsls	r6, r5, #3
 800a8da:	4d62      	ldr	r5, [pc, #392]	; (800aa64 <etharp_find_entry+0x1bc>)
 800a8dc:	4435      	add	r5, r6
 800a8de:	7d2d      	ldrb	r5, [r5, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a8e0:	f1b8 0f0a 	cmp.w	r8, #10
 800a8e4:	d0ef      	beq.n	800a8c6 <etharp_find_entry+0x1e>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a8e6:	2d00      	cmp	r5, #0
 800a8e8:	d0ef      	beq.n	800a8ca <etharp_find_entry+0x22>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a8ea:	b140      	cbz	r0, 800a8fe <etharp_find_entry+0x56>
 800a8ec:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800a8f0:	00f7      	lsls	r7, r6, #3
 800a8f2:	4e5c      	ldr	r6, [pc, #368]	; (800aa64 <etharp_find_entry+0x1bc>)
 800a8f4:	443e      	add	r6, r7
 800a8f6:	6876      	ldr	r6, [r6, #4]
 800a8f8:	6807      	ldr	r7, [r0, #0]
 800a8fa:	42b7      	cmp	r7, r6
 800a8fc:	d010      	beq.n	800a920 <etharp_find_entry+0x78>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a8fe:	2d01      	cmp	r5, #1
 800a900:	d01b      	beq.n	800a93a <etharp_find_entry+0x92>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a902:	2d01      	cmp	r5, #1
 800a904:	d9e1      	bls.n	800a8ca <etharp_find_entry+0x22>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 800a906:	2d04      	cmp	r5, #4
 800a908:	d8df      	bhi.n	800a8ca <etharp_find_entry+0x22>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a90a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a90e:	00e5      	lsls	r5, r4, #3
 800a910:	4c54      	ldr	r4, [pc, #336]	; (800aa64 <etharp_find_entry+0x1bc>)
 800a912:	442c      	add	r4, r5
 800a914:	8a64      	ldrh	r4, [r4, #18]
 800a916:	45a6      	cmp	lr, r4
 800a918:	d8d7      	bhi.n	800a8ca <etharp_find_entry+0x22>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 800a91a:	46a6      	mov	lr, r4
            old_stable = i;
 800a91c:	4699      	mov	r9, r3
 800a91e:	e7d4      	b.n	800a8ca <etharp_find_entry+0x22>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800a920:	2a00      	cmp	r2, #0
 800a922:	f000 8097 	beq.w	800aa54 <etharp_find_entry+0x1ac>
 800a926:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800a92a:	00f7      	lsls	r7, r6, #3
 800a92c:	4e4d      	ldr	r6, [pc, #308]	; (800aa64 <etharp_find_entry+0x1bc>)
 800a92e:	443e      	add	r6, r7
 800a930:	68b6      	ldr	r6, [r6, #8]
 800a932:	42b2      	cmp	r2, r6
 800a934:	d1e3      	bne.n	800a8fe <etharp_find_entry+0x56>
        return i;
 800a936:	4698      	mov	r8, r3
 800a938:	e05e      	b.n	800a9f8 <etharp_find_entry+0x150>
        if (arp_table[i].q != NULL) {
 800a93a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800a93e:	00f5      	lsls	r5, r6, #3
 800a940:	4e48      	ldr	r6, [pc, #288]	; (800aa64 <etharp_find_entry+0x1bc>)
 800a942:	5975      	ldr	r5, [r6, r5]
 800a944:	b155      	cbz	r5, 800a95c <etharp_find_entry+0xb4>
          if (arp_table[i].ctime >= age_queue) {
 800a946:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a94a:	00e5      	lsls	r5, r4, #3
 800a94c:	4634      	mov	r4, r6
 800a94e:	442c      	add	r4, r5
 800a950:	8a64      	ldrh	r4, [r4, #18]
 800a952:	45a2      	cmp	sl, r4
 800a954:	d8b9      	bhi.n	800a8ca <etharp_find_entry+0x22>
            age_queue = arp_table[i].ctime;
 800a956:	46a2      	mov	sl, r4
            old_queue = i;
 800a958:	469c      	mov	ip, r3
 800a95a:	e7b6      	b.n	800a8ca <etharp_find_entry+0x22>
          if (arp_table[i].ctime >= age_pending) {
 800a95c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a960:	00e5      	lsls	r5, r4, #3
 800a962:	4c40      	ldr	r4, [pc, #256]	; (800aa64 <etharp_find_entry+0x1bc>)
 800a964:	442c      	add	r4, r5
 800a966:	8a64      	ldrh	r4, [r4, #18]
 800a968:	9d01      	ldr	r5, [sp, #4]
 800a96a:	42a5      	cmp	r5, r4
 800a96c:	d8ad      	bhi.n	800a8ca <etharp_find_entry+0x22>
            age_pending = arp_table[i].ctime;
 800a96e:	9401      	str	r4, [sp, #4]
            old_pending = i;
 800a970:	469b      	mov	fp, r3
 800a972:	e7aa      	b.n	800a8ca <etharp_find_entry+0x22>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a974:	f011 0f02 	tst.w	r1, #2
 800a978:	d16e      	bne.n	800aa58 <etharp_find_entry+0x1b0>
 800a97a:	f1b8 0f0a 	cmp.w	r8, #10
 800a97e:	d03f      	beq.n	800aa00 <etharp_find_entry+0x158>
 800a980:	4614      	mov	r4, r2
 800a982:	4606      	mov	r6, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a984:	f1b8 0f09 	cmp.w	r8, #9
 800a988:	dd17      	ble.n	800a9ba <etharp_find_entry+0x112>
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800a98a:	f1b9 0f09 	cmp.w	r9, #9
 800a98e:	dc3d      	bgt.n	800aa0c <etharp_find_entry+0x164>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a990:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 800a994:	00d3      	lsls	r3, r2, #3
 800a996:	4a33      	ldr	r2, [pc, #204]	; (800aa64 <etharp_find_entry+0x1bc>)
 800a998:	58d3      	ldr	r3, [r2, r3]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d03e      	beq.n	800aa1c <etharp_find_entry+0x174>
 800a99e:	4b32      	ldr	r3, [pc, #200]	; (800aa68 <etharp_find_entry+0x1c0>)
 800a9a0:	f240 126d 	movw	r2, #365	; 0x16d
 800a9a4:	4931      	ldr	r1, [pc, #196]	; (800aa6c <etharp_find_entry+0x1c4>)
 800a9a6:	4832      	ldr	r0, [pc, #200]	; (800aa70 <etharp_find_entry+0x1c8>)
 800a9a8:	f007 fbe0 	bl	801216c <iprintf>
      i = old_stable;
 800a9ac:	46c8      	mov	r8, r9
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a9ae:	f1b8 0f09 	cmp.w	r8, #9
 800a9b2:	dc37      	bgt.n	800aa24 <etharp_find_entry+0x17c>
    etharp_free_entry(i);
 800a9b4:	4640      	mov	r0, r8
 800a9b6:	f7ff ff5d 	bl	800a874 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a9ba:	f1b8 0f09 	cmp.w	r8, #9
 800a9be:	dc39      	bgt.n	800aa34 <etharp_find_entry+0x18c>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a9c0:	4645      	mov	r5, r8
 800a9c2:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800a9c6:	00da      	lsls	r2, r3, #3
 800a9c8:	4b26      	ldr	r3, [pc, #152]	; (800aa64 <etharp_find_entry+0x1bc>)
 800a9ca:	4413      	add	r3, r2
 800a9cc:	7d1b      	ldrb	r3, [r3, #20]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d138      	bne.n	800aa44 <etharp_find_entry+0x19c>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a9d2:	b136      	cbz	r6, 800a9e2 <etharp_find_entry+0x13a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a9d4:	6831      	ldr	r1, [r6, #0]
 800a9d6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800a9da:	00da      	lsls	r2, r3, #3
 800a9dc:	4b21      	ldr	r3, [pc, #132]	; (800aa64 <etharp_find_entry+0x1bc>)
 800a9de:	4413      	add	r3, r2
 800a9e0:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800a9e2:	4a20      	ldr	r2, [pc, #128]	; (800aa64 <etharp_find_entry+0x1bc>)
 800a9e4:	006b      	lsls	r3, r5, #1
 800a9e6:	1958      	adds	r0, r3, r5
 800a9e8:	00c1      	lsls	r1, r0, #3
 800a9ea:	4411      	add	r1, r2
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	8248      	strh	r0, [r1, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800a9f0:	442b      	add	r3, r5
 800a9f2:	00d9      	lsls	r1, r3, #3
 800a9f4:	440a      	add	r2, r1
 800a9f6:	6094      	str	r4, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800a9f8:	4640      	mov	r0, r8
 800a9fa:	b003      	add	sp, #12
 800a9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800aa00:	f011 0f01 	tst.w	r1, #1
 800aa04:	d1bc      	bne.n	800a980 <etharp_find_entry+0xd8>
    return (s16_t)ERR_MEM;
 800aa06:	f04f 38ff 	mov.w	r8, #4294967295
 800aa0a:	e7f5      	b.n	800a9f8 <etharp_find_entry+0x150>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800aa0c:	f1bb 0f09 	cmp.w	fp, #9
 800aa10:	dd06      	ble.n	800aa20 <etharp_find_entry+0x178>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800aa12:	f1bc 0f09 	cmp.w	ip, #9
 800aa16:	dc22      	bgt.n	800aa5e <etharp_find_entry+0x1b6>
      i = old_queue;
 800aa18:	46e0      	mov	r8, ip
 800aa1a:	e7c8      	b.n	800a9ae <etharp_find_entry+0x106>
      i = old_stable;
 800aa1c:	46c8      	mov	r8, r9
 800aa1e:	e7c6      	b.n	800a9ae <etharp_find_entry+0x106>
      i = old_pending;
 800aa20:	46d8      	mov	r8, fp
 800aa22:	e7c4      	b.n	800a9ae <etharp_find_entry+0x106>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800aa24:	4b10      	ldr	r3, [pc, #64]	; (800aa68 <etharp_find_entry+0x1c0>)
 800aa26:	f240 127f 	movw	r2, #383	; 0x17f
 800aa2a:	4912      	ldr	r1, [pc, #72]	; (800aa74 <etharp_find_entry+0x1cc>)
 800aa2c:	4810      	ldr	r0, [pc, #64]	; (800aa70 <etharp_find_entry+0x1c8>)
 800aa2e:	f007 fb9d 	bl	801216c <iprintf>
 800aa32:	e7bf      	b.n	800a9b4 <etharp_find_entry+0x10c>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800aa34:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <etharp_find_entry+0x1c0>)
 800aa36:	f240 1283 	movw	r2, #387	; 0x183
 800aa3a:	490e      	ldr	r1, [pc, #56]	; (800aa74 <etharp_find_entry+0x1cc>)
 800aa3c:	480c      	ldr	r0, [pc, #48]	; (800aa70 <etharp_find_entry+0x1c8>)
 800aa3e:	f007 fb95 	bl	801216c <iprintf>
 800aa42:	e7bd      	b.n	800a9c0 <etharp_find_entry+0x118>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800aa44:	4b08      	ldr	r3, [pc, #32]	; (800aa68 <etharp_find_entry+0x1c0>)
 800aa46:	f240 1285 	movw	r2, #389	; 0x185
 800aa4a:	490b      	ldr	r1, [pc, #44]	; (800aa78 <etharp_find_entry+0x1d0>)
 800aa4c:	4808      	ldr	r0, [pc, #32]	; (800aa70 <etharp_find_entry+0x1c8>)
 800aa4e:	f007 fb8d 	bl	801216c <iprintf>
 800aa52:	e7be      	b.n	800a9d2 <etharp_find_entry+0x12a>
        return i;
 800aa54:	4698      	mov	r8, r3
 800aa56:	e7cf      	b.n	800a9f8 <etharp_find_entry+0x150>
    return (s16_t)ERR_MEM;
 800aa58:	f04f 38ff 	mov.w	r8, #4294967295
 800aa5c:	e7cc      	b.n	800a9f8 <etharp_find_entry+0x150>
      return (s16_t)ERR_MEM;
 800aa5e:	f04f 38ff 	mov.w	r8, #4294967295
 800aa62:	e7c9      	b.n	800a9f8 <etharp_find_entry+0x150>
 800aa64:	20006cfc 	.word	0x20006cfc
 800aa68:	0806816c 	.word	0x0806816c
 800aa6c:	080681ac 	.word	0x080681ac
 800aa70:	0801335c 	.word	0x0801335c
 800aa74:	080681c4 	.word	0x080681c4
 800aa78:	080681d8 	.word	0x080681d8

0800aa7c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800aa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	4605      	mov	r5, r0
 800aa82:	460c      	mov	r4, r1
 800aa84:	4616      	mov	r6, r2
 800aa86:	461f      	mov	r7, r3
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800aa88:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800aa8c:	2b06      	cmp	r3, #6
 800aa8e:	d006      	beq.n	800aa9e <etharp_update_arp_entry+0x22>
 800aa90:	4b35      	ldr	r3, [pc, #212]	; (800ab68 <etharp_update_arp_entry+0xec>)
 800aa92:	f240 12a9 	movw	r2, #425	; 0x1a9
 800aa96:	4935      	ldr	r1, [pc, #212]	; (800ab6c <etharp_update_arp_entry+0xf0>)
 800aa98:	4835      	ldr	r0, [pc, #212]	; (800ab70 <etharp_update_arp_entry+0xf4>)
 800aa9a:	f007 fb67 	bl	801216c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800aa9e:	2c00      	cmp	r4, #0
 800aaa0:	d050      	beq.n	800ab44 <etharp_update_arp_entry+0xc8>
 800aaa2:	6820      	ldr	r0, [r4, #0]
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d050      	beq.n	800ab4a <etharp_update_arp_entry+0xce>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	f000 ff10 	bl	800b8ce <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d14e      	bne.n	800ab50 <etharp_update_arp_entry+0xd4>
      ip4_addr_ismulticast(ipaddr)) {
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800aab8:	2be0      	cmp	r3, #224	; 0xe0
 800aaba:	d04c      	beq.n	800ab56 <etharp_update_arp_entry+0xda>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800aabc:	462a      	mov	r2, r5
 800aabe:	4639      	mov	r1, r7
 800aac0:	4620      	mov	r0, r4
 800aac2:	f7ff fef1 	bl	800a8a8 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 800aac6:	2800      	cmp	r0, #0
 800aac8:	db2d      	blt.n	800ab26 <etharp_update_arp_entry+0xaa>
    return (err_t)i;
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 800aaca:	f017 0f04 	tst.w	r7, #4
 800aace:	d02c      	beq.n	800ab2a <etharp_update_arp_entry+0xae>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 800aad0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800aad4:	00da      	lsls	r2, r3, #3
 800aad6:	4b27      	ldr	r3, [pc, #156]	; (800ab74 <etharp_update_arp_entry+0xf8>)
 800aad8:	4413      	add	r3, r2
 800aada:	2205      	movs	r2, #5
 800aadc:	751a      	strb	r2, [r3, #20]
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800aade:	4c25      	ldr	r4, [pc, #148]	; (800ab74 <etharp_update_arp_entry+0xf8>)
 800aae0:	0042      	lsls	r2, r0, #1
 800aae2:	1813      	adds	r3, r2, r0
 800aae4:	00d9      	lsls	r1, r3, #3
 800aae6:	460b      	mov	r3, r1
 800aae8:	1867      	adds	r7, r4, r1
 800aaea:	60bd      	str	r5, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800aaec:	3308      	adds	r3, #8
 800aaee:	4423      	add	r3, r4
 800aaf0:	6832      	ldr	r2, [r6, #0]
 800aaf2:	605a      	str	r2, [r3, #4]
 800aaf4:	88b2      	ldrh	r2, [r6, #4]
 800aaf6:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800aafc:	5867      	ldr	r7, [r4, r1]
 800aafe:	b387      	cbz	r7, 800ab62 <etharp_update_arp_entry+0xe6>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 800ab00:	2400      	movs	r4, #0
 800ab02:	4a1c      	ldr	r2, [pc, #112]	; (800ab74 <etharp_update_arp_entry+0xf8>)
 800ab04:	5054      	str	r4, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ab06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	4633      	mov	r3, r6
 800ab0e:	f105 022a 	add.w	r2, r5, #42	; 0x2a
 800ab12:	4639      	mov	r1, r7
 800ab14:	4628      	mov	r0, r5
 800ab16:	f007 f993 	bl	8011e40 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	f002 f9bc 	bl	800ce98 <pbuf_free>
  }
  return ERR_OK;
 800ab20:	4620      	mov	r0, r4
}
 800ab22:	b003      	add	sp, #12
 800ab24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (err_t)i;
 800ab26:	b240      	sxtb	r0, r0
 800ab28:	e7fb      	b.n	800ab22 <etharp_update_arp_entry+0xa6>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 800ab2a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800ab2e:	00da      	lsls	r2, r3, #3
 800ab30:	4b10      	ldr	r3, [pc, #64]	; (800ab74 <etharp_update_arp_entry+0xf8>)
 800ab32:	4413      	add	r3, r2
 800ab34:	7d1b      	ldrb	r3, [r3, #20]
 800ab36:	2b05      	cmp	r3, #5
 800ab38:	d010      	beq.n	800ab5c <etharp_update_arp_entry+0xe0>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ab3a:	4b0e      	ldr	r3, [pc, #56]	; (800ab74 <etharp_update_arp_entry+0xf8>)
 800ab3c:	4413      	add	r3, r2
 800ab3e:	2202      	movs	r2, #2
 800ab40:	751a      	strb	r2, [r3, #20]
 800ab42:	e7cc      	b.n	800aade <etharp_update_arp_entry+0x62>
    return ERR_ARG;
 800ab44:	f06f 000f 	mvn.w	r0, #15
 800ab48:	e7eb      	b.n	800ab22 <etharp_update_arp_entry+0xa6>
 800ab4a:	f06f 000f 	mvn.w	r0, #15
 800ab4e:	e7e8      	b.n	800ab22 <etharp_update_arp_entry+0xa6>
 800ab50:	f06f 000f 	mvn.w	r0, #15
 800ab54:	e7e5      	b.n	800ab22 <etharp_update_arp_entry+0xa6>
 800ab56:	f06f 000f 	mvn.w	r0, #15
 800ab5a:	e7e2      	b.n	800ab22 <etharp_update_arp_entry+0xa6>
    return ERR_VAL;
 800ab5c:	f06f 0005 	mvn.w	r0, #5
 800ab60:	e7df      	b.n	800ab22 <etharp_update_arp_entry+0xa6>
  return ERR_OK;
 800ab62:	2000      	movs	r0, #0
 800ab64:	e7dd      	b.n	800ab22 <etharp_update_arp_entry+0xa6>
 800ab66:	bf00      	nop
 800ab68:	0806816c 	.word	0x0806816c
 800ab6c:	0806832c 	.word	0x0806832c
 800ab70:	0801335c 	.word	0x0801335c
 800ab74:	20006cfc 	.word	0x20006cfc

0800ab78 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ab78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab7c:	b082      	sub	sp, #8
 800ab7e:	4689      	mov	r9, r1
 800ab80:	4692      	mov	sl, r2
 800ab82:	4698      	mov	r8, r3
 800ab84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ab86:	4607      	mov	r7, r0
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d049      	beq.n	800ac20 <etharp_raw+0xa8>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ab8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ab90:	211c      	movs	r1, #28
 800ab92:	200e      	movs	r0, #14
 800ab94:	f002 f9ea 	bl	800cf6c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ab98:	4606      	mov	r6, r0
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d050      	beq.n	800ac40 <etharp_raw+0xc8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ab9e:	8943      	ldrh	r3, [r0, #10]
 800aba0:	2b1b      	cmp	r3, #27
 800aba2:	d945      	bls.n	800ac30 <etharp_raw+0xb8>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800aba4:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800aba6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800abaa:	f7fe fac5 	bl	8009138 <lwip_htons>
 800abae:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800abb0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800abb4:	2b06      	cmp	r3, #6
 800abb6:	d006      	beq.n	800abc6 <etharp_raw+0x4e>
 800abb8:	4b23      	ldr	r3, [pc, #140]	; (800ac48 <etharp_raw+0xd0>)
 800abba:	f240 426a 	movw	r2, #1130	; 0x46a
 800abbe:	4923      	ldr	r1, [pc, #140]	; (800ac4c <etharp_raw+0xd4>)
 800abc0:	4823      	ldr	r0, [pc, #140]	; (800ac50 <etharp_raw+0xd8>)
 800abc2:	f007 fad3 	bl	801216c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800abc6:	f8d8 3000 	ldr.w	r3, [r8]
 800abca:	60a3      	str	r3, [r4, #8]
 800abcc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800abd0:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800abd2:	682b      	ldr	r3, [r5, #0]
 800abd4:	f8c4 3012 	str.w	r3, [r4, #18]
 800abd8:	88ab      	ldrh	r3, [r5, #4]
 800abda:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800abdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800abe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800abea:	2500      	movs	r5, #0
 800abec:	7025      	strb	r5, [r4, #0]
 800abee:	2301      	movs	r3, #1
 800abf0:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800abf2:	2308      	movs	r3, #8
 800abf4:	70a3      	strb	r3, [r4, #2]
 800abf6:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800abf8:	2306      	movs	r3, #6
 800abfa:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800abfc:	2304      	movs	r3, #4
 800abfe:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ac00:	f640 0306 	movw	r3, #2054	; 0x806
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	4653      	mov	r3, sl
 800ac08:	464a      	mov	r2, r9
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	f007 f917 	bl	8011e40 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ac12:	4630      	mov	r0, r6
 800ac14:	f002 f940 	bl	800ce98 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800ac18:	4628      	mov	r0, r5
}
 800ac1a:	b002      	add	sp, #8
 800ac1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ac20:	4b09      	ldr	r3, [pc, #36]	; (800ac48 <etharp_raw+0xd0>)
 800ac22:	f240 4257 	movw	r2, #1111	; 0x457
 800ac26:	490b      	ldr	r1, [pc, #44]	; (800ac54 <etharp_raw+0xdc>)
 800ac28:	4809      	ldr	r0, [pc, #36]	; (800ac50 <etharp_raw+0xd8>)
 800ac2a:	f007 fa9f 	bl	801216c <iprintf>
 800ac2e:	e7ad      	b.n	800ab8c <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ac30:	4b05      	ldr	r3, [pc, #20]	; (800ac48 <etharp_raw+0xd0>)
 800ac32:	f240 4263 	movw	r2, #1123	; 0x463
 800ac36:	4908      	ldr	r1, [pc, #32]	; (800ac58 <etharp_raw+0xe0>)
 800ac38:	4805      	ldr	r0, [pc, #20]	; (800ac50 <etharp_raw+0xd8>)
 800ac3a:	f007 fa97 	bl	801216c <iprintf>
 800ac3e:	e7b1      	b.n	800aba4 <etharp_raw+0x2c>
    return ERR_MEM;
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295
 800ac44:	e7e9      	b.n	800ac1a <etharp_raw+0xa2>
 800ac46:	bf00      	nop
 800ac48:	0806816c 	.word	0x0806816c
 800ac4c:	080682e8 	.word	0x080682e8
 800ac50:	0801335c 	.word	0x0801335c
 800ac54:	0801334c 	.word	0x0801334c
 800ac58:	080682b4 	.word	0x080682b4

0800ac5c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ac5c:	b530      	push	{r4, r5, lr}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ac62:	f100 042a 	add.w	r4, r0, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ac66:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ac68:	2501      	movs	r5, #1
 800ac6a:	9503      	str	r5, [sp, #12]
 800ac6c:	9102      	str	r1, [sp, #8]
 800ac6e:	4904      	ldr	r1, [pc, #16]	; (800ac80 <etharp_request_dst+0x24>)
 800ac70:	9101      	str	r1, [sp, #4]
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	4623      	mov	r3, r4
 800ac76:	4621      	mov	r1, r4
 800ac78:	f7ff ff7e 	bl	800ab78 <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 800ac7c:	b005      	add	sp, #20
 800ac7e:	bd30      	pop	{r4, r5, pc}
 800ac80:	0806a694 	.word	0x0806a694

0800ac84 <etharp_add_static_entry>:
{
 800ac84:	b570      	push	{r4, r5, r6, lr}
 800ac86:	4605      	mov	r5, r0
 800ac88:	460e      	mov	r6, r1
  netif = ip4_route(ipaddr);
 800ac8a:	f000 fc21 	bl	800b4d0 <ip4_route>
  if (netif == NULL) {
 800ac8e:	b128      	cbz	r0, 800ac9c <etharp_add_static_entry+0x18>
  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 800ac90:	2305      	movs	r3, #5
 800ac92:	4632      	mov	r2, r6
 800ac94:	4629      	mov	r1, r5
 800ac96:	f7ff fef1 	bl	800aa7c <etharp_update_arp_entry>
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_RTE;
 800ac9c:	f06f 0003 	mvn.w	r0, #3
}
 800aca0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aca4 <etharp_cleanup_netif>:
{
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800aca8:	2400      	movs	r4, #0
 800acaa:	e000      	b.n	800acae <etharp_cleanup_netif+0xa>
 800acac:	3401      	adds	r4, #1
 800acae:	2c09      	cmp	r4, #9
 800acb0:	dc10      	bgt.n	800acd4 <etharp_cleanup_netif+0x30>
    u8_t state = arp_table[i].state;
 800acb2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800acb6:	00da      	lsls	r2, r3, #3
 800acb8:	4b07      	ldr	r3, [pc, #28]	; (800acd8 <etharp_cleanup_netif+0x34>)
 800acba:	4413      	add	r3, r2
 800acbc:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d0f4      	beq.n	800acac <etharp_cleanup_netif+0x8>
 800acc2:	4b05      	ldr	r3, [pc, #20]	; (800acd8 <etharp_cleanup_netif+0x34>)
 800acc4:	4413      	add	r3, r2
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	42ab      	cmp	r3, r5
 800acca:	d1ef      	bne.n	800acac <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 800accc:	4620      	mov	r0, r4
 800acce:	f7ff fdd1 	bl	800a874 <etharp_free_entry>
 800acd2:	e7eb      	b.n	800acac <etharp_cleanup_netif+0x8>
}
 800acd4:	bd38      	pop	{r3, r4, r5, pc}
 800acd6:	bf00      	nop
 800acd8:	20006cfc 	.word	0x20006cfc

0800acdc <etharp_input>:
{
 800acdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace0:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ace2:	b161      	cbz	r1, 800acfe <etharp_input+0x22>
 800ace4:	4604      	mov	r4, r0
 800ace6:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800ace8:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800acea:	882b      	ldrh	r3, [r5, #0]
 800acec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acf0:	d00d      	beq.n	800ad0e <etharp_input+0x32>
    pbuf_free(p);
 800acf2:	4620      	mov	r0, r4
 800acf4:	f002 f8d0 	bl	800ce98 <pbuf_free>
}
 800acf8:	b006      	add	sp, #24
 800acfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800acfe:	4b25      	ldr	r3, [pc, #148]	; (800ad94 <etharp_input+0xb8>)
 800ad00:	f240 228a 	movw	r2, #650	; 0x28a
 800ad04:	4924      	ldr	r1, [pc, #144]	; (800ad98 <etharp_input+0xbc>)
 800ad06:	4825      	ldr	r0, [pc, #148]	; (800ad9c <etharp_input+0xc0>)
 800ad08:	f007 fa30 	bl	801216c <iprintf>
 800ad0c:	e7f4      	b.n	800acf8 <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ad0e:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ad10:	2b06      	cmp	r3, #6
 800ad12:	d1ee      	bne.n	800acf2 <etharp_input+0x16>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ad14:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	d1eb      	bne.n	800acf2 <etharp_input+0x16>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ad1a:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ad1c:	2b08      	cmp	r3, #8
 800ad1e:	d1e8      	bne.n	800acf2 <etharp_input+0x16>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ad20:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800ad24:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ad26:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ad28:	684b      	ldr	r3, [r1, #4]
 800ad2a:	b1bb      	cbz	r3, 800ad5c <etharp_input+0x80>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ad2c:	429f      	cmp	r7, r3
 800ad2e:	bf14      	ite	ne
 800ad30:	2700      	movne	r7, #0
 800ad32:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ad34:	f105 0808 	add.w	r8, r5, #8
 800ad38:	b197      	cbz	r7, 800ad60 <etharp_input+0x84>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	4642      	mov	r2, r8
 800ad3e:	a905      	add	r1, sp, #20
 800ad40:	4630      	mov	r0, r6
 800ad42:	f7ff fe9b 	bl	800aa7c <etharp_update_arp_entry>
  switch (hdr->opcode) {
 800ad46:	88eb      	ldrh	r3, [r5, #6]
 800ad48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad4c:	d00a      	beq.n	800ad64 <etharp_input+0x88>
 800ad4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad52:	d019      	beq.n	800ad88 <etharp_input+0xac>
  pbuf_free(p);
 800ad54:	4620      	mov	r0, r4
 800ad56:	f002 f89f 	bl	800ce98 <pbuf_free>
 800ad5a:	e7cd      	b.n	800acf8 <etharp_input+0x1c>
    for_us = 0;
 800ad5c:	2700      	movs	r7, #0
 800ad5e:	e7e9      	b.n	800ad34 <etharp_input+0x58>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ad60:	2302      	movs	r3, #2
 800ad62:	e7eb      	b.n	800ad3c <etharp_input+0x60>
      if (for_us) {
 800ad64:	2f00      	cmp	r7, #0
 800ad66:	d0f5      	beq.n	800ad54 <etharp_input+0x78>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ad68:	f106 012a 	add.w	r1, r6, #42	; 0x2a
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ad6c:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 800ad6e:	2202      	movs	r2, #2
 800ad70:	9203      	str	r2, [sp, #12]
 800ad72:	aa05      	add	r2, sp, #20
 800ad74:	9202      	str	r2, [sp, #8]
 800ad76:	f8cd 8004 	str.w	r8, [sp, #4]
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	4642      	mov	r2, r8
 800ad80:	4630      	mov	r0, r6
 800ad82:	f7ff fef9 	bl	800ab78 <etharp_raw>
 800ad86:	e7e5      	b.n	800ad54 <etharp_input+0x78>
      dhcp_arp_reply(netif, &sipaddr);
 800ad88:	a905      	add	r1, sp, #20
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	f7ff fb66 	bl	800a45c <dhcp_arp_reply>
      break;
 800ad90:	e7e0      	b.n	800ad54 <etharp_input+0x78>
 800ad92:	bf00      	nop
 800ad94:	0806816c 	.word	0x0806816c
 800ad98:	0801334c 	.word	0x0801334c
 800ad9c:	0801335c 	.word	0x0801335c

0800ada0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ada0:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ada2:	4a02      	ldr	r2, [pc, #8]	; (800adac <etharp_request+0xc>)
 800ada4:	f7ff ff5a 	bl	800ac5c <etharp_request_dst>
}
 800ada8:	bd08      	pop	{r3, pc}
 800adaa:	bf00      	nop
 800adac:	0806a618 	.word	0x0806a618

0800adb0 <etharp_tmr>:
{
 800adb0:	b510      	push	{r4, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800adb2:	2400      	movs	r4, #0
 800adb4:	e005      	b.n	800adc2 <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800adb6:	2a04      	cmp	r2, #4
 800adb8:	d91d      	bls.n	800adf6 <etharp_tmr+0x46>
        etharp_free_entry(i);
 800adba:	4620      	mov	r0, r4
 800adbc:	f7ff fd5a 	bl	800a874 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800adc0:	3401      	adds	r4, #1
 800adc2:	2c09      	cmp	r4, #9
 800adc4:	dc37      	bgt.n	800ae36 <etharp_tmr+0x86>
    u8_t state = arp_table[i].state;
 800adc6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800adca:	00da      	lsls	r2, r3, #3
 800adcc:	4b1a      	ldr	r3, [pc, #104]	; (800ae38 <etharp_tmr+0x88>)
 800adce:	4413      	add	r3, r2
 800add0:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 800add2:	2b00      	cmp	r3, #0
 800add4:	d0f4      	beq.n	800adc0 <etharp_tmr+0x10>
        && (state != ETHARP_STATE_STATIC)
 800add6:	2b05      	cmp	r3, #5
 800add8:	d0f2      	beq.n	800adc0 <etharp_tmr+0x10>
      arp_table[i].ctime++;
 800adda:	0062      	lsls	r2, r4, #1
 800addc:	4422      	add	r2, r4
 800adde:	00d0      	lsls	r0, r2, #3
 800ade0:	4915      	ldr	r1, [pc, #84]	; (800ae38 <etharp_tmr+0x88>)
 800ade2:	4401      	add	r1, r0
 800ade4:	8a4a      	ldrh	r2, [r1, #18]
 800ade6:	3201      	adds	r2, #1
 800ade8:	b292      	uxth	r2, r2
 800adea:	824a      	strh	r2, [r1, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800adec:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 800adf0:	d2e3      	bcs.n	800adba <etharp_tmr+0xa>
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d0df      	beq.n	800adb6 <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d00d      	beq.n	800ae16 <etharp_tmr+0x66>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	d013      	beq.n	800ae26 <etharp_tmr+0x76>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d1de      	bne.n	800adc0 <etharp_tmr+0x10>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ae02:	0063      	lsls	r3, r4, #1
 800ae04:	4423      	add	r3, r4
 800ae06:	00da      	lsls	r2, r3, #3
 800ae08:	4b0b      	ldr	r3, [pc, #44]	; (800ae38 <etharp_tmr+0x88>)
 800ae0a:	4413      	add	r3, r2
 800ae0c:	1d19      	adds	r1, r3, #4
 800ae0e:	6898      	ldr	r0, [r3, #8]
 800ae10:	f7ff ffc6 	bl	800ada0 <etharp_request>
 800ae14:	e7d4      	b.n	800adc0 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ae16:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ae1a:	00da      	lsls	r2, r3, #3
 800ae1c:	4b06      	ldr	r3, [pc, #24]	; (800ae38 <etharp_tmr+0x88>)
 800ae1e:	4413      	add	r3, r2
 800ae20:	2204      	movs	r2, #4
 800ae22:	751a      	strb	r2, [r3, #20]
 800ae24:	e7cc      	b.n	800adc0 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ae26:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ae2a:	00da      	lsls	r2, r3, #3
 800ae2c:	4b02      	ldr	r3, [pc, #8]	; (800ae38 <etharp_tmr+0x88>)
 800ae2e:	4413      	add	r3, r2
 800ae30:	2202      	movs	r2, #2
 800ae32:	751a      	strb	r2, [r3, #20]
 800ae34:	e7c4      	b.n	800adc0 <etharp_tmr+0x10>
}
 800ae36:	bd10      	pop	{r4, pc}
 800ae38:	20006cfc 	.word	0x20006cfc

0800ae3c <etharp_output_to_arp_index>:
{
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	4605      	mov	r5, r0
 800ae42:	460e      	mov	r6, r1
 800ae44:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ae46:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800ae4a:	00da      	lsls	r2, r3, #3
 800ae4c:	4b2c      	ldr	r3, [pc, #176]	; (800af00 <etharp_output_to_arp_index+0xc4>)
 800ae4e:	4413      	add	r3, r2
 800ae50:	7d1b      	ldrb	r3, [r3, #20]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d919      	bls.n	800ae8a <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ae56:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ae5a:	00da      	lsls	r2, r3, #3
 800ae5c:	4b28      	ldr	r3, [pc, #160]	; (800af00 <etharp_output_to_arp_index+0xc4>)
 800ae5e:	4413      	add	r3, r2
 800ae60:	7d1b      	ldrb	r3, [r3, #20]
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d019      	beq.n	800ae9a <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ae66:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800ae6a:	00e3      	lsls	r3, r4, #3
 800ae6c:	3308      	adds	r3, #8
 800ae6e:	4a24      	ldr	r2, [pc, #144]	; (800af00 <etharp_output_to_arp_index+0xc4>)
 800ae70:	4413      	add	r3, r2
 800ae72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae76:	9200      	str	r2, [sp, #0]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	f105 022a 	add.w	r2, r5, #42	; 0x2a
 800ae7e:	4631      	mov	r1, r6
 800ae80:	4628      	mov	r0, r5
 800ae82:	f006 ffdd 	bl	8011e40 <ethernet_output>
}
 800ae86:	b002      	add	sp, #8
 800ae88:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ae8a:	4b1e      	ldr	r3, [pc, #120]	; (800af04 <etharp_output_to_arp_index+0xc8>)
 800ae8c:	f240 22ef 	movw	r2, #751	; 0x2ef
 800ae90:	491d      	ldr	r1, [pc, #116]	; (800af08 <etharp_output_to_arp_index+0xcc>)
 800ae92:	481e      	ldr	r0, [pc, #120]	; (800af0c <etharp_output_to_arp_index+0xd0>)
 800ae94:	f007 f96a 	bl	801216c <iprintf>
 800ae98:	e7dd      	b.n	800ae56 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ae9a:	4b19      	ldr	r3, [pc, #100]	; (800af00 <etharp_output_to_arp_index+0xc4>)
 800ae9c:	4413      	add	r3, r2
 800ae9e:	8a5b      	ldrh	r3, [r3, #18]
 800aea0:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800aea4:	d819      	bhi.n	800aeda <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800aea6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800aeaa:	d3dc      	bcc.n	800ae66 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800aeac:	4a14      	ldr	r2, [pc, #80]	; (800af00 <etharp_output_to_arp_index+0xc4>)
 800aeae:	0063      	lsls	r3, r4, #1
 800aeb0:	1918      	adds	r0, r3, r4
 800aeb2:	00c1      	lsls	r1, r0, #3
 800aeb4:	4608      	mov	r0, r1
 800aeb6:	4411      	add	r1, r2
 800aeb8:	3008      	adds	r0, #8
 800aeba:	4402      	add	r2, r0
 800aebc:	3204      	adds	r2, #4
 800aebe:	3104      	adds	r1, #4
 800aec0:	4628      	mov	r0, r5
 800aec2:	f7ff fecb 	bl	800ac5c <etharp_request_dst>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d1cd      	bne.n	800ae66 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800aeca:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800aece:	00da      	lsls	r2, r3, #3
 800aed0:	4b0b      	ldr	r3, [pc, #44]	; (800af00 <etharp_output_to_arp_index+0xc4>)
 800aed2:	4413      	add	r3, r2
 800aed4:	2203      	movs	r2, #3
 800aed6:	751a      	strb	r2, [r3, #20]
 800aed8:	e7c5      	b.n	800ae66 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800aeda:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800aede:	00d3      	lsls	r3, r2, #3
 800aee0:	4907      	ldr	r1, [pc, #28]	; (800af00 <etharp_output_to_arp_index+0xc4>)
 800aee2:	4419      	add	r1, r3
 800aee4:	3104      	adds	r1, #4
 800aee6:	4628      	mov	r0, r5
 800aee8:	f7ff ff5a 	bl	800ada0 <etharp_request>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d1ba      	bne.n	800ae66 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800aef0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800aef4:	00da      	lsls	r2, r3, #3
 800aef6:	4b02      	ldr	r3, [pc, #8]	; (800af00 <etharp_output_to_arp_index+0xc4>)
 800aef8:	4413      	add	r3, r2
 800aefa:	2203      	movs	r2, #3
 800aefc:	751a      	strb	r2, [r3, #20]
 800aefe:	e7b2      	b.n	800ae66 <etharp_output_to_arp_index+0x2a>
 800af00:	20006cfc 	.word	0x20006cfc
 800af04:	0806816c 	.word	0x0806816c
 800af08:	08068224 	.word	0x08068224
 800af0c:	0801335c 	.word	0x0801335c

0800af10 <etharp_query>:
{
 800af10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af14:	b083      	sub	sp, #12
 800af16:	4606      	mov	r6, r0
 800af18:	460c      	mov	r4, r1
 800af1a:	4617      	mov	r7, r2
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800af1c:	f100 082a 	add.w	r8, r0, #42	; 0x2a
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800af20:	4601      	mov	r1, r0
 800af22:	6820      	ldr	r0, [r4, #0]
 800af24:	f000 fcd3 	bl	800b8ce <ip4_addr_isbroadcast_u32>
 800af28:	2800      	cmp	r0, #0
 800af2a:	f040 80af 	bne.w	800b08c <etharp_query+0x17c>
      ip4_addr_ismulticast(ipaddr) ||
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800af34:	2ae0      	cmp	r2, #224	; 0xe0
 800af36:	f000 80ac 	beq.w	800b092 <etharp_query+0x182>
      ip4_addr_ismulticast(ipaddr) ||
 800af3a:	2c00      	cmp	r4, #0
 800af3c:	f000 80ac 	beq.w	800b098 <etharp_query+0x188>
      ip4_addr_isany(ipaddr)) {
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 80ac 	beq.w	800b09e <etharp_query+0x18e>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800af46:	4632      	mov	r2, r6
 800af48:	2101      	movs	r1, #1
 800af4a:	4620      	mov	r0, r4
 800af4c:	f7ff fcac 	bl	800a8a8 <etharp_find_entry>
  if (i_err < 0) {
 800af50:	1e05      	subs	r5, r0, #0
 800af52:	db2e      	blt.n	800afb2 <etharp_query+0xa2>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800af54:	b2ab      	uxth	r3, r5
 800af56:	2b7e      	cmp	r3, #126	; 0x7e
 800af58:	d82d      	bhi.n	800afb6 <etharp_query+0xa6>
  i = (netif_addr_idx_t)i_err;
 800af5a:	b2ed      	uxtb	r5, r5
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800af5c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800af60:	00da      	lsls	r2, r3, #3
 800af62:	4b52      	ldr	r3, [pc, #328]	; (800b0ac <etharp_query+0x19c>)
 800af64:	4413      	add	r3, r2
 800af66:	7d1b      	ldrb	r3, [r3, #20]
 800af68:	bb6b      	cbnz	r3, 800afc6 <etharp_query+0xb6>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800af6a:	006a      	lsls	r2, r5, #1
 800af6c:	442a      	add	r2, r5
 800af6e:	00d1      	lsls	r1, r2, #3
 800af70:	4b4e      	ldr	r3, [pc, #312]	; (800b0ac <etharp_query+0x19c>)
 800af72:	440b      	add	r3, r1
 800af74:	f04f 0901 	mov.w	r9, #1
 800af78:	f883 9014 	strb.w	r9, [r3, #20]
    arp_table[i].netif = netif;
 800af7c:	609e      	str	r6, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800af7e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800af82:	00da      	lsls	r2, r3, #3
 800af84:	4b49      	ldr	r3, [pc, #292]	; (800b0ac <etharp_query+0x19c>)
 800af86:	4413      	add	r3, r2
 800af88:	7d1b      	ldrb	r3, [r3, #20]
 800af8a:	b1fb      	cbz	r3, 800afcc <etharp_query+0xbc>
  if (is_new_entry || (q == NULL)) {
 800af8c:	f1b9 0f00 	cmp.w	r9, #0
 800af90:	d124      	bne.n	800afdc <etharp_query+0xcc>
 800af92:	b31f      	cbz	r7, 800afdc <etharp_query+0xcc>
  err_t result = ERR_MEM;
 800af94:	f04f 34ff 	mov.w	r4, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 800af98:	b347      	cbz	r7, 800afec <etharp_query+0xdc>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800af9a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800af9e:	00da      	lsls	r2, r3, #3
 800afa0:	4b42      	ldr	r3, [pc, #264]	; (800b0ac <etharp_query+0x19c>)
 800afa2:	4413      	add	r3, r2
 800afa4:	7d1b      	ldrb	r3, [r3, #20]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d828      	bhi.n	800affc <etharp_query+0xec>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d136      	bne.n	800b01c <etharp_query+0x10c>
 800afae:	463c      	mov	r4, r7
 800afb0:	e03d      	b.n	800b02e <etharp_query+0x11e>
    return (err_t)i_err;
 800afb2:	b26c      	sxtb	r4, r5
 800afb4:	e032      	b.n	800b01c <etharp_query+0x10c>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800afb6:	4b3e      	ldr	r3, [pc, #248]	; (800b0b0 <etharp_query+0x1a0>)
 800afb8:	f240 32c1 	movw	r2, #961	; 0x3c1
 800afbc:	493d      	ldr	r1, [pc, #244]	; (800b0b4 <etharp_query+0x1a4>)
 800afbe:	483e      	ldr	r0, [pc, #248]	; (800b0b8 <etharp_query+0x1a8>)
 800afc0:	f007 f8d4 	bl	801216c <iprintf>
 800afc4:	e7c9      	b.n	800af5a <etharp_query+0x4a>
  int is_new_entry = 0;
 800afc6:	f04f 0900 	mov.w	r9, #0
 800afca:	e7d8      	b.n	800af7e <etharp_query+0x6e>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800afcc:	4b38      	ldr	r3, [pc, #224]	; (800b0b0 <etharp_query+0x1a0>)
 800afce:	f240 32cf 	movw	r2, #975	; 0x3cf
 800afd2:	493a      	ldr	r1, [pc, #232]	; (800b0bc <etharp_query+0x1ac>)
 800afd4:	4838      	ldr	r0, [pc, #224]	; (800b0b8 <etharp_query+0x1a8>)
 800afd6:	f007 f8c9 	bl	801216c <iprintf>
 800afda:	e7d7      	b.n	800af8c <etharp_query+0x7c>
    result = etharp_request(netif, ipaddr);
 800afdc:	4621      	mov	r1, r4
 800afde:	4630      	mov	r0, r6
 800afe0:	f7ff fede 	bl	800ada0 <etharp_request>
 800afe4:	4604      	mov	r4, r0
    if (q == NULL) {
 800afe6:	2f00      	cmp	r7, #0
 800afe8:	d1d6      	bne.n	800af98 <etharp_query+0x88>
 800afea:	e017      	b.n	800b01c <etharp_query+0x10c>
  LWIP_ASSERT("q != NULL", q != NULL);
 800afec:	4b30      	ldr	r3, [pc, #192]	; (800b0b0 <etharp_query+0x1a0>)
 800afee:	f240 32e1 	movw	r2, #993	; 0x3e1
 800aff2:	4933      	ldr	r1, [pc, #204]	; (800b0c0 <etharp_query+0x1b0>)
 800aff4:	4830      	ldr	r0, [pc, #192]	; (800b0b8 <etharp_query+0x1a8>)
 800aff6:	f007 f8b9 	bl	801216c <iprintf>
 800affa:	e7ce      	b.n	800af9a <etharp_query+0x8a>
    ETHARP_SET_ADDRHINT(netif, i);
 800affc:	4b31      	ldr	r3, [pc, #196]	; (800b0c4 <etharp_query+0x1b4>)
 800affe:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b000:	4613      	mov	r3, r2
 800b002:	3308      	adds	r3, #8
 800b004:	4a29      	ldr	r2, [pc, #164]	; (800b0ac <etharp_query+0x19c>)
 800b006:	4413      	add	r3, r2
 800b008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b00c:	9200      	str	r2, [sp, #0]
 800b00e:	3304      	adds	r3, #4
 800b010:	4642      	mov	r2, r8
 800b012:	4639      	mov	r1, r7
 800b014:	4630      	mov	r0, r6
 800b016:	f006 ff13 	bl	8011e40 <ethernet_output>
 800b01a:	4604      	mov	r4, r0
}
 800b01c:	4620      	mov	r0, r4
 800b01e:	b003      	add	sp, #12
 800b020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (PBUF_NEEDS_COPY(p)) {
 800b024:	7b23      	ldrb	r3, [r4, #12]
 800b026:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b02a:	d129      	bne.n	800b080 <etharp_query+0x170>
      p = p->next;
 800b02c:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800b02e:	b174      	cbz	r4, 800b04e <etharp_query+0x13e>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b030:	8962      	ldrh	r2, [r4, #10]
 800b032:	8923      	ldrh	r3, [r4, #8]
 800b034:	429a      	cmp	r2, r3
 800b036:	d1f5      	bne.n	800b024 <etharp_query+0x114>
 800b038:	6823      	ldr	r3, [r4, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0f2      	beq.n	800b024 <etharp_query+0x114>
 800b03e:	4b1c      	ldr	r3, [pc, #112]	; (800b0b0 <etharp_query+0x1a0>)
 800b040:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b044:	4920      	ldr	r1, [pc, #128]	; (800b0c8 <etharp_query+0x1b8>)
 800b046:	481c      	ldr	r0, [pc, #112]	; (800b0b8 <etharp_query+0x1a8>)
 800b048:	f007 f890 	bl	801216c <iprintf>
 800b04c:	e7ea      	b.n	800b024 <etharp_query+0x114>
    int copy_needed = 0;
 800b04e:	2300      	movs	r3, #0
    if (copy_needed) {
 800b050:	b1c3      	cbz	r3, 800b084 <etharp_query+0x174>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800b052:	463a      	mov	r2, r7
 800b054:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b058:	200e      	movs	r0, #14
 800b05a:	f002 f9cf 	bl	800d3fc <pbuf_clone>
 800b05e:	4607      	mov	r7, r0
    if (p != NULL) {
 800b060:	b307      	cbz	r7, 800b0a4 <etharp_query+0x194>
      if (arp_table[i].q != NULL) {
 800b062:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800b066:	00d3      	lsls	r3, r2, #3
 800b068:	4a10      	ldr	r2, [pc, #64]	; (800b0ac <etharp_query+0x19c>)
 800b06a:	58d0      	ldr	r0, [r2, r3]
 800b06c:	b108      	cbz	r0, 800b072 <etharp_query+0x162>
        pbuf_free(arp_table[i].q);
 800b06e:	f001 ff13 	bl	800ce98 <pbuf_free>
      arp_table[i].q = p;
 800b072:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b076:	00eb      	lsls	r3, r5, #3
 800b078:	4a0c      	ldr	r2, [pc, #48]	; (800b0ac <etharp_query+0x19c>)
 800b07a:	50d7      	str	r7, [r2, r3]
      result = ERR_OK;
 800b07c:	2400      	movs	r4, #0
 800b07e:	e7cd      	b.n	800b01c <etharp_query+0x10c>
        copy_needed = 1;
 800b080:	2301      	movs	r3, #1
 800b082:	e7e5      	b.n	800b050 <etharp_query+0x140>
      pbuf_ref(p);
 800b084:	4638      	mov	r0, r7
 800b086:	f002 f87b 	bl	800d180 <pbuf_ref>
 800b08a:	e7e9      	b.n	800b060 <etharp_query+0x150>
    return ERR_ARG;
 800b08c:	f06f 040f 	mvn.w	r4, #15
 800b090:	e7c4      	b.n	800b01c <etharp_query+0x10c>
 800b092:	f06f 040f 	mvn.w	r4, #15
 800b096:	e7c1      	b.n	800b01c <etharp_query+0x10c>
 800b098:	f06f 040f 	mvn.w	r4, #15
 800b09c:	e7be      	b.n	800b01c <etharp_query+0x10c>
 800b09e:	f06f 040f 	mvn.w	r4, #15
 800b0a2:	e7bb      	b.n	800b01c <etharp_query+0x10c>
      result = ERR_MEM;
 800b0a4:	f04f 34ff 	mov.w	r4, #4294967295
 800b0a8:	e7b8      	b.n	800b01c <etharp_query+0x10c>
 800b0aa:	bf00      	nop
 800b0ac:	20006cfc 	.word	0x20006cfc
 800b0b0:	0806816c 	.word	0x0806816c
 800b0b4:	08068254 	.word	0x08068254
 800b0b8:	0801335c 	.word	0x0801335c
 800b0bc:	08068264 	.word	0x08068264
 800b0c0:	0806828c 	.word	0x0806828c
 800b0c4:	20006dec 	.word	0x20006dec
 800b0c8:	08068298 	.word	0x08068298

0800b0cc <etharp_output>:
{
 800b0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	460e      	mov	r6, r1
 800b0d2:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d030      	beq.n	800b13c <etharp_output+0x70>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b0da:	2e00      	cmp	r6, #0
 800b0dc:	d036      	beq.n	800b14c <etharp_output+0x80>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b0de:	2d00      	cmp	r5, #0
 800b0e0:	d03c      	beq.n	800b15c <etharp_output+0x90>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	6828      	ldr	r0, [r5, #0]
 800b0e6:	f000 fbf2 	bl	800b8ce <ip4_addr_isbroadcast_u32>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	f040 808a 	bne.w	800b204 <etharp_output+0x138>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b0f0:	682b      	ldr	r3, [r5, #0]
 800b0f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b0f6:	2ae0      	cmp	r2, #224	; 0xe0
 800b0f8:	d038      	beq.n	800b16c <etharp_output+0xa0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b0fa:	6862      	ldr	r2, [r4, #4]
 800b0fc:	68a1      	ldr	r1, [r4, #8]
 800b0fe:	405a      	eors	r2, r3
 800b100:	420a      	tst	r2, r1
 800b102:	d00a      	beq.n	800b11a <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 800b104:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b106:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d005      	beq.n	800b11a <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b10e:	68e3      	ldr	r3, [r4, #12]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 8083 	beq.w	800b21c <etharp_output+0x150>
            dst_addr = netif_ip4_gw(netif);
 800b116:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b11a:	4b42      	ldr	r3, [pc, #264]	; (800b224 <etharp_output+0x158>)
 800b11c:	781a      	ldrb	r2, [r3, #0]
 800b11e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800b122:	00d9      	lsls	r1, r3, #3
 800b124:	4b40      	ldr	r3, [pc, #256]	; (800b228 <etharp_output+0x15c>)
 800b126:	440b      	add	r3, r1
 800b128:	7d1b      	ldrb	r3, [r3, #20]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d962      	bls.n	800b1f4 <etharp_output+0x128>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b12e:	4b3e      	ldr	r3, [pc, #248]	; (800b228 <etharp_output+0x15c>)
 800b130:	440b      	add	r3, r1
 800b132:	689b      	ldr	r3, [r3, #8]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b134:	429c      	cmp	r4, r3
 800b136:	d02f      	beq.n	800b198 <etharp_output+0xcc>
 800b138:	2200      	movs	r2, #0
 800b13a:	e03c      	b.n	800b1b6 <etharp_output+0xea>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b13c:	4b3b      	ldr	r3, [pc, #236]	; (800b22c <etharp_output+0x160>)
 800b13e:	f240 321e 	movw	r2, #798	; 0x31e
 800b142:	493b      	ldr	r1, [pc, #236]	; (800b230 <etharp_output+0x164>)
 800b144:	483b      	ldr	r0, [pc, #236]	; (800b234 <etharp_output+0x168>)
 800b146:	f007 f811 	bl	801216c <iprintf>
 800b14a:	e7c6      	b.n	800b0da <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b14c:	4b37      	ldr	r3, [pc, #220]	; (800b22c <etharp_output+0x160>)
 800b14e:	f240 321f 	movw	r2, #799	; 0x31f
 800b152:	4939      	ldr	r1, [pc, #228]	; (800b238 <etharp_output+0x16c>)
 800b154:	4837      	ldr	r0, [pc, #220]	; (800b234 <etharp_output+0x168>)
 800b156:	f007 f809 	bl	801216c <iprintf>
 800b15a:	e7c0      	b.n	800b0de <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b15c:	4b33      	ldr	r3, [pc, #204]	; (800b22c <etharp_output+0x160>)
 800b15e:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b162:	4936      	ldr	r1, [pc, #216]	; (800b23c <etharp_output+0x170>)
 800b164:	4833      	ldr	r0, [pc, #204]	; (800b234 <etharp_output+0x168>)
 800b166:	f007 f801 	bl	801216c <iprintf>
 800b16a:	e7ba      	b.n	800b0e2 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b16c:	2301      	movs	r3, #1
 800b16e:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b172:	2300      	movs	r3, #0
 800b174:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b178:	235e      	movs	r3, #94	; 0x5e
 800b17a:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b17e:	786b      	ldrb	r3, [r5, #1]
 800b180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b184:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b188:	78ab      	ldrb	r3, [r5, #2]
 800b18a:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b18e:	78eb      	ldrb	r3, [r5, #3]
 800b190:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800b194:	ab02      	add	r3, sp, #8
 800b196:	e036      	b.n	800b206 <etharp_output+0x13a>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b198:	6828      	ldr	r0, [r5, #0]
 800b19a:	4b23      	ldr	r3, [pc, #140]	; (800b228 <etharp_output+0x15c>)
 800b19c:	440b      	add	r3, r1
 800b19e:	685b      	ldr	r3, [r3, #4]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b1a0:	4298      	cmp	r0, r3
 800b1a2:	d001      	beq.n	800b1a8 <etharp_output+0xdc>
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	e006      	b.n	800b1b6 <etharp_output+0xea>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b1a8:	4631      	mov	r1, r6
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f7ff fe46 	bl	800ae3c <etharp_output_to_arp_index>
 800b1b0:	e032      	b.n	800b218 <etharp_output+0x14c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b1b2:	3201      	adds	r2, #1
 800b1b4:	b2d2      	uxtb	r2, r2
 800b1b6:	2a09      	cmp	r2, #9
 800b1b8:	d81e      	bhi.n	800b1f8 <etharp_output+0x12c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b1ba:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800b1be:	00d9      	lsls	r1, r3, #3
 800b1c0:	4b19      	ldr	r3, [pc, #100]	; (800b228 <etharp_output+0x15c>)
 800b1c2:	440b      	add	r3, r1
 800b1c4:	7d1b      	ldrb	r3, [r3, #20]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d9f3      	bls.n	800b1b2 <etharp_output+0xe6>
          (arp_table[i].netif == netif) &&
 800b1ca:	4b17      	ldr	r3, [pc, #92]	; (800b228 <etharp_output+0x15c>)
 800b1cc:	440b      	add	r3, r1
 800b1ce:	689b      	ldr	r3, [r3, #8]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b1d0:	429c      	cmp	r4, r3
 800b1d2:	d1ee      	bne.n	800b1b2 <etharp_output+0xe6>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b1d4:	6829      	ldr	r1, [r5, #0]
 800b1d6:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800b1da:	00c7      	lsls	r7, r0, #3
 800b1dc:	4b12      	ldr	r3, [pc, #72]	; (800b228 <etharp_output+0x15c>)
 800b1de:	443b      	add	r3, r7
 800b1e0:	685b      	ldr	r3, [r3, #4]
          (arp_table[i].netif == netif) &&
 800b1e2:	4299      	cmp	r1, r3
 800b1e4:	d1e5      	bne.n	800b1b2 <etharp_output+0xe6>
        ETHARP_SET_ADDRHINT(netif, i);
 800b1e6:	4b0f      	ldr	r3, [pc, #60]	; (800b224 <etharp_output+0x158>)
 800b1e8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b1ea:	4631      	mov	r1, r6
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f7ff fe25 	bl	800ae3c <etharp_output_to_arp_index>
 800b1f2:	e011      	b.n	800b218 <etharp_output+0x14c>
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	e7de      	b.n	800b1b6 <etharp_output+0xea>
    return etharp_query(netif, dst_addr, q);
 800b1f8:	4632      	mov	r2, r6
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f7ff fe87 	bl	800af10 <etharp_query>
 800b202:	e009      	b.n	800b218 <etharp_output+0x14c>
    dest = (const struct eth_addr *)&ethbroadcast;
 800b204:	4b0e      	ldr	r3, [pc, #56]	; (800b240 <etharp_output+0x174>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800b206:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b20a:	9200      	str	r2, [sp, #0]
 800b20c:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 800b210:	4631      	mov	r1, r6
 800b212:	4620      	mov	r0, r4
 800b214:	f006 fe14 	bl	8011e40 <ethernet_output>
}
 800b218:	b005      	add	sp, #20
 800b21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 800b21c:	f06f 0003 	mvn.w	r0, #3
 800b220:	e7fa      	b.n	800b218 <etharp_output+0x14c>
 800b222:	bf00      	nop
 800b224:	20006dec 	.word	0x20006dec
 800b228:	20006cfc 	.word	0x20006cfc
 800b22c:	0806816c 	.word	0x0806816c
 800b230:	0801334c 	.word	0x0801334c
 800b234:	0801335c 	.word	0x0801335c
 800b238:	0806828c 	.word	0x0806828c
 800b23c:	08068204 	.word	0x08068204
 800b240:	0806a618 	.word	0x0806a618

0800b244 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b248:	b086      	sub	sp, #24
 800b24a:	4606      	mov	r6, r0
 800b24c:	4688      	mov	r8, r1
 800b24e:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b250:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b254:	2124      	movs	r1, #36	; 0x24
 800b256:	2022      	movs	r0, #34	; 0x22
 800b258:	f001 fe88 	bl	800cf6c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800b25c:	2800      	cmp	r0, #0
 800b25e:	d03e      	beq.n	800b2de <icmp_send_response+0x9a>
 800b260:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b262:	8943      	ldrh	r3, [r0, #10]
 800b264:	2b23      	cmp	r3, #35	; 0x23
 800b266:	d93d      	bls.n	800b2e4 <icmp_send_response+0xa0>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b268:	f8d6 e004 	ldr.w	lr, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b26c:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800b26e:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800b272:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800b274:	2300      	movs	r3, #0
 800b276:	7123      	strb	r3, [r4, #4]
 800b278:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800b27a:	71a3      	strb	r3, [r4, #6]
 800b27c:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b27e:	686f      	ldr	r7, [r5, #4]
 800b280:	6873      	ldr	r3, [r6, #4]
 800b282:	681e      	ldr	r6, [r3, #0]
 800b284:	6858      	ldr	r0, [r3, #4]
 800b286:	6899      	ldr	r1, [r3, #8]
 800b288:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800b28c:	60be      	str	r6, [r7, #8]
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	6139      	str	r1, [r7, #16]
 800b292:	f8c7 c014 	str.w	ip, [r7, #20]
 800b296:	691e      	ldr	r6, [r3, #16]
 800b298:	6958      	ldr	r0, [r3, #20]
 800b29a:	6999      	ldr	r1, [r3, #24]
 800b29c:	61be      	str	r6, [r7, #24]
 800b29e:	61f8      	str	r0, [r7, #28]
 800b2a0:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b2a2:	f8de 300c 	ldr.w	r3, [lr, #12]
 800b2a6:	a806      	add	r0, sp, #24
 800b2a8:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b2ac:	f000 f910 	bl	800b4d0 <ip4_route>
#endif
  if (netif != NULL) {
 800b2b0:	4607      	mov	r7, r0
 800b2b2:	b188      	cbz	r0, 800b2d8 <icmp_send_response+0x94>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b2b4:	2600      	movs	r6, #0
 800b2b6:	70a6      	strb	r6, [r4, #2]
 800b2b8:	70e6      	strb	r6, [r4, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800b2ba:	8969      	ldrh	r1, [r5, #10]
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f7fe f859 	bl	8009374 <inet_chksum>
 800b2c2:	8060      	strh	r0, [r4, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b2c4:	9702      	str	r7, [sp, #8]
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	9600      	str	r6, [sp, #0]
 800b2cc:	23ff      	movs	r3, #255	; 0xff
 800b2ce:	aa05      	add	r2, sp, #20
 800b2d0:	4631      	mov	r1, r6
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	f000 fae6 	bl	800b8a4 <ip4_output_if>
  }
  pbuf_free(q);
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f001 fddd 	bl	800ce98 <pbuf_free>
}
 800b2de:	b006      	add	sp, #24
 800b2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b2e4:	4b03      	ldr	r3, [pc, #12]	; (800b2f4 <icmp_send_response+0xb0>)
 800b2e6:	f240 1269 	movw	r2, #361	; 0x169
 800b2ea:	4903      	ldr	r1, [pc, #12]	; (800b2f8 <icmp_send_response+0xb4>)
 800b2ec:	4803      	ldr	r0, [pc, #12]	; (800b2fc <icmp_send_response+0xb8>)
 800b2ee:	f006 ff3d 	bl	801216c <iprintf>
 800b2f2:	e7b9      	b.n	800b268 <icmp_send_response+0x24>
 800b2f4:	080683bc 	.word	0x080683bc
 800b2f8:	080683fc 	.word	0x080683fc
 800b2fc:	0801335c 	.word	0x0801335c

0800b300 <icmp_input>:
{
 800b300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b304:	b085      	sub	sp, #20
 800b306:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800b308:	4b57      	ldr	r3, [pc, #348]	; (800b468 <icmp_input+0x168>)
 800b30a:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800b30c:	783c      	ldrb	r4, [r7, #0]
 800b30e:	f004 040f 	and.w	r4, r4, #15
 800b312:	00a4      	lsls	r4, r4, #2
 800b314:	b2a6      	uxth	r6, r4
  if (hlen < IP_HLEN) {
 800b316:	2e13      	cmp	r6, #19
 800b318:	d916      	bls.n	800b348 <icmp_input+0x48>
 800b31a:	4688      	mov	r8, r1
  if (p->len < sizeof(u16_t) * 2) {
 800b31c:	8943      	ldrh	r3, [r0, #10]
 800b31e:	2b03      	cmp	r3, #3
 800b320:	d912      	bls.n	800b348 <icmp_input+0x48>
  type = *((u8_t *)p->payload);
 800b322:	6843      	ldr	r3, [r0, #4]
 800b324:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 800b326:	2b08      	cmp	r3, #8
 800b328:	f040 8090 	bne.w	800b44c <icmp_input+0x14c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b32c:	4b4e      	ldr	r3, [pc, #312]	; (800b468 <icmp_input+0x168>)
 800b32e:	6958      	ldr	r0, [r3, #20]
 800b330:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800b334:	2be0      	cmp	r3, #224	; 0xe0
 800b336:	d01e      	beq.n	800b376 <icmp_input+0x76>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b338:	4b4b      	ldr	r3, [pc, #300]	; (800b468 <icmp_input+0x168>)
 800b33a:	6819      	ldr	r1, [r3, #0]
 800b33c:	f000 fac7 	bl	800b8ce <ip4_addr_isbroadcast_u32>
 800b340:	b9c8      	cbnz	r0, 800b376 <icmp_input+0x76>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b342:	892b      	ldrh	r3, [r5, #8]
 800b344:	2b07      	cmp	r3, #7
 800b346:	d805      	bhi.n	800b354 <icmp_input+0x54>
  pbuf_free(p);
 800b348:	4628      	mov	r0, r5
 800b34a:	f001 fda5 	bl	800ce98 <pbuf_free>
}
 800b34e:	b005      	add	sp, #20
 800b350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (inet_chksum_pbuf(p) != 0) {
 800b354:	4628      	mov	r0, r5
 800b356:	f7fe f813 	bl	8009380 <inet_chksum_pbuf>
 800b35a:	b980      	cbnz	r0, 800b37e <icmp_input+0x7e>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b35c:	f104 090e 	add.w	r9, r4, #14
 800b360:	4649      	mov	r1, r9
 800b362:	4628      	mov	r0, r5
 800b364:	f001 fd4d 	bl	800ce02 <pbuf_add_header>
 800b368:	2800      	cmp	r0, #0
 800b36a:	d03e      	beq.n	800b3ea <icmp_input+0xea>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800b36c:	892b      	ldrh	r3, [r5, #8]
 800b36e:	18f1      	adds	r1, r6, r3
 800b370:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800b372:	428b      	cmp	r3, r1
 800b374:	d907      	bls.n	800b386 <icmp_input+0x86>
  pbuf_free(p);
 800b376:	4628      	mov	r0, r5
 800b378:	f001 fd8e 	bl	800ce98 <pbuf_free>
  return;
 800b37c:	e7e7      	b.n	800b34e <icmp_input+0x4e>
          pbuf_free(p);
 800b37e:	4628      	mov	r0, r5
 800b380:	f001 fd8a 	bl	800ce98 <pbuf_free>
          return;
 800b384:	e7e3      	b.n	800b34e <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800b386:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b38a:	200e      	movs	r0, #14
 800b38c:	f001 fdee 	bl	800cf6c <pbuf_alloc>
        if (r == NULL) {
 800b390:	4681      	mov	r9, r0
 800b392:	2800      	cmp	r0, #0
 800b394:	d0ef      	beq.n	800b376 <icmp_input+0x76>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b396:	8942      	ldrh	r2, [r0, #10]
 800b398:	f104 0308 	add.w	r3, r4, #8
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d202      	bcs.n	800b3a6 <icmp_input+0xa6>
          pbuf_free(r);
 800b3a0:	f001 fd7a 	bl	800ce98 <pbuf_free>
          goto icmperr;
 800b3a4:	e7e7      	b.n	800b376 <icmp_input+0x76>
        MEMCPY(r->payload, iphdr_in, hlen);
 800b3a6:	4622      	mov	r2, r4
 800b3a8:	4639      	mov	r1, r7
 800b3aa:	6840      	ldr	r0, [r0, #4]
 800b3ac:	f006 feb0 	bl	8012110 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	4648      	mov	r0, r9
 800b3b4:	f001 fd2a 	bl	800ce0c <pbuf_remove_header>
 800b3b8:	b148      	cbz	r0, 800b3ce <icmp_input+0xce>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b3ba:	4b2c      	ldr	r3, [pc, #176]	; (800b46c <icmp_input+0x16c>)
 800b3bc:	22b6      	movs	r2, #182	; 0xb6
 800b3be:	492c      	ldr	r1, [pc, #176]	; (800b470 <icmp_input+0x170>)
 800b3c0:	482c      	ldr	r0, [pc, #176]	; (800b474 <icmp_input+0x174>)
 800b3c2:	f006 fed3 	bl	801216c <iprintf>
          pbuf_free(r);
 800b3c6:	4648      	mov	r0, r9
 800b3c8:	f001 fd66 	bl	800ce98 <pbuf_free>
          goto icmperr;
 800b3cc:	e7d3      	b.n	800b376 <icmp_input+0x76>
        if (pbuf_copy(r, p) != ERR_OK) {
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	4648      	mov	r0, r9
 800b3d2:	f001 ff33 	bl	800d23c <pbuf_copy>
 800b3d6:	b118      	cbz	r0, 800b3e0 <icmp_input+0xe0>
          pbuf_free(r);
 800b3d8:	4648      	mov	r0, r9
 800b3da:	f001 fd5d 	bl	800ce98 <pbuf_free>
          goto icmperr;
 800b3de:	e7ca      	b.n	800b376 <icmp_input+0x76>
        pbuf_free(p);
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	f001 fd59 	bl	800ce98 <pbuf_free>
        p = r;
 800b3e6:	464d      	mov	r5, r9
 800b3e8:	e004      	b.n	800b3f4 <icmp_input+0xf4>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b3ea:	4649      	mov	r1, r9
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f001 fd0d 	bl	800ce0c <pbuf_remove_header>
 800b3f2:	bb78      	cbnz	r0, 800b454 <icmp_input+0x154>
      iecho = (struct icmp_echo_hdr *)p->payload;
 800b3f4:	686f      	ldr	r7, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f001 fd02 	bl	800ce02 <pbuf_add_header>
 800b3fe:	bb28      	cbnz	r0, 800b44c <icmp_input+0x14c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800b400:	686c      	ldr	r4, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800b402:	4b19      	ldr	r3, [pc, #100]	; (800b468 <icmp_input+0x168>)
 800b404:	695a      	ldr	r2, [r3, #20]
 800b406:	60e2      	str	r2, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	6123      	str	r3, [r4, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b40c:	2300      	movs	r3, #0
 800b40e:	703b      	strb	r3, [r7, #0]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800b410:	887b      	ldrh	r3, [r7, #2]
 800b412:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b416:	4293      	cmp	r3, r2
 800b418:	d923      	bls.n	800b462 <icmp_input+0x162>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800b41a:	3309      	adds	r3, #9
 800b41c:	807b      	strh	r3, [r7, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800b41e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800b422:	f884 9008 	strb.w	r9, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800b426:	2700      	movs	r7, #0
 800b428:	72a7      	strb	r7, [r4, #10]
 800b42a:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 800b42c:	4631      	mov	r1, r6
 800b42e:	4620      	mov	r0, r4
 800b430:	f7fd ffa0 	bl	8009374 <inet_chksum>
 800b434:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b436:	f8cd 8008 	str.w	r8, [sp, #8]
 800b43a:	2301      	movs	r3, #1
 800b43c:	9301      	str	r3, [sp, #4]
 800b43e:	9700      	str	r7, [sp, #0]
 800b440:	464b      	mov	r3, r9
 800b442:	463a      	mov	r2, r7
 800b444:	490c      	ldr	r1, [pc, #48]	; (800b478 <icmp_input+0x178>)
 800b446:	4628      	mov	r0, r5
 800b448:	f000 fa2c 	bl	800b8a4 <ip4_output_if>
  pbuf_free(p);
 800b44c:	4628      	mov	r0, r5
 800b44e:	f001 fd23 	bl	800ce98 <pbuf_free>
  return;
 800b452:	e77c      	b.n	800b34e <icmp_input+0x4e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b454:	4b05      	ldr	r3, [pc, #20]	; (800b46c <icmp_input+0x16c>)
 800b456:	22c7      	movs	r2, #199	; 0xc7
 800b458:	4908      	ldr	r1, [pc, #32]	; (800b47c <icmp_input+0x17c>)
 800b45a:	4806      	ldr	r0, [pc, #24]	; (800b474 <icmp_input+0x174>)
 800b45c:	f006 fe86 	bl	801216c <iprintf>
          goto icmperr;
 800b460:	e789      	b.n	800b376 <icmp_input+0x76>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800b462:	3308      	adds	r3, #8
 800b464:	807b      	strh	r3, [r7, #2]
 800b466:	e7da      	b.n	800b41e <icmp_input+0x11e>
 800b468:	200072e4 	.word	0x200072e4
 800b46c:	080683bc 	.word	0x080683bc
 800b470:	08068350 	.word	0x08068350
 800b474:	0801335c 	.word	0x0801335c
 800b478:	200072f8 	.word	0x200072f8
 800b47c:	08068388 	.word	0x08068388

0800b480 <icmp_dest_unreach>:
{
 800b480:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 800b482:	460a      	mov	r2, r1
 800b484:	2103      	movs	r1, #3
 800b486:	f7ff fedd 	bl	800b244 <icmp_send_response>
 800b48a:	bd08      	pop	{r3, pc}

0800b48c <icmp_time_exceeded>:
{
 800b48c:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 800b48e:	460a      	mov	r2, r1
 800b490:	210b      	movs	r1, #11
 800b492:	f7ff fed7 	bl	800b244 <icmp_send_response>
 800b496:	bd08      	pop	{r3, pc}

0800b498 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800b498:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b49a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800b49e:	f013 0f01 	tst.w	r3, #1
 800b4a2:	d00d      	beq.n	800b4c0 <ip4_input_accept+0x28>
 800b4a4:	6843      	ldr	r3, [r0, #4]
 800b4a6:	b16b      	cbz	r3, 800b4c4 <ip4_input_accept+0x2c>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b4a8:	4a08      	ldr	r2, [pc, #32]	; (800b4cc <ip4_input_accept+0x34>)
 800b4aa:	6952      	ldr	r2, [r2, #20]
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d00b      	beq.n	800b4c8 <ip4_input_accept+0x30>
 800b4b0:	4601      	mov	r1, r0
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b4b2:	4610      	mov	r0, r2
 800b4b4:	f000 fa0b 	bl	800b8ce <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b4b8:	b108      	cbz	r0, 800b4be <ip4_input_accept+0x26>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800b4ba:	2001      	movs	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 800b4bc:	bd08      	pop	{r3, pc}
 800b4be:	bd08      	pop	{r3, pc}
  return 0;
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	bd08      	pop	{r3, pc}
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	bd08      	pop	{r3, pc}
      return 1;
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	bd08      	pop	{r3, pc}
 800b4cc:	200072e4 	.word	0x200072e4

0800b4d0 <ip4_route>:
  NETIF_FOREACH(netif) {
 800b4d0:	4b2b      	ldr	r3, [pc, #172]	; (800b580 <ip4_route+0xb0>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	e031      	b.n	800b53a <ip4_route+0x6a>
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	b1ab      	cbz	r3, 800b506 <ip4_route+0x36>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b4da:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800b4de:	f002 0105 	and.w	r1, r2, #5
 800b4e2:	2905      	cmp	r1, #5
 800b4e4:	d1f7      	bne.n	800b4d6 <ip4_route+0x6>
 800b4e6:	6859      	ldr	r1, [r3, #4]
 800b4e8:	2900      	cmp	r1, #0
 800b4ea:	d0f4      	beq.n	800b4d6 <ip4_route+0x6>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b4ec:	6804      	ldr	r4, [r0, #0]
 800b4ee:	689d      	ldr	r5, [r3, #8]
 800b4f0:	4061      	eors	r1, r4
 800b4f2:	4229      	tst	r1, r5
 800b4f4:	d01a      	beq.n	800b52c <ip4_route+0x5c>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b4f6:	f012 0f02 	tst.w	r2, #2
 800b4fa:	d1ec      	bne.n	800b4d6 <ip4_route+0x6>
 800b4fc:	68da      	ldr	r2, [r3, #12]
 800b4fe:	4294      	cmp	r4, r2
 800b500:	d1e9      	bne.n	800b4d6 <ip4_route+0x6>
        return netif;
 800b502:	461a      	mov	r2, r3
 800b504:	e00d      	b.n	800b522 <ip4_route+0x52>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b506:	4a1f      	ldr	r2, [pc, #124]	; (800b584 <ip4_route+0xb4>)
 800b508:	6812      	ldr	r2, [r2, #0]
 800b50a:	b152      	cbz	r2, 800b522 <ip4_route+0x52>
 800b50c:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800b510:	f001 0105 	and.w	r1, r1, #5
 800b514:	2905      	cmp	r1, #5
 800b516:	d10b      	bne.n	800b530 <ip4_route+0x60>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b518:	6851      	ldr	r1, [r2, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b51a:	b159      	cbz	r1, 800b534 <ip4_route+0x64>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b51c:	7801      	ldrb	r1, [r0, #0]
 800b51e:	297f      	cmp	r1, #127	; 0x7f
 800b520:	d002      	beq.n	800b528 <ip4_route+0x58>
}
 800b522:	4610      	mov	r0, r2
 800b524:	bc30      	pop	{r4, r5}
 800b526:	4770      	bx	lr
    return NULL;
 800b528:	461a      	mov	r2, r3
 800b52a:	e7fa      	b.n	800b522 <ip4_route+0x52>
        return netif;
 800b52c:	461a      	mov	r2, r3
 800b52e:	e7f8      	b.n	800b522 <ip4_route+0x52>
    return NULL;
 800b530:	461a      	mov	r2, r3
 800b532:	e7f6      	b.n	800b522 <ip4_route+0x52>
 800b534:	461a      	mov	r2, r3
 800b536:	e7f4      	b.n	800b522 <ip4_route+0x52>
  NETIF_FOREACH(netif) {
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	b153      	cbz	r3, 800b552 <ip4_route+0x82>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b53c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800b540:	f002 0105 	and.w	r1, r2, #5
 800b544:	2905      	cmp	r1, #5
 800b546:	d1f7      	bne.n	800b538 <ip4_route+0x68>
 800b548:	6859      	ldr	r1, [r3, #4]
 800b54a:	2900      	cmp	r1, #0
 800b54c:	d0f4      	beq.n	800b538 <ip4_route+0x68>
{
 800b54e:	b430      	push	{r4, r5}
 800b550:	e7cc      	b.n	800b4ec <ip4_route+0x1c>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b552:	4a0c      	ldr	r2, [pc, #48]	; (800b584 <ip4_route+0xb4>)
 800b554:	6812      	ldr	r2, [r2, #0]
 800b556:	b152      	cbz	r2, 800b56e <ip4_route+0x9e>
 800b558:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800b55c:	f001 0105 	and.w	r1, r1, #5
 800b560:	2905      	cmp	r1, #5
 800b562:	d108      	bne.n	800b576 <ip4_route+0xa6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b564:	6851      	ldr	r1, [r2, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b566:	b141      	cbz	r1, 800b57a <ip4_route+0xaa>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b568:	7801      	ldrb	r1, [r0, #0]
 800b56a:	297f      	cmp	r1, #127	; 0x7f
 800b56c:	d001      	beq.n	800b572 <ip4_route+0xa2>
}
 800b56e:	4610      	mov	r0, r2
 800b570:	4770      	bx	lr
    return NULL;
 800b572:	461a      	mov	r2, r3
 800b574:	e7fb      	b.n	800b56e <ip4_route+0x9e>
 800b576:	461a      	mov	r2, r3
 800b578:	e7f9      	b.n	800b56e <ip4_route+0x9e>
 800b57a:	461a      	mov	r2, r3
 800b57c:	e7f7      	b.n	800b56e <ip4_route+0x9e>
 800b57e:	bf00      	nop
 800b580:	2000d840 	.word	0x2000d840
 800b584:	2000d844 	.word	0x2000d844

0800b588 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b58c:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b58e:	6846      	ldr	r6, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800b590:	7833      	ldrb	r3, [r6, #0]
 800b592:	091a      	lsrs	r2, r3, #4
 800b594:	2a04      	cmp	r2, #4
 800b596:	d004      	beq.n	800b5a2 <ip4_input+0x1a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b598:	f001 fc7e 	bl	800ce98 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800b59c:	2000      	movs	r0, #0
 800b59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5a2:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800b5a4:	f003 030f 	and.w	r3, r3, #15
 800b5a8:	009d      	lsls	r5, r3, #2
 800b5aa:	fa1f f985 	uxth.w	r9, r5
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b5ae:	8870      	ldrh	r0, [r6, #2]
 800b5b0:	f7fd fdc2 	bl	8009138 <lwip_htons>
 800b5b4:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 800b5b6:	8923      	ldrh	r3, [r4, #8]
 800b5b8:	4298      	cmp	r0, r3
 800b5ba:	d30c      	bcc.n	800b5d6 <ip4_input+0x4e>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b5bc:	8963      	ldrh	r3, [r4, #10]
 800b5be:	4599      	cmp	r9, r3
 800b5c0:	d805      	bhi.n	800b5ce <ip4_input+0x46>
 800b5c2:	8923      	ldrh	r3, [r4, #8]
 800b5c4:	4598      	cmp	r8, r3
 800b5c6:	d802      	bhi.n	800b5ce <ip4_input+0x46>
 800b5c8:	f1b9 0f13 	cmp.w	r9, #19
 800b5cc:	d808      	bhi.n	800b5e0 <ip4_input+0x58>
    pbuf_free(p);
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f001 fc62 	bl	800ce98 <pbuf_free>
    return ERR_OK;
 800b5d4:	e7e2      	b.n	800b59c <ip4_input+0x14>
    pbuf_realloc(p, iphdr_len);
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f001 fd73 	bl	800d0c4 <pbuf_realloc>
 800b5de:	e7ed      	b.n	800b5bc <ip4_input+0x34>
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 800b5e0:	4649      	mov	r1, r9
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f7fd fec6 	bl	8009374 <inet_chksum>
 800b5e8:	b9a0      	cbnz	r0, 800b614 <ip4_input+0x8c>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b5ea:	6933      	ldr	r3, [r6, #16]
 800b5ec:	4a5a      	ldr	r2, [pc, #360]	; (800b758 <ip4_input+0x1d0>)
 800b5ee:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b5f0:	68f1      	ldr	r1, [r6, #12]
 800b5f2:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b5f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5f8:	2be0      	cmp	r3, #224	; 0xe0
 800b5fa:	d00f      	beq.n	800b61c <ip4_input+0x94>
    if (ip4_input_accept(inp)) {
 800b5fc:	4638      	mov	r0, r7
 800b5fe:	f7ff ff4b 	bl	800b498 <ip4_input_accept>
 800b602:	bb38      	cbnz	r0, 800b654 <ip4_input+0xcc>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800b604:	4b54      	ldr	r3, [pc, #336]	; (800b758 <ip4_input+0x1d0>)
 800b606:	7d1b      	ldrb	r3, [r3, #20]
 800b608:	2b7f      	cmp	r3, #127	; 0x7f
 800b60a:	d069      	beq.n	800b6e0 <ip4_input+0x158>
        NETIF_FOREACH(netif) {
 800b60c:	4b53      	ldr	r3, [pc, #332]	; (800b75c <ip4_input+0x1d4>)
 800b60e:	f8d3 8000 	ldr.w	r8, [r3]
 800b612:	e00f      	b.n	800b634 <ip4_input+0xac>
      pbuf_free(p);
 800b614:	4620      	mov	r0, r4
 800b616:	f001 fc3f 	bl	800ce98 <pbuf_free>
      return ERR_OK;
 800b61a:	e7bf      	b.n	800b59c <ip4_input+0x14>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b61c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b620:	f013 0f01 	tst.w	r3, #1
 800b624:	d011      	beq.n	800b64a <ip4_input+0xc2>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	b993      	cbnz	r3, 800b650 <ip4_input+0xc8>
      netif = NULL;
 800b62a:	f04f 0800 	mov.w	r8, #0
 800b62e:	e012      	b.n	800b656 <ip4_input+0xce>
        NETIF_FOREACH(netif) {
 800b630:	f8d8 8000 	ldr.w	r8, [r8]
 800b634:	f1b8 0f00 	cmp.w	r8, #0
 800b638:	d00d      	beq.n	800b656 <ip4_input+0xce>
          if (netif == inp) {
 800b63a:	45b8      	cmp	r8, r7
 800b63c:	d0f8      	beq.n	800b630 <ip4_input+0xa8>
          if (ip4_input_accept(netif)) {
 800b63e:	4640      	mov	r0, r8
 800b640:	f7ff ff2a 	bl	800b498 <ip4_input_accept>
 800b644:	2800      	cmp	r0, #0
 800b646:	d0f3      	beq.n	800b630 <ip4_input+0xa8>
 800b648:	e005      	b.n	800b656 <ip4_input+0xce>
      netif = NULL;
 800b64a:	f04f 0800 	mov.w	r8, #0
 800b64e:	e002      	b.n	800b656 <ip4_input+0xce>
      netif = inp;
 800b650:	46b8      	mov	r8, r7
 800b652:	e000      	b.n	800b656 <ip4_input+0xce>
      netif = inp;
 800b654:	46b8      	mov	r8, r7
  if (netif == NULL) {
 800b656:	f1b8 0f00 	cmp.w	r8, #0
 800b65a:	d044      	beq.n	800b6e6 <ip4_input+0x15e>
  int check_ip_src = 1;
 800b65c:	2301      	movs	r3, #1
  if (check_ip_src
 800b65e:	b11b      	cbz	r3, 800b668 <ip4_input+0xe0>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800b660:	4b3d      	ldr	r3, [pc, #244]	; (800b758 <ip4_input+0x1d0>)
 800b662:	6918      	ldr	r0, [r3, #16]
 800b664:	2800      	cmp	r0, #0
 800b666:	d14d      	bne.n	800b704 <ip4_input+0x17c>
  if (netif == NULL) {
 800b668:	f1b8 0f00 	cmp.w	r8, #0
 800b66c:	d058      	beq.n	800b720 <ip4_input+0x198>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b66e:	88f3      	ldrh	r3, [r6, #6]
 800b670:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b674:	b29b      	uxth	r3, r3
 800b676:	b133      	cbz	r3, 800b686 <ip4_input+0xfe>
    p = ip4_reass(p);
 800b678:	4620      	mov	r0, r4
 800b67a:	f000 fb8d 	bl	800bd98 <ip4_reass>
    if (p == NULL) {
 800b67e:	4604      	mov	r4, r0
 800b680:	2800      	cmp	r0, #0
 800b682:	d08b      	beq.n	800b59c <ip4_input+0x14>
    iphdr = (const struct ip_hdr *)p->payload;
 800b684:	6846      	ldr	r6, [r0, #4]
  ip_data.current_netif = netif;
 800b686:	4a34      	ldr	r2, [pc, #208]	; (800b758 <ip4_input+0x1d0>)
 800b688:	f8c2 8000 	str.w	r8, [r2]
  ip_data.current_input_netif = inp;
 800b68c:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b68e:	6096      	str	r6, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800b690:	7833      	ldrb	r3, [r6, #0]
 800b692:	f003 030f 	and.w	r3, r3, #15
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	8193      	strh	r3, [r2, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800b69a:	4629      	mov	r1, r5
 800b69c:	4620      	mov	r0, r4
 800b69e:	f001 fbb5 	bl	800ce0c <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800b6a2:	7a73      	ldrb	r3, [r6, #9]
 800b6a4:	2b06      	cmp	r3, #6
 800b6a6:	d04c      	beq.n	800b742 <ip4_input+0x1ba>
 800b6a8:	2b11      	cmp	r3, #17
 800b6aa:	d03d      	beq.n	800b728 <ip4_input+0x1a0>
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d04d      	beq.n	800b74c <ip4_input+0x1c4>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b6b0:	4641      	mov	r1, r8
 800b6b2:	4b29      	ldr	r3, [pc, #164]	; (800b758 <ip4_input+0x1d0>)
 800b6b4:	6958      	ldr	r0, [r3, #20]
 800b6b6:	f000 f90a 	bl	800b8ce <ip4_addr_isbroadcast_u32>
 800b6ba:	b968      	cbnz	r0, 800b6d8 <ip4_input+0x150>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b6bc:	4b26      	ldr	r3, [pc, #152]	; (800b758 <ip4_input+0x1d0>)
 800b6be:	695b      	ldr	r3, [r3, #20]
 800b6c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b6c4:	2be0      	cmp	r3, #224	; 0xe0
 800b6c6:	d007      	beq.n	800b6d8 <ip4_input+0x150>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f001 fbde 	bl	800ce8c <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b6d0:	2102      	movs	r1, #2
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f7ff fed4 	bl	800b480 <icmp_dest_unreach>
        pbuf_free(p);
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f001 fbdd 	bl	800ce98 <pbuf_free>
        break;
 800b6de:	e027      	b.n	800b730 <ip4_input+0x1a8>
      netif = NULL;
 800b6e0:	f04f 0800 	mov.w	r8, #0
 800b6e4:	e7b7      	b.n	800b656 <ip4_input+0xce>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800b6e6:	7a73      	ldrb	r3, [r6, #9]
 800b6e8:	2b11      	cmp	r3, #17
 800b6ea:	d001      	beq.n	800b6f0 <ip4_input+0x168>
  int check_ip_src = 1;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e7b6      	b.n	800b65e <ip4_input+0xd6>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800b6f0:	1973      	adds	r3, r6, r5
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800b6f2:	885b      	ldrh	r3, [r3, #2]
 800b6f4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800b6f8:	d001      	beq.n	800b6fe <ip4_input+0x176>
  int check_ip_src = 1;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e7af      	b.n	800b65e <ip4_input+0xd6>
        netif = inp;
 800b6fe:	46b8      	mov	r8, r7
        check_ip_src = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	e7ac      	b.n	800b65e <ip4_input+0xd6>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b704:	4639      	mov	r1, r7
 800b706:	f000 f8e2 	bl	800b8ce <ip4_addr_isbroadcast_u32>
 800b70a:	b928      	cbnz	r0, 800b718 <ip4_input+0x190>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b70c:	4b12      	ldr	r3, [pc, #72]	; (800b758 <ip4_input+0x1d0>)
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b714:	2be0      	cmp	r3, #224	; 0xe0
 800b716:	d1a7      	bne.n	800b668 <ip4_input+0xe0>
      pbuf_free(p);
 800b718:	4620      	mov	r0, r4
 800b71a:	f001 fbbd 	bl	800ce98 <pbuf_free>
      return ERR_OK;
 800b71e:	e73d      	b.n	800b59c <ip4_input+0x14>
    pbuf_free(p);
 800b720:	4620      	mov	r0, r4
 800b722:	f001 fbb9 	bl	800ce98 <pbuf_free>
    return ERR_OK;
 800b726:	e739      	b.n	800b59c <ip4_input+0x14>
        udp_input(p, inp);
 800b728:	4639      	mov	r1, r7
 800b72a:	4620      	mov	r0, r4
 800b72c:	f005 ffd0 	bl	80116d0 <udp_input>
  ip_data.current_netif = NULL;
 800b730:	4b09      	ldr	r3, [pc, #36]	; (800b758 <ip4_input+0x1d0>)
 800b732:	2200      	movs	r2, #0
 800b734:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b736:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b738:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b73a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b73c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b73e:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800b740:	e72c      	b.n	800b59c <ip4_input+0x14>
        tcp_input(p, inp);
 800b742:	4639      	mov	r1, r7
 800b744:	4620      	mov	r0, r4
 800b746:	f004 f87b 	bl	800f840 <tcp_input>
        break;
 800b74a:	e7f1      	b.n	800b730 <ip4_input+0x1a8>
        icmp_input(p, inp);
 800b74c:	4639      	mov	r1, r7
 800b74e:	4620      	mov	r0, r4
 800b750:	f7ff fdd6 	bl	800b300 <icmp_input>
        break;
 800b754:	e7ec      	b.n	800b730 <ip4_input+0x1a8>
 800b756:	bf00      	nop
 800b758:	200072e4 	.word	0x200072e4
 800b75c:	2000d840 	.word	0x2000d840

0800b760 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800b760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b764:	b083      	sub	sp, #12
 800b766:	4606      	mov	r6, r0
 800b768:	4689      	mov	r9, r1
 800b76a:	4617      	mov	r7, r2
 800b76c:	469b      	mov	fp, r3
 800b76e:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 800b772:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
 800b776:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b77a:	7b83      	ldrb	r3, [r0, #14]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d006      	beq.n	800b78e <ip4_output_if_src+0x2e>
 800b780:	4b42      	ldr	r3, [pc, #264]	; (800b88c <ip4_output_if_src+0x12c>)
 800b782:	f44f 7255 	mov.w	r2, #852	; 0x354
 800b786:	4942      	ldr	r1, [pc, #264]	; (800b890 <ip4_output_if_src+0x130>)
 800b788:	4842      	ldr	r0, [pc, #264]	; (800b894 <ip4_output_if_src+0x134>)
 800b78a:	f006 fcef 	bl	801216c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b78e:	2f00      	cmp	r7, #0
 800b790:	d067      	beq.n	800b862 <ip4_output_if_src+0x102>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800b792:	2114      	movs	r1, #20
 800b794:	4630      	mov	r0, r6
 800b796:	f001 fb34 	bl	800ce02 <pbuf_add_header>
 800b79a:	2800      	cmp	r0, #0
 800b79c:	d170      	bne.n	800b880 <ip4_output_if_src+0x120>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b79e:	6875      	ldr	r5, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b7a0:	8973      	ldrh	r3, [r6, #10]
 800b7a2:	2b13      	cmp	r3, #19
 800b7a4:	d951      	bls.n	800b84a <ip4_output_if_src+0xea>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b7a6:	f885 b008 	strb.w	fp, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b7aa:	726c      	strb	r4, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 800b7ac:	ea44 230b 	orr.w	r3, r4, fp, lsl #8
 800b7b0:	0a1c      	lsrs	r4, r3, #8
 800b7b2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b7b6:	6838      	ldr	r0, [r7, #0]
 800b7b8:	6128      	str	r0, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 800b7ba:	b283      	uxth	r3, r0
 800b7bc:	fa13 f484 	uxtah	r4, r3, r4
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 800b7c0:	eb04 4410 	add.w	r4, r4, r0, lsr #16
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b7c4:	2345      	movs	r3, #69	; 0x45
 800b7c6:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800b7c8:	f885 a001 	strb.w	sl, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 800b7cc:	f44a 4a8a 	orr.w	sl, sl, #17664	; 0x4500
 800b7d0:	ea4f 201a 	mov.w	r0, sl, lsr #8
 800b7d4:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
 800b7d8:	b200      	sxth	r0, r0
 800b7da:	b280      	uxth	r0, r0
 800b7dc:	4404      	add	r4, r0
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b7de:	8930      	ldrh	r0, [r6, #8]
 800b7e0:	f7fd fcaa 	bl	8009138 <lwip_htons>
 800b7e4:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 800b7e6:	4404      	add	r4, r0
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	71ab      	strb	r3, [r5, #6]
 800b7ec:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b7ee:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800b8a0 <ip4_output_if_src+0x140>
 800b7f2:	f8ba 0000 	ldrh.w	r0, [sl]
 800b7f6:	f7fd fc9f 	bl	8009138 <lwip_htons>
 800b7fa:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 800b7fc:	4404      	add	r4, r0
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b7fe:	f8ba 3000 	ldrh.w	r3, [sl]
 800b802:	3301      	adds	r3, #1
 800b804:	f8aa 3000 	strh.w	r3, [sl]

    if (src == NULL) {
 800b808:	f1b9 0f00 	cmp.w	r9, #0
 800b80c:	d025      	beq.n	800b85a <ip4_output_if_src+0xfa>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b80e:	f8d9 3000 	ldr.w	r3, [r9]
 800b812:	60eb      	str	r3, [r5, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 800b814:	68e8      	ldr	r0, [r5, #12]
 800b816:	fa14 f380 	uxtah	r3, r4, r0
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 800b81a:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 800b81e:	b283      	uxth	r3, r0
 800b820:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 800b824:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 800b828:	43db      	mvns	r3, r3
 800b82a:	816b      	strh	r3, [r5, #10]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b82c:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 800b830:	b113      	cbz	r3, 800b838 <ip4_output_if_src+0xd8>
 800b832:	8932      	ldrh	r2, [r6, #8]
 800b834:	4293      	cmp	r3, r2
 800b836:	d31d      	bcc.n	800b874 <ip4_output_if_src+0x114>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b838:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b83c:	463a      	mov	r2, r7
 800b83e:	4631      	mov	r1, r6
 800b840:	4640      	mov	r0, r8
 800b842:	4798      	blx	r3
}
 800b844:	b003      	add	sp, #12
 800b846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b84a:	4b10      	ldr	r3, [pc, #64]	; (800b88c <ip4_output_if_src+0x12c>)
 800b84c:	f240 3289 	movw	r2, #905	; 0x389
 800b850:	4911      	ldr	r1, [pc, #68]	; (800b898 <ip4_output_if_src+0x138>)
 800b852:	4810      	ldr	r0, [pc, #64]	; (800b894 <ip4_output_if_src+0x134>)
 800b854:	f006 fc8a 	bl	801216c <iprintf>
 800b858:	e7a5      	b.n	800b7a6 <ip4_output_if_src+0x46>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b85a:	4b10      	ldr	r3, [pc, #64]	; (800b89c <ip4_output_if_src+0x13c>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	60eb      	str	r3, [r5, #12]
 800b860:	e7d8      	b.n	800b814 <ip4_output_if_src+0xb4>
    if (p->len < IP_HLEN) {
 800b862:	8973      	ldrh	r3, [r6, #10]
 800b864:	2b13      	cmp	r3, #19
 800b866:	d90e      	bls.n	800b886 <ip4_output_if_src+0x126>
    iphdr = (struct ip_hdr *)p->payload;
 800b868:	6873      	ldr	r3, [r6, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b86a:	691b      	ldr	r3, [r3, #16]
 800b86c:	af02      	add	r7, sp, #8
 800b86e:	f847 3d04 	str.w	r3, [r7, #-4]!
 800b872:	e7db      	b.n	800b82c <ip4_output_if_src+0xcc>
    return ip4_frag(p, netif, dest);
 800b874:	463a      	mov	r2, r7
 800b876:	4641      	mov	r1, r8
 800b878:	4630      	mov	r0, r6
 800b87a:	f000 fba1 	bl	800bfc0 <ip4_frag>
 800b87e:	e7e1      	b.n	800b844 <ip4_output_if_src+0xe4>
      return ERR_BUF;
 800b880:	f06f 0001 	mvn.w	r0, #1
 800b884:	e7de      	b.n	800b844 <ip4_output_if_src+0xe4>
      return ERR_BUF;
 800b886:	f06f 0001 	mvn.w	r0, #1
 800b88a:	e7db      	b.n	800b844 <ip4_output_if_src+0xe4>
 800b88c:	08068428 	.word	0x08068428
 800b890:	08068468 	.word	0x08068468
 800b894:	0801335c 	.word	0x0801335c
 800b898:	08068474 	.word	0x08068474
 800b89c:	080684a4 	.word	0x080684a4
 800b8a0:	20006dee 	.word	0x20006dee

0800b8a4 <ip4_output_if>:
{
 800b8a4:	b530      	push	{r4, r5, lr}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 800b8aa:	4615      	mov	r5, r2
 800b8ac:	b11a      	cbz	r2, 800b8b6 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800b8ae:	b109      	cbz	r1, 800b8b4 <ip4_output_if+0x10>
 800b8b0:	680a      	ldr	r2, [r1, #0]
 800b8b2:	b902      	cbnz	r2, 800b8b6 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800b8b4:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b8b6:	9402      	str	r4, [sp, #8]
 800b8b8:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 800b8bc:	9201      	str	r2, [sp, #4]
 800b8be:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800b8c2:	9200      	str	r2, [sp, #0]
 800b8c4:	462a      	mov	r2, r5
 800b8c6:	f7ff ff4b 	bl	800b760 <ip4_output_if_src>
}
 800b8ca:	b005      	add	sp, #20
 800b8cc:	bd30      	pop	{r4, r5, pc}

0800b8ce <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b8ce:	1e43      	subs	r3, r0, #1
 800b8d0:	f113 0f03 	cmn.w	r3, #3
 800b8d4:	d811      	bhi.n	800b8fa <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b8d6:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 800b8da:	f013 0f02 	tst.w	r3, #2
 800b8de:	d00e      	beq.n	800b8fe <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b8e0:	684b      	ldr	r3, [r1, #4]
 800b8e2:	4298      	cmp	r0, r3
 800b8e4:	d00d      	beq.n	800b902 <ip4_addr_isbroadcast_u32+0x34>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b8e6:	688a      	ldr	r2, [r1, #8]
 800b8e8:	4043      	eors	r3, r0
 800b8ea:	4213      	tst	r3, r2
 800b8ec:	d10b      	bne.n	800b906 <ip4_addr_isbroadcast_u32+0x38>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b8ee:	43d2      	mvns	r2, r2
 800b8f0:	ea32 0300 	bics.w	r3, r2, r0
 800b8f4:	d009      	beq.n	800b90a <ip4_addr_isbroadcast_u32+0x3c>
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800b8f6:	2000      	movs	r0, #0
 800b8f8:	4770      	bx	lr
    return 1;
 800b8fa:	2001      	movs	r0, #1
 800b8fc:	4770      	bx	lr
    return 0;
 800b8fe:	2000      	movs	r0, #0
 800b900:	4770      	bx	lr
    return 0;
 800b902:	2000      	movs	r0, #0
 800b904:	4770      	bx	lr
    return 0;
 800b906:	2000      	movs	r0, #0
 800b908:	4770      	bx	lr
    return 1;
 800b90a:	2001      	movs	r0, #1
  }
}
 800b90c:	4770      	bx	lr
	...

0800b910 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b910:	b538      	push	{r3, r4, r5, lr}
 800b912:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800b914:	4b0c      	ldr	r3, [pc, #48]	; (800b948 <ip_reass_dequeue_datagram+0x38>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4283      	cmp	r3, r0
 800b91a:	d008      	beq.n	800b92e <ip_reass_dequeue_datagram+0x1e>
 800b91c:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b91e:	b151      	cbz	r1, 800b936 <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800b920:	6823      	ldr	r3, [r4, #0]
 800b922:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800b924:	4621      	mov	r1, r4
 800b926:	2004      	movs	r0, #4
 800b928:	f000 ffc8 	bl	800c8bc <memp_free>
 800b92c:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800b92e:	6802      	ldr	r2, [r0, #0]
 800b930:	4b05      	ldr	r3, [pc, #20]	; (800b948 <ip_reass_dequeue_datagram+0x38>)
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	e7f6      	b.n	800b924 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b936:	4b05      	ldr	r3, [pc, #20]	; (800b94c <ip_reass_dequeue_datagram+0x3c>)
 800b938:	f240 1245 	movw	r2, #325	; 0x145
 800b93c:	4904      	ldr	r1, [pc, #16]	; (800b950 <ip_reass_dequeue_datagram+0x40>)
 800b93e:	4805      	ldr	r0, [pc, #20]	; (800b954 <ip_reass_dequeue_datagram+0x44>)
 800b940:	f006 fc14 	bl	801216c <iprintf>
 800b944:	e7ec      	b.n	800b920 <ip_reass_dequeue_datagram+0x10>
 800b946:	bf00      	nop
 800b948:	20006df4 	.word	0x20006df4
 800b94c:	080685cc 	.word	0x080685cc
 800b950:	08068610 	.word	0x08068610
 800b954:	0801335c 	.word	0x0801335c

0800b958 <ip_reass_free_complete_datagram>:
{
 800b958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b95c:	4680      	mov	r8, r0
 800b95e:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b960:	4281      	cmp	r1, r0
 800b962:	d015      	beq.n	800b990 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 800b964:	f1b9 0f00 	cmp.w	r9, #0
 800b968:	d009      	beq.n	800b97e <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800b96a:	f8d9 3000 	ldr.w	r3, [r9]
 800b96e:	4598      	cmp	r8, r3
 800b970:	d005      	beq.n	800b97e <ip_reass_free_complete_datagram+0x26>
 800b972:	4b35      	ldr	r3, [pc, #212]	; (800ba48 <ip_reass_free_complete_datagram+0xf0>)
 800b974:	22ad      	movs	r2, #173	; 0xad
 800b976:	4935      	ldr	r1, [pc, #212]	; (800ba4c <ip_reass_free_complete_datagram+0xf4>)
 800b978:	4835      	ldr	r0, [pc, #212]	; (800ba50 <ip_reass_free_complete_datagram+0xf8>)
 800b97a:	f006 fbf7 	bl	801216c <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800b97e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b982:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 800b984:	889a      	ldrh	r2, [r3, #4]
 800b986:	b152      	cbz	r2, 800b99e <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 800b988:	2600      	movs	r6, #0
  p = ipr->p;
 800b98a:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 800b98e:	e032      	b.n	800b9f6 <ip_reass_free_complete_datagram+0x9e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b990:	4b2d      	ldr	r3, [pc, #180]	; (800ba48 <ip_reass_free_complete_datagram+0xf0>)
 800b992:	22ab      	movs	r2, #171	; 0xab
 800b994:	492f      	ldr	r1, [pc, #188]	; (800ba54 <ip_reass_free_complete_datagram+0xfc>)
 800b996:	482e      	ldr	r0, [pc, #184]	; (800ba50 <ip_reass_free_complete_datagram+0xf8>)
 800b998:	f006 fbe8 	bl	801216c <iprintf>
 800b99c:	e7e2      	b.n	800b964 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800b9a4:	4643      	mov	r3, r8
 800b9a6:	6862      	ldr	r2, [r4, #4]
 800b9a8:	f853 1f08 	ldr.w	r1, [r3, #8]!
 800b9ac:	685e      	ldr	r6, [r3, #4]
 800b9ae:	689d      	ldr	r5, [r3, #8]
 800b9b0:	68d8      	ldr	r0, [r3, #12]
 800b9b2:	6011      	str	r1, [r2, #0]
 800b9b4:	6056      	str	r6, [r2, #4]
 800b9b6:	6095      	str	r5, [r2, #8]
 800b9b8:	60d0      	str	r0, [r2, #12]
 800b9ba:	6919      	ldr	r1, [r3, #16]
 800b9bc:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800b9be:	2101      	movs	r1, #1
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f7ff fd63 	bl	800b48c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f001 fbd0 	bl	800d16c <pbuf_clen>
 800b9cc:	4606      	mov	r6, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b9ce:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800b9d2:	da03      	bge.n	800b9dc <ip_reass_free_complete_datagram+0x84>
    pbuf_free(p);
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f001 fa5f 	bl	800ce98 <pbuf_free>
 800b9da:	e7d6      	b.n	800b98a <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b9dc:	4b1a      	ldr	r3, [pc, #104]	; (800ba48 <ip_reass_free_complete_datagram+0xf0>)
 800b9de:	22bc      	movs	r2, #188	; 0xbc
 800b9e0:	491d      	ldr	r1, [pc, #116]	; (800ba58 <ip_reass_free_complete_datagram+0x100>)
 800b9e2:	481b      	ldr	r0, [pc, #108]	; (800ba50 <ip_reass_free_complete_datagram+0xf8>)
 800b9e4:	f006 fbc2 	bl	801216c <iprintf>
 800b9e8:	e7f4      	b.n	800b9d4 <ip_reass_free_complete_datagram+0x7c>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800b9ea:	4435      	add	r5, r6
 800b9ec:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f001 fa52 	bl	800ce98 <pbuf_free>
    p = iprh->next_pbuf;
 800b9f4:	463c      	mov	r4, r7
  while (p != NULL) {
 800b9f6:	b184      	cbz	r4, 800ba1a <ip_reass_free_complete_datagram+0xc2>
    iprh = (struct ip_reass_helper *)p->payload;
 800b9f8:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 800b9fa:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f001 fbb5 	bl	800d16c <pbuf_clen>
 800ba02:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ba04:	1833      	adds	r3, r6, r0
 800ba06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba0a:	dbee      	blt.n	800b9ea <ip_reass_free_complete_datagram+0x92>
 800ba0c:	4b0e      	ldr	r3, [pc, #56]	; (800ba48 <ip_reass_free_complete_datagram+0xf0>)
 800ba0e:	22cc      	movs	r2, #204	; 0xcc
 800ba10:	4911      	ldr	r1, [pc, #68]	; (800ba58 <ip_reass_free_complete_datagram+0x100>)
 800ba12:	480f      	ldr	r0, [pc, #60]	; (800ba50 <ip_reass_free_complete_datagram+0xf8>)
 800ba14:	f006 fbaa 	bl	801216c <iprintf>
 800ba18:	e7e7      	b.n	800b9ea <ip_reass_free_complete_datagram+0x92>
  ip_reass_dequeue_datagram(ipr, prev);
 800ba1a:	4649      	mov	r1, r9
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	f7ff ff77 	bl	800b910 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ba22:	4b0e      	ldr	r3, [pc, #56]	; (800ba5c <ip_reass_free_complete_datagram+0x104>)
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	429e      	cmp	r6, r3
 800ba28:	d806      	bhi.n	800ba38 <ip_reass_free_complete_datagram+0xe0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ba2a:	4a0c      	ldr	r2, [pc, #48]	; (800ba5c <ip_reass_free_complete_datagram+0x104>)
 800ba2c:	8813      	ldrh	r3, [r2, #0]
 800ba2e:	1b9b      	subs	r3, r3, r6
 800ba30:	8013      	strh	r3, [r2, #0]
}
 800ba32:	4630      	mov	r0, r6
 800ba34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ba38:	4b03      	ldr	r3, [pc, #12]	; (800ba48 <ip_reass_free_complete_datagram+0xf0>)
 800ba3a:	22d2      	movs	r2, #210	; 0xd2
 800ba3c:	4908      	ldr	r1, [pc, #32]	; (800ba60 <ip_reass_free_complete_datagram+0x108>)
 800ba3e:	4804      	ldr	r0, [pc, #16]	; (800ba50 <ip_reass_free_complete_datagram+0xf8>)
 800ba40:	f006 fb94 	bl	801216c <iprintf>
 800ba44:	e7f1      	b.n	800ba2a <ip_reass_free_complete_datagram+0xd2>
 800ba46:	bf00      	nop
 800ba48:	080685cc 	.word	0x080685cc
 800ba4c:	08068638 	.word	0x08068638
 800ba50:	0801335c 	.word	0x0801335c
 800ba54:	0806862c 	.word	0x0806862c
 800ba58:	0806864c 	.word	0x0806864c
 800ba5c:	20006df0 	.word	0x20006df0
 800ba60:	0806866c 	.word	0x0806866c

0800ba64 <ip_reass_remove_oldest_datagram>:
{
 800ba64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba68:	4605      	mov	r5, r0
 800ba6a:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800ba6c:	2600      	movs	r6, #0
 800ba6e:	e02a      	b.n	800bac6 <ip_reass_remove_oldest_datagram+0x62>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ba70:	699a      	ldr	r2, [r3, #24]
 800ba72:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800ba76:	4562      	cmp	r2, ip
 800ba78:	d110      	bne.n	800ba9c <ip_reass_remove_oldest_datagram+0x38>
 800ba7a:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800ba7e:	88aa      	ldrh	r2, [r5, #4]
 800ba80:	4594      	cmp	ip, r2
 800ba82:	d10b      	bne.n	800ba9c <ip_reass_remove_oldest_datagram+0x38>
 800ba84:	e001      	b.n	800ba8a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800ba86:	4671      	mov	r1, lr
          oldest = r;
 800ba88:	4618      	mov	r0, r3
      if (r->next != NULL) {
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	b18a      	cbz	r2, 800bab2 <ip_reass_remove_oldest_datagram+0x4e>
 800ba8e:	469e      	mov	lr, r3
 800ba90:	4613      	mov	r3, r2
    while (r != NULL) {
 800ba92:	b183      	cbz	r3, 800bab6 <ip_reass_remove_oldest_datagram+0x52>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ba94:	68ea      	ldr	r2, [r5, #12]
 800ba96:	695f      	ldr	r7, [r3, #20]
 800ba98:	4297      	cmp	r7, r2
 800ba9a:	d0e9      	beq.n	800ba70 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 800ba9c:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d0f1      	beq.n	800ba86 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 800baa2:	f893 c01f 	ldrb.w	ip, [r3, #31]
 800baa6:	7fc2      	ldrb	r2, [r0, #31]
 800baa8:	4594      	cmp	ip, r2
 800baaa:	d8ee      	bhi.n	800ba8a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800baac:	4671      	mov	r1, lr
          oldest = r;
 800baae:	4618      	mov	r0, r3
 800bab0:	e7eb      	b.n	800ba8a <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 800bab2:	4673      	mov	r3, lr
 800bab4:	e7eb      	b.n	800ba8e <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 800bab6:	b110      	cbz	r0, 800babe <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800bab8:	f7ff ff4e 	bl	800b958 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800babc:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800babe:	4546      	cmp	r6, r8
 800bac0:	da08      	bge.n	800bad4 <ip_reass_remove_oldest_datagram+0x70>
 800bac2:	2c01      	cmp	r4, #1
 800bac4:	dd06      	ble.n	800bad4 <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 800bac6:	4b05      	ldr	r3, [pc, #20]	; (800badc <ip_reass_remove_oldest_datagram+0x78>)
 800bac8:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 800baca:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800bacc:	4621      	mov	r1, r4
    prev = NULL;
 800bace:	46a6      	mov	lr, r4
    oldest = NULL;
 800bad0:	4620      	mov	r0, r4
    while (r != NULL) {
 800bad2:	e7de      	b.n	800ba92 <ip_reass_remove_oldest_datagram+0x2e>
}
 800bad4:	4630      	mov	r0, r6
 800bad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bada:	bf00      	nop
 800badc:	20006df4 	.word	0x20006df4

0800bae0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800bae0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800bae2:	4604      	mov	r4, r0
 800bae4:	b120      	cbz	r0, 800baf0 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800bae6:	4621      	mov	r1, r4
 800bae8:	2005      	movs	r0, #5
 800baea:	f000 fee7 	bl	800c8bc <memp_free>
 800baee:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800baf0:	4b03      	ldr	r3, [pc, #12]	; (800bb00 <ip_frag_free_pbuf_custom_ref+0x20>)
 800baf2:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800baf6:	4903      	ldr	r1, [pc, #12]	; (800bb04 <ip_frag_free_pbuf_custom_ref+0x24>)
 800baf8:	4803      	ldr	r0, [pc, #12]	; (800bb08 <ip_frag_free_pbuf_custom_ref+0x28>)
 800bafa:	f006 fb37 	bl	801216c <iprintf>
 800bafe:	e7f2      	b.n	800bae6 <ip_frag_free_pbuf_custom_ref+0x6>
 800bb00:	080685cc 	.word	0x080685cc
 800bb04:	08067e60 	.word	0x08067e60
 800bb08:	0801335c 	.word	0x0801335c

0800bb0c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800bb0c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800bb0e:	4604      	mov	r4, r0
 800bb10:	b138      	cbz	r0, 800bb22 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800bb12:	6960      	ldr	r0, [r4, #20]
 800bb14:	b108      	cbz	r0, 800bb1a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800bb16:	f001 f9bf 	bl	800ce98 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f7ff ffe0 	bl	800bae0 <ip_frag_free_pbuf_custom_ref>
 800bb20:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800bb22:	4b04      	ldr	r3, [pc, #16]	; (800bb34 <ipfrag_free_pbuf_custom+0x28>)
 800bb24:	f240 22ce 	movw	r2, #718	; 0x2ce
 800bb28:	4903      	ldr	r1, [pc, #12]	; (800bb38 <ipfrag_free_pbuf_custom+0x2c>)
 800bb2a:	4804      	ldr	r0, [pc, #16]	; (800bb3c <ipfrag_free_pbuf_custom+0x30>)
 800bb2c:	f006 fb1e 	bl	801216c <iprintf>
 800bb30:	e7ef      	b.n	800bb12 <ipfrag_free_pbuf_custom+0x6>
 800bb32:	bf00      	nop
 800bb34:	080685cc 	.word	0x080685cc
 800bb38:	08068690 	.word	0x08068690
 800bb3c:	0801335c 	.word	0x0801335c

0800bb40 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 800bb40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb44:	4680      	mov	r8, r0
 800bb46:	460f      	mov	r7, r1
 800bb48:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr *)new_p->payload;
 800bb4a:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800bb4c:	8860      	ldrh	r0, [r4, #2]
 800bb4e:	f7fd faf3 	bl	8009138 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800bb52:	7823      	ldrb	r3, [r4, #0]
 800bb54:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4298      	cmp	r0, r3
 800bb5c:	f0c0 80a4 	bcc.w	800bca8 <ip_reass_chain_frag_into_datagram_and_validate+0x168>
  len = (u16_t)(len - hlen);
 800bb60:	1ac0      	subs	r0, r0, r3
 800bb62:	b285      	uxth	r5, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800bb64:	88e0      	ldrh	r0, [r4, #6]
 800bb66:	f7fd fae7 	bl	8009138 <lwip_htons>
 800bb6a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800bb6e:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800bb70:	687e      	ldr	r6, [r7, #4]
  iprh->next_pbuf = NULL;
 800bb72:	2300      	movs	r3, #0
 800bb74:	7033      	strb	r3, [r6, #0]
 800bb76:	7073      	strb	r3, [r6, #1]
 800bb78:	70b3      	strb	r3, [r6, #2]
 800bb7a:	70f3      	strb	r3, [r6, #3]
  iprh->start = offset;
 800bb7c:	80b0      	strh	r0, [r6, #4]
  iprh->end = (u16_t)(offset + len);
 800bb7e:	eb05 0e00 	add.w	lr, r5, r0
 800bb82:	fa1f fe8e 	uxth.w	lr, lr
 800bb86:	f8a6 e006 	strh.w	lr, [r6, #6]
  if (iprh->end < offset) {
 800bb8a:	4570      	cmp	r0, lr
 800bb8c:	f200 8090 	bhi.w	800bcb0 <ip_reass_chain_frag_into_datagram_and_validate+0x170>
  for (q = ipr->p; q != NULL;) {
 800bb90:	f8d8 1004 	ldr.w	r1, [r8, #4]
  int valid = 1;
 800bb94:	2501      	movs	r5, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800bb96:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 800bb98:	e036      	b.n	800bc08 <ip_reass_chain_frag_into_datagram_and_validate+0xc8>
      iprh->next_pbuf = q;
 800bb9a:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 800bb9c:	b364      	cbz	r4, 800bbf8 <ip_reass_chain_frag_into_datagram_and_validate+0xb8>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800bb9e:	88e2      	ldrh	r2, [r4, #6]
 800bba0:	4290      	cmp	r0, r2
 800bba2:	f0c0 8089 	bcc.w	800bcb8 <ip_reass_chain_frag_into_datagram_and_validate+0x178>
 800bba6:	889b      	ldrh	r3, [r3, #4]
 800bba8:	459e      	cmp	lr, r3
 800bbaa:	f200 8089 	bhi.w	800bcc0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
        iprh_prev->next_pbuf = new_p;
 800bbae:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 800bbb0:	88b3      	ldrh	r3, [r6, #4]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d000      	beq.n	800bbb8 <ip_reass_chain_frag_into_datagram_and_validate+0x78>
          valid = 0;
 800bbb6:	2500      	movs	r5, #0
  if (q == NULL) {
 800bbb8:	2900      	cmp	r1, #0
 800bbba:	d037      	beq.n	800bc2c <ip_reass_chain_frag_into_datagram_and_validate+0xec>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800bbbc:	f1b9 0f00 	cmp.w	r9, #0
 800bbc0:	d105      	bne.n	800bbce <ip_reass_chain_frag_into_datagram_and_validate+0x8e>
 800bbc2:	f898 301e 	ldrb.w	r3, [r8, #30]
 800bbc6:	f013 0f01 	tst.w	r3, #1
 800bbca:	f000 8089 	beq.w	800bce0 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
    if (valid) {
 800bbce:	2d00      	cmp	r5, #0
 800bbd0:	d067      	beq.n	800bca2 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800bbd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d060      	beq.n	800bc9c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
 800bbda:	6858      	ldr	r0, [r3, #4]
 800bbdc:	8883      	ldrh	r3, [r0, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d15e      	bne.n	800bca0 <ip_reass_chain_frag_into_datagram_and_validate+0x160>
        q = iprh->next_pbuf;
 800bbe2:	6832      	ldr	r2, [r6, #0]
        while (q != NULL) {
 800bbe4:	2a00      	cmp	r2, #0
 800bbe6:	d044      	beq.n	800bc72 <ip_reass_chain_frag_into_datagram_and_validate+0x132>
          iprh = (struct ip_reass_helper *)q->payload;
 800bbe8:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 800bbea:	88f1      	ldrh	r1, [r6, #6]
 800bbec:	889a      	ldrh	r2, [r3, #4]
 800bbee:	4291      	cmp	r1, r2
 800bbf0:	d13d      	bne.n	800bc6e <ip_reass_chain_frag_into_datagram_and_validate+0x12e>
          q = iprh->next_pbuf;
 800bbf2:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper *)q->payload;
 800bbf4:	461e      	mov	r6, r3
 800bbf6:	e7f5      	b.n	800bbe4 <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if (iprh->end > iprh_tmp->start) {
 800bbf8:	889b      	ldrh	r3, [r3, #4]
 800bbfa:	459e      	cmp	lr, r3
 800bbfc:	d864      	bhi.n	800bcc8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        ipr->p = new_p;
 800bbfe:	f8c8 7004 	str.w	r7, [r8, #4]
 800bc02:	e7d9      	b.n	800bbb8 <ip_reass_chain_frag_into_datagram_and_validate+0x78>
    q = iprh_tmp->next_pbuf;
 800bc04:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 800bc06:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 800bc08:	2900      	cmp	r1, #0
 800bc0a:	d0d5      	beq.n	800bbb8 <ip_reass_chain_frag_into_datagram_and_validate+0x78>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800bc0c:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800bc0e:	889a      	ldrh	r2, [r3, #4]
 800bc10:	4290      	cmp	r0, r2
 800bc12:	d3c2      	bcc.n	800bb9a <ip_reass_chain_frag_into_datagram_and_validate+0x5a>
    } else if (iprh->start == iprh_tmp->start) {
 800bc14:	4290      	cmp	r0, r2
 800bc16:	d05b      	beq.n	800bcd0 <ip_reass_chain_frag_into_datagram_and_validate+0x190>
    } else if (iprh->start < iprh_tmp->end) {
 800bc18:	88d9      	ldrh	r1, [r3, #6]
 800bc1a:	4288      	cmp	r0, r1
 800bc1c:	d35c      	bcc.n	800bcd8 <ip_reass_chain_frag_into_datagram_and_validate+0x198>
      if (iprh_prev != NULL) {
 800bc1e:	2c00      	cmp	r4, #0
 800bc20:	d0f0      	beq.n	800bc04 <ip_reass_chain_frag_into_datagram_and_validate+0xc4>
        if (iprh_prev->end != iprh_tmp->start) {
 800bc22:	88e1      	ldrh	r1, [r4, #6]
 800bc24:	428a      	cmp	r2, r1
 800bc26:	d0ed      	beq.n	800bc04 <ip_reass_chain_frag_into_datagram_and_validate+0xc4>
          valid = 0;
 800bc28:	2500      	movs	r5, #0
 800bc2a:	e7eb      	b.n	800bc04 <ip_reass_chain_frag_into_datagram_and_validate+0xc4>
    if (iprh_prev != NULL) {
 800bc2c:	b194      	cbz	r4, 800bc54 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800bc2e:	88e2      	ldrh	r2, [r4, #6]
 800bc30:	88b3      	ldrh	r3, [r6, #4]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d806      	bhi.n	800bc44 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      iprh_prev->next_pbuf = new_p;
 800bc36:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 800bc38:	88e2      	ldrh	r2, [r4, #6]
 800bc3a:	88b3      	ldrh	r3, [r6, #4]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d0bd      	beq.n	800bbbc <ip_reass_chain_frag_into_datagram_and_validate+0x7c>
        valid = 0;
 800bc40:	2500      	movs	r5, #0
 800bc42:	e7bb      	b.n	800bbbc <ip_reass_chain_frag_into_datagram_and_validate+0x7c>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800bc44:	4b28      	ldr	r3, [pc, #160]	; (800bce8 <ip_reass_chain_frag_into_datagram_and_validate+0x1a8>)
 800bc46:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800bc4a:	4928      	ldr	r1, [pc, #160]	; (800bcec <ip_reass_chain_frag_into_datagram_and_validate+0x1ac>)
 800bc4c:	4828      	ldr	r0, [pc, #160]	; (800bcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>)
 800bc4e:	f006 fa8d 	bl	801216c <iprintf>
 800bc52:	e7f0      	b.n	800bc36 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800bc54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc58:	b133      	cbz	r3, 800bc68 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
 800bc5a:	4b23      	ldr	r3, [pc, #140]	; (800bce8 <ip_reass_chain_frag_into_datagram_and_validate+0x1a8>)
 800bc5c:	f240 12bf 	movw	r2, #447	; 0x1bf
 800bc60:	4924      	ldr	r1, [pc, #144]	; (800bcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>)
 800bc62:	4823      	ldr	r0, [pc, #140]	; (800bcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>)
 800bc64:	f006 fa82 	bl	801216c <iprintf>
      ipr->p = new_p;
 800bc68:	f8c8 7004 	str.w	r7, [r8, #4]
 800bc6c:	e7a6      	b.n	800bbbc <ip_reass_chain_frag_into_datagram_and_validate+0x7c>
          iprh = (struct ip_reass_helper *)q->payload;
 800bc6e:	461e      	mov	r6, r3
            valid = 0;
 800bc70:	2500      	movs	r5, #0
        if (valid) {
 800bc72:	b1b5      	cbz	r5, 800bca2 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
          LWIP_ASSERT("sanity check",
 800bc74:	4286      	cmp	r6, r0
 800bc76:	d009      	beq.n	800bc8c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800bc78:	6833      	ldr	r3, [r6, #0]
 800bc7a:	b193      	cbz	r3, 800bca2 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
 800bc7c:	4b1a      	ldr	r3, [pc, #104]	; (800bce8 <ip_reass_chain_frag_into_datagram_and_validate+0x1a8>)
 800bc7e:	f240 12e3 	movw	r2, #483	; 0x1e3
 800bc82:	491d      	ldr	r1, [pc, #116]	; (800bcf8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>)
 800bc84:	481a      	ldr	r0, [pc, #104]	; (800bcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>)
 800bc86:	f006 fa71 	bl	801216c <iprintf>
 800bc8a:	e00a      	b.n	800bca2 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
          LWIP_ASSERT("sanity check",
 800bc8c:	4b16      	ldr	r3, [pc, #88]	; (800bce8 <ip_reass_chain_frag_into_datagram_and_validate+0x1a8>)
 800bc8e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bc92:	491a      	ldr	r1, [pc, #104]	; (800bcfc <ip_reass_chain_frag_into_datagram_and_validate+0x1bc>)
 800bc94:	4816      	ldr	r0, [pc, #88]	; (800bcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>)
 800bc96:	f006 fa69 	bl	801216c <iprintf>
 800bc9a:	e7ed      	b.n	800bc78 <ip_reass_chain_frag_into_datagram_and_validate+0x138>
        valid = 0;
 800bc9c:	2500      	movs	r5, #0
 800bc9e:	e000      	b.n	800bca2 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
 800bca0:	2500      	movs	r5, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800bca2:	4628      	mov	r0, r5
 800bca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bca8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bcb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bcd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bcd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800bce0:	4648      	mov	r0, r9
}
 800bce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bce6:	bf00      	nop
 800bce8:	080685cc 	.word	0x080685cc
 800bcec:	08068540 	.word	0x08068540
 800bcf0:	0801335c 	.word	0x0801335c
 800bcf4:	08068560 	.word	0x08068560
 800bcf8:	080685a8 	.word	0x080685a8
 800bcfc:	08068598 	.word	0x08068598

0800bd00 <ip_frag_alloc_pbuf_custom_ref>:
{
 800bd00:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800bd02:	2005      	movs	r0, #5
 800bd04:	f000 fdc0 	bl	800c888 <memp_malloc>
}
 800bd08:	bd08      	pop	{r3, pc}
	...

0800bd0c <ip_reass_enqueue_new_datagram>:
{
 800bd0c:	b570      	push	{r4, r5, r6, lr}
 800bd0e:	4605      	mov	r5, r0
 800bd10:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800bd12:	2004      	movs	r0, #4
 800bd14:	f000 fdb8 	bl	800c888 <memp_malloc>
  if (ipr == NULL) {
 800bd18:	4604      	mov	r4, r0
 800bd1a:	b1b0      	cbz	r0, 800bd4a <ip_reass_enqueue_new_datagram+0x3e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800bd1c:	2220      	movs	r2, #32
 800bd1e:	2100      	movs	r1, #0
 800bd20:	4620      	mov	r0, r4
 800bd22:	f006 fa1a 	bl	801215a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800bd26:	230f      	movs	r3, #15
 800bd28:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800bd2a:	4b0f      	ldr	r3, [pc, #60]	; (800bd68 <ip_reass_enqueue_new_datagram+0x5c>)
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800bd30:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800bd32:	682a      	ldr	r2, [r5, #0]
 800bd34:	686e      	ldr	r6, [r5, #4]
 800bd36:	68a8      	ldr	r0, [r5, #8]
 800bd38:	68e9      	ldr	r1, [r5, #12]
 800bd3a:	60a2      	str	r2, [r4, #8]
 800bd3c:	60e6      	str	r6, [r4, #12]
 800bd3e:	6120      	str	r0, [r4, #16]
 800bd40:	6161      	str	r1, [r4, #20]
 800bd42:	692a      	ldr	r2, [r5, #16]
 800bd44:	61a2      	str	r2, [r4, #24]
}
 800bd46:	4620      	mov	r0, r4
 800bd48:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800bd4a:	4631      	mov	r1, r6
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	f7ff fe89 	bl	800ba64 <ip_reass_remove_oldest_datagram>
 800bd52:	4286      	cmp	r6, r0
 800bd54:	dd02      	ble.n	800bd5c <ip_reass_enqueue_new_datagram+0x50>
    if (ipr == NULL)
 800bd56:	2c00      	cmp	r4, #0
 800bd58:	d1e0      	bne.n	800bd1c <ip_reass_enqueue_new_datagram+0x10>
 800bd5a:	e7f4      	b.n	800bd46 <ip_reass_enqueue_new_datagram+0x3a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800bd5c:	2004      	movs	r0, #4
 800bd5e:	f000 fd93 	bl	800c888 <memp_malloc>
 800bd62:	4604      	mov	r4, r0
 800bd64:	e7f7      	b.n	800bd56 <ip_reass_enqueue_new_datagram+0x4a>
 800bd66:	bf00      	nop
 800bd68:	20006df4 	.word	0x20006df4

0800bd6c <ip_reass_tmr>:
{
 800bd6c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800bd6e:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <ip_reass_tmr+0x28>)
 800bd70:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800bd72:	2400      	movs	r4, #0
  while (r != NULL) {
 800bd74:	e004      	b.n	800bd80 <ip_reass_tmr+0x14>
      r = r->next;
 800bd76:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800bd78:	4621      	mov	r1, r4
 800bd7a:	f7ff fded 	bl	800b958 <ip_reass_free_complete_datagram>
      r = r->next;
 800bd7e:	4628      	mov	r0, r5
  while (r != NULL) {
 800bd80:	b138      	cbz	r0, 800bd92 <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 800bd82:	7fc3      	ldrb	r3, [r0, #31]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d0f6      	beq.n	800bd76 <ip_reass_tmr+0xa>
      r->timer--;
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	77c3      	strb	r3, [r0, #31]
      prev = r;
 800bd8c:	4604      	mov	r4, r0
      r = r->next;
 800bd8e:	6800      	ldr	r0, [r0, #0]
 800bd90:	e7f6      	b.n	800bd80 <ip_reass_tmr+0x14>
}
 800bd92:	bd38      	pop	{r3, r4, r5, pc}
 800bd94:	20006df4 	.word	0x20006df4

0800bd98 <ip4_reass>:
{
 800bd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd9c:	4680      	mov	r8, r0
  fraghdr = (struct ip_hdr *)p->payload;
 800bd9e:	6845      	ldr	r5, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800bda0:	782b      	ldrb	r3, [r5, #0]
 800bda2:	f003 030f 	and.w	r3, r3, #15
 800bda6:	2b05      	cmp	r3, #5
 800bda8:	f040 80db 	bne.w	800bf62 <ip4_reass+0x1ca>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800bdac:	88e8      	ldrh	r0, [r5, #6]
 800bdae:	f7fd f9c3 	bl	8009138 <lwip_htons>
 800bdb2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800bdb6:	00c7      	lsls	r7, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800bdb8:	8868      	ldrh	r0, [r5, #2]
 800bdba:	f7fd f9bd 	bl	8009138 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800bdbe:	782b      	ldrb	r3, [r5, #0]
 800bdc0:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4298      	cmp	r0, r3
 800bdc8:	f0c0 80cb 	bcc.w	800bf62 <ip4_reass+0x1ca>
  len = (u16_t)(len - hlen);
 800bdcc:	1ac6      	subs	r6, r0, r3
 800bdce:	b2b6      	uxth	r6, r6
  clen = pbuf_clen(p);
 800bdd0:	4640      	mov	r0, r8
 800bdd2:	f001 f9cb 	bl	800d16c <pbuf_clen>
 800bdd6:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800bdd8:	4b72      	ldr	r3, [pc, #456]	; (800bfa4 <ip4_reass+0x20c>)
 800bdda:	881b      	ldrh	r3, [r3, #0]
 800bddc:	4403      	add	r3, r0
 800bdde:	2b0a      	cmp	r3, #10
 800bde0:	dc02      	bgt.n	800bde8 <ip4_reass+0x50>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bde2:	4b71      	ldr	r3, [pc, #452]	; (800bfa8 <ip4_reass+0x210>)
 800bde4:	681c      	ldr	r4, [r3, #0]
 800bde6:	e00d      	b.n	800be04 <ip4_reass+0x6c>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bde8:	4601      	mov	r1, r0
 800bdea:	4628      	mov	r0, r5
 800bdec:	f7ff fe3a 	bl	800ba64 <ip_reass_remove_oldest_datagram>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	f000 80b6 	beq.w	800bf62 <ip4_reass+0x1ca>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800bdf6:	4b6b      	ldr	r3, [pc, #428]	; (800bfa4 <ip4_reass+0x20c>)
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bdfc:	2b0a      	cmp	r3, #10
 800bdfe:	ddf0      	ble.n	800bde2 <ip4_reass+0x4a>
 800be00:	e0af      	b.n	800bf62 <ip4_reass+0x1ca>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800be02:	6824      	ldr	r4, [r4, #0]
 800be04:	b15c      	cbz	r4, 800be1e <ip4_reass+0x86>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800be06:	6962      	ldr	r2, [r4, #20]
 800be08:	68eb      	ldr	r3, [r5, #12]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d1f9      	bne.n	800be02 <ip4_reass+0x6a>
 800be0e:	69a2      	ldr	r2, [r4, #24]
 800be10:	692b      	ldr	r3, [r5, #16]
 800be12:	429a      	cmp	r2, r3
 800be14:	d1f5      	bne.n	800be02 <ip4_reass+0x6a>
 800be16:	89a2      	ldrh	r2, [r4, #12]
 800be18:	88ab      	ldrh	r3, [r5, #4]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d1f1      	bne.n	800be02 <ip4_reass+0x6a>
  if (ipr == NULL) {
 800be1e:	2c00      	cmp	r4, #0
 800be20:	d051      	beq.n	800bec6 <ip4_reass+0x12e>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800be22:	88e8      	ldrh	r0, [r5, #6]
 800be24:	f7fd f988 	bl	8009138 <lwip_htons>
 800be28:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d052      	beq.n	800bed6 <ip4_reass+0x13e>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800be30:	88ed      	ldrh	r5, [r5, #6]
 800be32:	f005 0520 	and.w	r5, r5, #32
 800be36:	2d00      	cmp	r5, #0
 800be38:	bf0c      	ite	eq
 800be3a:	2201      	moveq	r2, #1
 800be3c:	2200      	movne	r2, #0
  if (is_last) {
 800be3e:	d109      	bne.n	800be54 <ip4_reass+0xbc>
    u16_t datagram_len = (u16_t)(offset + len);
 800be40:	19bb      	adds	r3, r7, r6
 800be42:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800be44:	429f      	cmp	r7, r3
 800be46:	f200 8089 	bhi.w	800bf5c <ip4_reass+0x1c4>
 800be4a:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 800be4e:	428b      	cmp	r3, r1
 800be50:	f200 8084 	bhi.w	800bf5c <ip4_reass+0x1c4>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800be54:	4641      	mov	r1, r8
 800be56:	4620      	mov	r0, r4
 800be58:	f7ff fe72 	bl	800bb40 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800be5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800be60:	d07c      	beq.n	800bf5c <ip4_reass+0x1c4>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800be62:	4b50      	ldr	r3, [pc, #320]	; (800bfa4 <ip4_reass+0x20c>)
 800be64:	881a      	ldrh	r2, [r3, #0]
 800be66:	4491      	add	r9, r2
 800be68:	f8a3 9000 	strh.w	r9, [r3]
  if (is_last) {
 800be6c:	b92d      	cbnz	r5, 800be7a <ip4_reass+0xe2>
    u16_t datagram_len = (u16_t)(offset + len);
 800be6e:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 800be70:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800be72:	7fa3      	ldrb	r3, [r4, #30]
 800be74:	f043 0301 	orr.w	r3, r3, #1
 800be78:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800be7a:	2801      	cmp	r0, #1
 800be7c:	f040 8090 	bne.w	800bfa0 <ip4_reass+0x208>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800be80:	8ba0      	ldrh	r0, [r4, #28]
 800be82:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800be84:	6863      	ldr	r3, [r4, #4]
 800be86:	685e      	ldr	r6, [r3, #4]
 800be88:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800be8a:	4623      	mov	r3, r4
 800be8c:	f853 2f08 	ldr.w	r2, [r3, #8]!
 800be90:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800be94:	689f      	ldr	r7, [r3, #8]
 800be96:	68d9      	ldr	r1, [r3, #12]
 800be98:	6032      	str	r2, [r6, #0]
 800be9a:	f8c6 e004 	str.w	lr, [r6, #4]
 800be9e:	60b7      	str	r7, [r6, #8]
 800bea0:	60f1      	str	r1, [r6, #12]
 800bea2:	691a      	ldr	r2, [r3, #16]
 800bea4:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800bea6:	b280      	uxth	r0, r0
 800bea8:	f7fd f946 	bl	8009138 <lwip_htons>
 800beac:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800beae:	2300      	movs	r3, #0
 800beb0:	71b3      	strb	r3, [r6, #6]
 800beb2:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800beb4:	72b3      	strb	r3, [r6, #10]
 800beb6:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 800beb8:	2114      	movs	r1, #20
 800beba:	4630      	mov	r0, r6
 800bebc:	f7fd fa5a 	bl	8009374 <inet_chksum>
 800bec0:	8170      	strh	r0, [r6, #10]
    p = ipr->p;
 800bec2:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 800bec4:	e025      	b.n	800bf12 <ip4_reass+0x17a>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800bec6:	4649      	mov	r1, r9
 800bec8:	4628      	mov	r0, r5
 800beca:	f7ff ff1f 	bl	800bd0c <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 800bece:	4604      	mov	r4, r0
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d1ad      	bne.n	800be30 <ip4_reass+0x98>
 800bed4:	e045      	b.n	800bf62 <ip4_reass+0x1ca>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800bed6:	89e0      	ldrh	r0, [r4, #14]
 800bed8:	f7fd f92e 	bl	8009138 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800bedc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800bee0:	2800      	cmp	r0, #0
 800bee2:	d0a5      	beq.n	800be30 <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800bee4:	682a      	ldr	r2, [r5, #0]
 800bee6:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800beea:	68a8      	ldr	r0, [r5, #8]
 800beec:	68e9      	ldr	r1, [r5, #12]
 800beee:	60a2      	str	r2, [r4, #8]
 800bef0:	f8c4 e00c 	str.w	lr, [r4, #12]
 800bef4:	6120      	str	r0, [r4, #16]
 800bef6:	6161      	str	r1, [r4, #20]
 800bef8:	692a      	ldr	r2, [r5, #16]
 800befa:	61a2      	str	r2, [r4, #24]
 800befc:	e798      	b.n	800be30 <ip4_reass+0x98>
      iprh = (struct ip_reass_helper *)r->payload;
 800befe:	686e      	ldr	r6, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 800bf00:	2114      	movs	r1, #20
 800bf02:	4628      	mov	r0, r5
 800bf04:	f000 ff82 	bl	800ce0c <pbuf_remove_header>
      pbuf_cat(p, r);
 800bf08:	4629      	mov	r1, r5
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	f001 f954 	bl	800d1b8 <pbuf_cat>
      r = iprh->next_pbuf;
 800bf10:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 800bf12:	2d00      	cmp	r5, #0
 800bf14:	d1f3      	bne.n	800befe <ip4_reass+0x166>
    if (ipr == reassdatagrams) {
 800bf16:	4b24      	ldr	r3, [pc, #144]	; (800bfa8 <ip4_reass+0x210>)
 800bf18:	6819      	ldr	r1, [r3, #0]
 800bf1a:	428c      	cmp	r4, r1
 800bf1c:	d005      	beq.n	800bf2a <ip4_reass+0x192>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bf1e:	b129      	cbz	r1, 800bf2c <ip4_reass+0x194>
        if (ipr_prev->next == ipr) {
 800bf20:	680b      	ldr	r3, [r1, #0]
 800bf22:	429c      	cmp	r4, r3
 800bf24:	d002      	beq.n	800bf2c <ip4_reass+0x194>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bf26:	4619      	mov	r1, r3
 800bf28:	e7f9      	b.n	800bf1e <ip4_reass+0x186>
      ipr_prev = NULL;
 800bf2a:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f7ff fcef 	bl	800b910 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800bf32:	4638      	mov	r0, r7
 800bf34:	f001 f91a 	bl	800d16c <pbuf_clen>
 800bf38:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800bf3a:	4b1a      	ldr	r3, [pc, #104]	; (800bfa4 <ip4_reass+0x20c>)
 800bf3c:	881b      	ldrh	r3, [r3, #0]
 800bf3e:	4298      	cmp	r0, r3
 800bf40:	d804      	bhi.n	800bf4c <ip4_reass+0x1b4>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800bf42:	4a18      	ldr	r2, [pc, #96]	; (800bfa4 <ip4_reass+0x20c>)
 800bf44:	8813      	ldrh	r3, [r2, #0]
 800bf46:	1b1b      	subs	r3, r3, r4
 800bf48:	8013      	strh	r3, [r2, #0]
    return p;
 800bf4a:	e00e      	b.n	800bf6a <ip4_reass+0x1d2>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800bf4c:	4b17      	ldr	r3, [pc, #92]	; (800bfac <ip4_reass+0x214>)
 800bf4e:	f240 229b 	movw	r2, #667	; 0x29b
 800bf52:	4917      	ldr	r1, [pc, #92]	; (800bfb0 <ip4_reass+0x218>)
 800bf54:	4817      	ldr	r0, [pc, #92]	; (800bfb4 <ip4_reass+0x21c>)
 800bf56:	f006 f909 	bl	801216c <iprintf>
 800bf5a:	e7f2      	b.n	800bf42 <ip4_reass+0x1aa>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800bf5c:	b144      	cbz	r4, 800bf70 <ip4_reass+0x1d8>
  if (ipr->p == NULL) {
 800bf5e:	6863      	ldr	r3, [r4, #4]
 800bf60:	b173      	cbz	r3, 800bf80 <ip4_reass+0x1e8>
  pbuf_free(p);
 800bf62:	4640      	mov	r0, r8
 800bf64:	f000 ff98 	bl	800ce98 <pbuf_free>
  return NULL;
 800bf68:	2700      	movs	r7, #0
}
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800bf70:	4b0e      	ldr	r3, [pc, #56]	; (800bfac <ip4_reass+0x214>)
 800bf72:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800bf76:	4910      	ldr	r1, [pc, #64]	; (800bfb8 <ip4_reass+0x220>)
 800bf78:	480e      	ldr	r0, [pc, #56]	; (800bfb4 <ip4_reass+0x21c>)
 800bf7a:	f006 f8f7 	bl	801216c <iprintf>
 800bf7e:	e7ee      	b.n	800bf5e <ip4_reass+0x1c6>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800bf80:	4b09      	ldr	r3, [pc, #36]	; (800bfa8 <ip4_reass+0x210>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	429c      	cmp	r4, r3
 800bf86:	d006      	beq.n	800bf96 <ip4_reass+0x1fe>
 800bf88:	4b08      	ldr	r3, [pc, #32]	; (800bfac <ip4_reass+0x214>)
 800bf8a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800bf8e:	490b      	ldr	r1, [pc, #44]	; (800bfbc <ip4_reass+0x224>)
 800bf90:	4808      	ldr	r0, [pc, #32]	; (800bfb4 <ip4_reass+0x21c>)
 800bf92:	f006 f8eb 	bl	801216c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800bf96:	2100      	movs	r1, #0
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f7ff fcb9 	bl	800b910 <ip_reass_dequeue_datagram>
 800bf9e:	e7e0      	b.n	800bf62 <ip4_reass+0x1ca>
  return NULL;
 800bfa0:	2700      	movs	r7, #0
 800bfa2:	e7e2      	b.n	800bf6a <ip4_reass+0x1d2>
 800bfa4:	20006df0 	.word	0x20006df0
 800bfa8:	20006df4 	.word	0x20006df4
 800bfac:	080685cc 	.word	0x080685cc
 800bfb0:	080684f8 	.word	0x080684f8
 800bfb4:	0801335c 	.word	0x0801335c
 800bfb8:	08068514 	.word	0x08068514
 800bfbc:	08068520 	.word	0x08068520

0800bfc0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	b08b      	sub	sp, #44	; 0x2c
 800bfc6:	4605      	mov	r5, r0
 800bfc8:	9107      	str	r1, [sp, #28]
 800bfca:	9208      	str	r2, [sp, #32]
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800bfcc:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
 800bfce:	3b14      	subs	r3, #20
 800bfd0:	d421      	bmi.n	800c016 <ip4_frag+0x56>
 800bfd2:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 800bfd6:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800bfd8:	f8d5 b004 	ldr.w	fp, [r5, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800bfdc:	f89b 3000 	ldrb.w	r3, [fp]
 800bfe0:	f003 030f 	and.w	r3, r3, #15
 800bfe4:	2b05      	cmp	r3, #5
 800bfe6:	f040 80d8 	bne.w	800c19a <ip4_frag+0x1da>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800bfea:	896b      	ldrh	r3, [r5, #10]
 800bfec:	2b13      	cmp	r3, #19
 800bfee:	d914      	bls.n	800c01a <ip4_frag+0x5a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800bff0:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800bff4:	f7fd f8a0 	bl	8009138 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800bff8:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800bffc:	9305      	str	r3, [sp, #20]
 800bffe:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 800c002:	9309      	str	r3, [sp, #36]	; 0x24
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800c004:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800c008:	f1aa 0a14 	sub.w	sl, sl, #20
 800c00c:	fa1f f98a 	uxth.w	r9, sl
  u16_t poff = IP_HLEN;
 800c010:	2714      	movs	r7, #20
  u16_t newpbuflen = 0;
 800c012:	2400      	movs	r4, #0

  while (left) {
 800c014:	e093      	b.n	800c13e <ip4_frag+0x17e>
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c016:	3307      	adds	r3, #7
 800c018:	e7db      	b.n	800bfd2 <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c01a:	4b63      	ldr	r3, [pc, #396]	; (800c1a8 <ip4_frag+0x1e8>)
 800c01c:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800c020:	4962      	ldr	r1, [pc, #392]	; (800c1ac <ip4_frag+0x1ec>)
 800c022:	4863      	ldr	r0, [pc, #396]	; (800c1b0 <ip4_frag+0x1f0>)
 800c024:	f006 f8a2 	bl	801216c <iprintf>
 800c028:	f06f 0005 	mvn.w	r0, #5
 800c02c:	e043      	b.n	800c0b6 <ip4_frag+0xf6>
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c02e:	4b5e      	ldr	r3, [pc, #376]	; (800c1a8 <ip4_frag+0x1e8>)
 800c030:	f240 3225 	movw	r2, #805	; 0x325
 800c034:	495f      	ldr	r1, [pc, #380]	; (800c1b4 <ip4_frag+0x1f4>)
 800c036:	485e      	ldr	r0, [pc, #376]	; (800c1b0 <ip4_frag+0x1f0>)
 800c038:	f006 f898 	bl	801216c <iprintf>
 800c03c:	e095      	b.n	800c16a <ip4_frag+0x1aa>

    left_to_copy = fragsize;
    while (left_to_copy) {
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c03e:	4b5a      	ldr	r3, [pc, #360]	; (800c1a8 <ip4_frag+0x1e8>)
 800c040:	f240 322d 	movw	r2, #813	; 0x32d
 800c044:	495c      	ldr	r1, [pc, #368]	; (800c1b8 <ip4_frag+0x1f8>)
 800c046:	485a      	ldr	r0, [pc, #360]	; (800c1b0 <ip4_frag+0x1f0>)
 800c048:	f006 f890 	bl	801216c <iprintf>
 800c04c:	e026      	b.n	800c09c <ip4_frag+0xdc>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c04e:	f7ff fe57 	bl	800bd00 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 800c052:	4680      	mov	r8, r0
 800c054:	b350      	cbz	r0, 800c0ac <ip4_frag+0xec>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
                                    (u8_t *)p->payload + poff, newpbuflen);
 800c056:	686b      	ldr	r3, [r5, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c058:	443b      	add	r3, r7
 800c05a:	9401      	str	r4, [sp, #4]
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	4603      	mov	r3, r0
 800c060:	2241      	movs	r2, #65	; 0x41
 800c062:	4621      	mov	r1, r4
 800c064:	2000      	movs	r0, #0
 800c066:	f000 feaf 	bl	800cdc8 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800c06a:	9002      	str	r0, [sp, #8]
 800c06c:	b330      	cbz	r0, 800c0bc <ip4_frag+0xfc>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800c06e:	4628      	mov	r0, r5
 800c070:	f001 f886 	bl	800d180 <pbuf_ref>
      pcr->original = p;
 800c074:	f8c8 5014 	str.w	r5, [r8, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c078:	4b50      	ldr	r3, [pc, #320]	; (800c1bc <ip4_frag+0x1fc>)
 800c07a:	f8c8 3010 	str.w	r3, [r8, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c07e:	9902      	ldr	r1, [sp, #8]
 800c080:	9803      	ldr	r0, [sp, #12]
 800c082:	f001 f899 	bl	800d1b8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c086:	1b36      	subs	r6, r6, r4
 800c088:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 800c08a:	b10e      	cbz	r6, 800c090 <ip4_frag+0xd0>
        poff = 0;
        p = p->next;
 800c08c:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 800c08e:	2700      	movs	r7, #0
    while (left_to_copy) {
 800c090:	b1ee      	cbz	r6, 800c0ce <ip4_frag+0x10e>
      u16_t plen = (u16_t)(p->len - poff);
 800c092:	896b      	ldrh	r3, [r5, #10]
 800c094:	1bdc      	subs	r4, r3, r7
 800c096:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c098:	429f      	cmp	r7, r3
 800c09a:	d8d0      	bhi.n	800c03e <ip4_frag+0x7e>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c09c:	42b4      	cmp	r4, r6
 800c09e:	bf28      	it	cs
 800c0a0:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 800c0a2:	2c00      	cmp	r4, #0
 800c0a4:	d1d3      	bne.n	800c04e <ip4_frag+0x8e>
        p = p->next;
 800c0a6:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 800c0a8:	4627      	mov	r7, r4
        continue;
 800c0aa:	e7f1      	b.n	800c090 <ip4_frag+0xd0>
        pbuf_free(rambuf);
 800c0ac:	9803      	ldr	r0, [sp, #12]
 800c0ae:	f000 fef3 	bl	800ce98 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800c0b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c0b6:	b00b      	add	sp, #44	; 0x2c
 800c0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800c0bc:	4640      	mov	r0, r8
 800c0be:	f7ff fd0f 	bl	800bae0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c0c2:	9803      	ldr	r0, [sp, #12]
 800c0c4:	f000 fee8 	bl	800ce98 <pbuf_free>
  return ERR_MEM;
 800c0c8:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 800c0cc:	e7f3      	b.n	800c0b6 <ip4_frag+0xf6>
    poff = (u16_t)(poff + newpbuflen);
 800c0ce:	4427      	add	r7, r4
 800c0d0:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 800c0d2:	9b07      	ldr	r3, [sp, #28]
 800c0d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0d6:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 800c0d8:	9a05      	ldr	r2, [sp, #20]
 800c0da:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 800c0de:	4599      	cmp	r9, r3
 800c0e0:	dc01      	bgt.n	800c0e6 <ip4_frag+0x126>
 800c0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e4:	b10b      	cbz	r3, 800c0ea <ip4_frag+0x12a>
      tmp = tmp | IP_MF;
 800c0e6:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c0ea:	f7fd f825 	bl	8009138 <lwip_htons>
 800c0ee:	f8aa 0006 	strh.w	r0, [sl, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c0f2:	9e04      	ldr	r6, [sp, #16]
 800c0f4:	f106 0014 	add.w	r0, r6, #20
 800c0f8:	b280      	uxth	r0, r0
 800c0fa:	f7fd f81d 	bl	8009138 <lwip_htons>
 800c0fe:	f8aa 0002 	strh.w	r0, [sl, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c102:	2300      	movs	r3, #0
 800c104:	f88a 300a 	strb.w	r3, [sl, #10]
 800c108:	f88a 300b 	strb.w	r3, [sl, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 800c10c:	2114      	movs	r1, #20
 800c10e:	4650      	mov	r0, sl
 800c110:	f7fd f930 	bl	8009374 <inet_chksum>
 800c114:	f8aa 000a 	strh.w	r0, [sl, #10]
    netif->output(netif, rambuf, dest);
 800c118:	9807      	ldr	r0, [sp, #28]
 800c11a:	6943      	ldr	r3, [r0, #20]
 800c11c:	9a08      	ldr	r2, [sp, #32]
 800c11e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c122:	4641      	mov	r1, r8
 800c124:	4798      	blx	r3
    pbuf_free(rambuf);
 800c126:	4640      	mov	r0, r8
 800c128:	f000 feb6 	bl	800ce98 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800c12c:	eba9 0306 	sub.w	r3, r9, r6
 800c130:	fa1f f983 	uxth.w	r9, r3
    ofo = (u16_t)(ofo + nfb);
 800c134:	9b05      	ldr	r3, [sp, #20]
 800c136:	9a06      	ldr	r2, [sp, #24]
 800c138:	4413      	add	r3, r2
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	9305      	str	r3, [sp, #20]
  while (left) {
 800c13e:	f1b9 0f00 	cmp.w	r9, #0
 800c142:	d028      	beq.n	800c196 <ip4_frag+0x1d6>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c144:	9b06      	ldr	r3, [sp, #24]
 800c146:	00db      	lsls	r3, r3, #3
 800c148:	b29b      	uxth	r3, r3
 800c14a:	454b      	cmp	r3, r9
 800c14c:	bf28      	it	cs
 800c14e:	464b      	movcs	r3, r9
 800c150:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c152:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c156:	2114      	movs	r1, #20
 800c158:	200e      	movs	r0, #14
 800c15a:	f000 ff07 	bl	800cf6c <pbuf_alloc>
    if (rambuf == NULL) {
 800c15e:	9003      	str	r0, [sp, #12]
 800c160:	b1f0      	cbz	r0, 800c1a0 <ip4_frag+0x1e0>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c162:	8943      	ldrh	r3, [r0, #10]
 800c164:	2b13      	cmp	r3, #19
 800c166:	f67f af62 	bls.w	800c02e <ip4_frag+0x6e>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c16a:	9b03      	ldr	r3, [sp, #12]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	f8db 2000 	ldr.w	r2, [fp]
 800c172:	f8db 6004 	ldr.w	r6, [fp, #4]
 800c176:	f8db 0008 	ldr.w	r0, [fp, #8]
 800c17a:	f8db 100c 	ldr.w	r1, [fp, #12]
 800c17e:	601a      	str	r2, [r3, #0]
 800c180:	605e      	str	r6, [r3, #4]
 800c182:	6098      	str	r0, [r3, #8]
 800c184:	60d9      	str	r1, [r3, #12]
 800c186:	f8db 2010 	ldr.w	r2, [fp, #16]
 800c18a:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c18c:	9b03      	ldr	r3, [sp, #12]
 800c18e:	f8d3 a004 	ldr.w	sl, [r3, #4]
    left_to_copy = fragsize;
 800c192:	9e04      	ldr	r6, [sp, #16]
    while (left_to_copy) {
 800c194:	e77c      	b.n	800c090 <ip4_frag+0xd0>
  return ERR_OK;
 800c196:	2000      	movs	r0, #0
 800c198:	e78d      	b.n	800c0b6 <ip4_frag+0xf6>
    return ERR_VAL;
 800c19a:	f06f 0005 	mvn.w	r0, #5
 800c19e:	e78a      	b.n	800c0b6 <ip4_frag+0xf6>
  return ERR_MEM;
 800c1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a4:	e787      	b.n	800c0b6 <ip4_frag+0xf6>
 800c1a6:	bf00      	nop
 800c1a8:	080685cc 	.word	0x080685cc
 800c1ac:	080684ac 	.word	0x080684ac
 800c1b0:	0801335c 	.word	0x0801335c
 800c1b4:	080684c8 	.word	0x080684c8
 800c1b8:	080684e8 	.word	0x080684e8
 800c1bc:	0800bb0d 	.word	0x0800bb0d

0800c1c0 <ptr_to_mem>:
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
  return (struct mem *)(void *)&ram[ptr];
 800c1c0:	4b01      	ldr	r3, [pc, #4]	; (800c1c8 <ptr_to_mem+0x8>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
}
 800c1c4:	4418      	add	r0, r3
 800c1c6:	4770      	bx	lr
 800c1c8:	20006e00 	.word	0x20006e00

0800c1cc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
  return (mem_size_t)((u8_t *)mem - ram);
 800c1cc:	4b02      	ldr	r3, [pc, #8]	; (800c1d8 <mem_to_ptr+0xc>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	1ac0      	subs	r0, r0, r3
}
 800c1d2:	b280      	uxth	r0, r0
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	20006e00 	.word	0x20006e00

0800c1dc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1de:	4605      	mov	r5, r0
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c1e0:	f7ff fff4 	bl	800c1cc <mem_to_ptr>
 800c1e4:	4606      	mov	r6, r0
  nmem = ptr_to_mem(mem->next);
 800c1e6:	882c      	ldrh	r4, [r5, #0]
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f7ff ffe9 	bl	800c1c0 <ptr_to_mem>
 800c1ee:	4607      	mov	r7, r0
  pmem = ptr_to_mem(mem->prev);
 800c1f0:	886d      	ldrh	r5, [r5, #2]
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	f7ff ffe4 	bl	800c1c0 <ptr_to_mem>
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c1f8:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 800c1fc:	d814      	bhi.n	800c228 <mem_link_valid+0x4c>
 800c1fe:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 800c202:	d813      	bhi.n	800c22c <mem_link_valid+0x50>
 800c204:	42ae      	cmp	r6, r5
 800c206:	d004      	beq.n	800c212 <mem_link_valid+0x36>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c208:	8803      	ldrh	r3, [r0, #0]
 800c20a:	429e      	cmp	r6, r3
 800c20c:	d001      	beq.n	800c212 <mem_link_valid+0x36>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
    return 0;
 800c20e:	2000      	movs	r0, #0
 800c210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c212:	4b08      	ldr	r3, [pc, #32]	; (800c234 <mem_link_valid+0x58>)
 800c214:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c216:	429f      	cmp	r7, r3
 800c218:	d00a      	beq.n	800c230 <mem_link_valid+0x54>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c21a:	887b      	ldrh	r3, [r7, #2]
 800c21c:	429e      	cmp	r6, r3
 800c21e:	d001      	beq.n	800c224 <mem_link_valid+0x48>
    return 0;
 800c220:	2000      	movs	r0, #0
  }
  return 1;
}
 800c222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 1;
 800c224:	2001      	movs	r0, #1
 800c226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
 800c228:	2000      	movs	r0, #0
 800c22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c22c:	2000      	movs	r0, #0
 800c22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 1;
 800c230:	2001      	movs	r0, #1
 800c232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c234:	20006e04 	.word	0x20006e04

0800c238 <plug_holes>:
{
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	4604      	mov	r4, r0
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c23c:	4b35      	ldr	r3, [pc, #212]	; (800c314 <plug_holes+0xdc>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4283      	cmp	r3, r0
 800c242:	d840      	bhi.n	800c2c6 <plug_holes+0x8e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c244:	4b34      	ldr	r3, [pc, #208]	; (800c318 <plug_holes+0xe0>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	429c      	cmp	r4, r3
 800c24a:	d244      	bcs.n	800c2d6 <plug_holes+0x9e>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c24c:	7923      	ldrb	r3, [r4, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d149      	bne.n	800c2e6 <plug_holes+0xae>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c252:	8823      	ldrh	r3, [r4, #0]
 800c254:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c258:	d84d      	bhi.n	800c2f6 <plug_holes+0xbe>
  nmem = ptr_to_mem(mem->next);
 800c25a:	8820      	ldrh	r0, [r4, #0]
 800c25c:	f7ff ffb0 	bl	800c1c0 <ptr_to_mem>
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c260:	4284      	cmp	r4, r0
 800c262:	d016      	beq.n	800c292 <plug_holes+0x5a>
 800c264:	7903      	ldrb	r3, [r0, #4]
 800c266:	b9a3      	cbnz	r3, 800c292 <plug_holes+0x5a>
 800c268:	4b2b      	ldr	r3, [pc, #172]	; (800c318 <plug_holes+0xe0>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4298      	cmp	r0, r3
 800c26e:	d010      	beq.n	800c292 <plug_holes+0x5a>
    if (lfree == nmem) {
 800c270:	4b2a      	ldr	r3, [pc, #168]	; (800c31c <plug_holes+0xe4>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4298      	cmp	r0, r3
 800c276:	d046      	beq.n	800c306 <plug_holes+0xce>
    mem->next = nmem->next;
 800c278:	8803      	ldrh	r3, [r0, #0]
 800c27a:	8023      	strh	r3, [r4, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c27c:	8800      	ldrh	r0, [r0, #0]
 800c27e:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 800c282:	d006      	beq.n	800c292 <plug_holes+0x5a>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c284:	f7ff ff9c 	bl	800c1c0 <ptr_to_mem>
 800c288:	4605      	mov	r5, r0
 800c28a:	4620      	mov	r0, r4
 800c28c:	f7ff ff9e 	bl	800c1cc <mem_to_ptr>
 800c290:	8068      	strh	r0, [r5, #2]
  pmem = ptr_to_mem(mem->prev);
 800c292:	8860      	ldrh	r0, [r4, #2]
 800c294:	f7ff ff94 	bl	800c1c0 <ptr_to_mem>
 800c298:	4605      	mov	r5, r0
  if (pmem != mem && pmem->used == 0) {
 800c29a:	4284      	cmp	r4, r0
 800c29c:	d012      	beq.n	800c2c4 <plug_holes+0x8c>
 800c29e:	7903      	ldrb	r3, [r0, #4]
 800c2a0:	b983      	cbnz	r3, 800c2c4 <plug_holes+0x8c>
    if (lfree == mem) {
 800c2a2:	4b1e      	ldr	r3, [pc, #120]	; (800c31c <plug_holes+0xe4>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	429c      	cmp	r4, r3
 800c2a8:	d030      	beq.n	800c30c <plug_holes+0xd4>
    pmem->next = mem->next;
 800c2aa:	8823      	ldrh	r3, [r4, #0]
 800c2ac:	802b      	strh	r3, [r5, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c2ae:	8820      	ldrh	r0, [r4, #0]
 800c2b0:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 800c2b4:	d006      	beq.n	800c2c4 <plug_holes+0x8c>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c2b6:	f7ff ff83 	bl	800c1c0 <ptr_to_mem>
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	4628      	mov	r0, r5
 800c2be:	f7ff ff85 	bl	800c1cc <mem_to_ptr>
 800c2c2:	8060      	strh	r0, [r4, #2]
 800c2c4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c2c6:	4b16      	ldr	r3, [pc, #88]	; (800c320 <plug_holes+0xe8>)
 800c2c8:	f240 12df 	movw	r2, #479	; 0x1df
 800c2cc:	4915      	ldr	r1, [pc, #84]	; (800c324 <plug_holes+0xec>)
 800c2ce:	4816      	ldr	r0, [pc, #88]	; (800c328 <plug_holes+0xf0>)
 800c2d0:	f005 ff4c 	bl	801216c <iprintf>
 800c2d4:	e7b6      	b.n	800c244 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c2d6:	4b12      	ldr	r3, [pc, #72]	; (800c320 <plug_holes+0xe8>)
 800c2d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c2dc:	4913      	ldr	r1, [pc, #76]	; (800c32c <plug_holes+0xf4>)
 800c2de:	4812      	ldr	r0, [pc, #72]	; (800c328 <plug_holes+0xf0>)
 800c2e0:	f005 ff44 	bl	801216c <iprintf>
 800c2e4:	e7b2      	b.n	800c24c <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c2e6:	4b0e      	ldr	r3, [pc, #56]	; (800c320 <plug_holes+0xe8>)
 800c2e8:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c2ec:	4910      	ldr	r1, [pc, #64]	; (800c330 <plug_holes+0xf8>)
 800c2ee:	480e      	ldr	r0, [pc, #56]	; (800c328 <plug_holes+0xf0>)
 800c2f0:	f005 ff3c 	bl	801216c <iprintf>
 800c2f4:	e7ad      	b.n	800c252 <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c2f6:	4b0a      	ldr	r3, [pc, #40]	; (800c320 <plug_holes+0xe8>)
 800c2f8:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c2fc:	490d      	ldr	r1, [pc, #52]	; (800c334 <plug_holes+0xfc>)
 800c2fe:	480a      	ldr	r0, [pc, #40]	; (800c328 <plug_holes+0xf0>)
 800c300:	f005 ff34 	bl	801216c <iprintf>
 800c304:	e7a9      	b.n	800c25a <plug_holes+0x22>
      lfree = mem;
 800c306:	4b05      	ldr	r3, [pc, #20]	; (800c31c <plug_holes+0xe4>)
 800c308:	601c      	str	r4, [r3, #0]
 800c30a:	e7b5      	b.n	800c278 <plug_holes+0x40>
      lfree = pmem;
 800c30c:	4b03      	ldr	r3, [pc, #12]	; (800c31c <plug_holes+0xe4>)
 800c30e:	6018      	str	r0, [r3, #0]
 800c310:	e7cb      	b.n	800c2aa <plug_holes+0x72>
 800c312:	bf00      	nop
 800c314:	20006e00 	.word	0x20006e00
 800c318:	20006e04 	.word	0x20006e04
 800c31c:	20006df8 	.word	0x20006df8
 800c320:	08068840 	.word	0x08068840
 800c324:	08068878 	.word	0x08068878
 800c328:	0801335c 	.word	0x0801335c
 800c32c:	08068890 	.word	0x08068890
 800c330:	080688ac 	.word	0x080688ac
 800c334:	080688c8 	.word	0x080688c8

0800c338 <mem_init>:
{
 800c338:	b538      	push	{r3, r4, r5, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c33a:	4c11      	ldr	r4, [pc, #68]	; (800c380 <mem_init+0x48>)
 800c33c:	f024 0403 	bic.w	r4, r4, #3
 800c340:	4b10      	ldr	r3, [pc, #64]	; (800c384 <mem_init+0x4c>)
 800c342:	601c      	str	r4, [r3, #0]
  mem->next = MEM_SIZE_ALIGNED;
 800c344:	f44f 5520 	mov.w	r5, #10240	; 0x2800
 800c348:	8025      	strh	r5, [r4, #0]
  mem->prev = 0;
 800c34a:	2300      	movs	r3, #0
 800c34c:	8063      	strh	r3, [r4, #2]
  mem->used = 0;
 800c34e:	7123      	strb	r3, [r4, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c350:	4628      	mov	r0, r5
 800c352:	f7ff ff35 	bl	800c1c0 <ptr_to_mem>
 800c356:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <mem_init+0x50>)
 800c358:	6018      	str	r0, [r3, #0]
  ram_end->used = 1;
 800c35a:	2301      	movs	r3, #1
 800c35c:	7103      	strb	r3, [r0, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c35e:	8005      	strh	r5, [r0, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c360:	8045      	strh	r5, [r0, #2]
  lfree = (struct mem *)(void *)ram;
 800c362:	4b0a      	ldr	r3, [pc, #40]	; (800c38c <mem_init+0x54>)
 800c364:	601c      	str	r4, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c366:	480a      	ldr	r0, [pc, #40]	; (800c390 <mem_init+0x58>)
 800c368:	f005 fe08 	bl	8011f7c <sys_mutex_new>
 800c36c:	b900      	cbnz	r0, 800c370 <mem_init+0x38>
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c370:	4b08      	ldr	r3, [pc, #32]	; (800c394 <mem_init+0x5c>)
 800c372:	f240 221f 	movw	r2, #543	; 0x21f
 800c376:	4908      	ldr	r1, [pc, #32]	; (800c398 <mem_init+0x60>)
 800c378:	4808      	ldr	r0, [pc, #32]	; (800c39c <mem_init+0x64>)
 800c37a:	f005 fef7 	bl	801216c <iprintf>
}
 800c37e:	e7f6      	b.n	800c36e <mem_init+0x36>
 800c380:	20007327 	.word	0x20007327
 800c384:	20006e00 	.word	0x20006e00
 800c388:	20006e04 	.word	0x20006e04
 800c38c:	20006df8 	.word	0x20006df8
 800c390:	20006dfc 	.word	0x20006dfc
 800c394:	08068840 	.word	0x08068840
 800c398:	08068738 	.word	0x08068738
 800c39c:	0801335c 	.word	0x0801335c

0800c3a0 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	d060      	beq.n	800c466 <mem_free+0xc6>
{
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c3a8:	f010 0f03 	tst.w	r0, #3
 800c3ac:	d117      	bne.n	800c3de <mem_free+0x3e>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c3ae:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c3b2:	4b2d      	ldr	r3, [pc, #180]	; (800c468 <mem_free+0xc8>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	429d      	cmp	r5, r3
 800c3b8:	d305      	bcc.n	800c3c6 <mem_free+0x26>
 800c3ba:	f100 030c 	add.w	r3, r0, #12
 800c3be:	4a2b      	ldr	r2, [pc, #172]	; (800c46c <mem_free+0xcc>)
 800c3c0:	6812      	ldr	r2, [r2, #0]
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d917      	bls.n	800c3f6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c3c6:	4b2a      	ldr	r3, [pc, #168]	; (800c470 <mem_free+0xd0>)
 800c3c8:	f240 227f 	movw	r2, #639	; 0x27f
 800c3cc:	4929      	ldr	r1, [pc, #164]	; (800c474 <mem_free+0xd4>)
 800c3ce:	482a      	ldr	r0, [pc, #168]	; (800c478 <mem_free+0xd8>)
 800c3d0:	f005 fecc 	bl	801216c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c3d4:	f005 fe02 	bl	8011fdc <sys_arch_protect>
 800c3d8:	f005 fe0c 	bl	8011ff4 <sys_arch_unprotect>
    return;
 800c3dc:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c3de:	4b24      	ldr	r3, [pc, #144]	; (800c470 <mem_free+0xd0>)
 800c3e0:	f240 2273 	movw	r2, #627	; 0x273
 800c3e4:	4925      	ldr	r1, [pc, #148]	; (800c47c <mem_free+0xdc>)
 800c3e6:	4824      	ldr	r0, [pc, #144]	; (800c478 <mem_free+0xd8>)
 800c3e8:	f005 fec0 	bl	801216c <iprintf>
    MEM_STATS_INC_LOCKED(illegal);
 800c3ec:	f005 fdf6 	bl	8011fdc <sys_arch_protect>
 800c3f0:	f005 fe00 	bl	8011ff4 <sys_arch_unprotect>
    return;
 800c3f4:	bd38      	pop	{r3, r4, r5, pc}
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c3f6:	4822      	ldr	r0, [pc, #136]	; (800c480 <mem_free+0xe0>)
 800c3f8:	f005 fdd1 	bl	8011f9e <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c3fc:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800c400:	b19b      	cbz	r3, 800c42a <mem_free+0x8a>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 800c402:	4628      	mov	r0, r5
 800c404:	f7ff feea 	bl	800c1dc <mem_link_valid>
 800c408:	b1f0      	cbz	r0, 800c448 <mem_free+0xa8>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 800c410:	4b1c      	ldr	r3, [pc, #112]	; (800c484 <mem_free+0xe4>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	429d      	cmp	r5, r3
 800c416:	d201      	bcs.n	800c41c <mem_free+0x7c>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c418:	4b1a      	ldr	r3, [pc, #104]	; (800c484 <mem_free+0xe4>)
 800c41a:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c41c:	4628      	mov	r0, r5
 800c41e:	f7ff ff0b 	bl	800c238 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c422:	4817      	ldr	r0, [pc, #92]	; (800c480 <mem_free+0xe0>)
 800c424:	f005 fdc2 	bl	8011fac <sys_mutex_unlock>
 800c428:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c42a:	4b11      	ldr	r3, [pc, #68]	; (800c470 <mem_free+0xd0>)
 800c42c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c430:	4915      	ldr	r1, [pc, #84]	; (800c488 <mem_free+0xe8>)
 800c432:	4811      	ldr	r0, [pc, #68]	; (800c478 <mem_free+0xd8>)
 800c434:	f005 fe9a 	bl	801216c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c438:	4811      	ldr	r0, [pc, #68]	; (800c480 <mem_free+0xe0>)
 800c43a:	f005 fdb7 	bl	8011fac <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800c43e:	f005 fdcd 	bl	8011fdc <sys_arch_protect>
 800c442:	f005 fdd7 	bl	8011ff4 <sys_arch_unprotect>
    return;
 800c446:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c448:	4b09      	ldr	r3, [pc, #36]	; (800c470 <mem_free+0xd0>)
 800c44a:	f240 2295 	movw	r2, #661	; 0x295
 800c44e:	490f      	ldr	r1, [pc, #60]	; (800c48c <mem_free+0xec>)
 800c450:	4809      	ldr	r0, [pc, #36]	; (800c478 <mem_free+0xd8>)
 800c452:	f005 fe8b 	bl	801216c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c456:	480a      	ldr	r0, [pc, #40]	; (800c480 <mem_free+0xe0>)
 800c458:	f005 fda8 	bl	8011fac <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800c45c:	f005 fdbe 	bl	8011fdc <sys_arch_protect>
 800c460:	f005 fdc8 	bl	8011ff4 <sys_arch_unprotect>
    return;
 800c464:	bd38      	pop	{r3, r4, r5, pc}
 800c466:	4770      	bx	lr
 800c468:	20006e00 	.word	0x20006e00
 800c46c:	20006e04 	.word	0x20006e04
 800c470:	08068840 	.word	0x08068840
 800c474:	080686c0 	.word	0x080686c0
 800c478:	0801335c 	.word	0x0801335c
 800c47c:	0806869c 	.word	0x0806869c
 800c480:	20006dfc 	.word	0x20006dfc
 800c484:	20006df8 	.word	0x20006df8
 800c488:	080686dc 	.word	0x080686dc
 800c48c:	08068704 	.word	0x08068704

0800c490 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c494:	1ccc      	adds	r4, r1, #3
 800c496:	b2a4      	uxth	r4, r4
 800c498:	f024 0403 	bic.w	r4, r4, #3
 800c49c:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 800c49e:	2c0b      	cmp	r4, #11
 800c4a0:	d800      	bhi.n	800c4a4 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c4a2:	240c      	movs	r4, #12
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c4a4:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 800c4a8:	f200 80a8 	bhi.w	800c5fc <mem_trim+0x16c>
 800c4ac:	428c      	cmp	r4, r1
 800c4ae:	f0c0 80a8 	bcc.w	800c602 <mem_trim+0x172>
 800c4b2:	4605      	mov	r5, r0
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c4b4:	4b57      	ldr	r3, [pc, #348]	; (800c614 <mem_trim+0x184>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4283      	cmp	r3, r0
 800c4ba:	d803      	bhi.n	800c4c4 <mem_trim+0x34>
 800c4bc:	4b56      	ldr	r3, [pc, #344]	; (800c618 <mem_trim+0x188>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4298      	cmp	r0, r3
 800c4c2:	d306      	bcc.n	800c4d2 <mem_trim+0x42>
 800c4c4:	4b55      	ldr	r3, [pc, #340]	; (800c61c <mem_trim+0x18c>)
 800c4c6:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c4ca:	4955      	ldr	r1, [pc, #340]	; (800c620 <mem_trim+0x190>)
 800c4cc:	4855      	ldr	r0, [pc, #340]	; (800c624 <mem_trim+0x194>)
 800c4ce:	f005 fe4d 	bl	801216c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c4d2:	4b50      	ldr	r3, [pc, #320]	; (800c614 <mem_trim+0x184>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	429d      	cmp	r5, r3
 800c4d8:	d347      	bcc.n	800c56a <mem_trim+0xda>
 800c4da:	4b4f      	ldr	r3, [pc, #316]	; (800c618 <mem_trim+0x188>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	429d      	cmp	r5, r3
 800c4e0:	d243      	bcs.n	800c56a <mem_trim+0xda>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c4e2:	f1a5 0008 	sub.w	r0, r5, #8
 800c4e6:	f7ff fe71 	bl	800c1cc <mem_to_ptr>
 800c4ea:	4606      	mov	r6, r0

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c4ec:	f835 8c08 	ldrh.w	r8, [r5, #-8]
 800c4f0:	eba8 0800 	sub.w	r8, r8, r0
 800c4f4:	fa1f f888 	uxth.w	r8, r8
 800c4f8:	f1a8 0808 	sub.w	r8, r8, #8
 800c4fc:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c500:	4544      	cmp	r4, r8
 800c502:	d839      	bhi.n	800c578 <mem_trim+0xe8>
  if (newsize > size) {
 800c504:	4544      	cmp	r4, r8
 800c506:	d87f      	bhi.n	800c608 <mem_trim+0x178>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800c508:	f000 8081 	beq.w	800c60e <mem_trim+0x17e>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c50c:	4846      	ldr	r0, [pc, #280]	; (800c628 <mem_trim+0x198>)
 800c50e:	f005 fd46 	bl	8011f9e <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c512:	f835 7c08 	ldrh.w	r7, [r5, #-8]
 800c516:	4638      	mov	r0, r7
 800c518:	f7ff fe52 	bl	800c1c0 <ptr_to_mem>
 800c51c:	4681      	mov	r9, r0
  if (mem2->used == 0) {
 800c51e:	7903      	ldrb	r3, [r0, #4]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d13f      	bne.n	800c5a4 <mem_trim+0x114>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c524:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 800c528:	d02e      	beq.n	800c588 <mem_trim+0xf8>
    /* remember the old next pointer */
    next = mem2->next;
 800c52a:	f8b9 7000 	ldrh.w	r7, [r9]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c52e:	4434      	add	r4, r6
 800c530:	b2a4      	uxth	r4, r4
 800c532:	3408      	adds	r4, #8
 800c534:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 800c536:	4b3d      	ldr	r3, [pc, #244]	; (800c62c <mem_trim+0x19c>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4599      	cmp	r9, r3
 800c53c:	d02c      	beq.n	800c598 <mem_trim+0x108>
      lfree = ptr_to_mem(ptr2);
    }
    mem2 = ptr_to_mem(ptr2);
 800c53e:	4620      	mov	r0, r4
 800c540:	f7ff fe3e 	bl	800c1c0 <ptr_to_mem>
    mem2->used = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	7103      	strb	r3, [r0, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c548:	8007      	strh	r7, [r0, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c54a:	8046      	strh	r6, [r0, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c54c:	f825 4c08 	strh.w	r4, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c550:	8800      	ldrh	r0, [r0, #0]
 800c552:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 800c556:	d002      	beq.n	800c55e <mem_trim+0xce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c558:	f7ff fe32 	bl	800c1c0 <ptr_to_mem>
 800c55c:	8044      	strh	r4, [r0, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c55e:	4832      	ldr	r0, [pc, #200]	; (800c628 <mem_trim+0x198>)
 800c560:	f005 fd24 	bl	8011fac <sys_mutex_unlock>
  return rmem;
 800c564:	4628      	mov	r0, r5
 800c566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    MEM_STATS_INC_LOCKED(illegal);
 800c56a:	f005 fd37 	bl	8011fdc <sys_arch_protect>
 800c56e:	f005 fd41 	bl	8011ff4 <sys_arch_unprotect>
    return rmem;
 800c572:	4628      	mov	r0, r5
 800c574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c578:	4b28      	ldr	r3, [pc, #160]	; (800c61c <mem_trim+0x18c>)
 800c57a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c57e:	492c      	ldr	r1, [pc, #176]	; (800c630 <mem_trim+0x1a0>)
 800c580:	4828      	ldr	r0, [pc, #160]	; (800c624 <mem_trim+0x194>)
 800c582:	f005 fdf3 	bl	801216c <iprintf>
 800c586:	e7bd      	b.n	800c504 <mem_trim+0x74>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c588:	4b24      	ldr	r3, [pc, #144]	; (800c61c <mem_trim+0x18c>)
 800c58a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c58e:	4929      	ldr	r1, [pc, #164]	; (800c634 <mem_trim+0x1a4>)
 800c590:	4824      	ldr	r0, [pc, #144]	; (800c624 <mem_trim+0x194>)
 800c592:	f005 fdeb 	bl	801216c <iprintf>
 800c596:	e7c8      	b.n	800c52a <mem_trim+0x9a>
      lfree = ptr_to_mem(ptr2);
 800c598:	4620      	mov	r0, r4
 800c59a:	f7ff fe11 	bl	800c1c0 <ptr_to_mem>
 800c59e:	4b23      	ldr	r3, [pc, #140]	; (800c62c <mem_trim+0x19c>)
 800c5a0:	6018      	str	r0, [r3, #0]
 800c5a2:	e7cc      	b.n	800c53e <mem_trim+0xae>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c5a4:	f104 0314 	add.w	r3, r4, #20
 800c5a8:	4543      	cmp	r3, r8
 800c5aa:	d8d8      	bhi.n	800c55e <mem_trim+0xce>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c5ac:	4434      	add	r4, r6
 800c5ae:	b2a4      	uxth	r4, r4
 800c5b0:	3408      	adds	r4, #8
 800c5b2:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c5b4:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 800c5b8:	d018      	beq.n	800c5ec <mem_trim+0x15c>
    mem2 = ptr_to_mem(ptr2);
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f7ff fe00 	bl	800c1c0 <ptr_to_mem>
    if (mem2 < lfree) {
 800c5c0:	4b1a      	ldr	r3, [pc, #104]	; (800c62c <mem_trim+0x19c>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4298      	cmp	r0, r3
 800c5c6:	d201      	bcs.n	800c5cc <mem_trim+0x13c>
      lfree = mem2;
 800c5c8:	4b18      	ldr	r3, [pc, #96]	; (800c62c <mem_trim+0x19c>)
 800c5ca:	6018      	str	r0, [r3, #0]
    mem2->used = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	7103      	strb	r3, [r0, #4]
    mem2->next = mem->next;
 800c5d0:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 800c5d4:	8003      	strh	r3, [r0, #0]
    mem2->prev = ptr;
 800c5d6:	8046      	strh	r6, [r0, #2]
    mem->next = ptr2;
 800c5d8:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c5dc:	8800      	ldrh	r0, [r0, #0]
 800c5de:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 800c5e2:	d0bc      	beq.n	800c55e <mem_trim+0xce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c5e4:	f7ff fdec 	bl	800c1c0 <ptr_to_mem>
 800c5e8:	8044      	strh	r4, [r0, #2]
 800c5ea:	e7b8      	b.n	800c55e <mem_trim+0xce>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c5ec:	4b0b      	ldr	r3, [pc, #44]	; (800c61c <mem_trim+0x18c>)
 800c5ee:	f240 3216 	movw	r2, #790	; 0x316
 800c5f2:	4910      	ldr	r1, [pc, #64]	; (800c634 <mem_trim+0x1a4>)
 800c5f4:	480b      	ldr	r0, [pc, #44]	; (800c624 <mem_trim+0x194>)
 800c5f6:	f005 fdb9 	bl	801216c <iprintf>
 800c5fa:	e7de      	b.n	800c5ba <mem_trim+0x12a>
    return NULL;
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c602:	2000      	movs	r0, #0
 800c604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 800c608:	2000      	movs	r0, #0
 800c60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return rmem;
 800c60e:	4628      	mov	r0, r5
}
 800c610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c614:	20006e00 	.word	0x20006e00
 800c618:	20006e04 	.word	0x20006e04
 800c61c:	08068840 	.word	0x08068840
 800c620:	080687f4 	.word	0x080687f4
 800c624:	0801335c 	.word	0x0801335c
 800c628:	20006dfc 	.word	0x20006dfc
 800c62c:	20006df8 	.word	0x20006df8
 800c630:	0806880c 	.word	0x0806880c
 800c634:	0806882c 	.word	0x0806882c

0800c638 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c638:	2800      	cmp	r0, #0
 800c63a:	f000 80a3 	beq.w	800c784 <mem_malloc+0x14c>
{
 800c63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c642:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c644:	1cc6      	adds	r6, r0, #3
 800c646:	b2b6      	uxth	r6, r6
 800c648:	f026 0603 	bic.w	r6, r6, #3
 800c64c:	b2b6      	uxth	r6, r6
  if (size < MIN_SIZE_ALIGNED) {
 800c64e:	2e0b      	cmp	r6, #11
 800c650:	d800      	bhi.n	800c654 <mem_malloc+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c652:	260c      	movs	r6, #12
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c654:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 800c658:	f200 8096 	bhi.w	800c788 <mem_malloc+0x150>
 800c65c:	429e      	cmp	r6, r3
 800c65e:	f0c0 8096 	bcc.w	800c78e <mem_malloc+0x156>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c662:	484c      	ldr	r0, [pc, #304]	; (800c794 <mem_malloc+0x15c>)
 800c664:	f005 fc9b 	bl	8011f9e <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c668:	4b4b      	ldr	r3, [pc, #300]	; (800c798 <mem_malloc+0x160>)
 800c66a:	6818      	ldr	r0, [r3, #0]
 800c66c:	f7ff fdae 	bl	800c1cc <mem_to_ptr>
 800c670:	4604      	mov	r4, r0
 800c672:	e050      	b.n	800c716 <mem_malloc+0xde>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c674:	4b49      	ldr	r3, [pc, #292]	; (800c79c <mem_malloc+0x164>)
 800c676:	f240 3287 	movw	r2, #903	; 0x387
 800c67a:	4949      	ldr	r1, [pc, #292]	; (800c7a0 <mem_malloc+0x168>)
 800c67c:	4849      	ldr	r0, [pc, #292]	; (800c7a4 <mem_malloc+0x16c>)
 800c67e:	f005 fd75 	bl	801216c <iprintf>
 800c682:	e066      	b.n	800c752 <mem_malloc+0x11a>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c684:	2301      	movs	r3, #1
 800c686:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c688:	4b43      	ldr	r3, [pc, #268]	; (800c798 <mem_malloc+0x160>)
 800c68a:	6818      	ldr	r0, [r3, #0]
 800c68c:	4285      	cmp	r5, r0
 800c68e:	d013      	beq.n	800c6b8 <mem_malloc+0x80>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c690:	4840      	ldr	r0, [pc, #256]	; (800c794 <mem_malloc+0x15c>)
 800c692:	f005 fc8b 	bl	8011fac <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c696:	442f      	add	r7, r5
 800c698:	3708      	adds	r7, #8
 800c69a:	4b43      	ldr	r3, [pc, #268]	; (800c7a8 <mem_malloc+0x170>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	429f      	cmp	r7, r3
 800c6a0:	d820      	bhi.n	800c6e4 <mem_malloc+0xac>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c6a2:	f015 0403 	ands.w	r4, r5, #3
 800c6a6:	d125      	bne.n	800c6f4 <mem_malloc+0xbc>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c6a8:	bb64      	cbnz	r4, 800c704 <mem_malloc+0xcc>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c6aa:	f105 0008 	add.w	r0, r5, #8
 800c6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            cur = ptr_to_mem(cur->next);
 800c6b2:	8800      	ldrh	r0, [r0, #0]
 800c6b4:	f7ff fd84 	bl	800c1c0 <ptr_to_mem>
          while (cur->used && cur != ram_end) {
 800c6b8:	7903      	ldrb	r3, [r0, #4]
 800c6ba:	b11b      	cbz	r3, 800c6c4 <mem_malloc+0x8c>
 800c6bc:	4a3a      	ldr	r2, [pc, #232]	; (800c7a8 <mem_malloc+0x170>)
 800c6be:	6812      	ldr	r2, [r2, #0]
 800c6c0:	4290      	cmp	r0, r2
 800c6c2:	d1f6      	bne.n	800c6b2 <mem_malloc+0x7a>
          lfree = cur;
 800c6c4:	4a34      	ldr	r2, [pc, #208]	; (800c798 <mem_malloc+0x160>)
 800c6c6:	6010      	str	r0, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c6c8:	4a37      	ldr	r2, [pc, #220]	; (800c7a8 <mem_malloc+0x170>)
 800c6ca:	6812      	ldr	r2, [r2, #0]
 800c6cc:	4290      	cmp	r0, r2
 800c6ce:	d0df      	beq.n	800c690 <mem_malloc+0x58>
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d0dd      	beq.n	800c690 <mem_malloc+0x58>
 800c6d4:	4b31      	ldr	r3, [pc, #196]	; (800c79c <mem_malloc+0x164>)
 800c6d6:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c6da:	4934      	ldr	r1, [pc, #208]	; (800c7ac <mem_malloc+0x174>)
 800c6dc:	4831      	ldr	r0, [pc, #196]	; (800c7a4 <mem_malloc+0x16c>)
 800c6de:	f005 fd45 	bl	801216c <iprintf>
 800c6e2:	e7d5      	b.n	800c690 <mem_malloc+0x58>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c6e4:	4b2d      	ldr	r3, [pc, #180]	; (800c79c <mem_malloc+0x164>)
 800c6e6:	f240 32ba 	movw	r2, #954	; 0x3ba
 800c6ea:	4931      	ldr	r1, [pc, #196]	; (800c7b0 <mem_malloc+0x178>)
 800c6ec:	482d      	ldr	r0, [pc, #180]	; (800c7a4 <mem_malloc+0x16c>)
 800c6ee:	f005 fd3d 	bl	801216c <iprintf>
 800c6f2:	e7d6      	b.n	800c6a2 <mem_malloc+0x6a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c6f4:	4b29      	ldr	r3, [pc, #164]	; (800c79c <mem_malloc+0x164>)
 800c6f6:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800c6fa:	492e      	ldr	r1, [pc, #184]	; (800c7b4 <mem_malloc+0x17c>)
 800c6fc:	4829      	ldr	r0, [pc, #164]	; (800c7a4 <mem_malloc+0x16c>)
 800c6fe:	f005 fd35 	bl	801216c <iprintf>
 800c702:	e7d1      	b.n	800c6a8 <mem_malloc+0x70>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c704:	4b25      	ldr	r3, [pc, #148]	; (800c79c <mem_malloc+0x164>)
 800c706:	f240 32be 	movw	r2, #958	; 0x3be
 800c70a:	492b      	ldr	r1, [pc, #172]	; (800c7b8 <mem_malloc+0x180>)
 800c70c:	4825      	ldr	r0, [pc, #148]	; (800c7a4 <mem_malloc+0x16c>)
 800c70e:	f005 fd2d 	bl	801216c <iprintf>
 800c712:	e7ca      	b.n	800c6aa <mem_malloc+0x72>
         ptr = ptr_to_mem(ptr)->next) {
 800c714:	882c      	ldrh	r4, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c716:	46a0      	mov	r8, r4
 800c718:	4637      	mov	r7, r6
 800c71a:	f5c6 5320 	rsb	r3, r6, #10240	; 0x2800
 800c71e:	429c      	cmp	r4, r3
 800c720:	d22a      	bcs.n	800c778 <mem_malloc+0x140>
      mem = ptr_to_mem(ptr);
 800c722:	4620      	mov	r0, r4
 800c724:	f7ff fd4c 	bl	800c1c0 <ptr_to_mem>
 800c728:	4605      	mov	r5, r0
      if ((!mem->used) &&
 800c72a:	7903      	ldrb	r3, [r0, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1f1      	bne.n	800c714 <mem_malloc+0xdc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c730:	8803      	ldrh	r3, [r0, #0]
 800c732:	eba3 0308 	sub.w	r3, r3, r8
 800c736:	3b08      	subs	r3, #8
      if ((!mem->used) &&
 800c738:	429f      	cmp	r7, r3
 800c73a:	d8eb      	bhi.n	800c714 <mem_malloc+0xdc>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c73c:	f107 0214 	add.w	r2, r7, #20
 800c740:	4293      	cmp	r3, r2
 800c742:	d39f      	bcc.n	800c684 <mem_malloc+0x4c>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c744:	4426      	add	r6, r4
 800c746:	b2b6      	uxth	r6, r6
 800c748:	3608      	adds	r6, #8
 800c74a:	b2b6      	uxth	r6, r6
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c74c:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 800c750:	d090      	beq.n	800c674 <mem_malloc+0x3c>
          mem2 = ptr_to_mem(ptr2);
 800c752:	4630      	mov	r0, r6
 800c754:	f7ff fd34 	bl	800c1c0 <ptr_to_mem>
          mem2->used = 0;
 800c758:	2300      	movs	r3, #0
 800c75a:	7103      	strb	r3, [r0, #4]
          mem2->next = mem->next;
 800c75c:	882b      	ldrh	r3, [r5, #0]
 800c75e:	8003      	strh	r3, [r0, #0]
          mem2->prev = ptr;
 800c760:	8044      	strh	r4, [r0, #2]
          mem->next = ptr2;
 800c762:	802e      	strh	r6, [r5, #0]
          mem->used = 1;
 800c764:	2301      	movs	r3, #1
 800c766:	712b      	strb	r3, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c768:	8800      	ldrh	r0, [r0, #0]
 800c76a:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 800c76e:	d08b      	beq.n	800c688 <mem_malloc+0x50>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c770:	f7ff fd26 	bl	800c1c0 <ptr_to_mem>
 800c774:	8046      	strh	r6, [r0, #2]
 800c776:	e787      	b.n	800c688 <mem_malloc+0x50>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c778:	4806      	ldr	r0, [pc, #24]	; (800c794 <mem_malloc+0x15c>)
 800c77a:	f005 fc17 	bl	8011fac <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c77e:	2000      	movs	r0, #0
 800c780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return NULL;
 800c784:	2000      	movs	r0, #0
 800c786:	4770      	bx	lr
    return NULL;
 800c788:	2000      	movs	r0, #0
 800c78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c78e:	2000      	movs	r0, #0
}
 800c790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c794:	20006dfc 	.word	0x20006dfc
 800c798:	20006df8 	.word	0x20006df8
 800c79c:	08068840 	.word	0x08068840
 800c7a0:	0806882c 	.word	0x0806882c
 800c7a4:	0801335c 	.word	0x0801335c
 800c7a8:	20006e04 	.word	0x20006e04
 800c7ac:	08068754 	.word	0x08068754
 800c7b0:	08068770 	.word	0x08068770
 800c7b4:	080687a0 	.word	0x080687a0
 800c7b8:	080687d0 	.word	0x080687d0

0800c7bc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c7bc:	b538      	push	{r3, r4, r5, lr}
 800c7be:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c7c0:	f005 fc0c 	bl	8011fdc <sys_arch_protect>
 800c7c4:	4605      	mov	r5, r0

  memp = *desc->tab;
 800c7c6:	68a3      	ldr	r3, [r4, #8]
 800c7c8:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c7ca:	b18c      	cbz	r4, 800c7f0 <do_memp_malloc_pool+0x34>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c7cc:	6822      	ldr	r2, [r4, #0]
 800c7ce:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c7d0:	f014 0f03 	tst.w	r4, #3
 800c7d4:	d104      	bne.n	800c7e0 <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	f005 fc0c 	bl	8011ff4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c7dc:	4620      	mov	r0, r4
 800c7de:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c7e0:	4b05      	ldr	r3, [pc, #20]	; (800c7f8 <do_memp_malloc_pool+0x3c>)
 800c7e2:	f240 1219 	movw	r2, #281	; 0x119
 800c7e6:	4905      	ldr	r1, [pc, #20]	; (800c7fc <do_memp_malloc_pool+0x40>)
 800c7e8:	4805      	ldr	r0, [pc, #20]	; (800c800 <do_memp_malloc_pool+0x44>)
 800c7ea:	f005 fcbf 	bl	801216c <iprintf>
 800c7ee:	e7f2      	b.n	800c7d6 <do_memp_malloc_pool+0x1a>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c7f0:	f005 fc00 	bl	8011ff4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c7f4:	2000      	movs	r0, #0
}
 800c7f6:	bd38      	pop	{r3, r4, r5, pc}
 800c7f8:	08068914 	.word	0x08068914
 800c7fc:	08068950 	.word	0x08068950
 800c800:	0801335c 	.word	0x0801335c

0800c804 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	4605      	mov	r5, r0
 800c808:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c80a:	f011 0f03 	tst.w	r1, #3
 800c80e:	d109      	bne.n	800c824 <do_memp_free_pool+0x20>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800c810:	f005 fbe4 	bl	8011fdc <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c814:	68ab      	ldr	r3, [r5, #8]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 800c81a:	68ab      	ldr	r3, [r5, #8]
 800c81c:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c81e:	f005 fbe9 	bl	8011ff4 <sys_arch_unprotect>
 800c822:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 800c824:	4b03      	ldr	r3, [pc, #12]	; (800c834 <do_memp_free_pool+0x30>)
 800c826:	f240 126d 	movw	r2, #365	; 0x16d
 800c82a:	4903      	ldr	r1, [pc, #12]	; (800c838 <do_memp_free_pool+0x34>)
 800c82c:	4803      	ldr	r0, [pc, #12]	; (800c83c <do_memp_free_pool+0x38>)
 800c82e:	f005 fc9d 	bl	801216c <iprintf>
 800c832:	e7ed      	b.n	800c810 <do_memp_free_pool+0xc>
 800c834:	08068914 	.word	0x08068914
 800c838:	080688f4 	.word	0x080688f4
 800c83c:	0801335c 	.word	0x0801335c

0800c840 <memp_init_pool>:
  *desc->tab = NULL;
 800c840:	6883      	ldr	r3, [r0, #8]
 800c842:	2200      	movs	r2, #0
 800c844:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c846:	6843      	ldr	r3, [r0, #4]
 800c848:	3303      	adds	r3, #3
 800c84a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800c84e:	e007      	b.n	800c860 <memp_init_pool+0x20>
    memp->next = *desc->tab;
 800c850:	6881      	ldr	r1, [r0, #8]
 800c852:	6809      	ldr	r1, [r1, #0]
 800c854:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 800c856:	6881      	ldr	r1, [r0, #8]
 800c858:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c85a:	8801      	ldrh	r1, [r0, #0]
 800c85c:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 800c85e:	3201      	adds	r2, #1
 800c860:	8841      	ldrh	r1, [r0, #2]
 800c862:	428a      	cmp	r2, r1
 800c864:	dbf4      	blt.n	800c850 <memp_init_pool+0x10>
}
 800c866:	4770      	bx	lr

0800c868 <memp_init>:
{
 800c868:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c86a:	2400      	movs	r4, #0
 800c86c:	e006      	b.n	800c87c <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 800c86e:	4b05      	ldr	r3, [pc, #20]	; (800c884 <memp_init+0x1c>)
 800c870:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c874:	f7ff ffe4 	bl	800c840 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c878:	3401      	adds	r4, #1
 800c87a:	b2a4      	uxth	r4, r4
 800c87c:	2c0c      	cmp	r4, #12
 800c87e:	d9f6      	bls.n	800c86e <memp_init+0x6>
}
 800c880:	bd10      	pop	{r4, pc}
 800c882:	bf00      	nop
 800c884:	08068a4c 	.word	0x08068a4c

0800c888 <memp_malloc>:
{
 800c888:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c88a:	280c      	cmp	r0, #12
 800c88c:	d805      	bhi.n	800c89a <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c88e:	4b07      	ldr	r3, [pc, #28]	; (800c8ac <memp_malloc+0x24>)
 800c890:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c894:	f7ff ff92 	bl	800c7bc <do_memp_malloc_pool>
}
 800c898:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c89a:	4b05      	ldr	r3, [pc, #20]	; (800c8b0 <memp_malloc+0x28>)
 800c89c:	f240 1257 	movw	r2, #343	; 0x157
 800c8a0:	4904      	ldr	r1, [pc, #16]	; (800c8b4 <memp_malloc+0x2c>)
 800c8a2:	4805      	ldr	r0, [pc, #20]	; (800c8b8 <memp_malloc+0x30>)
 800c8a4:	f005 fc62 	bl	801216c <iprintf>
 800c8a8:	2000      	movs	r0, #0
 800c8aa:	bd08      	pop	{r3, pc}
 800c8ac:	08068a4c 	.word	0x08068a4c
 800c8b0:	08068914 	.word	0x08068914
 800c8b4:	08068a2c 	.word	0x08068a2c
 800c8b8:	0801335c 	.word	0x0801335c

0800c8bc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c8bc:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c8be:	280c      	cmp	r0, #12
 800c8c0:	d806      	bhi.n	800c8d0 <memp_free+0x14>

  if (mem == NULL) {
 800c8c2:	b121      	cbz	r1, 800c8ce <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c8c4:	4b06      	ldr	r3, [pc, #24]	; (800c8e0 <memp_free+0x24>)
 800c8c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c8ca:	f7ff ff9b 	bl	800c804 <do_memp_free_pool>
 800c8ce:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c8d0:	4b04      	ldr	r3, [pc, #16]	; (800c8e4 <memp_free+0x28>)
 800c8d2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c8d6:	4904      	ldr	r1, [pc, #16]	; (800c8e8 <memp_free+0x2c>)
 800c8d8:	4804      	ldr	r0, [pc, #16]	; (800c8ec <memp_free+0x30>)
 800c8da:	f005 fc47 	bl	801216c <iprintf>
 800c8de:	bd08      	pop	{r3, pc}
 800c8e0:	08068a4c 	.word	0x08068a4c
 800c8e4:	08068914 	.word	0x08068914
 800c8e8:	08068a10 	.word	0x08068a10
 800c8ec:	0801335c 	.word	0x0801335c

0800c8f0 <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c8f0:	680b      	ldr	r3, [r1, #0]
 800c8f2:	6882      	ldr	r2, [r0, #8]
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d005      	beq.n	800c904 <netif_do_set_netmask+0x14>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c8f8:	b111      	cbz	r1, 800c900 <netif_do_set_netmask+0x10>
 800c8fa:	6083      	str	r3, [r0, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c8fc:	2001      	movs	r0, #1
 800c8fe:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c900:	2300      	movs	r3, #0
 800c902:	e7fa      	b.n	800c8fa <netif_do_set_netmask+0xa>
  }
  return 0; /* netmask unchanged */
 800c904:	2000      	movs	r0, #0
}
 800c906:	4770      	bx	lr

0800c908 <netif_do_set_gw>:

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c908:	680b      	ldr	r3, [r1, #0]
 800c90a:	68c2      	ldr	r2, [r0, #12]
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d005      	beq.n	800c91c <netif_do_set_gw+0x14>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c910:	b111      	cbz	r1, 800c918 <netif_do_set_gw+0x10>
 800c912:	60c3      	str	r3, [r0, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c914:	2001      	movs	r0, #1
 800c916:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c918:	2300      	movs	r3, #0
 800c91a:	e7fa      	b.n	800c912 <netif_do_set_gw+0xa>
  }
  return 0; /* gateway unchanged */
 800c91c:	2000      	movs	r0, #0
}
 800c91e:	4770      	bx	lr

0800c920 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800c920:	f06f 000b 	mvn.w	r0, #11
 800c924:	4770      	bx	lr

0800c926 <netif_do_ip_addr_changed>:
{
 800c926:	b538      	push	{r3, r4, r5, lr}
 800c928:	4604      	mov	r4, r0
 800c92a:	460d      	mov	r5, r1
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c92c:	f001 ffca 	bl	800e8c4 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c930:	4629      	mov	r1, r5
 800c932:	4620      	mov	r0, r4
 800c934:	f005 fa16 	bl	8011d64 <udp_netif_ip_addr_changed>
 800c938:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c93c <netif_issue_reports>:
{
 800c93c:	b538      	push	{r3, r4, r5, lr}
 800c93e:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c940:	4604      	mov	r4, r0
 800c942:	b130      	cbz	r0, 800c952 <netif_issue_reports+0x16>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c944:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800c948:	f003 0205 	and.w	r2, r3, #5
 800c94c:	2a05      	cmp	r2, #5
 800c94e:	d008      	beq.n	800c962 <netif_issue_reports+0x26>
 800c950:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c952:	4b0b      	ldr	r3, [pc, #44]	; (800c980 <netif_issue_reports+0x44>)
 800c954:	f240 326d 	movw	r2, #877	; 0x36d
 800c958:	490a      	ldr	r1, [pc, #40]	; (800c984 <netif_issue_reports+0x48>)
 800c95a:	480b      	ldr	r0, [pc, #44]	; (800c988 <netif_issue_reports+0x4c>)
 800c95c:	f005 fc06 	bl	801216c <iprintf>
 800c960:	e7f0      	b.n	800c944 <netif_issue_reports+0x8>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c962:	f015 0f01 	tst.w	r5, #1
 800c966:	d0f3      	beq.n	800c950 <netif_issue_reports+0x14>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c968:	6862      	ldr	r2, [r4, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c96a:	2a00      	cmp	r2, #0
 800c96c:	d0f0      	beq.n	800c950 <netif_issue_reports+0x14>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c96e:	f013 0f08 	tst.w	r3, #8
 800c972:	d0ed      	beq.n	800c950 <netif_issue_reports+0x14>
      etharp_gratuitous(netif);
 800c974:	1d21      	adds	r1, r4, #4
 800c976:	4620      	mov	r0, r4
 800c978:	f7fe fa12 	bl	800ada0 <etharp_request>
 800c97c:	e7e8      	b.n	800c950 <netif_issue_reports+0x14>
 800c97e:	bf00      	nop
 800c980:	08068b14 	.word	0x08068b14
 800c984:	08068b50 	.word	0x08068b50
 800c988:	0801335c 	.word	0x0801335c

0800c98c <netif_do_set_ipaddr>:
{
 800c98c:	b570      	push	{r4, r5, r6, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	4605      	mov	r5, r0
 800c992:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c994:	460c      	mov	r4, r1
 800c996:	b1a9      	cbz	r1, 800c9c4 <netif_do_set_ipaddr+0x38>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c998:	b1e6      	cbz	r6, 800c9d4 <netif_do_set_ipaddr+0x48>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c99a:	6822      	ldr	r2, [r4, #0]
 800c99c:	686b      	ldr	r3, [r5, #4]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d022      	beq.n	800c9e8 <netif_do_set_ipaddr+0x5c>
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c9a2:	a902      	add	r1, sp, #8
 800c9a4:	f841 2d04 	str.w	r2, [r1, #-4]!
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c9a8:	6033      	str	r3, [r6, #0]
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	f7ff ffbb 	bl	800c926 <netif_do_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c9b0:	b1c4      	cbz	r4, 800c9e4 <netif_do_set_ipaddr+0x58>
 800c9b2:	6823      	ldr	r3, [r4, #0]
 800c9b4:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c9b6:	2101      	movs	r1, #1
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	f7ff ffbf 	bl	800c93c <netif_issue_reports>
    return 1; /* address changed */
 800c9be:	2001      	movs	r0, #1
}
 800c9c0:	b002      	add	sp, #8
 800c9c2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c9c4:	4b09      	ldr	r3, [pc, #36]	; (800c9ec <netif_do_set_ipaddr+0x60>)
 800c9c6:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c9ca:	4909      	ldr	r1, [pc, #36]	; (800c9f0 <netif_do_set_ipaddr+0x64>)
 800c9cc:	4809      	ldr	r0, [pc, #36]	; (800c9f4 <netif_do_set_ipaddr+0x68>)
 800c9ce:	f005 fbcd 	bl	801216c <iprintf>
 800c9d2:	e7e1      	b.n	800c998 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c9d4:	4b05      	ldr	r3, [pc, #20]	; (800c9ec <netif_do_set_ipaddr+0x60>)
 800c9d6:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c9da:	4905      	ldr	r1, [pc, #20]	; (800c9f0 <netif_do_set_ipaddr+0x64>)
 800c9dc:	4805      	ldr	r0, [pc, #20]	; (800c9f4 <netif_do_set_ipaddr+0x68>)
 800c9de:	f005 fbc5 	bl	801216c <iprintf>
 800c9e2:	e7da      	b.n	800c99a <netif_do_set_ipaddr+0xe>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	e7e5      	b.n	800c9b4 <netif_do_set_ipaddr+0x28>
  return 0; /* address unchanged */
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	e7e9      	b.n	800c9c0 <netif_do_set_ipaddr+0x34>
 800c9ec:	08068b14 	.word	0x08068b14
 800c9f0:	08068b04 	.word	0x08068b04
 800c9f4:	0801335c 	.word	0x0801335c

0800c9f8 <netif_init>:
{
 800c9f8:	4770      	bx	lr
	...

0800c9fc <netif_set_addr>:
{
 800c9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	4680      	mov	r8, r0
 800ca04:	4617      	mov	r7, r2
 800ca06:	461e      	mov	r6, r3
  if (ipaddr == NULL) {
 800ca08:	460d      	mov	r5, r1
 800ca0a:	b1a1      	cbz	r1, 800ca36 <netif_set_addr+0x3a>
  if (netmask == NULL) {
 800ca0c:	b1af      	cbz	r7, 800ca3a <netif_set_addr+0x3e>
  if (gw == NULL) {
 800ca0e:	b1b6      	cbz	r6, 800ca3e <netif_set_addr+0x42>
  remove = ip4_addr_isany(ipaddr);
 800ca10:	b1bd      	cbz	r5, 800ca42 <netif_set_addr+0x46>
 800ca12:	682b      	ldr	r3, [r5, #0]
 800ca14:	b9bb      	cbnz	r3, 800ca46 <netif_set_addr+0x4a>
 800ca16:	2401      	movs	r4, #1
  if (remove) {
 800ca18:	b9bc      	cbnz	r4, 800ca4a <netif_set_addr+0x4e>
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	4639      	mov	r1, r7
 800ca1e:	4640      	mov	r0, r8
 800ca20:	f7ff ff66 	bl	800c8f0 <netif_do_set_netmask>
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ca24:	2200      	movs	r2, #0
 800ca26:	4631      	mov	r1, r6
 800ca28:	4640      	mov	r0, r8
 800ca2a:	f7ff ff6d 	bl	800c908 <netif_do_set_gw>
  if (!remove) {
 800ca2e:	b194      	cbz	r4, 800ca56 <netif_set_addr+0x5a>
}
 800ca30:	b002      	add	sp, #8
 800ca32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY4;
 800ca36:	4d0b      	ldr	r5, [pc, #44]	; (800ca64 <netif_set_addr+0x68>)
 800ca38:	e7e8      	b.n	800ca0c <netif_set_addr+0x10>
    netmask = IP4_ADDR_ANY4;
 800ca3a:	4f0a      	ldr	r7, [pc, #40]	; (800ca64 <netif_set_addr+0x68>)
 800ca3c:	e7e7      	b.n	800ca0e <netif_set_addr+0x12>
    gw = IP4_ADDR_ANY4;
 800ca3e:	4e09      	ldr	r6, [pc, #36]	; (800ca64 <netif_set_addr+0x68>)
 800ca40:	e7e6      	b.n	800ca10 <netif_set_addr+0x14>
  remove = ip4_addr_isany(ipaddr);
 800ca42:	2401      	movs	r4, #1
 800ca44:	e7e8      	b.n	800ca18 <netif_set_addr+0x1c>
 800ca46:	2400      	movs	r4, #0
 800ca48:	e7e6      	b.n	800ca18 <netif_set_addr+0x1c>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ca4a:	aa01      	add	r2, sp, #4
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	4640      	mov	r0, r8
 800ca50:	f7ff ff9c 	bl	800c98c <netif_do_set_ipaddr>
 800ca54:	e7e1      	b.n	800ca1a <netif_set_addr+0x1e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ca56:	aa01      	add	r2, sp, #4
 800ca58:	4629      	mov	r1, r5
 800ca5a:	4640      	mov	r0, r8
 800ca5c:	f7ff ff96 	bl	800c98c <netif_do_set_ipaddr>
}
 800ca60:	e7e6      	b.n	800ca30 <netif_set_addr+0x34>
 800ca62:	bf00      	nop
 800ca64:	080684a4 	.word	0x080684a4

0800ca68 <netif_add>:
{
 800ca68:	b570      	push	{r4, r5, r6, lr}
 800ca6a:	9c05      	ldr	r4, [sp, #20]
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ca6c:	4606      	mov	r6, r0
 800ca6e:	b318      	cbz	r0, 800cab8 <netif_add+0x50>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ca70:	2c00      	cmp	r4, #0
 800ca72:	d02a      	beq.n	800caca <netif_add+0x62>
  if (ipaddr == NULL) {
 800ca74:	2900      	cmp	r1, #0
 800ca76:	d031      	beq.n	800cadc <netif_add+0x74>
  if (netmask == NULL) {
 800ca78:	2a00      	cmp	r2, #0
 800ca7a:	d031      	beq.n	800cae0 <netif_add+0x78>
  if (gw == NULL) {
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d031      	beq.n	800cae4 <netif_add+0x7c>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ca80:	2000      	movs	r0, #0
 800ca82:	6070      	str	r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ca84:	60b0      	str	r0, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ca86:	60f0      	str	r0, [r6, #12]
  netif->output = netif_null_output_ip4;
 800ca88:	4d36      	ldr	r5, [pc, #216]	; (800cb64 <netif_add+0xfc>)
 800ca8a:	6175      	str	r5, [r6, #20]
  netif->mtu = 0;
 800ca8c:	8530      	strh	r0, [r6, #40]	; 0x28
  netif->flags = 0;
 800ca8e:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ca92:	6270      	str	r0, [r6, #36]	; 0x24
  netif->link_callback = NULL;
 800ca94:	61f0      	str	r0, [r6, #28]
  netif->state = state;
 800ca96:	9804      	ldr	r0, [sp, #16]
 800ca98:	6230      	str	r0, [r6, #32]
  netif->num = netif_num;
 800ca9a:	4833      	ldr	r0, [pc, #204]	; (800cb68 <netif_add+0x100>)
 800ca9c:	7800      	ldrb	r0, [r0, #0]
 800ca9e:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
  netif->input = input;
 800caa2:	9806      	ldr	r0, [sp, #24]
 800caa4:	6130      	str	r0, [r6, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800caa6:	4630      	mov	r0, r6
 800caa8:	f7ff ffa8 	bl	800c9fc <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800caac:	4630      	mov	r0, r6
 800caae:	47a0      	blx	r4
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d03e      	beq.n	800cb32 <netif_add+0xca>
    return NULL;
 800cab4:	2000      	movs	r0, #0
}
 800cab6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cab8:	4b2c      	ldr	r3, [pc, #176]	; (800cb6c <netif_add+0x104>)
 800caba:	f240 1227 	movw	r2, #295	; 0x127
 800cabe:	492c      	ldr	r1, [pc, #176]	; (800cb70 <netif_add+0x108>)
 800cac0:	482c      	ldr	r0, [pc, #176]	; (800cb74 <netif_add+0x10c>)
 800cac2:	f005 fb53 	bl	801216c <iprintf>
 800cac6:	4630      	mov	r0, r6
 800cac8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800caca:	4b28      	ldr	r3, [pc, #160]	; (800cb6c <netif_add+0x104>)
 800cacc:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cad0:	4929      	ldr	r1, [pc, #164]	; (800cb78 <netif_add+0x110>)
 800cad2:	4828      	ldr	r0, [pc, #160]	; (800cb74 <netif_add+0x10c>)
 800cad4:	f005 fb4a 	bl	801216c <iprintf>
 800cad8:	2000      	movs	r0, #0
 800cada:	bd70      	pop	{r4, r5, r6, pc}
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cadc:	4927      	ldr	r1, [pc, #156]	; (800cb7c <netif_add+0x114>)
 800cade:	e7cb      	b.n	800ca78 <netif_add+0x10>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cae0:	4a26      	ldr	r2, [pc, #152]	; (800cb7c <netif_add+0x114>)
 800cae2:	e7cb      	b.n	800ca7c <netif_add+0x14>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cae4:	4b25      	ldr	r3, [pc, #148]	; (800cb7c <netif_add+0x114>)
 800cae6:	e7cb      	b.n	800ca80 <netif_add+0x18>
        netif->num = 0;
 800cae8:	2300      	movs	r3, #0
 800caea:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
 800caee:	e024      	b.n	800cb3a <netif_add+0xd2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800caf0:	4b1e      	ldr	r3, [pc, #120]	; (800cb6c <netif_add+0x104>)
 800caf2:	f240 128b 	movw	r2, #395	; 0x18b
 800caf6:	4922      	ldr	r1, [pc, #136]	; (800cb80 <netif_add+0x118>)
 800caf8:	481e      	ldr	r0, [pc, #120]	; (800cb74 <netif_add+0x10c>)
 800cafa:	f005 fb37 	bl	801216c <iprintf>
 800cafe:	e009      	b.n	800cb14 <netif_add+0xac>
        if (netif2->num == netif->num) {
 800cb00:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800cb04:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d00e      	beq.n	800cb2a <netif_add+0xc2>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cb0c:	6824      	ldr	r4, [r4, #0]
 800cb0e:	b17c      	cbz	r4, 800cb30 <netif_add+0xc8>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cb10:	42b4      	cmp	r4, r6
 800cb12:	d0ed      	beq.n	800caf0 <netif_add+0x88>
        num_netifs++;
 800cb14:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cb16:	2dff      	cmp	r5, #255	; 0xff
 800cb18:	ddf2      	ble.n	800cb00 <netif_add+0x98>
 800cb1a:	4b14      	ldr	r3, [pc, #80]	; (800cb6c <netif_add+0x104>)
 800cb1c:	f240 128d 	movw	r2, #397	; 0x18d
 800cb20:	4918      	ldr	r1, [pc, #96]	; (800cb84 <netif_add+0x11c>)
 800cb22:	4814      	ldr	r0, [pc, #80]	; (800cb74 <netif_add+0x10c>)
 800cb24:	f005 fb22 	bl	801216c <iprintf>
 800cb28:	e7ea      	b.n	800cb00 <netif_add+0x98>
          netif->num++;
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    } while (netif2 != NULL);
 800cb30:	b13c      	cbz	r4, 800cb42 <netif_add+0xda>
      if (netif->num == 255) {
 800cb32:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 800cb36:	2bff      	cmp	r3, #255	; 0xff
 800cb38:	d0d6      	beq.n	800cae8 <netif_add+0x80>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cb3a:	4b13      	ldr	r3, [pc, #76]	; (800cb88 <netif_add+0x120>)
 800cb3c:	681c      	ldr	r4, [r3, #0]
      num_netifs = 0;
 800cb3e:	2500      	movs	r5, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cb40:	e7e5      	b.n	800cb0e <netif_add+0xa6>
  if (netif->num == 254) {
 800cb42:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 800cb46:	2bfe      	cmp	r3, #254	; 0xfe
 800cb48:	d008      	beq.n	800cb5c <netif_add+0xf4>
    netif_num = (u8_t)(netif->num + 1);
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	4a06      	ldr	r2, [pc, #24]	; (800cb68 <netif_add+0x100>)
 800cb4e:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 800cb50:	4b0d      	ldr	r3, [pc, #52]	; (800cb88 <netif_add+0x120>)
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	6032      	str	r2, [r6, #0]
  netif_list = netif;
 800cb56:	601e      	str	r6, [r3, #0]
  return netif;
 800cb58:	4630      	mov	r0, r6
 800cb5a:	bd70      	pop	{r4, r5, r6, pc}
    netif_num = 0;
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	4b02      	ldr	r3, [pc, #8]	; (800cb68 <netif_add+0x100>)
 800cb60:	701a      	strb	r2, [r3, #0]
 800cb62:	e7f5      	b.n	800cb50 <netif_add+0xe8>
 800cb64:	0800c921 	.word	0x0800c921
 800cb68:	20006e3c 	.word	0x20006e3c
 800cb6c:	08068b14 	.word	0x08068b14
 800cb70:	08068a80 	.word	0x08068a80
 800cb74:	0801335c 	.word	0x0801335c
 800cb78:	08068a9c 	.word	0x08068a9c
 800cb7c:	080684a4 	.word	0x080684a4
 800cb80:	08068ac0 	.word	0x08068ac0
 800cb84:	08068ad4 	.word	0x08068ad4
 800cb88:	2000d840 	.word	0x2000d840

0800cb8c <netif_set_default>:
  netif_default = netif;
 800cb8c:	4b01      	ldr	r3, [pc, #4]	; (800cb94 <netif_set_default+0x8>)
 800cb8e:	6018      	str	r0, [r3, #0]
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	2000d844 	.word	0x2000d844

0800cb98 <netif_set_up>:
{
 800cb98:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cb9a:	b128      	cbz	r0, 800cba8 <netif_set_up+0x10>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cb9c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800cba0:	f013 0f01 	tst.w	r3, #1
 800cba4:	d008      	beq.n	800cbb8 <netif_set_up+0x20>
 800cba6:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cba8:	4b07      	ldr	r3, [pc, #28]	; (800cbc8 <netif_set_up+0x30>)
 800cbaa:	f44f 7254 	mov.w	r2, #848	; 0x350
 800cbae:	4907      	ldr	r1, [pc, #28]	; (800cbcc <netif_set_up+0x34>)
 800cbb0:	4807      	ldr	r0, [pc, #28]	; (800cbd0 <netif_set_up+0x38>)
 800cbb2:	f005 fadb 	bl	801216c <iprintf>
 800cbb6:	bd08      	pop	{r3, pc}
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cbb8:	f043 0301 	orr.w	r3, r3, #1
 800cbbc:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cbc0:	2103      	movs	r1, #3
 800cbc2:	f7ff febb 	bl	800c93c <netif_issue_reports>
 800cbc6:	e7ee      	b.n	800cba6 <netif_set_up+0xe>
 800cbc8:	08068b14 	.word	0x08068b14
 800cbcc:	08068bdc 	.word	0x08068bdc
 800cbd0:	0801335c 	.word	0x0801335c

0800cbd4 <netif_set_down>:
{
 800cbd4:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cbd6:	b160      	cbz	r0, 800cbf2 <netif_set_down+0x1e>
  if (netif->flags & NETIF_FLAG_UP) {
 800cbd8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800cbdc:	f013 0f01 	tst.w	r3, #1
 800cbe0:	d006      	beq.n	800cbf0 <netif_set_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cbe2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cbe6:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cbea:	f013 0f08 	tst.w	r3, #8
 800cbee:	d108      	bne.n	800cc02 <netif_set_down+0x2e>
 800cbf0:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cbf2:	4b05      	ldr	r3, [pc, #20]	; (800cc08 <netif_set_down+0x34>)
 800cbf4:	f240 329b 	movw	r2, #923	; 0x39b
 800cbf8:	4904      	ldr	r1, [pc, #16]	; (800cc0c <netif_set_down+0x38>)
 800cbfa:	4805      	ldr	r0, [pc, #20]	; (800cc10 <netif_set_down+0x3c>)
 800cbfc:	f005 fab6 	bl	801216c <iprintf>
 800cc00:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 800cc02:	f7fe f84f 	bl	800aca4 <etharp_cleanup_netif>
 800cc06:	e7f3      	b.n	800cbf0 <netif_set_down+0x1c>
 800cc08:	08068b14 	.word	0x08068b14
 800cc0c:	08068b74 	.word	0x08068b74
 800cc10:	0801335c 	.word	0x0801335c

0800cc14 <netif_set_link_up>:
{
 800cc14:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cc16:	b130      	cbz	r0, 800cc26 <netif_set_link_up+0x12>
 800cc18:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cc1a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800cc1e:	f013 0f04 	tst.w	r3, #4
 800cc22:	d008      	beq.n	800cc36 <netif_set_link_up+0x22>
 800cc24:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cc26:	4b0c      	ldr	r3, [pc, #48]	; (800cc58 <netif_set_link_up+0x44>)
 800cc28:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cc2c:	490b      	ldr	r1, [pc, #44]	; (800cc5c <netif_set_link_up+0x48>)
 800cc2e:	480c      	ldr	r0, [pc, #48]	; (800cc60 <netif_set_link_up+0x4c>)
 800cc30:	f005 fa9c 	bl	801216c <iprintf>
 800cc34:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cc36:	f043 0304 	orr.w	r3, r3, #4
 800cc3a:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    dhcp_network_changed(netif);
 800cc3e:	f7fd fbe3 	bl	800a408 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cc42:	2103      	movs	r1, #3
 800cc44:	4620      	mov	r0, r4
 800cc46:	f7ff fe79 	bl	800c93c <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 800cc4a:	69e3      	ldr	r3, [r4, #28]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d0e9      	beq.n	800cc24 <netif_set_link_up+0x10>
 800cc50:	4620      	mov	r0, r4
 800cc52:	4798      	blx	r3
 800cc54:	e7e6      	b.n	800cc24 <netif_set_link_up+0x10>
 800cc56:	bf00      	nop
 800cc58:	08068b14 	.word	0x08068b14
 800cc5c:	08068bb8 	.word	0x08068bb8
 800cc60:	0801335c 	.word	0x0801335c

0800cc64 <netif_set_link_down>:
{
 800cc64:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cc66:	b160      	cbz	r0, 800cc82 <netif_set_link_down+0x1e>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cc68:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800cc6c:	f013 0f04 	tst.w	r3, #4
 800cc70:	d006      	beq.n	800cc80 <netif_set_link_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cc72:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800cc76:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800cc7a:	69c3      	ldr	r3, [r0, #28]
 800cc7c:	b103      	cbz	r3, 800cc80 <netif_set_link_down+0x1c>
 800cc7e:	4798      	blx	r3
 800cc80:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cc82:	4b04      	ldr	r3, [pc, #16]	; (800cc94 <netif_set_link_down+0x30>)
 800cc84:	f240 4206 	movw	r2, #1030	; 0x406
 800cc88:	4903      	ldr	r1, [pc, #12]	; (800cc98 <netif_set_link_down+0x34>)
 800cc8a:	4804      	ldr	r0, [pc, #16]	; (800cc9c <netif_set_link_down+0x38>)
 800cc8c:	f005 fa6e 	bl	801216c <iprintf>
 800cc90:	bd08      	pop	{r3, pc}
 800cc92:	bf00      	nop
 800cc94:	08068b14 	.word	0x08068b14
 800cc98:	08068b94 	.word	0x08068b94
 800cc9c:	0801335c 	.word	0x0801335c

0800cca0 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cca0:	4602      	mov	r2, r0
 800cca2:	b158      	cbz	r0, 800ccbc <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800cca4:	4b06      	ldr	r3, [pc, #24]	; (800ccc0 <netif_get_by_index+0x20>)
 800cca6:	6818      	ldr	r0, [r3, #0]
 800cca8:	b138      	cbz	r0, 800ccba <netif_get_by_index+0x1a>
      if (idx == netif_get_index(netif)) {
 800ccaa:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800ccae:	3301      	adds	r3, #1
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d003      	beq.n	800ccbe <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 800ccb6:	6800      	ldr	r0, [r0, #0]
 800ccb8:	e7f6      	b.n	800cca8 <netif_get_by_index+0x8>
 800ccba:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 800ccbc:	2000      	movs	r0, #0
}
 800ccbe:	4770      	bx	lr
 800ccc0:	2000d840 	.word	0x2000d840

0800ccc4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ccc4:	b410      	push	{r4}
  p->next = NULL;
 800ccc6:	2400      	movs	r4, #0
 800ccc8:	6004      	str	r4, [r0, #0]
  p->payload = payload;
 800ccca:	6041      	str	r1, [r0, #4]
  p->tot_len = tot_len;
 800cccc:	8102      	strh	r2, [r0, #8]
  p->len = len;
 800ccce:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
 800ccd0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ccd4:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 800ccd6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ccda:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cce0:	73c4      	strb	r4, [r0, #15]
}
 800cce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800cce8:	e002      	b.n	800ccf0 <pbuf_skip_const+0x8>
    offset_left = (u16_t)(offset_left - q->len);
 800ccea:	1ac9      	subs	r1, r1, r3
 800ccec:	b289      	uxth	r1, r1
    q = q->next;
 800ccee:	6800      	ldr	r0, [r0, #0]
  while ((q != NULL) && (q->len <= offset_left)) {
 800ccf0:	b110      	cbz	r0, 800ccf8 <pbuf_skip_const+0x10>
 800ccf2:	8943      	ldrh	r3, [r0, #10]
 800ccf4:	4299      	cmp	r1, r3
 800ccf6:	d2f8      	bcs.n	800ccea <pbuf_skip_const+0x2>
  }
  if (out_offset != NULL) {
 800ccf8:	b102      	cbz	r2, 800ccfc <pbuf_skip_const+0x14>
    *out_offset = offset_left;
 800ccfa:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 800ccfc:	4770      	bx	lr
	...

0800cd00 <pbuf_add_header_impl>:
{
 800cd00:	b570      	push	{r4, r5, r6, lr}
 800cd02:	460c      	mov	r4, r1
 800cd04:	4616      	mov	r6, r2
  LWIP_ASSERT("p != NULL", p != NULL);
 800cd06:	4605      	mov	r5, r0
 800cd08:	b1c0      	cbz	r0, 800cd3c <pbuf_add_header_impl+0x3c>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cd0a:	b33d      	cbz	r5, 800cd5c <pbuf_add_header_impl+0x5c>
 800cd0c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800cd10:	d226      	bcs.n	800cd60 <pbuf_add_header_impl+0x60>
  if (header_size_increment == 0) {
 800cd12:	b33c      	cbz	r4, 800cd64 <pbuf_add_header_impl+0x64>
  increment_magnitude = (u16_t)header_size_increment;
 800cd14:	b2a2      	uxth	r2, r4
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cd16:	892b      	ldrh	r3, [r5, #8]
 800cd18:	4413      	add	r3, r2
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d823      	bhi.n	800cd68 <pbuf_add_header_impl+0x68>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cd20:	f995 100c 	ldrsb.w	r1, [r5, #12]
 800cd24:	2900      	cmp	r1, #0
 800cd26:	db11      	blt.n	800cd4c <pbuf_add_header_impl+0x4c>
    if (force) {
 800cd28:	b306      	cbz	r6, 800cd6c <pbuf_add_header_impl+0x6c>
      payload = (u8_t *)p->payload - header_size_increment;
 800cd2a:	6869      	ldr	r1, [r5, #4]
 800cd2c:	1b0c      	subs	r4, r1, r4
  p->payload = payload;
 800cd2e:	606c      	str	r4, [r5, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cd30:	8969      	ldrh	r1, [r5, #10]
 800cd32:	440a      	add	r2, r1
 800cd34:	816a      	strh	r2, [r5, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cd36:	812b      	strh	r3, [r5, #8]
  return 0;
 800cd38:	2000      	movs	r0, #0
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800cd3c:	4b0c      	ldr	r3, [pc, #48]	; (800cd70 <pbuf_add_header_impl+0x70>)
 800cd3e:	f240 12df 	movw	r2, #479	; 0x1df
 800cd42:	490c      	ldr	r1, [pc, #48]	; (800cd74 <pbuf_add_header_impl+0x74>)
 800cd44:	480c      	ldr	r0, [pc, #48]	; (800cd78 <pbuf_add_header_impl+0x78>)
 800cd46:	f005 fa11 	bl	801216c <iprintf>
 800cd4a:	e7de      	b.n	800cd0a <pbuf_add_header_impl+0xa>
    payload = (u8_t *)p->payload - header_size_increment;
 800cd4c:	6869      	ldr	r1, [r5, #4]
 800cd4e:	1b0c      	subs	r4, r1, r4
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cd50:	f105 0110 	add.w	r1, r5, #16
 800cd54:	428c      	cmp	r4, r1
 800cd56:	d2ea      	bcs.n	800cd2e <pbuf_add_header_impl+0x2e>
      return 1;
 800cd58:	2001      	movs	r0, #1
 800cd5a:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
 800cd5c:	2001      	movs	r0, #1
 800cd5e:	bd70      	pop	{r4, r5, r6, pc}
 800cd60:	2001      	movs	r0, #1
 800cd62:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800cd64:	2000      	movs	r0, #0
 800cd66:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
 800cd68:	2001      	movs	r0, #1
 800cd6a:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 800cd6c:	2001      	movs	r0, #1
}
 800cd6e:	bd70      	pop	{r4, r5, r6, pc}
 800cd70:	08068bf8 	.word	0x08068bf8
 800cd74:	08067e60 	.word	0x08067e60
 800cd78:	0801335c 	.word	0x0801335c

0800cd7c <pbuf_alloc_reference>:
{
 800cd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	4607      	mov	r7, r0
 800cd82:	460e      	mov	r6, r1
 800cd84:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cd86:	2a41      	cmp	r2, #65	; 0x41
 800cd88:	d008      	beq.n	800cd9c <pbuf_alloc_reference+0x20>
 800cd8a:	2a01      	cmp	r2, #1
 800cd8c:	d006      	beq.n	800cd9c <pbuf_alloc_reference+0x20>
 800cd8e:	4b0b      	ldr	r3, [pc, #44]	; (800cdbc <pbuf_alloc_reference+0x40>)
 800cd90:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cd94:	490a      	ldr	r1, [pc, #40]	; (800cdc0 <pbuf_alloc_reference+0x44>)
 800cd96:	480b      	ldr	r0, [pc, #44]	; (800cdc4 <pbuf_alloc_reference+0x48>)
 800cd98:	f005 f9e8 	bl	801216c <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cd9c:	200b      	movs	r0, #11
 800cd9e:	f7ff fd73 	bl	800c888 <memp_malloc>
  if (p == NULL) {
 800cda2:	4605      	mov	r5, r0
 800cda4:	b138      	cbz	r0, 800cdb6 <pbuf_alloc_reference+0x3a>
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cda6:	2300      	movs	r3, #0
 800cda8:	9301      	str	r3, [sp, #4]
 800cdaa:	9400      	str	r4, [sp, #0]
 800cdac:	4633      	mov	r3, r6
 800cdae:	4632      	mov	r2, r6
 800cdb0:	4639      	mov	r1, r7
 800cdb2:	f7ff ff87 	bl	800ccc4 <pbuf_init_alloced_pbuf>
}
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	b003      	add	sp, #12
 800cdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdbc:	08068bf8 	.word	0x08068bf8
 800cdc0:	08068ce0 	.word	0x08068ce0
 800cdc4:	0801335c 	.word	0x0801335c

0800cdc8 <pbuf_alloced_custom>:
{
 800cdc8:	b570      	push	{r4, r5, r6, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	9d06      	ldr	r5, [sp, #24]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cdce:	1cc4      	adds	r4, r0, #3
 800cdd0:	f024 0403 	bic.w	r4, r4, #3
 800cdd4:	190e      	adds	r6, r1, r4
 800cdd6:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800cdda:	4286      	cmp	r6, r0
 800cddc:	d80f      	bhi.n	800cdfe <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 800cdde:	b105      	cbz	r5, 800cde2 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cde0:	4425      	add	r5, r4
 800cde2:	4618      	mov	r0, r3
 800cde4:	4613      	mov	r3, r2
 800cde6:	460a      	mov	r2, r1
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cde8:	4604      	mov	r4, r0
 800cdea:	2102      	movs	r1, #2
 800cdec:	9101      	str	r1, [sp, #4]
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	f7ff ff66 	bl	800ccc4 <pbuf_init_alloced_pbuf>
}
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	b002      	add	sp, #8
 800cdfc:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800cdfe:	2400      	movs	r4, #0
 800ce00:	e7fa      	b.n	800cdf8 <pbuf_alloced_custom+0x30>

0800ce02 <pbuf_add_header>:
{
 800ce02:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ce04:	2200      	movs	r2, #0
 800ce06:	f7ff ff7b 	bl	800cd00 <pbuf_add_header_impl>
}
 800ce0a:	bd08      	pop	{r3, pc}

0800ce0c <pbuf_remove_header>:
{
 800ce0c:	b538      	push	{r3, r4, r5, lr}
 800ce0e:	460d      	mov	r5, r1
  LWIP_ASSERT("p != NULL", p != NULL);
 800ce10:	4604      	mov	r4, r0
 800ce12:	b190      	cbz	r0, 800ce3a <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ce14:	b314      	cbz	r4, 800ce5c <pbuf_remove_header+0x50>
 800ce16:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800ce1a:	d221      	bcs.n	800ce60 <pbuf_remove_header+0x54>
  if (header_size_decrement == 0) {
 800ce1c:	b315      	cbz	r5, 800ce64 <pbuf_remove_header+0x58>
  increment_magnitude = (u16_t)header_size_decrement;
 800ce1e:	b2aa      	uxth	r2, r5
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ce20:	8963      	ldrh	r3, [r4, #10]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d811      	bhi.n	800ce4a <pbuf_remove_header+0x3e>
  payload = p->payload;
 800ce26:	6861      	ldr	r1, [r4, #4]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ce28:	440d      	add	r5, r1
 800ce2a:	6065      	str	r5, [r4, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800ce2c:	1a9b      	subs	r3, r3, r2
 800ce2e:	8163      	strh	r3, [r4, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ce30:	8923      	ldrh	r3, [r4, #8]
 800ce32:	1a9a      	subs	r2, r3, r2
 800ce34:	8122      	strh	r2, [r4, #8]
  return 0;
 800ce36:	2000      	movs	r0, #0
 800ce38:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800ce3a:	4b0b      	ldr	r3, [pc, #44]	; (800ce68 <pbuf_remove_header+0x5c>)
 800ce3c:	f240 224b 	movw	r2, #587	; 0x24b
 800ce40:	490a      	ldr	r1, [pc, #40]	; (800ce6c <pbuf_remove_header+0x60>)
 800ce42:	480b      	ldr	r0, [pc, #44]	; (800ce70 <pbuf_remove_header+0x64>)
 800ce44:	f005 f992 	bl	801216c <iprintf>
 800ce48:	e7e4      	b.n	800ce14 <pbuf_remove_header+0x8>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ce4a:	4b07      	ldr	r3, [pc, #28]	; (800ce68 <pbuf_remove_header+0x5c>)
 800ce4c:	f240 2255 	movw	r2, #597	; 0x255
 800ce50:	4908      	ldr	r1, [pc, #32]	; (800ce74 <pbuf_remove_header+0x68>)
 800ce52:	4807      	ldr	r0, [pc, #28]	; (800ce70 <pbuf_remove_header+0x64>)
 800ce54:	f005 f98a 	bl	801216c <iprintf>
 800ce58:	2001      	movs	r0, #1
 800ce5a:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 800ce5c:	2001      	movs	r0, #1
 800ce5e:	bd38      	pop	{r3, r4, r5, pc}
 800ce60:	2001      	movs	r0, #1
 800ce62:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 800ce64:	2000      	movs	r0, #0
}
 800ce66:	bd38      	pop	{r3, r4, r5, pc}
 800ce68:	08068bf8 	.word	0x08068bf8
 800ce6c:	08067e60 	.word	0x08067e60
 800ce70:	0801335c 	.word	0x0801335c
 800ce74:	08068f14 	.word	0x08068f14

0800ce78 <pbuf_header_impl>:
{
 800ce78:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 800ce7a:	2900      	cmp	r1, #0
 800ce7c:	db02      	blt.n	800ce84 <pbuf_header_impl+0xc>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ce7e:	f7ff ff3f 	bl	800cd00 <pbuf_add_header_impl>
}
 800ce82:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ce84:	4249      	negs	r1, r1
 800ce86:	f7ff ffc1 	bl	800ce0c <pbuf_remove_header>
 800ce8a:	bd08      	pop	{r3, pc}

0800ce8c <pbuf_header_force>:
{
 800ce8c:	b508      	push	{r3, lr}
  return pbuf_header_impl(p, header_size_increment, 1);
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f7ff fff2 	bl	800ce78 <pbuf_header_impl>
}
 800ce94:	bd08      	pop	{r3, pc}
	...

0800ce98 <pbuf_free>:
{
 800ce98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (p == NULL) {
 800ce9a:	b110      	cbz	r0, 800cea2 <pbuf_free+0xa>
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	2600      	movs	r6, #0
 800cea0:	e017      	b.n	800ced2 <pbuf_free+0x3a>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cea2:	4b2c      	ldr	r3, [pc, #176]	; (800cf54 <pbuf_free+0xbc>)
 800cea4:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cea8:	492b      	ldr	r1, [pc, #172]	; (800cf58 <pbuf_free+0xc0>)
 800ceaa:	482c      	ldr	r0, [pc, #176]	; (800cf5c <pbuf_free+0xc4>)
 800ceac:	f005 f95e 	bl	801216c <iprintf>
    return 0;
 800ceb0:	2600      	movs	r6, #0
}
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ceb6:	4b27      	ldr	r3, [pc, #156]	; (800cf54 <pbuf_free+0xbc>)
 800ceb8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cebc:	4928      	ldr	r1, [pc, #160]	; (800cf60 <pbuf_free+0xc8>)
 800cebe:	4827      	ldr	r0, [pc, #156]	; (800cf5c <pbuf_free+0xc4>)
 800cec0:	f005 f954 	bl	801216c <iprintf>
 800cec4:	e00d      	b.n	800cee2 <pbuf_free+0x4a>
        pc->custom_free_function(p);
 800cec6:	6923      	ldr	r3, [r4, #16]
 800cec8:	4620      	mov	r0, r4
 800ceca:	4798      	blx	r3
      count++;
 800cecc:	3601      	adds	r6, #1
 800cece:	b2f6      	uxtb	r6, r6
      p = q;
 800ced0:	462c      	mov	r4, r5
  while (p != NULL) {
 800ced2:	2c00      	cmp	r4, #0
 800ced4:	d0ed      	beq.n	800ceb2 <pbuf_free+0x1a>
    SYS_ARCH_PROTECT(old_level);
 800ced6:	f005 f881 	bl	8011fdc <sys_arch_protect>
 800ceda:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cedc:	7ba3      	ldrb	r3, [r4, #14]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d0e9      	beq.n	800ceb6 <pbuf_free+0x1e>
    ref = --(p->ref);
 800cee2:	7ba5      	ldrb	r5, [r4, #14]
 800cee4:	3d01      	subs	r5, #1
 800cee6:	b2ed      	uxtb	r5, r5
 800cee8:	73a5      	strb	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800ceea:	4638      	mov	r0, r7
 800ceec:	f005 f882 	bl	8011ff4 <sys_arch_unprotect>
    if (ref == 0) {
 800cef0:	bb6d      	cbnz	r5, 800cf4e <pbuf_free+0xb6>
      q = p->next;
 800cef2:	6825      	ldr	r5, [r4, #0]
      alloc_src = pbuf_get_allocsrc(p);
 800cef4:	7b23      	ldrb	r3, [r4, #12]
 800cef6:	f003 030f 	and.w	r3, r3, #15
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cefa:	7b62      	ldrb	r2, [r4, #13]
 800cefc:	f012 0f02 	tst.w	r2, #2
 800cf00:	d00a      	beq.n	800cf18 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cf02:	6923      	ldr	r3, [r4, #16]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1de      	bne.n	800cec6 <pbuf_free+0x2e>
 800cf08:	4b12      	ldr	r3, [pc, #72]	; (800cf54 <pbuf_free+0xbc>)
 800cf0a:	f240 22ff 	movw	r2, #767	; 0x2ff
 800cf0e:	4915      	ldr	r1, [pc, #84]	; (800cf64 <pbuf_free+0xcc>)
 800cf10:	4812      	ldr	r0, [pc, #72]	; (800cf5c <pbuf_free+0xc4>)
 800cf12:	f005 f92b 	bl	801216c <iprintf>
 800cf16:	e7d6      	b.n	800cec6 <pbuf_free+0x2e>
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d006      	beq.n	800cf2a <pbuf_free+0x92>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d009      	beq.n	800cf34 <pbuf_free+0x9c>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cf20:	b96b      	cbnz	r3, 800cf3e <pbuf_free+0xa6>
          mem_free(p);
 800cf22:	4620      	mov	r0, r4
 800cf24:	f7ff fa3c 	bl	800c3a0 <mem_free>
 800cf28:	e7d0      	b.n	800cecc <pbuf_free+0x34>
          memp_free(MEMP_PBUF_POOL, p);
 800cf2a:	4621      	mov	r1, r4
 800cf2c:	200c      	movs	r0, #12
 800cf2e:	f7ff fcc5 	bl	800c8bc <memp_free>
 800cf32:	e7cb      	b.n	800cecc <pbuf_free+0x34>
          memp_free(MEMP_PBUF, p);
 800cf34:	4621      	mov	r1, r4
 800cf36:	200b      	movs	r0, #11
 800cf38:	f7ff fcc0 	bl	800c8bc <memp_free>
 800cf3c:	e7c6      	b.n	800cecc <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 800cf3e:	4b05      	ldr	r3, [pc, #20]	; (800cf54 <pbuf_free+0xbc>)
 800cf40:	f240 320f 	movw	r2, #783	; 0x30f
 800cf44:	4908      	ldr	r1, [pc, #32]	; (800cf68 <pbuf_free+0xd0>)
 800cf46:	4805      	ldr	r0, [pc, #20]	; (800cf5c <pbuf_free+0xc4>)
 800cf48:	f005 f910 	bl	801216c <iprintf>
 800cf4c:	e7be      	b.n	800cecc <pbuf_free+0x34>
      p = NULL;
 800cf4e:	2400      	movs	r4, #0
 800cf50:	e7bf      	b.n	800ced2 <pbuf_free+0x3a>
 800cf52:	bf00      	nop
 800cf54:	08068bf8 	.word	0x08068bf8
 800cf58:	08067e60 	.word	0x08067e60
 800cf5c:	0801335c 	.word	0x0801335c
 800cf60:	08068e64 	.word	0x08068e64
 800cf64:	08068e7c 	.word	0x08068e7c
 800cf68:	08068ea0 	.word	0x08068ea0

0800cf6c <pbuf_alloc>:
{
 800cf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf70:	b082      	sub	sp, #8
 800cf72:	460f      	mov	r7, r1
 800cf74:	4690      	mov	r8, r2
  switch (type) {
 800cf76:	2a41      	cmp	r2, #65	; 0x41
 800cf78:	d046      	beq.n	800d008 <pbuf_alloc+0x9c>
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	b285      	uxth	r5, r0
 800cf7e:	d937      	bls.n	800cff0 <pbuf_alloc+0x84>
 800cf80:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 800cf84:	d04a      	beq.n	800d01c <pbuf_alloc+0xb0>
 800cf86:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800cf8a:	d133      	bne.n	800cff4 <pbuf_alloc+0x88>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cf8c:	3503      	adds	r5, #3
 800cf8e:	f025 0503 	bic.w	r5, r5, #3
 800cf92:	b2ad      	uxth	r5, r5
 800cf94:	1cca      	adds	r2, r1, #3
 800cf96:	b293      	uxth	r3, r2
 800cf98:	f023 0303 	bic.w	r3, r3, #3
 800cf9c:	441d      	add	r5, r3
 800cf9e:	b2ad      	uxth	r5, r5
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cfa0:	f105 0010 	add.w	r0, r5, #16
 800cfa4:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cfa6:	f022 0203 	bic.w	r2, r2, #3
 800cfaa:	4295      	cmp	r5, r2
 800cfac:	d37a      	bcc.n	800d0a4 <pbuf_alloc+0x138>
 800cfae:	4282      	cmp	r2, r0
 800cfb0:	d87b      	bhi.n	800d0aa <pbuf_alloc+0x13e>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cfb2:	f7ff fb41 	bl	800c638 <mem_malloc>
      if (p == NULL) {
 800cfb6:	4681      	mov	r9, r0
 800cfb8:	b360      	cbz	r0, 800d014 <pbuf_alloc+0xa8>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cfba:	f104 0110 	add.w	r1, r4, #16
 800cfbe:	4401      	add	r1, r0
 800cfc0:	3103      	adds	r1, #3
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	9301      	str	r3, [sp, #4]
 800cfc6:	f8cd 8000 	str.w	r8, [sp]
 800cfca:	463b      	mov	r3, r7
 800cfcc:	463a      	mov	r2, r7
 800cfce:	f021 0103 	bic.w	r1, r1, #3
 800cfd2:	f7ff fe77 	bl	800ccc4 <pbuf_init_alloced_pbuf>
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cfd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cfda:	f013 0f03 	tst.w	r3, #3
 800cfde:	d019      	beq.n	800d014 <pbuf_alloc+0xa8>
 800cfe0:	4b33      	ldr	r3, [pc, #204]	; (800d0b0 <pbuf_alloc+0x144>)
 800cfe2:	f240 1223 	movw	r2, #291	; 0x123
 800cfe6:	4933      	ldr	r1, [pc, #204]	; (800d0b4 <pbuf_alloc+0x148>)
 800cfe8:	4833      	ldr	r0, [pc, #204]	; (800d0b8 <pbuf_alloc+0x14c>)
 800cfea:	f005 f8bf 	bl	801216c <iprintf>
 800cfee:	e011      	b.n	800d014 <pbuf_alloc+0xa8>
  switch (type) {
 800cff0:	2a01      	cmp	r2, #1
 800cff2:	d009      	beq.n	800d008 <pbuf_alloc+0x9c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cff4:	4b2e      	ldr	r3, [pc, #184]	; (800d0b0 <pbuf_alloc+0x144>)
 800cff6:	f240 1227 	movw	r2, #295	; 0x127
 800cffa:	4930      	ldr	r1, [pc, #192]	; (800d0bc <pbuf_alloc+0x150>)
 800cffc:	482e      	ldr	r0, [pc, #184]	; (800d0b8 <pbuf_alloc+0x14c>)
 800cffe:	f005 f8b5 	bl	801216c <iprintf>
      return NULL;
 800d002:	f04f 0900 	mov.w	r9, #0
 800d006:	e005      	b.n	800d014 <pbuf_alloc+0xa8>
      p = pbuf_alloc_reference(NULL, length, type);
 800d008:	4642      	mov	r2, r8
 800d00a:	4639      	mov	r1, r7
 800d00c:	2000      	movs	r0, #0
 800d00e:	f7ff feb5 	bl	800cd7c <pbuf_alloc_reference>
 800d012:	4681      	mov	r9, r0
}
 800d014:	4648      	mov	r0, r9
 800d016:	b002      	add	sp, #8
 800d018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 800d01c:	f04f 0a00 	mov.w	sl, #0
 800d020:	46d1      	mov	r9, sl
 800d022:	e012      	b.n	800d04a <pbuf_alloc+0xde>
          if (p) {
 800d024:	f1b9 0f00 	cmp.w	r9, #0
 800d028:	d0f4      	beq.n	800d014 <pbuf_alloc+0xa8>
            pbuf_free(p);
 800d02a:	4648      	mov	r0, r9
 800d02c:	f7ff ff34 	bl	800ce98 <pbuf_free>
          return NULL;
 800d030:	46b1      	mov	r9, r6
 800d032:	e7ef      	b.n	800d014 <pbuf_alloc+0xa8>
        if (p == NULL) {
 800d034:	f1b9 0f00 	cmp.w	r9, #0
 800d038:	d032      	beq.n	800d0a0 <pbuf_alloc+0x134>
          last->next = q;
 800d03a:	f8ca 6000 	str.w	r6, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 800d03e:	1b3f      	subs	r7, r7, r4
 800d040:	b2bf      	uxth	r7, r7
        offset = 0;
 800d042:	2500      	movs	r5, #0
        last = q;
 800d044:	46b2      	mov	sl, r6
      } while (rem_len > 0);
 800d046:	2f00      	cmp	r7, #0
 800d048:	d0e4      	beq.n	800d014 <pbuf_alloc+0xa8>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d04a:	200c      	movs	r0, #12
 800d04c:	f7ff fc1c 	bl	800c888 <memp_malloc>
        if (q == NULL) {
 800d050:	4606      	mov	r6, r0
 800d052:	2800      	cmp	r0, #0
 800d054:	d0e6      	beq.n	800d024 <pbuf_alloc+0xb8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d056:	1ceb      	adds	r3, r5, #3
 800d058:	f023 0303 	bic.w	r3, r3, #3
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800d062:	3304      	adds	r3, #4
 800d064:	b29c      	uxth	r4, r3
 800d066:	42bc      	cmp	r4, r7
 800d068:	bf28      	it	cs
 800d06a:	463c      	movcs	r4, r7
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d06c:	f105 0110 	add.w	r1, r5, #16
 800d070:	4401      	add	r1, r0
 800d072:	3103      	adds	r1, #3
 800d074:	2300      	movs	r3, #0
 800d076:	9301      	str	r3, [sp, #4]
 800d078:	f8cd 8000 	str.w	r8, [sp]
 800d07c:	4623      	mov	r3, r4
 800d07e:	463a      	mov	r2, r7
 800d080:	f021 0103 	bic.w	r1, r1, #3
 800d084:	f7ff fe1e 	bl	800ccc4 <pbuf_init_alloced_pbuf>
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d088:	6873      	ldr	r3, [r6, #4]
 800d08a:	f013 0f03 	tst.w	r3, #3
 800d08e:	d0d1      	beq.n	800d034 <pbuf_alloc+0xc8>
 800d090:	4b07      	ldr	r3, [pc, #28]	; (800d0b0 <pbuf_alloc+0x144>)
 800d092:	f240 1201 	movw	r2, #257	; 0x101
 800d096:	490a      	ldr	r1, [pc, #40]	; (800d0c0 <pbuf_alloc+0x154>)
 800d098:	4807      	ldr	r0, [pc, #28]	; (800d0b8 <pbuf_alloc+0x14c>)
 800d09a:	f005 f867 	bl	801216c <iprintf>
 800d09e:	e7c9      	b.n	800d034 <pbuf_alloc+0xc8>
          p = q;
 800d0a0:	46b1      	mov	r9, r6
 800d0a2:	e7cc      	b.n	800d03e <pbuf_alloc+0xd2>
        return NULL;
 800d0a4:	f04f 0900 	mov.w	r9, #0
 800d0a8:	e7b4      	b.n	800d014 <pbuf_alloc+0xa8>
 800d0aa:	f04f 0900 	mov.w	r9, #0
 800d0ae:	e7b1      	b.n	800d014 <pbuf_alloc+0xa8>
 800d0b0:	08068bf8 	.word	0x08068bf8
 800d0b4:	08068c98 	.word	0x08068c98
 800d0b8:	0801335c 	.word	0x0801335c
 800d0bc:	08068cc4 	.word	0x08068cc4
 800d0c0:	08068c34 	.word	0x08068c34

0800d0c4 <pbuf_realloc>:
{
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d0c8:	4604      	mov	r4, r0
 800d0ca:	b1b8      	cbz	r0, 800d0fc <pbuf_realloc+0x38>
  if (new_len >= p->tot_len) {
 800d0cc:	8926      	ldrh	r6, [r4, #8]
 800d0ce:	42ae      	cmp	r6, r5
 800d0d0:	d92e      	bls.n	800d130 <pbuf_realloc+0x6c>
  shrink = (u16_t)(p->tot_len - new_len);
 800d0d2:	1b76      	subs	r6, r6, r5
 800d0d4:	b2b6      	uxth	r6, r6
  while (rem_len > q->len) {
 800d0d6:	8961      	ldrh	r1, [r4, #10]
 800d0d8:	428d      	cmp	r5, r1
 800d0da:	d917      	bls.n	800d10c <pbuf_realloc+0x48>
    rem_len = (u16_t)(rem_len - q->len);
 800d0dc:	1a69      	subs	r1, r5, r1
 800d0de:	b28d      	uxth	r5, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d0e0:	8923      	ldrh	r3, [r4, #8]
 800d0e2:	1b9b      	subs	r3, r3, r6
 800d0e4:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800d0e6:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d0e8:	2c00      	cmp	r4, #0
 800d0ea:	d1f4      	bne.n	800d0d6 <pbuf_realloc+0x12>
 800d0ec:	4b1a      	ldr	r3, [pc, #104]	; (800d158 <pbuf_realloc+0x94>)
 800d0ee:	f240 12af 	movw	r2, #431	; 0x1af
 800d0f2:	491a      	ldr	r1, [pc, #104]	; (800d15c <pbuf_realloc+0x98>)
 800d0f4:	481a      	ldr	r0, [pc, #104]	; (800d160 <pbuf_realloc+0x9c>)
 800d0f6:	f005 f839 	bl	801216c <iprintf>
 800d0fa:	e7ec      	b.n	800d0d6 <pbuf_realloc+0x12>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d0fc:	4b16      	ldr	r3, [pc, #88]	; (800d158 <pbuf_realloc+0x94>)
 800d0fe:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d102:	4918      	ldr	r1, [pc, #96]	; (800d164 <pbuf_realloc+0xa0>)
 800d104:	4816      	ldr	r0, [pc, #88]	; (800d160 <pbuf_realloc+0x9c>)
 800d106:	f005 f831 	bl	801216c <iprintf>
 800d10a:	e7df      	b.n	800d0cc <pbuf_realloc+0x8>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d10c:	7b23      	ldrb	r3, [r4, #12]
 800d10e:	f013 0f0f 	tst.w	r3, #15
 800d112:	d105      	bne.n	800d120 <pbuf_realloc+0x5c>
 800d114:	428d      	cmp	r5, r1
 800d116:	d003      	beq.n	800d120 <pbuf_realloc+0x5c>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d118:	7b63      	ldrb	r3, [r4, #13]
 800d11a:	f013 0f02 	tst.w	r3, #2
 800d11e:	d008      	beq.n	800d132 <pbuf_realloc+0x6e>
  q->len = rem_len;
 800d120:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800d122:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800d124:	6820      	ldr	r0, [r4, #0]
 800d126:	b108      	cbz	r0, 800d12c <pbuf_realloc+0x68>
    pbuf_free(q->next);
 800d128:	f7ff feb6 	bl	800ce98 <pbuf_free>
  q->next = NULL;
 800d12c:	2300      	movs	r3, #0
 800d12e:	6023      	str	r3, [r4, #0]
 800d130:	bd70      	pop	{r4, r5, r6, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d132:	6863      	ldr	r3, [r4, #4]
 800d134:	1b1b      	subs	r3, r3, r4
 800d136:	18e9      	adds	r1, r5, r3
 800d138:	b289      	uxth	r1, r1
 800d13a:	4620      	mov	r0, r4
 800d13c:	f7ff f9a8 	bl	800c490 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d140:	4604      	mov	r4, r0
 800d142:	2800      	cmp	r0, #0
 800d144:	d1ec      	bne.n	800d120 <pbuf_realloc+0x5c>
 800d146:	4b04      	ldr	r3, [pc, #16]	; (800d158 <pbuf_realloc+0x94>)
 800d148:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d14c:	4906      	ldr	r1, [pc, #24]	; (800d168 <pbuf_realloc+0xa4>)
 800d14e:	4804      	ldr	r0, [pc, #16]	; (800d160 <pbuf_realloc+0x9c>)
 800d150:	f005 f80c 	bl	801216c <iprintf>
 800d154:	e7e4      	b.n	800d120 <pbuf_realloc+0x5c>
 800d156:	bf00      	nop
 800d158:	08068bf8 	.word	0x08068bf8
 800d15c:	08068ecc 	.word	0x08068ecc
 800d160:	0801335c 	.word	0x0801335c
 800d164:	08068eb4 	.word	0x08068eb4
 800d168:	08068ee4 	.word	0x08068ee4

0800d16c <pbuf_clen>:
  len = 0;
 800d16c:	2300      	movs	r3, #0
  while (p != NULL) {
 800d16e:	e002      	b.n	800d176 <pbuf_clen+0xa>
    ++len;
 800d170:	3301      	adds	r3, #1
 800d172:	b29b      	uxth	r3, r3
    p = p->next;
 800d174:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 800d176:	2800      	cmp	r0, #0
 800d178:	d1fa      	bne.n	800d170 <pbuf_clen+0x4>
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	4770      	bx	lr
	...

0800d180 <pbuf_ref>:
  if (p != NULL) {
 800d180:	b198      	cbz	r0, 800d1aa <pbuf_ref+0x2a>
{
 800d182:	b510      	push	{r4, lr}
 800d184:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d186:	f004 ff29 	bl	8011fdc <sys_arch_protect>
 800d18a:	7ba3      	ldrb	r3, [r4, #14]
 800d18c:	3301      	adds	r3, #1
 800d18e:	73a3      	strb	r3, [r4, #14]
 800d190:	f004 ff30 	bl	8011ff4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d194:	7ba3      	ldrb	r3, [r4, #14]
 800d196:	b103      	cbz	r3, 800d19a <pbuf_ref+0x1a>
 800d198:	bd10      	pop	{r4, pc}
 800d19a:	4b04      	ldr	r3, [pc, #16]	; (800d1ac <pbuf_ref+0x2c>)
 800d19c:	f240 3242 	movw	r2, #834	; 0x342
 800d1a0:	4903      	ldr	r1, [pc, #12]	; (800d1b0 <pbuf_ref+0x30>)
 800d1a2:	4804      	ldr	r0, [pc, #16]	; (800d1b4 <pbuf_ref+0x34>)
 800d1a4:	f004 ffe2 	bl	801216c <iprintf>
}
 800d1a8:	e7f6      	b.n	800d198 <pbuf_ref+0x18>
 800d1aa:	4770      	bx	lr
 800d1ac:	08068bf8 	.word	0x08068bf8
 800d1b0:	08068f00 	.word	0x08068f00
 800d1b4:	0801335c 	.word	0x0801335c

0800d1b8 <pbuf_cat>:
{
 800d1b8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d1ba:	b110      	cbz	r0, 800d1c2 <pbuf_cat+0xa>
 800d1bc:	460d      	mov	r5, r1
 800d1be:	4604      	mov	r4, r0
 800d1c0:	b961      	cbnz	r1, 800d1dc <pbuf_cat+0x24>
 800d1c2:	4b15      	ldr	r3, [pc, #84]	; (800d218 <pbuf_cat+0x60>)
 800d1c4:	f240 325a 	movw	r2, #858	; 0x35a
 800d1c8:	4914      	ldr	r1, [pc, #80]	; (800d21c <pbuf_cat+0x64>)
 800d1ca:	4815      	ldr	r0, [pc, #84]	; (800d220 <pbuf_cat+0x68>)
 800d1cc:	f004 ffce 	bl	801216c <iprintf>
 800d1d0:	bd38      	pop	{r3, r4, r5, pc}
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d1d2:	8923      	ldrh	r3, [r4, #8]
 800d1d4:	8929      	ldrh	r1, [r5, #8]
 800d1d6:	440b      	add	r3, r1
 800d1d8:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d1da:	4614      	mov	r4, r2
 800d1dc:	6822      	ldr	r2, [r4, #0]
 800d1de:	2a00      	cmp	r2, #0
 800d1e0:	d1f7      	bne.n	800d1d2 <pbuf_cat+0x1a>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d1e2:	8922      	ldrh	r2, [r4, #8]
 800d1e4:	8963      	ldrh	r3, [r4, #10]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d006      	beq.n	800d1f8 <pbuf_cat+0x40>
 800d1ea:	4b0b      	ldr	r3, [pc, #44]	; (800d218 <pbuf_cat+0x60>)
 800d1ec:	f240 3262 	movw	r2, #866	; 0x362
 800d1f0:	490c      	ldr	r1, [pc, #48]	; (800d224 <pbuf_cat+0x6c>)
 800d1f2:	480b      	ldr	r0, [pc, #44]	; (800d220 <pbuf_cat+0x68>)
 800d1f4:	f004 ffba 	bl	801216c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d1f8:	6823      	ldr	r3, [r4, #0]
 800d1fa:	b133      	cbz	r3, 800d20a <pbuf_cat+0x52>
 800d1fc:	4b06      	ldr	r3, [pc, #24]	; (800d218 <pbuf_cat+0x60>)
 800d1fe:	f240 3263 	movw	r2, #867	; 0x363
 800d202:	4909      	ldr	r1, [pc, #36]	; (800d228 <pbuf_cat+0x70>)
 800d204:	4806      	ldr	r0, [pc, #24]	; (800d220 <pbuf_cat+0x68>)
 800d206:	f004 ffb1 	bl	801216c <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d20a:	8923      	ldrh	r3, [r4, #8]
 800d20c:	892a      	ldrh	r2, [r5, #8]
 800d20e:	4413      	add	r3, r2
 800d210:	8123      	strh	r3, [r4, #8]
  p->next = t;
 800d212:	6025      	str	r5, [r4, #0]
 800d214:	bd38      	pop	{r3, r4, r5, pc}
 800d216:	bf00      	nop
 800d218:	08068bf8 	.word	0x08068bf8
 800d21c:	08068cf4 	.word	0x08068cf4
 800d220:	0801335c 	.word	0x0801335c
 800d224:	08068d2c 	.word	0x08068d2c
 800d228:	08068d5c 	.word	0x08068d5c

0800d22c <pbuf_chain>:
{
 800d22c:	b510      	push	{r4, lr}
 800d22e:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800d230:	f7ff ffc2 	bl	800d1b8 <pbuf_cat>
  pbuf_ref(t);
 800d234:	4620      	mov	r0, r4
 800d236:	f7ff ffa3 	bl	800d180 <pbuf_ref>
 800d23a:	bd10      	pop	{r4, pc}

0800d23c <pbuf_copy>:
{
 800d23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d240:	b148      	cbz	r0, 800d256 <pbuf_copy+0x1a>
 800d242:	460c      	mov	r4, r1
 800d244:	4605      	mov	r5, r0
 800d246:	b131      	cbz	r1, 800d256 <pbuf_copy+0x1a>
 800d248:	8902      	ldrh	r2, [r0, #8]
 800d24a:	890b      	ldrh	r3, [r1, #8]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d302      	bcc.n	800d256 <pbuf_copy+0x1a>
 800d250:	2700      	movs	r7, #0
 800d252:	46b8      	mov	r8, r7
 800d254:	e029      	b.n	800d2aa <pbuf_copy+0x6e>
 800d256:	4b3d      	ldr	r3, [pc, #244]	; (800d34c <pbuf_copy+0x110>)
 800d258:	f240 32ca 	movw	r2, #970	; 0x3ca
 800d25c:	493c      	ldr	r1, [pc, #240]	; (800d350 <pbuf_copy+0x114>)
 800d25e:	483d      	ldr	r0, [pc, #244]	; (800d354 <pbuf_copy+0x118>)
 800d260:	f004 ff84 	bl	801216c <iprintf>
 800d264:	f06f 000f 	mvn.w	r0, #15
 800d268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d26c:	4b37      	ldr	r3, [pc, #220]	; (800d34c <pbuf_copy+0x110>)
 800d26e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d272:	4939      	ldr	r1, [pc, #228]	; (800d358 <pbuf_copy+0x11c>)
 800d274:	4837      	ldr	r0, [pc, #220]	; (800d354 <pbuf_copy+0x118>)
 800d276:	f004 ff79 	bl	801216c <iprintf>
 800d27a:	e02a      	b.n	800d2d2 <pbuf_copy+0x96>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d27c:	4b33      	ldr	r3, [pc, #204]	; (800d34c <pbuf_copy+0x110>)
 800d27e:	f240 32da 	movw	r2, #986	; 0x3da
 800d282:	4936      	ldr	r1, [pc, #216]	; (800d35c <pbuf_copy+0x120>)
 800d284:	4833      	ldr	r0, [pc, #204]	; (800d354 <pbuf_copy+0x118>)
 800d286:	f004 ff71 	bl	801216c <iprintf>
 800d28a:	e025      	b.n	800d2d8 <pbuf_copy+0x9c>
    if (offset_to == p_to->len) {
 800d28c:	896b      	ldrh	r3, [r5, #10]
 800d28e:	4598      	cmp	r8, r3
 800d290:	d028      	beq.n	800d2e4 <pbuf_copy+0xa8>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d292:	b11c      	cbz	r4, 800d29c <pbuf_copy+0x60>
 800d294:	8962      	ldrh	r2, [r4, #10]
 800d296:	8923      	ldrh	r3, [r4, #8]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d037      	beq.n	800d30c <pbuf_copy+0xd0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d29c:	b11d      	cbz	r5, 800d2a6 <pbuf_copy+0x6a>
 800d29e:	896a      	ldrh	r2, [r5, #10]
 800d2a0:	892b      	ldrh	r3, [r5, #8]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d040      	beq.n	800d328 <pbuf_copy+0xec>
  } while (p_from);
 800d2a6:	2c00      	cmp	r4, #0
 800d2a8:	d04c      	beq.n	800d344 <pbuf_copy+0x108>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d2aa:	896e      	ldrh	r6, [r5, #10]
 800d2ac:	eba6 0608 	sub.w	r6, r6, r8
 800d2b0:	8963      	ldrh	r3, [r4, #10]
 800d2b2:	1bdb      	subs	r3, r3, r7
 800d2b4:	429e      	cmp	r6, r3
 800d2b6:	d300      	bcc.n	800d2ba <pbuf_copy+0x7e>
      len = p_from->len - offset_from;
 800d2b8:	461e      	mov	r6, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d2ba:	6868      	ldr	r0, [r5, #4]
 800d2bc:	6861      	ldr	r1, [r4, #4]
 800d2be:	4632      	mov	r2, r6
 800d2c0:	4439      	add	r1, r7
 800d2c2:	4440      	add	r0, r8
 800d2c4:	f004 ff24 	bl	8012110 <memcpy>
    offset_to += len;
 800d2c8:	44b0      	add	r8, r6
    offset_from += len;
 800d2ca:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d2cc:	896b      	ldrh	r3, [r5, #10]
 800d2ce:	4598      	cmp	r8, r3
 800d2d0:	d8cc      	bhi.n	800d26c <pbuf_copy+0x30>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d2d2:	8963      	ldrh	r3, [r4, #10]
 800d2d4:	429f      	cmp	r7, r3
 800d2d6:	d8d1      	bhi.n	800d27c <pbuf_copy+0x40>
    if (offset_from >= p_from->len) {
 800d2d8:	8963      	ldrh	r3, [r4, #10]
 800d2da:	429f      	cmp	r7, r3
 800d2dc:	d3d6      	bcc.n	800d28c <pbuf_copy+0x50>
      p_from = p_from->next;
 800d2de:	6824      	ldr	r4, [r4, #0]
      offset_from = 0;
 800d2e0:	2700      	movs	r7, #0
 800d2e2:	e7d3      	b.n	800d28c <pbuf_copy+0x50>
      p_to = p_to->next;
 800d2e4:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d2e6:	b115      	cbz	r5, 800d2ee <pbuf_copy+0xb2>
      offset_to = 0;
 800d2e8:	f04f 0800 	mov.w	r8, #0
 800d2ec:	e7d1      	b.n	800d292 <pbuf_copy+0x56>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d2ee:	b914      	cbnz	r4, 800d2f6 <pbuf_copy+0xba>
      offset_to = 0;
 800d2f0:	f04f 0800 	mov.w	r8, #0
 800d2f4:	e7cd      	b.n	800d292 <pbuf_copy+0x56>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d2f6:	4b15      	ldr	r3, [pc, #84]	; (800d34c <pbuf_copy+0x110>)
 800d2f8:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d2fc:	4918      	ldr	r1, [pc, #96]	; (800d360 <pbuf_copy+0x124>)
 800d2fe:	4815      	ldr	r0, [pc, #84]	; (800d354 <pbuf_copy+0x118>)
 800d300:	f004 ff34 	bl	801216c <iprintf>
 800d304:	f06f 000f 	mvn.w	r0, #15
 800d308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d30c:	6823      	ldr	r3, [r4, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d0c4      	beq.n	800d29c <pbuf_copy+0x60>
 800d312:	4b0e      	ldr	r3, [pc, #56]	; (800d34c <pbuf_copy+0x110>)
 800d314:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800d318:	4912      	ldr	r1, [pc, #72]	; (800d364 <pbuf_copy+0x128>)
 800d31a:	480e      	ldr	r0, [pc, #56]	; (800d354 <pbuf_copy+0x118>)
 800d31c:	f004 ff26 	bl	801216c <iprintf>
 800d320:	f06f 0005 	mvn.w	r0, #5
 800d324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d328:	682b      	ldr	r3, [r5, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d0bb      	beq.n	800d2a6 <pbuf_copy+0x6a>
 800d32e:	4b07      	ldr	r3, [pc, #28]	; (800d34c <pbuf_copy+0x110>)
 800d330:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800d334:	490b      	ldr	r1, [pc, #44]	; (800d364 <pbuf_copy+0x128>)
 800d336:	4807      	ldr	r0, [pc, #28]	; (800d354 <pbuf_copy+0x118>)
 800d338:	f004 ff18 	bl	801216c <iprintf>
 800d33c:	f06f 0005 	mvn.w	r0, #5
 800d340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_OK;
 800d344:	2000      	movs	r0, #0
}
 800d346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d34a:	bf00      	nop
 800d34c:	08068bf8 	.word	0x08068bf8
 800d350:	08068d80 	.word	0x08068d80
 800d354:	0801335c 	.word	0x0801335c
 800d358:	08068db0 	.word	0x08068db0
 800d35c:	08068dc8 	.word	0x08068dc8
 800d360:	08068de4 	.word	0x08068de4
 800d364:	08068df4 	.word	0x08068df4

0800d368 <pbuf_copy_partial>:
{
 800d368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d36c:	b128      	cbz	r0, 800d37a <pbuf_copy_partial+0x12>
 800d36e:	460f      	mov	r7, r1
 800d370:	4690      	mov	r8, r2
 800d372:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d374:	b161      	cbz	r1, 800d390 <pbuf_copy_partial+0x28>
 800d376:	2600      	movs	r6, #0
 800d378:	e027      	b.n	800d3ca <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d37a:	4b1a      	ldr	r3, [pc, #104]	; (800d3e4 <pbuf_copy_partial+0x7c>)
 800d37c:	f240 420a 	movw	r2, #1034	; 0x40a
 800d380:	4919      	ldr	r1, [pc, #100]	; (800d3e8 <pbuf_copy_partial+0x80>)
 800d382:	481a      	ldr	r0, [pc, #104]	; (800d3ec <pbuf_copy_partial+0x84>)
 800d384:	f004 fef2 	bl	801216c <iprintf>
 800d388:	2600      	movs	r6, #0
}
 800d38a:	4630      	mov	r0, r6
 800d38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d390:	4b14      	ldr	r3, [pc, #80]	; (800d3e4 <pbuf_copy_partial+0x7c>)
 800d392:	f240 420b 	movw	r2, #1035	; 0x40b
 800d396:	4916      	ldr	r1, [pc, #88]	; (800d3f0 <pbuf_copy_partial+0x88>)
 800d398:	4814      	ldr	r0, [pc, #80]	; (800d3ec <pbuf_copy_partial+0x84>)
 800d39a:	f004 fee7 	bl	801216c <iprintf>
 800d39e:	2600      	movs	r6, #0
 800d3a0:	e7f3      	b.n	800d38a <pbuf_copy_partial+0x22>
      buf_copy_len = (u16_t)(p->len - offset);
 800d3a2:	896a      	ldrh	r2, [r5, #10]
 800d3a4:	1ad2      	subs	r2, r2, r3
 800d3a6:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 800d3a8:	45a0      	cmp	r8, r4
 800d3aa:	d200      	bcs.n	800d3ae <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 800d3ac:	4644      	mov	r4, r8
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d3ae:	6869      	ldr	r1, [r5, #4]
 800d3b0:	4622      	mov	r2, r4
 800d3b2:	4419      	add	r1, r3
 800d3b4:	19b8      	adds	r0, r7, r6
 800d3b6:	f004 feab 	bl	8012110 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d3ba:	4426      	add	r6, r4
 800d3bc:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 800d3be:	eba8 0404 	sub.w	r4, r8, r4
 800d3c2:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 800d3c6:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d3c8:	682d      	ldr	r5, [r5, #0]
 800d3ca:	f1b8 0f00 	cmp.w	r8, #0
 800d3ce:	d0dc      	beq.n	800d38a <pbuf_copy_partial+0x22>
 800d3d0:	2d00      	cmp	r5, #0
 800d3d2:	d0da      	beq.n	800d38a <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d0e4      	beq.n	800d3a2 <pbuf_copy_partial+0x3a>
 800d3d8:	8969      	ldrh	r1, [r5, #10]
 800d3da:	428b      	cmp	r3, r1
 800d3dc:	d3e1      	bcc.n	800d3a2 <pbuf_copy_partial+0x3a>
      offset = (u16_t)(offset - p->len);
 800d3de:	1a5b      	subs	r3, r3, r1
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	e7f1      	b.n	800d3c8 <pbuf_copy_partial+0x60>
 800d3e4:	08068bf8 	.word	0x08068bf8
 800d3e8:	08068e20 	.word	0x08068e20
 800d3ec:	0801335c 	.word	0x0801335c
 800d3f0:	08068e40 	.word	0x08068e40

0800d3f4 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800d3f4:	b508      	push	{r3, lr}
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800d3f6:	f7ff fc77 	bl	800cce8 <pbuf_skip_const>
  return LWIP_CONST_CAST(struct pbuf *, out);
}
 800d3fa:	bd08      	pop	{r3, pc}

0800d3fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d3fc:	b538      	push	{r3, r4, r5, lr}
 800d3fe:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d400:	460a      	mov	r2, r1
 800d402:	8929      	ldrh	r1, [r5, #8]
 800d404:	f7ff fdb2 	bl	800cf6c <pbuf_alloc>
  if (q == NULL) {
 800d408:	4604      	mov	r4, r0
 800d40a:	b118      	cbz	r0, 800d414 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800d40c:	4629      	mov	r1, r5
 800d40e:	f7ff ff15 	bl	800d23c <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d412:	b908      	cbnz	r0, 800d418 <pbuf_clone+0x1c>
  return q;
}
 800d414:	4620      	mov	r0, r4
 800d416:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d418:	4b03      	ldr	r3, [pc, #12]	; (800d428 <pbuf_clone+0x2c>)
 800d41a:	f240 5224 	movw	r2, #1316	; 0x524
 800d41e:	4903      	ldr	r1, [pc, #12]	; (800d42c <pbuf_clone+0x30>)
 800d420:	4803      	ldr	r0, [pc, #12]	; (800d430 <pbuf_clone+0x34>)
 800d422:	f004 fea3 	bl	801216c <iprintf>
 800d426:	e7f5      	b.n	800d414 <pbuf_clone+0x18>
 800d428:	08068bf8 	.word	0x08068bf8
 800d42c:	08068d6c 	.word	0x08068d6c
 800d430:	0801335c 	.word	0x0801335c

0800d434 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800d434:	b500      	push	{lr}
 800d436:	b083      	sub	sp, #12
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800d438:	f10d 0206 	add.w	r2, sp, #6
 800d43c:	f7ff fc54 	bl	800cce8 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800d440:	b148      	cbz	r0, 800d456 <pbuf_try_get_at+0x22>
 800d442:	8941      	ldrh	r1, [r0, #10]
 800d444:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d448:	4291      	cmp	r1, r2
 800d44a:	d907      	bls.n	800d45c <pbuf_try_get_at+0x28>
    return ((u8_t *)q->payload)[q_idx];
 800d44c:	6843      	ldr	r3, [r0, #4]
 800d44e:	5c98      	ldrb	r0, [r3, r2]
  }
  return -1;
}
 800d450:	b003      	add	sp, #12
 800d452:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 800d456:	f04f 30ff 	mov.w	r0, #4294967295
 800d45a:	e7f9      	b.n	800d450 <pbuf_try_get_at+0x1c>
 800d45c:	f04f 30ff 	mov.w	r0, #4294967295
 800d460:	e7f6      	b.n	800d450 <pbuf_try_get_at+0x1c>

0800d462 <pbuf_get_at>:
{
 800d462:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 800d464:	f7ff ffe6 	bl	800d434 <pbuf_try_get_at>
  if (ret >= 0) {
 800d468:	2800      	cmp	r0, #0
 800d46a:	db01      	blt.n	800d470 <pbuf_get_at+0xe>
    return (u8_t)ret;
 800d46c:	b2c0      	uxtb	r0, r0
 800d46e:	bd08      	pop	{r3, pc}
  return 0;
 800d470:	2000      	movs	r0, #0
}
 800d472:	bd08      	pop	{r3, pc}

0800d474 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800d474:	b510      	push	{r4, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	4614      	mov	r4, r2
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800d47a:	f10d 0206 	add.w	r2, sp, #6
 800d47e:	f7ff ffb9 	bl	800d3f4 <pbuf_skip>

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800d482:	b130      	cbz	r0, 800d492 <pbuf_put_at+0x1e>
 800d484:	8941      	ldrh	r1, [r0, #10]
 800d486:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d48a:	4291      	cmp	r1, r2
 800d48c:	d901      	bls.n	800d492 <pbuf_put_at+0x1e>
    ((u8_t *)q->payload)[q_idx] = data;
 800d48e:	6843      	ldr	r3, [r0, #4]
 800d490:	549c      	strb	r4, [r3, r2]
  }
}
 800d492:	b002      	add	sp, #8
 800d494:	bd10      	pop	{r4, pc}

0800d496 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800d496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d49a:	4690      	mov	r8, r2
 800d49c:	461f      	mov	r7, r3
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800d49e:	8902      	ldrh	r2, [r0, #8]
 800d4a0:	18cb      	adds	r3, r1, r3
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	da03      	bge.n	800d4ae <pbuf_memcmp+0x18>
    return 0xffff;
 800d4a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ae:	4605      	mov	r5, r0
 800d4b0:	460e      	mov	r6, r1
 800d4b2:	e002      	b.n	800d4ba <pbuf_memcmp+0x24>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 800d4b4:	1a71      	subs	r1, r6, r1
 800d4b6:	b28e      	uxth	r6, r1
    q = q->next;
 800d4b8:	682d      	ldr	r5, [r5, #0]
  while ((q != NULL) && (q->len <= start)) {
 800d4ba:	b185      	cbz	r5, 800d4de <pbuf_memcmp+0x48>
 800d4bc:	8969      	ldrh	r1, [r5, #10]
 800d4be:	428e      	cmp	r6, r1
 800d4c0:	d2f8      	bcs.n	800d4b4 <pbuf_memcmp+0x1e>
 800d4c2:	2400      	movs	r4, #0
 800d4c4:	e00c      	b.n	800d4e0 <pbuf_memcmp+0x4a>
  for (i = 0; i < n; i++) {
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800d4c6:	1c62      	adds	r2, r4, #1
 800d4c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	dd03      	ble.n	800d4d8 <pbuf_memcmp+0x42>
 800d4d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    }
  }
  return 0;
}
 800d4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800d4d8:	b290      	uxth	r0, r2
 800d4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4de:	2400      	movs	r4, #0
  for (i = 0; i < n; i++) {
 800d4e0:	42bc      	cmp	r4, r7
 800d4e2:	d20b      	bcs.n	800d4fc <pbuf_memcmp+0x66>
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800d4e4:	1931      	adds	r1, r6, r4
 800d4e6:	b289      	uxth	r1, r1
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	f7ff ffba 	bl	800d462 <pbuf_get_at>
    u8_t b = ((const u8_t *)s2)[i];
 800d4ee:	f818 3004 	ldrb.w	r3, [r8, r4]
    if (a != b) {
 800d4f2:	4298      	cmp	r0, r3
 800d4f4:	d1e7      	bne.n	800d4c6 <pbuf_memcmp+0x30>
  for (i = 0; i < n; i++) {
 800d4f6:	3401      	adds	r4, #1
 800d4f8:	b2a4      	uxth	r4, r4
 800d4fa:	e7f1      	b.n	800d4e0 <pbuf_memcmp+0x4a>
  return 0;
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d504 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d504:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 800d506:	2400      	movs	r4, #0
 800d508:	e009      	b.n	800d51e <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d50a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d50e:	4b15      	ldr	r3, [pc, #84]	; (800d564 <tcp_new_port+0x60>)
 800d510:	801a      	strh	r2, [r3, #0]
 800d512:	e00d      	b.n	800d530 <tcp_new_port+0x2c>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
 800d514:	3401      	adds	r4, #1
 800d516:	b2a4      	uxth	r4, r4
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d518:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 800d51c:	d21f      	bcs.n	800d55e <tcp_new_port+0x5a>
  tcp_port++;
 800d51e:	4a11      	ldr	r2, [pc, #68]	; (800d564 <tcp_new_port+0x60>)
 800d520:	8813      	ldrh	r3, [r2, #0]
 800d522:	3301      	adds	r3, #1
 800d524:	b29b      	uxth	r3, r3
 800d526:	8013      	strh	r3, [r2, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d0ec      	beq.n	800d50a <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d530:	2000      	movs	r0, #0
 800d532:	2803      	cmp	r0, #3
 800d534:	d80e      	bhi.n	800d554 <tcp_new_port+0x50>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d536:	4b0c      	ldr	r3, [pc, #48]	; (800d568 <tcp_new_port+0x64>)
 800d538:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	b133      	cbz	r3, 800d54e <tcp_new_port+0x4a>
      if (pcb->local_port == tcp_port) {
 800d540:	8ad9      	ldrh	r1, [r3, #22]
 800d542:	4a08      	ldr	r2, [pc, #32]	; (800d564 <tcp_new_port+0x60>)
 800d544:	8812      	ldrh	r2, [r2, #0]
 800d546:	4291      	cmp	r1, r2
 800d548:	d0e4      	beq.n	800d514 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	e7f7      	b.n	800d53e <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d54e:	3001      	adds	r0, #1
 800d550:	b2c0      	uxtb	r0, r0
 800d552:	e7ee      	b.n	800d532 <tcp_new_port+0x2e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d554:	4b03      	ldr	r3, [pc, #12]	; (800d564 <tcp_new_port+0x60>)
 800d556:	8818      	ldrh	r0, [r3, #0]
}
 800d558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d55c:	4770      	bx	lr
          return 0;
 800d55e:	2000      	movs	r0, #0
 800d560:	e7fa      	b.n	800d558 <tcp_new_port+0x54>
 800d562:	bf00      	nop
 800d564:	200000e8 	.word	0x200000e8
 800d568:	0806921c 	.word	0x0806921c

0800d56c <tcp_remove_listener>:
{
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d570:	460d      	mov	r5, r1
 800d572:	b939      	cbnz	r1, 800d584 <tcp_remove_listener+0x18>
 800d574:	4b07      	ldr	r3, [pc, #28]	; (800d594 <tcp_remove_listener+0x28>)
 800d576:	22ff      	movs	r2, #255	; 0xff
 800d578:	4907      	ldr	r1, [pc, #28]	; (800d598 <tcp_remove_listener+0x2c>)
 800d57a:	4808      	ldr	r0, [pc, #32]	; (800d59c <tcp_remove_listener+0x30>)
 800d57c:	f004 fdf6 	bl	801216c <iprintf>
 800d580:	e000      	b.n	800d584 <tcp_remove_listener+0x18>
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d582:	68e4      	ldr	r4, [r4, #12]
 800d584:	b12c      	cbz	r4, 800d592 <tcp_remove_listener+0x26>
    if (pcb->listener == lpcb) {
 800d586:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d588:	429d      	cmp	r5, r3
 800d58a:	d1fa      	bne.n	800d582 <tcp_remove_listener+0x16>
      pcb->listener = NULL;
 800d58c:	2300      	movs	r3, #0
 800d58e:	67a3      	str	r3, [r4, #120]	; 0x78
 800d590:	e7f7      	b.n	800d582 <tcp_remove_listener+0x16>
}
 800d592:	bd38      	pop	{r3, r4, r5, pc}
 800d594:	080693a4 	.word	0x080693a4
 800d598:	080693dc 	.word	0x080693dc
 800d59c:	0801335c 	.word	0x0801335c

0800d5a0 <tcp_listen_closed>:
{
 800d5a0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d5a2:	4605      	mov	r5, r0
 800d5a4:	b158      	cbz	r0, 800d5be <tcp_listen_closed+0x1e>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d5a6:	7d2b      	ldrb	r3, [r5, #20]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d006      	beq.n	800d5ba <tcp_listen_closed+0x1a>
 800d5ac:	4b0d      	ldr	r3, [pc, #52]	; (800d5e4 <tcp_listen_closed+0x44>)
 800d5ae:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d5b2:	490d      	ldr	r1, [pc, #52]	; (800d5e8 <tcp_listen_closed+0x48>)
 800d5b4:	480d      	ldr	r0, [pc, #52]	; (800d5ec <tcp_listen_closed+0x4c>)
 800d5b6:	f004 fdd9 	bl	801216c <iprintf>
{
 800d5ba:	2401      	movs	r4, #1
 800d5bc:	e00f      	b.n	800d5de <tcp_listen_closed+0x3e>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d5be:	4b09      	ldr	r3, [pc, #36]	; (800d5e4 <tcp_listen_closed+0x44>)
 800d5c0:	f240 1211 	movw	r2, #273	; 0x111
 800d5c4:	490a      	ldr	r1, [pc, #40]	; (800d5f0 <tcp_listen_closed+0x50>)
 800d5c6:	4809      	ldr	r0, [pc, #36]	; (800d5ec <tcp_listen_closed+0x4c>)
 800d5c8:	f004 fdd0 	bl	801216c <iprintf>
 800d5cc:	e7eb      	b.n	800d5a6 <tcp_listen_closed+0x6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d5ce:	4b09      	ldr	r3, [pc, #36]	; (800d5f4 <tcp_listen_closed+0x54>)
 800d5d0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d5d4:	4629      	mov	r1, r5
 800d5d6:	6818      	ldr	r0, [r3, #0]
 800d5d8:	f7ff ffc8 	bl	800d56c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d5dc:	3401      	adds	r4, #1
 800d5de:	2c03      	cmp	r4, #3
 800d5e0:	d9f5      	bls.n	800d5ce <tcp_listen_closed+0x2e>
}
 800d5e2:	bd38      	pop	{r3, r4, r5, pc}
 800d5e4:	080693a4 	.word	0x080693a4
 800d5e8:	0806914c 	.word	0x0806914c
 800d5ec:	0801335c 	.word	0x0801335c
 800d5f0:	08069140 	.word	0x08069140
 800d5f4:	0806921c 	.word	0x0806921c

0800d5f8 <tcp_free_listen>:
{
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d5fc:	7d03      	ldrb	r3, [r0, #20]
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d004      	beq.n	800d60c <tcp_free_listen+0x14>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d602:	4621      	mov	r1, r4
 800d604:	2002      	movs	r0, #2
 800d606:	f7ff f959 	bl	800c8bc <memp_free>
 800d60a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d60c:	4b03      	ldr	r3, [pc, #12]	; (800d61c <tcp_free_listen+0x24>)
 800d60e:	22df      	movs	r2, #223	; 0xdf
 800d610:	4903      	ldr	r1, [pc, #12]	; (800d620 <tcp_free_listen+0x28>)
 800d612:	4804      	ldr	r0, [pc, #16]	; (800d624 <tcp_free_listen+0x2c>)
 800d614:	f004 fdaa 	bl	801216c <iprintf>
 800d618:	e7f3      	b.n	800d602 <tcp_free_listen+0xa>
 800d61a:	bf00      	nop
 800d61c:	080693a4 	.word	0x080693a4
 800d620:	08069114 	.word	0x08069114
 800d624:	0801335c 	.word	0x0801335c

0800d628 <tcp_close_shutdown_fin>:
{
 800d628:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d62a:	4604      	mov	r4, r0
 800d62c:	b140      	cbz	r0, 800d640 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 800d62e:	7d23      	ldrb	r3, [r4, #20]
 800d630:	2b04      	cmp	r3, #4
 800d632:	d01a      	beq.n	800d66a <tcp_close_shutdown_fin+0x42>
 800d634:	2b07      	cmp	r3, #7
 800d636:	d021      	beq.n	800d67c <tcp_close_shutdown_fin+0x54>
 800d638:	2b03      	cmp	r3, #3
 800d63a:	d009      	beq.n	800d650 <tcp_close_shutdown_fin+0x28>
      return ERR_OK;
 800d63c:	2500      	movs	r5, #0
 800d63e:	e012      	b.n	800d666 <tcp_close_shutdown_fin+0x3e>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d640:	4b18      	ldr	r3, [pc, #96]	; (800d6a4 <tcp_close_shutdown_fin+0x7c>)
 800d642:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d646:	4918      	ldr	r1, [pc, #96]	; (800d6a8 <tcp_close_shutdown_fin+0x80>)
 800d648:	4818      	ldr	r0, [pc, #96]	; (800d6ac <tcp_close_shutdown_fin+0x84>)
 800d64a:	f004 fd8f 	bl	801216c <iprintf>
 800d64e:	e7ee      	b.n	800d62e <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 800d650:	4620      	mov	r0, r4
 800d652:	f003 fb07 	bl	8010c64 <tcp_send_fin>
      if (err == ERR_OK) {
 800d656:	4605      	mov	r5, r0
 800d658:	b908      	cbnz	r0, 800d65e <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 800d65a:	2305      	movs	r3, #5
 800d65c:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 800d65e:	b1b5      	cbz	r5, 800d68e <tcp_close_shutdown_fin+0x66>
  } else if (err == ERR_MEM) {
 800d660:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d664:	d017      	beq.n	800d696 <tcp_close_shutdown_fin+0x6e>
}
 800d666:	4628      	mov	r0, r5
 800d668:	bd38      	pop	{r3, r4, r5, pc}
      err = tcp_send_fin(pcb);
 800d66a:	4620      	mov	r0, r4
 800d66c:	f003 fafa 	bl	8010c64 <tcp_send_fin>
      if (err == ERR_OK) {
 800d670:	4605      	mov	r5, r0
 800d672:	2800      	cmp	r0, #0
 800d674:	d1f3      	bne.n	800d65e <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 800d676:	2305      	movs	r3, #5
 800d678:	7523      	strb	r3, [r4, #20]
 800d67a:	e7f0      	b.n	800d65e <tcp_close_shutdown_fin+0x36>
      err = tcp_send_fin(pcb);
 800d67c:	4620      	mov	r0, r4
 800d67e:	f003 faf1 	bl	8010c64 <tcp_send_fin>
      if (err == ERR_OK) {
 800d682:	4605      	mov	r5, r0
 800d684:	2800      	cmp	r0, #0
 800d686:	d1ea      	bne.n	800d65e <tcp_close_shutdown_fin+0x36>
        pcb->state = LAST_ACK;
 800d688:	2309      	movs	r3, #9
 800d68a:	7523      	strb	r3, [r4, #20]
 800d68c:	e7e7      	b.n	800d65e <tcp_close_shutdown_fin+0x36>
    tcp_output(pcb);
 800d68e:	4620      	mov	r0, r4
 800d690:	f003 fc6c 	bl	8010f6c <tcp_output>
 800d694:	e7e7      	b.n	800d666 <tcp_close_shutdown_fin+0x3e>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d696:	8b63      	ldrh	r3, [r4, #26]
 800d698:	f043 0308 	orr.w	r3, r3, #8
 800d69c:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800d69e:	2500      	movs	r5, #0
 800d6a0:	e7e1      	b.n	800d666 <tcp_close_shutdown_fin+0x3e>
 800d6a2:	bf00      	nop
 800d6a4:	080693a4 	.word	0x080693a4
 800d6a8:	08069140 	.word	0x08069140
 800d6ac:	0801335c 	.word	0x0801335c

0800d6b0 <tcp_handle_closepend>:
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d6b0:	4b09      	ldr	r3, [pc, #36]	; (800d6d8 <tcp_handle_closepend+0x28>)
 800d6b2:	6818      	ldr	r0, [r3, #0]

  while (pcb != NULL) {
 800d6b4:	b178      	cbz	r0, 800d6d6 <tcp_handle_closepend+0x26>
{
 800d6b6:	b510      	push	{r4, lr}
 800d6b8:	e001      	b.n	800d6be <tcp_handle_closepend+0xe>
 800d6ba:	4620      	mov	r0, r4
  while (pcb != NULL) {
 800d6bc:	b154      	cbz	r4, 800d6d4 <tcp_handle_closepend+0x24>
    struct tcp_pcb *next = pcb->next;
 800d6be:	68c4      	ldr	r4, [r0, #12]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d6c0:	8b43      	ldrh	r3, [r0, #26]
 800d6c2:	f013 0f08 	tst.w	r3, #8
 800d6c6:	d0f8      	beq.n	800d6ba <tcp_handle_closepend+0xa>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d6c8:	f023 0308 	bic.w	r3, r3, #8
 800d6cc:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800d6ce:	f7ff ffab 	bl	800d628 <tcp_close_shutdown_fin>
 800d6d2:	e7f2      	b.n	800d6ba <tcp_handle_closepend+0xa>
    }
    pcb = next;
  }
}
 800d6d4:	bd10      	pop	{r4, pc}
 800d6d6:	4770      	bx	lr
 800d6d8:	2000d84c 	.word	0x2000d84c

0800d6dc <tcp_init>:
{
 800d6dc:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d6de:	f004 fdc1 	bl	8012264 <rand>
 800d6e2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800d6e6:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800d6ea:	4b01      	ldr	r3, [pc, #4]	; (800d6f0 <tcp_init+0x14>)
 800d6ec:	8018      	strh	r0, [r3, #0]
 800d6ee:	bd08      	pop	{r3, pc}
 800d6f0:	200000e8 	.word	0x200000e8

0800d6f4 <tcp_free>:
{
 800d6f4:	b510      	push	{r4, lr}
 800d6f6:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d6f8:	7d03      	ldrb	r3, [r0, #20]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d004      	beq.n	800d708 <tcp_free+0x14>
  memp_free(MEMP_TCP_PCB, pcb);
 800d6fe:	4621      	mov	r1, r4
 800d700:	2001      	movs	r0, #1
 800d702:	f7ff f8db 	bl	800c8bc <memp_free>
 800d706:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d708:	4b03      	ldr	r3, [pc, #12]	; (800d718 <tcp_free+0x24>)
 800d70a:	22d4      	movs	r2, #212	; 0xd4
 800d70c:	4903      	ldr	r1, [pc, #12]	; (800d71c <tcp_free+0x28>)
 800d70e:	4804      	ldr	r0, [pc, #16]	; (800d720 <tcp_free+0x2c>)
 800d710:	f004 fd2c 	bl	801216c <iprintf>
 800d714:	e7f3      	b.n	800d6fe <tcp_free+0xa>
 800d716:	bf00      	nop
 800d718:	080693a4 	.word	0x080693a4
 800d71c:	08069100 	.word	0x08069100
 800d720:	0801335c 	.word	0x0801335c

0800d724 <tcp_bind>:
{
 800d724:	b570      	push	{r4, r5, r6, lr}
 800d726:	4605      	mov	r5, r0
  if (ipaddr == NULL) {
 800d728:	460c      	mov	r4, r1
 800d72a:	b159      	cbz	r1, 800d744 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d72c:	b165      	cbz	r5, 800d748 <tcp_bind+0x24>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d72e:	7d2b      	ldrb	r3, [r5, #20]
 800d730:	b9a3      	cbnz	r3, 800d75c <tcp_bind+0x38>
  if (port == 0) {
 800d732:	b1ea      	cbz	r2, 800d770 <tcp_bind+0x4c>
 800d734:	2600      	movs	r6, #0
    for (i = 0; i < max_pcb_list; i++) {
 800d736:	2e03      	cmp	r6, #3
 800d738:	dc1e      	bgt.n	800d778 <tcp_bind+0x54>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d73a:	4b26      	ldr	r3, [pc, #152]	; (800d7d4 <tcp_bind+0xb0>)
 800d73c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	e027      	b.n	800d794 <tcp_bind+0x70>
    ipaddr = IP4_ADDR_ANY;
 800d744:	4c24      	ldr	r4, [pc, #144]	; (800d7d8 <tcp_bind+0xb4>)
 800d746:	e7f1      	b.n	800d72c <tcp_bind+0x8>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d748:	4b24      	ldr	r3, [pc, #144]	; (800d7dc <tcp_bind+0xb8>)
 800d74a:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d74e:	4924      	ldr	r1, [pc, #144]	; (800d7e0 <tcp_bind+0xbc>)
 800d750:	4824      	ldr	r0, [pc, #144]	; (800d7e4 <tcp_bind+0xc0>)
 800d752:	f004 fd0b 	bl	801216c <iprintf>
 800d756:	f06f 000f 	mvn.w	r0, #15
 800d75a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d75c:	4b1f      	ldr	r3, [pc, #124]	; (800d7dc <tcp_bind+0xb8>)
 800d75e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d762:	4921      	ldr	r1, [pc, #132]	; (800d7e8 <tcp_bind+0xc4>)
 800d764:	481f      	ldr	r0, [pc, #124]	; (800d7e4 <tcp_bind+0xc0>)
 800d766:	f004 fd01 	bl	801216c <iprintf>
 800d76a:	f06f 0005 	mvn.w	r0, #5
 800d76e:	bd70      	pop	{r4, r5, r6, pc}
    port = tcp_new_port();
 800d770:	f7ff fec8 	bl	800d504 <tcp_new_port>
    if (port == 0) {
 800d774:	4602      	mov	r2, r0
 800d776:	b1f0      	cbz	r0, 800d7b6 <tcp_bind+0x92>
  if (!ip_addr_isany(ipaddr)
 800d778:	b114      	cbz	r4, 800d780 <tcp_bind+0x5c>
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	b103      	cbz	r3, 800d780 <tcp_bind+0x5c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d77e:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 800d780:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d782:	4b1a      	ldr	r3, [pc, #104]	; (800d7ec <tcp_bind+0xc8>)
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	60ea      	str	r2, [r5, #12]
 800d788:	601d      	str	r5, [r3, #0]
 800d78a:	f003 fe9f 	bl	80114cc <tcp_timer_needed>
  return ERR_OK;
 800d78e:	2000      	movs	r0, #0
 800d790:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	b16b      	cbz	r3, 800d7b2 <tcp_bind+0x8e>
        if (cpcb->local_port == port) {
 800d796:	8ad9      	ldrh	r1, [r3, #22]
 800d798:	428a      	cmp	r2, r1
 800d79a:	d1fa      	bne.n	800d792 <tcp_bind+0x6e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d79c:	b173      	cbz	r3, 800d7bc <tcp_bind+0x98>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d79e:	6819      	ldr	r1, [r3, #0]
 800d7a0:	b179      	cbz	r1, 800d7c2 <tcp_bind+0x9e>
 800d7a2:	b18c      	cbz	r4, 800d7c8 <tcp_bind+0xa4>
                 ip_addr_isany(ipaddr) ||
 800d7a4:	6820      	ldr	r0, [r4, #0]
 800d7a6:	b190      	cbz	r0, 800d7ce <tcp_bind+0xaa>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d7a8:	4281      	cmp	r1, r0
 800d7aa:	d1f2      	bne.n	800d792 <tcp_bind+0x6e>
              return ERR_USE;
 800d7ac:	f06f 0007 	mvn.w	r0, #7
}
 800d7b0:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < max_pcb_list; i++) {
 800d7b2:	3601      	adds	r6, #1
 800d7b4:	e7bf      	b.n	800d736 <tcp_bind+0x12>
      return ERR_BUF;
 800d7b6:	f06f 0001 	mvn.w	r0, #1
 800d7ba:	bd70      	pop	{r4, r5, r6, pc}
              return ERR_USE;
 800d7bc:	f06f 0007 	mvn.w	r0, #7
 800d7c0:	bd70      	pop	{r4, r5, r6, pc}
 800d7c2:	f06f 0007 	mvn.w	r0, #7
 800d7c6:	bd70      	pop	{r4, r5, r6, pc}
 800d7c8:	f06f 0007 	mvn.w	r0, #7
 800d7cc:	bd70      	pop	{r4, r5, r6, pc}
 800d7ce:	f06f 0007 	mvn.w	r0, #7
 800d7d2:	bd70      	pop	{r4, r5, r6, pc}
 800d7d4:	0806921c 	.word	0x0806921c
 800d7d8:	080684a4 	.word	0x080684a4
 800d7dc:	080693a4 	.word	0x080693a4
 800d7e0:	08068fb4 	.word	0x08068fb4
 800d7e4:	0801335c 	.word	0x0801335c
 800d7e8:	08068fcc 	.word	0x08068fcc
 800d7ec:	2000d858 	.word	0x2000d858

0800d7f0 <tcp_listen_with_backlog_and_err>:
{
 800d7f0:	b570      	push	{r4, r5, r6, lr}
 800d7f2:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d7f4:	b348      	cbz	r0, 800d84a <tcp_listen_with_backlog_and_err+0x5a>
 800d7f6:	4604      	mov	r4, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d7f8:	7d03      	ldrb	r3, [r0, #20]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d130      	bne.n	800d860 <tcp_listen_with_backlog_and_err+0x70>
  if (pcb->state == LISTEN) {
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d04e      	beq.n	800d8a0 <tcp_listen_with_backlog_and_err+0xb0>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d802:	2002      	movs	r0, #2
 800d804:	f7ff f840 	bl	800c888 <memp_malloc>
  if (lpcb == NULL) {
 800d808:	4605      	mov	r5, r0
 800d80a:	2800      	cmp	r0, #0
 800d80c:	d04f      	beq.n	800d8ae <tcp_listen_with_backlog_and_err+0xbe>
  lpcb->callback_arg = pcb->callback_arg;
 800d80e:	6923      	ldr	r3, [r4, #16]
 800d810:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800d812:	8ae3      	ldrh	r3, [r4, #22]
 800d814:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 800d816:	2301      	movs	r3, #1
 800d818:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 800d81a:	7d63      	ldrb	r3, [r4, #21]
 800d81c:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800d81e:	7a63      	ldrb	r3, [r4, #9]
 800d820:	7243      	strb	r3, [r0, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d822:	2300      	movs	r3, #0
 800d824:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800d826:	7ae3      	ldrb	r3, [r4, #11]
 800d828:	72c3      	strb	r3, [r0, #11]
  lpcb->tos = pcb->tos;
 800d82a:	7aa3      	ldrb	r3, [r4, #10]
 800d82c:	7283      	strb	r3, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d82e:	6823      	ldr	r3, [r4, #0]
 800d830:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 800d832:	8ae3      	ldrh	r3, [r4, #22]
 800d834:	b33b      	cbz	r3, 800d886 <tcp_listen_with_backlog_and_err+0x96>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d836:	4b1f      	ldr	r3, [pc, #124]	; (800d8b4 <tcp_listen_with_backlog_and_err+0xc4>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	429c      	cmp	r4, r3
 800d83c:	d01b      	beq.n	800d876 <tcp_listen_with_backlog_and_err+0x86>
 800d83e:	b303      	cbz	r3, 800d882 <tcp_listen_with_backlog_and_err+0x92>
 800d840:	68da      	ldr	r2, [r3, #12]
 800d842:	4294      	cmp	r4, r2
 800d844:	d01b      	beq.n	800d87e <tcp_listen_with_backlog_and_err+0x8e>
 800d846:	4613      	mov	r3, r2
 800d848:	e7f9      	b.n	800d83e <tcp_listen_with_backlog_and_err+0x4e>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d84a:	4b1b      	ldr	r3, [pc, #108]	; (800d8b8 <tcp_listen_with_backlog_and_err+0xc8>)
 800d84c:	f240 3259 	movw	r2, #857	; 0x359
 800d850:	491a      	ldr	r1, [pc, #104]	; (800d8bc <tcp_listen_with_backlog_and_err+0xcc>)
 800d852:	481b      	ldr	r0, [pc, #108]	; (800d8c0 <tcp_listen_with_backlog_and_err+0xd0>)
 800d854:	f004 fc8a 	bl	801216c <iprintf>
 800d858:	f06f 030f 	mvn.w	r3, #15
  struct tcp_pcb_listen *lpcb = NULL;
 800d85c:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d85e:	e022      	b.n	800d8a6 <tcp_listen_with_backlog_and_err+0xb6>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d860:	4b15      	ldr	r3, [pc, #84]	; (800d8b8 <tcp_listen_with_backlog_and_err+0xc8>)
 800d862:	f240 325a 	movw	r2, #858	; 0x35a
 800d866:	4917      	ldr	r1, [pc, #92]	; (800d8c4 <tcp_listen_with_backlog_and_err+0xd4>)
 800d868:	4815      	ldr	r0, [pc, #84]	; (800d8c0 <tcp_listen_with_backlog_and_err+0xd0>)
 800d86a:	f004 fc7f 	bl	801216c <iprintf>
 800d86e:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 800d872:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d874:	e017      	b.n	800d8a6 <tcp_listen_with_backlog_and_err+0xb6>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d876:	68da      	ldr	r2, [r3, #12]
 800d878:	4b0e      	ldr	r3, [pc, #56]	; (800d8b4 <tcp_listen_with_backlog_and_err+0xc4>)
 800d87a:	601a      	str	r2, [r3, #0]
 800d87c:	e001      	b.n	800d882 <tcp_listen_with_backlog_and_err+0x92>
 800d87e:	68e2      	ldr	r2, [r4, #12]
 800d880:	60da      	str	r2, [r3, #12]
 800d882:	2300      	movs	r3, #0
 800d884:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 800d886:	4620      	mov	r0, r4
 800d888:	f7ff ff34 	bl	800d6f4 <tcp_free>
  lpcb->accept = tcp_accept_null;
 800d88c:	4b0e      	ldr	r3, [pc, #56]	; (800d8c8 <tcp_listen_with_backlog_and_err+0xd8>)
 800d88e:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d890:	4b0e      	ldr	r3, [pc, #56]	; (800d8cc <tcp_listen_with_backlog_and_err+0xdc>)
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	60ea      	str	r2, [r5, #12]
 800d896:	601d      	str	r5, [r3, #0]
 800d898:	f003 fe18 	bl	80114cc <tcp_timer_needed>
  res = ERR_OK;
 800d89c:	2300      	movs	r3, #0
 800d89e:	e002      	b.n	800d8a6 <tcp_listen_with_backlog_and_err+0xb6>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d8a0:	4605      	mov	r5, r0
    res = ERR_ALREADY;
 800d8a2:	f06f 0308 	mvn.w	r3, #8
  if (err != NULL) {
 800d8a6:	b106      	cbz	r6, 800d8aa <tcp_listen_with_backlog_and_err+0xba>
    *err = res;
 800d8a8:	7033      	strb	r3, [r6, #0]
}
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 800d8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b2:	e7f8      	b.n	800d8a6 <tcp_listen_with_backlog_and_err+0xb6>
 800d8b4:	2000d858 	.word	0x2000d858
 800d8b8:	080693a4 	.word	0x080693a4
 800d8bc:	08069164 	.word	0x08069164
 800d8c0:	0801335c 	.word	0x0801335c
 800d8c4:	08069194 	.word	0x08069194
 800d8c8:	0800e4d1 	.word	0x0800e4d1
 800d8cc:	2000d854 	.word	0x2000d854

0800d8d0 <tcp_listen_with_backlog>:
{
 800d8d0:	b508      	push	{r3, lr}
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f7ff ff8c 	bl	800d7f0 <tcp_listen_with_backlog_and_err>
}
 800d8d8:	bd08      	pop	{r3, pc}
	...

0800d8dc <tcp_update_rcv_ann_wnd>:
{
 800d8dc:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d8de:	4604      	mov	r4, r0
 800d8e0:	b180      	cbz	r0, 800d904 <tcp_update_rcv_ann_wnd+0x28>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d8e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d8e4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800d8e6:	1868      	adds	r0, r5, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d8e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d8ea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d8ec:	f241 66d0 	movw	r6, #5840	; 0x16d0
 800d8f0:	42b3      	cmp	r3, r6
 800d8f2:	d900      	bls.n	800d8f6 <tcp_update_rcv_ann_wnd+0x1a>
 800d8f4:	4633      	mov	r3, r6
 800d8f6:	4413      	add	r3, r2
 800d8f8:	1ac3      	subs	r3, r0, r3
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	db0a      	blt.n	800d914 <tcp_update_rcv_ann_wnd+0x38>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d8fe:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d900:	1a80      	subs	r0, r0, r2
 800d902:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d904:	4b0e      	ldr	r3, [pc, #56]	; (800d940 <tcp_update_rcv_ann_wnd+0x64>)
 800d906:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d90a:	490e      	ldr	r1, [pc, #56]	; (800d944 <tcp_update_rcv_ann_wnd+0x68>)
 800d90c:	480e      	ldr	r0, [pc, #56]	; (800d948 <tcp_update_rcv_ann_wnd+0x6c>)
 800d90e:	f004 fc2d 	bl	801216c <iprintf>
 800d912:	e7e6      	b.n	800d8e2 <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d914:	1aab      	subs	r3, r5, r2
 800d916:	2b00      	cmp	r3, #0
 800d918:	dd02      	ble.n	800d920 <tcp_update_rcv_ann_wnd+0x44>
      pcb->rcv_ann_wnd = 0;
 800d91a:	2000      	movs	r0, #0
 800d91c:	8560      	strh	r0, [r4, #42]	; 0x2a
 800d91e:	bd70      	pop	{r4, r5, r6, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d920:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d922:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800d926:	d202      	bcs.n	800d92e <tcp_update_rcv_ann_wnd+0x52>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d928:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 800d92a:	2000      	movs	r0, #0
}
 800d92c:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d92e:	4b04      	ldr	r3, [pc, #16]	; (800d940 <tcp_update_rcv_ann_wnd+0x64>)
 800d930:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d934:	4905      	ldr	r1, [pc, #20]	; (800d94c <tcp_update_rcv_ann_wnd+0x70>)
 800d936:	4804      	ldr	r0, [pc, #16]	; (800d948 <tcp_update_rcv_ann_wnd+0x6c>)
 800d938:	f004 fc18 	bl	801216c <iprintf>
 800d93c:	e7f4      	b.n	800d928 <tcp_update_rcv_ann_wnd+0x4c>
 800d93e:	bf00      	nop
 800d940:	080693a4 	.word	0x080693a4
 800d944:	08069614 	.word	0x08069614
 800d948:	0801335c 	.word	0x0801335c
 800d94c:	08069638 	.word	0x08069638

0800d950 <tcp_recved>:
{
 800d950:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d952:	b1c0      	cbz	r0, 800d986 <tcp_recved+0x36>
 800d954:	460c      	mov	r4, r1
 800d956:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d958:	7d03      	ldrb	r3, [r0, #20]
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d01b      	beq.n	800d996 <tcp_recved+0x46>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d95e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800d960:	1919      	adds	r1, r3, r4
 800d962:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d964:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800d968:	4291      	cmp	r1, r2
 800d96a:	d801      	bhi.n	800d970 <tcp_recved+0x20>
 800d96c:	428b      	cmp	r3, r1
 800d96e:	d91a      	bls.n	800d9a6 <tcp_recved+0x56>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d970:	f642 53a0 	movw	r3, #11680	; 0x2da0
 800d974:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d976:	4628      	mov	r0, r5
 800d978:	f7ff ffb0 	bl	800d8dc <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d97c:	f640 3367 	movw	r3, #2919	; 0xb67
 800d980:	4298      	cmp	r0, r3
 800d982:	d812      	bhi.n	800d9aa <tcp_recved+0x5a>
 800d984:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d986:	4b0d      	ldr	r3, [pc, #52]	; (800d9bc <tcp_recved+0x6c>)
 800d988:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d98c:	490c      	ldr	r1, [pc, #48]	; (800d9c0 <tcp_recved+0x70>)
 800d98e:	480d      	ldr	r0, [pc, #52]	; (800d9c4 <tcp_recved+0x74>)
 800d990:	f004 fbec 	bl	801216c <iprintf>
 800d994:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d996:	4b09      	ldr	r3, [pc, #36]	; (800d9bc <tcp_recved+0x6c>)
 800d998:	f240 32d3 	movw	r2, #979	; 0x3d3
 800d99c:	490a      	ldr	r1, [pc, #40]	; (800d9c8 <tcp_recved+0x78>)
 800d99e:	4809      	ldr	r0, [pc, #36]	; (800d9c4 <tcp_recved+0x74>)
 800d9a0:	f004 fbe4 	bl	801216c <iprintf>
 800d9a4:	e7db      	b.n	800d95e <tcp_recved+0xe>
    pcb->rcv_wnd = rcv_wnd;
 800d9a6:	8529      	strh	r1, [r5, #40]	; 0x28
 800d9a8:	e7e5      	b.n	800d976 <tcp_recved+0x26>
    tcp_ack_now(pcb);
 800d9aa:	8b6b      	ldrh	r3, [r5, #26]
 800d9ac:	f043 0302 	orr.w	r3, r3, #2
 800d9b0:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	f003 fada 	bl	8010f6c <tcp_output>
 800d9b8:	e7e4      	b.n	800d984 <tcp_recved+0x34>
 800d9ba:	bf00      	nop
 800d9bc:	080693a4 	.word	0x080693a4
 800d9c0:	08069364 	.word	0x08069364
 800d9c4:	0801335c 	.word	0x0801335c
 800d9c8:	0806937c 	.word	0x0806937c

0800d9cc <tcp_seg_free>:
  if (seg != NULL) {
 800d9cc:	b150      	cbz	r0, 800d9e4 <tcp_seg_free+0x18>
{
 800d9ce:	b510      	push	{r4, lr}
 800d9d0:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800d9d2:	6840      	ldr	r0, [r0, #4]
 800d9d4:	b108      	cbz	r0, 800d9da <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800d9d6:	f7ff fa5f 	bl	800ce98 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800d9da:	4621      	mov	r1, r4
 800d9dc:	2003      	movs	r0, #3
 800d9de:	f7fe ff6d 	bl	800c8bc <memp_free>
 800d9e2:	bd10      	pop	{r4, pc}
 800d9e4:	4770      	bx	lr

0800d9e6 <tcp_segs_free>:
  while (seg != NULL) {
 800d9e6:	b138      	cbz	r0, 800d9f8 <tcp_segs_free+0x12>
{
 800d9e8:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 800d9ea:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800d9ec:	f7ff ffee 	bl	800d9cc <tcp_seg_free>
    seg = next;
 800d9f0:	4620      	mov	r0, r4
  while (seg != NULL) {
 800d9f2:	2c00      	cmp	r4, #0
 800d9f4:	d1f9      	bne.n	800d9ea <tcp_segs_free+0x4>
}
 800d9f6:	bd10      	pop	{r4, pc}
 800d9f8:	4770      	bx	lr
	...

0800d9fc <tcp_setprio>:
{
 800d9fc:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800d9fe:	b108      	cbz	r0, 800da04 <tcp_setprio+0x8>
  pcb->prio = prio;
 800da00:	7541      	strb	r1, [r0, #21]
 800da02:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800da04:	4b03      	ldr	r3, [pc, #12]	; (800da14 <tcp_setprio+0x18>)
 800da06:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800da0a:	4903      	ldr	r1, [pc, #12]	; (800da18 <tcp_setprio+0x1c>)
 800da0c:	4803      	ldr	r0, [pc, #12]	; (800da1c <tcp_setprio+0x20>)
 800da0e:	f004 fbad 	bl	801216c <iprintf>
 800da12:	bd08      	pop	{r3, pc}
 800da14:	080693a4 	.word	0x080693a4
 800da18:	0806942c 	.word	0x0806942c
 800da1c:	0801335c 	.word	0x0801335c

0800da20 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800da20:	b100      	cbz	r0, 800da24 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800da22:	6101      	str	r1, [r0, #16]
 800da24:	4770      	bx	lr
	...

0800da28 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800da28:	b180      	cbz	r0, 800da4c <tcp_recv+0x24>
{
 800da2a:	b538      	push	{r3, r4, r5, lr}
 800da2c:	4604      	mov	r4, r0
 800da2e:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800da30:	7d03      	ldrb	r3, [r0, #20]
 800da32:	2b01      	cmp	r3, #1
 800da34:	d002      	beq.n	800da3c <tcp_recv+0x14>
    pcb->recv = recv;
 800da36:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800da3a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800da3c:	4b04      	ldr	r3, [pc, #16]	; (800da50 <tcp_recv+0x28>)
 800da3e:	f240 72df 	movw	r2, #2015	; 0x7df
 800da42:	4904      	ldr	r1, [pc, #16]	; (800da54 <tcp_recv+0x2c>)
 800da44:	4804      	ldr	r0, [pc, #16]	; (800da58 <tcp_recv+0x30>)
 800da46:	f004 fb91 	bl	801216c <iprintf>
 800da4a:	e7f4      	b.n	800da36 <tcp_recv+0xe>
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	080693a4 	.word	0x080693a4
 800da54:	08069320 	.word	0x08069320
 800da58:	0801335c 	.word	0x0801335c

0800da5c <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800da5c:	b178      	cbz	r0, 800da7e <tcp_sent+0x22>
{
 800da5e:	b538      	push	{r3, r4, r5, lr}
 800da60:	4604      	mov	r4, r0
 800da62:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800da64:	7d03      	ldrb	r3, [r0, #20]
 800da66:	2b01      	cmp	r3, #1
 800da68:	d001      	beq.n	800da6e <tcp_sent+0x12>
    pcb->sent = sent;
 800da6a:	67e5      	str	r5, [r4, #124]	; 0x7c
 800da6c:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800da6e:	4b04      	ldr	r3, [pc, #16]	; (800da80 <tcp_sent+0x24>)
 800da70:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800da74:	4903      	ldr	r1, [pc, #12]	; (800da84 <tcp_sent+0x28>)
 800da76:	4804      	ldr	r0, [pc, #16]	; (800da88 <tcp_sent+0x2c>)
 800da78:	f004 fb78 	bl	801216c <iprintf>
 800da7c:	e7f5      	b.n	800da6a <tcp_sent+0xe>
 800da7e:	4770      	bx	lr
 800da80:	080693a4 	.word	0x080693a4
 800da84:	08069404 	.word	0x08069404
 800da88:	0801335c 	.word	0x0801335c

0800da8c <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800da8c:	b180      	cbz	r0, 800dab0 <tcp_err+0x24>
{
 800da8e:	b538      	push	{r3, r4, r5, lr}
 800da90:	4604      	mov	r4, r0
 800da92:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800da94:	7d03      	ldrb	r3, [r0, #20]
 800da96:	2b01      	cmp	r3, #1
 800da98:	d002      	beq.n	800daa0 <tcp_err+0x14>
    pcb->errf = err;
 800da9a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 800da9e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800daa0:	4b04      	ldr	r3, [pc, #16]	; (800dab4 <tcp_err+0x28>)
 800daa2:	f640 020d 	movw	r2, #2061	; 0x80d
 800daa6:	4904      	ldr	r1, [pc, #16]	; (800dab8 <tcp_err+0x2c>)
 800daa8:	4804      	ldr	r0, [pc, #16]	; (800dabc <tcp_err+0x30>)
 800daaa:	f004 fb5f 	bl	801216c <iprintf>
 800daae:	e7f4      	b.n	800da9a <tcp_err+0xe>
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	080693a4 	.word	0x080693a4
 800dab8:	080690d8 	.word	0x080690d8
 800dabc:	0801335c 	.word	0x0801335c

0800dac0 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800dac0:	b110      	cbz	r0, 800dac8 <tcp_accept+0x8>
 800dac2:	7d02      	ldrb	r2, [r0, #20]
 800dac4:	2a01      	cmp	r2, #1
 800dac6:	d000      	beq.n	800daca <tcp_accept+0xa>
 800dac8:	4770      	bx	lr
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800daca:	6181      	str	r1, [r0, #24]
  }
}
 800dacc:	e7fc      	b.n	800dac8 <tcp_accept+0x8>
	...

0800dad0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800dad0:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800dad2:	b148      	cbz	r0, 800dae8 <tcp_poll+0x18>
 800dad4:	460e      	mov	r6, r1
 800dad6:	4615      	mov	r5, r2
 800dad8:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800dada:	7d03      	ldrb	r3, [r0, #20]
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d00b      	beq.n	800daf8 <tcp_poll+0x28>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800dae0:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800dae4:	7765      	strb	r5, [r4, #29]
 800dae6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800dae8:	4b07      	ldr	r3, [pc, #28]	; (800db08 <tcp_poll+0x38>)
 800daea:	f640 023d 	movw	r2, #2109	; 0x83d
 800daee:	4907      	ldr	r1, [pc, #28]	; (800db0c <tcp_poll+0x3c>)
 800daf0:	4807      	ldr	r0, [pc, #28]	; (800db10 <tcp_poll+0x40>)
 800daf2:	f004 fb3b 	bl	801216c <iprintf>
 800daf6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800daf8:	4b03      	ldr	r3, [pc, #12]	; (800db08 <tcp_poll+0x38>)
 800dafa:	f640 023e 	movw	r2, #2110	; 0x83e
 800dafe:	4905      	ldr	r1, [pc, #20]	; (800db14 <tcp_poll+0x44>)
 800db00:	4803      	ldr	r0, [pc, #12]	; (800db10 <tcp_poll+0x40>)
 800db02:	f004 fb33 	bl	801216c <iprintf>
 800db06:	e7eb      	b.n	800dae0 <tcp_poll+0x10>
 800db08:	080693a4 	.word	0x080693a4
 800db0c:	080692c0 	.word	0x080692c0
 800db10:	0801335c 	.word	0x0801335c
 800db14:	080692d8 	.word	0x080692d8

0800db18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800db18:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800db1a:	b1d8      	cbz	r0, 800db54 <tcp_pcb_purge+0x3c>
 800db1c:	4604      	mov	r4, r0

  if (pcb->state != CLOSED &&
 800db1e:	7d03      	ldrb	r3, [r0, #20]
 800db20:	b1bb      	cbz	r3, 800db52 <tcp_pcb_purge+0x3a>
 800db22:	2b0a      	cmp	r3, #10
 800db24:	d015      	beq.n	800db52 <tcp_pcb_purge+0x3a>
      pcb->state != TIME_WAIT &&
 800db26:	2b01      	cmp	r3, #1
 800db28:	d013      	beq.n	800db52 <tcp_pcb_purge+0x3a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800db2a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800db2c:	b118      	cbz	r0, 800db36 <tcp_pcb_purge+0x1e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800db2e:	f7ff f9b3 	bl	800ce98 <pbuf_free>
      pcb->refused_data = NULL;
 800db32:	2300      	movs	r3, #0
 800db34:	6763      	str	r3, [r4, #116]	; 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800db36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db3a:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800db3c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800db3e:	f7ff ff52 	bl	800d9e6 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800db42:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800db44:	f7ff ff4f 	bl	800d9e6 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800db48:	2300      	movs	r3, #0
 800db4a:	66e3      	str	r3, [r4, #108]	; 0x6c
 800db4c:	6723      	str	r3, [r4, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800db4e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800db52:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800db54:	4b03      	ldr	r3, [pc, #12]	; (800db64 <tcp_pcb_purge+0x4c>)
 800db56:	f640 0251 	movw	r2, #2129	; 0x851
 800db5a:	4903      	ldr	r1, [pc, #12]	; (800db68 <tcp_pcb_purge+0x50>)
 800db5c:	4803      	ldr	r0, [pc, #12]	; (800db6c <tcp_pcb_purge+0x54>)
 800db5e:	f004 fb05 	bl	801216c <iprintf>
 800db62:	bd10      	pop	{r4, pc}
 800db64:	080693a4 	.word	0x080693a4
 800db68:	0806922c 	.word	0x0806922c
 800db6c:	0801335c 	.word	0x0801335c

0800db70 <tcp_slowtmr>:
{
 800db70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db74:	b084      	sub	sp, #16
  ++tcp_ticks;
 800db76:	4ab0      	ldr	r2, [pc, #704]	; (800de38 <tcp_slowtmr+0x2c8>)
 800db78:	6813      	ldr	r3, [r2, #0]
 800db7a:	3301      	adds	r3, #1
 800db7c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800db7e:	4aaf      	ldr	r2, [pc, #700]	; (800de3c <tcp_slowtmr+0x2cc>)
 800db80:	7813      	ldrb	r3, [r2, #0]
 800db82:	3301      	adds	r3, #1
 800db84:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800db86:	4bae      	ldr	r3, [pc, #696]	; (800de40 <tcp_slowtmr+0x2d0>)
 800db88:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 800db8a:	2600      	movs	r6, #0
  while (pcb != NULL) {
 800db8c:	e019      	b.n	800dbc2 <tcp_slowtmr+0x52>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800db8e:	4bad      	ldr	r3, [pc, #692]	; (800de44 <tcp_slowtmr+0x2d4>)
 800db90:	f240 42be 	movw	r2, #1214	; 0x4be
 800db94:	49ac      	ldr	r1, [pc, #688]	; (800de48 <tcp_slowtmr+0x2d8>)
 800db96:	48ad      	ldr	r0, [pc, #692]	; (800de4c <tcp_slowtmr+0x2dc>)
 800db98:	f004 fae8 	bl	801216c <iprintf>
 800db9c:	e017      	b.n	800dbce <tcp_slowtmr+0x5e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800db9e:	4ba9      	ldr	r3, [pc, #676]	; (800de44 <tcp_slowtmr+0x2d4>)
 800dba0:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800dba4:	49aa      	ldr	r1, [pc, #680]	; (800de50 <tcp_slowtmr+0x2e0>)
 800dba6:	48a9      	ldr	r0, [pc, #676]	; (800de4c <tcp_slowtmr+0x2dc>)
 800dba8:	f004 fae0 	bl	801216c <iprintf>
 800dbac:	e012      	b.n	800dbd4 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dbae:	4ba5      	ldr	r3, [pc, #660]	; (800de44 <tcp_slowtmr+0x2d4>)
 800dbb0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800dbb4:	49a7      	ldr	r1, [pc, #668]	; (800de54 <tcp_slowtmr+0x2e4>)
 800dbb6:	48a5      	ldr	r0, [pc, #660]	; (800de4c <tcp_slowtmr+0x2dc>)
 800dbb8:	f004 fad8 	bl	801216c <iprintf>
 800dbbc:	e00d      	b.n	800dbda <tcp_slowtmr+0x6a>
      prev = pcb;
 800dbbe:	4626      	mov	r6, r4
      pcb = pcb->next;
 800dbc0:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800dbc2:	2c00      	cmp	r4, #0
 800dbc4:	f000 81bb 	beq.w	800df3e <tcp_slowtmr+0x3ce>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dbc8:	7d23      	ldrb	r3, [r4, #20]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d0df      	beq.n	800db8e <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dbce:	7d23      	ldrb	r3, [r4, #20]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d0e4      	beq.n	800db9e <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dbd4:	7d23      	ldrb	r3, [r4, #20]
 800dbd6:	2b0a      	cmp	r3, #10
 800dbd8:	d0e9      	beq.n	800dbae <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dbda:	7fa2      	ldrb	r2, [r4, #30]
 800dbdc:	4b97      	ldr	r3, [pc, #604]	; (800de3c <tcp_slowtmr+0x2cc>)
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d0ec      	beq.n	800dbbe <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 800dbe4:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dbe6:	7d23      	ldrb	r3, [r4, #20]
 800dbe8:	2b02      	cmp	r3, #2
 800dbea:	d032      	beq.n	800dc52 <tcp_slowtmr+0xe2>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dbec:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800dbf0:	2b0b      	cmp	r3, #11
 800dbf2:	f200 80a9 	bhi.w	800dd48 <tcp_slowtmr+0x1d8>
      if (pcb->persist_backoff > 0) {
 800dbf6:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 800dbfa:	2d00      	cmp	r5, #0
 800dbfc:	d054      	beq.n	800dca8 <tcp_slowtmr+0x138>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dbfe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dc00:	b133      	cbz	r3, 800dc10 <tcp_slowtmr+0xa0>
 800dc02:	4b90      	ldr	r3, [pc, #576]	; (800de44 <tcp_slowtmr+0x2d4>)
 800dc04:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dc08:	4993      	ldr	r1, [pc, #588]	; (800de58 <tcp_slowtmr+0x2e8>)
 800dc0a:	4890      	ldr	r0, [pc, #576]	; (800de4c <tcp_slowtmr+0x2dc>)
 800dc0c:	f004 faae 	bl	801216c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dc10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800dc12:	b323      	cbz	r3, 800dc5e <tcp_slowtmr+0xee>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dc14:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800dc18:	2b0b      	cmp	r3, #11
 800dc1a:	f200 80a3 	bhi.w	800dd64 <tcp_slowtmr+0x1f4>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dc1e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800dc22:	3b01      	subs	r3, #1
 800dc24:	4a8d      	ldr	r2, [pc, #564]	; (800de5c <tcp_slowtmr+0x2ec>)
 800dc26:	5cd2      	ldrb	r2, [r2, r3]
          if (pcb->persist_cnt < backoff_cnt) {
 800dc28:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d902      	bls.n	800dc36 <tcp_slowtmr+0xc6>
            pcb->persist_cnt++;
 800dc30:	3301      	adds	r3, #1
 800dc32:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800dc36:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	f200 8094 	bhi.w	800dd68 <tcp_slowtmr+0x1f8>
            if (pcb->snd_wnd == 0) {
 800dc40:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800dc44:	b999      	cbnz	r1, 800dc6e <tcp_slowtmr+0xfe>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dc46:	4620      	mov	r0, r4
 800dc48:	f003 fb5c 	bl	8011304 <tcp_zero_window_probe>
 800dc4c:	bb40      	cbnz	r0, 800dca0 <tcp_slowtmr+0x130>
            int next_slot = 1; /* increment timer to next slot */
 800dc4e:	2301      	movs	r3, #1
 800dc50:	e012      	b.n	800dc78 <tcp_slowtmr+0x108>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dc52:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800dc56:	2b05      	cmp	r3, #5
 800dc58:	d9c8      	bls.n	800dbec <tcp_slowtmr+0x7c>
      ++pcb_remove;
 800dc5a:	2501      	movs	r5, #1
 800dc5c:	e075      	b.n	800dd4a <tcp_slowtmr+0x1da>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dc5e:	4b79      	ldr	r3, [pc, #484]	; (800de44 <tcp_slowtmr+0x2d4>)
 800dc60:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dc64:	497e      	ldr	r1, [pc, #504]	; (800de60 <tcp_slowtmr+0x2f0>)
 800dc66:	4879      	ldr	r0, [pc, #484]	; (800de4c <tcp_slowtmr+0x2dc>)
 800dc68:	f004 fa80 	bl	801216c <iprintf>
 800dc6c:	e7d2      	b.n	800dc14 <tcp_slowtmr+0xa4>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f002 fe58 	bl	8010924 <tcp_split_unsent_seg>
 800dc74:	b170      	cbz	r0, 800dc94 <tcp_slowtmr+0x124>
            int next_slot = 1; /* increment timer to next slot */
 800dc76:	2301      	movs	r3, #1
            if (next_slot) {
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d077      	beq.n	800dd6c <tcp_slowtmr+0x1fc>
              pcb->persist_cnt = 0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dc82:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800dc86:	2b06      	cmp	r3, #6
 800dc88:	d872      	bhi.n	800dd70 <tcp_slowtmr+0x200>
                pcb->persist_backoff++;
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 800dc90:	2500      	movs	r5, #0
 800dc92:	e05a      	b.n	800dd4a <tcp_slowtmr+0x1da>
                if (tcp_output(pcb) == ERR_OK) {
 800dc94:	4620      	mov	r0, r4
 800dc96:	f003 f969 	bl	8010f6c <tcp_output>
 800dc9a:	b118      	cbz	r0, 800dca4 <tcp_slowtmr+0x134>
            int next_slot = 1; /* increment timer to next slot */
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e7eb      	b.n	800dc78 <tcp_slowtmr+0x108>
                next_slot = 0; /* try probe again with current slot */
 800dca0:	2300      	movs	r3, #0
 800dca2:	e7e9      	b.n	800dc78 <tcp_slowtmr+0x108>
                  next_slot = 0;
 800dca4:	2300      	movs	r3, #0
 800dca6:	e7e7      	b.n	800dc78 <tcp_slowtmr+0x108>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800dca8:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	db05      	blt.n	800dcbc <tcp_slowtmr+0x14c>
 800dcb0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d001      	beq.n	800dcbc <tcp_slowtmr+0x14c>
          ++pcb->rtime;
 800dcb8:	3301      	adds	r3, #1
 800dcba:	8623      	strh	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800dcbc:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800dcc0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	db40      	blt.n	800dd4a <tcp_slowtmr+0x1da>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f002 fffd 	bl	8010cc8 <tcp_rexmit_rto_prepare>
 800dcce:	b120      	cbz	r0, 800dcda <tcp_slowtmr+0x16a>
 800dcd0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d139      	bne.n	800dd4a <tcp_slowtmr+0x1da>
 800dcd6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800dcd8:	b3bb      	cbz	r3, 800dd4a <tcp_slowtmr+0x1da>
            if (pcb->state != SYN_SENT) {
 800dcda:	7d23      	ldrb	r3, [r4, #20]
 800dcdc:	2b02      	cmp	r3, #2
 800dcde:	d017      	beq.n	800dd10 <tcp_slowtmr+0x1a0>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800dce0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800dce4:	2a0c      	cmp	r2, #12
 800dce6:	bf28      	it	cs
 800dce8:	220c      	movcs	r2, #12
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800dcea:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800dcee:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800dcf2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800dcf6:	495b      	ldr	r1, [pc, #364]	; (800de64 <tcp_slowtmr+0x2f4>)
 800dcf8:	5c8a      	ldrb	r2, [r1, r2]
 800dcfa:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800dcfc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800dd00:	4293      	cmp	r3, r2
 800dd02:	dc01      	bgt.n	800dd08 <tcp_slowtmr+0x198>
 800dd04:	b21b      	sxth	r3, r3
 800dd06:	e001      	b.n	800dd0c <tcp_slowtmr+0x19c>
 800dd08:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800dd0c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            pcb->rtime = 0;
 800dd10:	2300      	movs	r3, #0
 800dd12:	8623      	strh	r3, [r4, #48]	; 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800dd14:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800dd18:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	bf28      	it	cs
 800dd20:	4613      	movcs	r3, r2
            pcb->ssthresh = eff_wnd >> 1;
 800dd22:	085b      	lsrs	r3, r3, #1
 800dd24:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800dd28:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 800dd2a:	004a      	lsls	r2, r1, #1
 800dd2c:	b292      	uxth	r2, r2
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d201      	bcs.n	800dd36 <tcp_slowtmr+0x1c6>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800dd32:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
            pcb->cwnd = pcb->mss;
 800dd36:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
            pcb->bytes_acked = 0;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800dd40:	4620      	mov	r0, r4
 800dd42:	f003 fa7b 	bl	801123c <tcp_rexmit_rto_commit>
 800dd46:	e000      	b.n	800dd4a <tcp_slowtmr+0x1da>
      ++pcb_remove;
 800dd48:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 800dd4a:	7d23      	ldrb	r3, [r4, #20]
 800dd4c:	2b06      	cmp	r3, #6
 800dd4e:	d011      	beq.n	800dd74 <tcp_slowtmr+0x204>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dd50:	7a62      	ldrb	r2, [r4, #9]
 800dd52:	f012 0f08 	tst.w	r2, #8
 800dd56:	d047      	beq.n	800dde8 <tcp_slowtmr+0x278>
 800dd58:	2b04      	cmp	r3, #4
 800dd5a:	d018      	beq.n	800dd8e <tcp_slowtmr+0x21e>
        ((pcb->state == ESTABLISHED) ||
 800dd5c:	2b07      	cmp	r3, #7
 800dd5e:	d016      	beq.n	800dd8e <tcp_slowtmr+0x21e>
    pcb_reset = 0;
 800dd60:	2700      	movs	r7, #0
 800dd62:	e042      	b.n	800ddea <tcp_slowtmr+0x27a>
          ++pcb_remove; /* max probes reached */
 800dd64:	2501      	movs	r5, #1
 800dd66:	e7f0      	b.n	800dd4a <tcp_slowtmr+0x1da>
    pcb_remove = 0;
 800dd68:	2500      	movs	r5, #0
 800dd6a:	e7ee      	b.n	800dd4a <tcp_slowtmr+0x1da>
 800dd6c:	2500      	movs	r5, #0
 800dd6e:	e7ec      	b.n	800dd4a <tcp_slowtmr+0x1da>
 800dd70:	2500      	movs	r5, #0
 800dd72:	e7ea      	b.n	800dd4a <tcp_slowtmr+0x1da>
      if (pcb->flags & TF_RXCLOSED) {
 800dd74:	8b62      	ldrh	r2, [r4, #26]
 800dd76:	f012 0f10 	tst.w	r2, #16
 800dd7a:	d0e9      	beq.n	800dd50 <tcp_slowtmr+0x1e0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd7c:	6a21      	ldr	r1, [r4, #32]
 800dd7e:	4a2e      	ldr	r2, [pc, #184]	; (800de38 <tcp_slowtmr+0x2c8>)
 800dd80:	6812      	ldr	r2, [r2, #0]
 800dd82:	1a52      	subs	r2, r2, r1
 800dd84:	2a28      	cmp	r2, #40	; 0x28
 800dd86:	d9e3      	bls.n	800dd50 <tcp_slowtmr+0x1e0>
          ++pcb_remove;
 800dd88:	3501      	adds	r5, #1
 800dd8a:	b2ed      	uxtb	r5, r5
 800dd8c:	e7e0      	b.n	800dd50 <tcp_slowtmr+0x1e0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd8e:	4b2a      	ldr	r3, [pc, #168]	; (800de38 <tcp_slowtmr+0x2c8>)
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	6a23      	ldr	r3, [r4, #32]
 800dd94:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800dd96:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800dd9a:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 800dd9e:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800dda2:	4831      	ldr	r0, [pc, #196]	; (800de68 <tcp_slowtmr+0x2f8>)
 800dda4:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dda8:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800ddac:	d903      	bls.n	800ddb6 <tcp_slowtmr+0x246>
        ++pcb_remove;
 800ddae:	3501      	adds	r5, #1
 800ddb0:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 800ddb2:	2701      	movs	r7, #1
 800ddb4:	e019      	b.n	800ddea <tcp_slowtmr+0x27a>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ddb6:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800ddba:	482c      	ldr	r0, [pc, #176]	; (800de6c <tcp_slowtmr+0x2fc>)
 800ddbc:	fb00 1303 	mla	r3, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ddc0:	4929      	ldr	r1, [pc, #164]	; (800de68 <tcp_slowtmr+0x2f8>)
 800ddc2:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ddc6:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800ddca:	d801      	bhi.n	800ddd0 <tcp_slowtmr+0x260>
    pcb_reset = 0;
 800ddcc:	2700      	movs	r7, #0
 800ddce:	e00c      	b.n	800ddea <tcp_slowtmr+0x27a>
        err = tcp_keepalive(pcb);
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f003 fa69 	bl	80112a8 <tcp_keepalive>
        if (err == ERR_OK) {
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d14c      	bne.n	800de74 <tcp_slowtmr+0x304>
          pcb->keep_cnt_sent++;
 800ddda:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800ddde:	3301      	adds	r3, #1
 800dde0:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 800dde4:	2700      	movs	r7, #0
 800dde6:	e000      	b.n	800ddea <tcp_slowtmr+0x27a>
 800dde8:	2700      	movs	r7, #0
    if (pcb->state == SYN_RCVD) {
 800ddea:	7d23      	ldrb	r3, [r4, #20]
 800ddec:	2b03      	cmp	r3, #3
 800ddee:	d043      	beq.n	800de78 <tcp_slowtmr+0x308>
    if (pcb->state == LAST_ACK) {
 800ddf0:	2b09      	cmp	r3, #9
 800ddf2:	d04a      	beq.n	800de8a <tcp_slowtmr+0x31a>
    if (pcb_remove) {
 800ddf4:	2d00      	cmp	r5, #0
 800ddf6:	d151      	bne.n	800de9c <tcp_slowtmr+0x32c>
      pcb = pcb->next;
 800ddf8:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 800ddfa:	7f23      	ldrb	r3, [r4, #28]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800de02:	7f62      	ldrb	r2, [r4, #29]
 800de04:	4293      	cmp	r3, r2
 800de06:	f0c0 8097 	bcc.w	800df38 <tcp_slowtmr+0x3c8>
        prev->polltmr = 0;
 800de0a:	2300      	movs	r3, #0
 800de0c:	7723      	strb	r3, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800de0e:	4a18      	ldr	r2, [pc, #96]	; (800de70 <tcp_slowtmr+0x300>)
 800de10:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 800de12:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800de16:	2b00      	cmp	r3, #0
 800de18:	f000 8086 	beq.w	800df28 <tcp_slowtmr+0x3b8>
 800de1c:	4621      	mov	r1, r4
 800de1e:	6920      	ldr	r0, [r4, #16]
 800de20:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800de22:	4b13      	ldr	r3, [pc, #76]	; (800de70 <tcp_slowtmr+0x300>)
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	f47f aead 	bne.w	800db86 <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 800de2c:	2800      	cmp	r0, #0
 800de2e:	d07d      	beq.n	800df2c <tcp_slowtmr+0x3bc>
      prev = pcb;
 800de30:	4626      	mov	r6, r4
      pcb = pcb->next;
 800de32:	462c      	mov	r4, r5
 800de34:	e6c5      	b.n	800dbc2 <tcp_slowtmr+0x52>
 800de36:	bf00      	nop
 800de38:	2000d850 	.word	0x2000d850
 800de3c:	20006e3e 	.word	0x20006e3e
 800de40:	2000d84c 	.word	0x2000d84c
 800de44:	080693a4 	.word	0x080693a4
 800de48:	08069448 	.word	0x08069448
 800de4c:	0801335c 	.word	0x0801335c
 800de50:	08069474 	.word	0x08069474
 800de54:	080694a0 	.word	0x080694a0
 800de58:	080694d0 	.word	0x080694d0
 800de5c:	080692b8 	.word	0x080692b8
 800de60:	08069504 	.word	0x08069504
 800de64:	08068fa4 	.word	0x08068fa4
 800de68:	10624dd3 	.word	0x10624dd3
 800de6c:	000124f8 	.word	0x000124f8
 800de70:	2000d848 	.word	0x2000d848
    pcb_reset = 0;
 800de74:	2700      	movs	r7, #0
 800de76:	e7b8      	b.n	800ddea <tcp_slowtmr+0x27a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800de78:	6a21      	ldr	r1, [r4, #32]
 800de7a:	4a53      	ldr	r2, [pc, #332]	; (800dfc8 <tcp_slowtmr+0x458>)
 800de7c:	6812      	ldr	r2, [r2, #0]
 800de7e:	1a52      	subs	r2, r2, r1
 800de80:	2a28      	cmp	r2, #40	; 0x28
 800de82:	d9b5      	bls.n	800ddf0 <tcp_slowtmr+0x280>
        ++pcb_remove;
 800de84:	3501      	adds	r5, #1
 800de86:	b2ed      	uxtb	r5, r5
 800de88:	e7b2      	b.n	800ddf0 <tcp_slowtmr+0x280>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800de8a:	6a22      	ldr	r2, [r4, #32]
 800de8c:	4b4e      	ldr	r3, [pc, #312]	; (800dfc8 <tcp_slowtmr+0x458>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	1a9b      	subs	r3, r3, r2
 800de92:	2bf0      	cmp	r3, #240	; 0xf0
 800de94:	d9ae      	bls.n	800ddf4 <tcp_slowtmr+0x284>
        ++pcb_remove;
 800de96:	3501      	adds	r5, #1
 800de98:	b2ed      	uxtb	r5, r5
 800de9a:	e7ab      	b.n	800ddf4 <tcp_slowtmr+0x284>
      tcp_err_fn err_fn = pcb->errf;
 800de9c:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800dea0:	4620      	mov	r0, r4
 800dea2:	f7ff fe39 	bl	800db18 <tcp_pcb_purge>
      if (prev != NULL) {
 800dea6:	b31e      	cbz	r6, 800def0 <tcp_slowtmr+0x380>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800dea8:	4b48      	ldr	r3, [pc, #288]	; (800dfcc <tcp_slowtmr+0x45c>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	429c      	cmp	r4, r3
 800deae:	d017      	beq.n	800dee0 <tcp_slowtmr+0x370>
        prev->next = pcb->next;
 800deb0:	68e3      	ldr	r3, [r4, #12]
 800deb2:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 800deb4:	bb5f      	cbnz	r7, 800df0e <tcp_slowtmr+0x39e>
      err_arg = pcb->callback_arg;
 800deb6:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 800deba:	68e7      	ldr	r7, [r4, #12]
      tcp_free(pcb2);
 800debc:	4620      	mov	r0, r4
 800debe:	f7ff fc19 	bl	800d6f4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800dec2:	2200      	movs	r2, #0
 800dec4:	4b42      	ldr	r3, [pc, #264]	; (800dfd0 <tcp_slowtmr+0x460>)
 800dec6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800dec8:	b11d      	cbz	r5, 800ded2 <tcp_slowtmr+0x362>
 800deca:	f06f 010c 	mvn.w	r1, #12
 800dece:	4640      	mov	r0, r8
 800ded0:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 800ded2:	4b3f      	ldr	r3, [pc, #252]	; (800dfd0 <tcp_slowtmr+0x460>)
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f47f ae55 	bne.w	800db86 <tcp_slowtmr+0x16>
      pcb = pcb->next;
 800dedc:	463c      	mov	r4, r7
 800dede:	e670      	b.n	800dbc2 <tcp_slowtmr+0x52>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800dee0:	4b3c      	ldr	r3, [pc, #240]	; (800dfd4 <tcp_slowtmr+0x464>)
 800dee2:	f240 526d 	movw	r2, #1389	; 0x56d
 800dee6:	493c      	ldr	r1, [pc, #240]	; (800dfd8 <tcp_slowtmr+0x468>)
 800dee8:	483c      	ldr	r0, [pc, #240]	; (800dfdc <tcp_slowtmr+0x46c>)
 800deea:	f004 f93f 	bl	801216c <iprintf>
 800deee:	e7df      	b.n	800deb0 <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800def0:	4b36      	ldr	r3, [pc, #216]	; (800dfcc <tcp_slowtmr+0x45c>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	429c      	cmp	r4, r3
 800def6:	d006      	beq.n	800df06 <tcp_slowtmr+0x396>
 800def8:	4b36      	ldr	r3, [pc, #216]	; (800dfd4 <tcp_slowtmr+0x464>)
 800defa:	f240 5271 	movw	r2, #1393	; 0x571
 800defe:	4938      	ldr	r1, [pc, #224]	; (800dfe0 <tcp_slowtmr+0x470>)
 800df00:	4836      	ldr	r0, [pc, #216]	; (800dfdc <tcp_slowtmr+0x46c>)
 800df02:	f004 f933 	bl	801216c <iprintf>
        tcp_active_pcbs = pcb->next;
 800df06:	68e2      	ldr	r2, [r4, #12]
 800df08:	4b30      	ldr	r3, [pc, #192]	; (800dfcc <tcp_slowtmr+0x45c>)
 800df0a:	601a      	str	r2, [r3, #0]
 800df0c:	e7d2      	b.n	800deb4 <tcp_slowtmr+0x344>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800df0e:	1d23      	adds	r3, r4, #4
 800df10:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800df12:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800df14:	8b20      	ldrh	r0, [r4, #24]
 800df16:	9002      	str	r0, [sp, #8]
 800df18:	8ae0      	ldrh	r0, [r4, #22]
 800df1a:	9001      	str	r0, [sp, #4]
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	4623      	mov	r3, r4
 800df20:	4620      	mov	r0, r4
 800df22:	f002 ff9f 	bl	8010e64 <tcp_rst>
 800df26:	e7c6      	b.n	800deb6 <tcp_slowtmr+0x346>
        TCP_EVENT_POLL(prev, err);
 800df28:	2000      	movs	r0, #0
 800df2a:	e77a      	b.n	800de22 <tcp_slowtmr+0x2b2>
          tcp_output(prev);
 800df2c:	4620      	mov	r0, r4
 800df2e:	f003 f81d 	bl	8010f6c <tcp_output>
      prev = pcb;
 800df32:	4626      	mov	r6, r4
      pcb = pcb->next;
 800df34:	462c      	mov	r4, r5
 800df36:	e644      	b.n	800dbc2 <tcp_slowtmr+0x52>
      prev = pcb;
 800df38:	4626      	mov	r6, r4
      pcb = pcb->next;
 800df3a:	462c      	mov	r4, r5
 800df3c:	e641      	b.n	800dbc2 <tcp_slowtmr+0x52>
  pcb = tcp_tw_pcbs;
 800df3e:	4b29      	ldr	r3, [pc, #164]	; (800dfe4 <tcp_slowtmr+0x474>)
 800df40:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 800df42:	e003      	b.n	800df4c <tcp_slowtmr+0x3dc>
      ++pcb_remove;
 800df44:	2301      	movs	r3, #1
    if (pcb_remove) {
 800df46:	b9ab      	cbnz	r3, 800df74 <tcp_slowtmr+0x404>
      prev = pcb;
 800df48:	462c      	mov	r4, r5
      pcb = pcb->next;
 800df4a:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 800df4c:	2d00      	cmp	r5, #0
 800df4e:	d038      	beq.n	800dfc2 <tcp_slowtmr+0x452>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800df50:	7d2b      	ldrb	r3, [r5, #20]
 800df52:	2b0a      	cmp	r3, #10
 800df54:	d006      	beq.n	800df64 <tcp_slowtmr+0x3f4>
 800df56:	4b1f      	ldr	r3, [pc, #124]	; (800dfd4 <tcp_slowtmr+0x464>)
 800df58:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800df5c:	4922      	ldr	r1, [pc, #136]	; (800dfe8 <tcp_slowtmr+0x478>)
 800df5e:	481f      	ldr	r0, [pc, #124]	; (800dfdc <tcp_slowtmr+0x46c>)
 800df60:	f004 f904 	bl	801216c <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800df64:	6a2a      	ldr	r2, [r5, #32]
 800df66:	4b18      	ldr	r3, [pc, #96]	; (800dfc8 <tcp_slowtmr+0x458>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	1a9b      	subs	r3, r3, r2
 800df6c:	2bf0      	cmp	r3, #240	; 0xf0
 800df6e:	d8e9      	bhi.n	800df44 <tcp_slowtmr+0x3d4>
    pcb_remove = 0;
 800df70:	2300      	movs	r3, #0
 800df72:	e7e8      	b.n	800df46 <tcp_slowtmr+0x3d6>
      tcp_pcb_purge(pcb);
 800df74:	4628      	mov	r0, r5
 800df76:	f7ff fdcf 	bl	800db18 <tcp_pcb_purge>
      if (prev != NULL) {
 800df7a:	b19c      	cbz	r4, 800dfa4 <tcp_slowtmr+0x434>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800df7c:	4b19      	ldr	r3, [pc, #100]	; (800dfe4 <tcp_slowtmr+0x474>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	429d      	cmp	r5, r3
 800df82:	d007      	beq.n	800df94 <tcp_slowtmr+0x424>
        prev->next = pcb->next;
 800df84:	68eb      	ldr	r3, [r5, #12]
 800df86:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800df88:	68ee      	ldr	r6, [r5, #12]
      tcp_free(pcb2);
 800df8a:	4628      	mov	r0, r5
 800df8c:	f7ff fbb2 	bl	800d6f4 <tcp_free>
      pcb = pcb->next;
 800df90:	4635      	mov	r5, r6
 800df92:	e7db      	b.n	800df4c <tcp_slowtmr+0x3dc>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800df94:	4b0f      	ldr	r3, [pc, #60]	; (800dfd4 <tcp_slowtmr+0x464>)
 800df96:	f240 52af 	movw	r2, #1455	; 0x5af
 800df9a:	4914      	ldr	r1, [pc, #80]	; (800dfec <tcp_slowtmr+0x47c>)
 800df9c:	480f      	ldr	r0, [pc, #60]	; (800dfdc <tcp_slowtmr+0x46c>)
 800df9e:	f004 f8e5 	bl	801216c <iprintf>
 800dfa2:	e7ef      	b.n	800df84 <tcp_slowtmr+0x414>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800dfa4:	4b0f      	ldr	r3, [pc, #60]	; (800dfe4 <tcp_slowtmr+0x474>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	429d      	cmp	r5, r3
 800dfaa:	d006      	beq.n	800dfba <tcp_slowtmr+0x44a>
 800dfac:	4b09      	ldr	r3, [pc, #36]	; (800dfd4 <tcp_slowtmr+0x464>)
 800dfae:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800dfb2:	490f      	ldr	r1, [pc, #60]	; (800dff0 <tcp_slowtmr+0x480>)
 800dfb4:	4809      	ldr	r0, [pc, #36]	; (800dfdc <tcp_slowtmr+0x46c>)
 800dfb6:	f004 f8d9 	bl	801216c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800dfba:	68ea      	ldr	r2, [r5, #12]
 800dfbc:	4b09      	ldr	r3, [pc, #36]	; (800dfe4 <tcp_slowtmr+0x474>)
 800dfbe:	601a      	str	r2, [r3, #0]
 800dfc0:	e7e2      	b.n	800df88 <tcp_slowtmr+0x418>
}
 800dfc2:	b004      	add	sp, #16
 800dfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc8:	2000d850 	.word	0x2000d850
 800dfcc:	2000d84c 	.word	0x2000d84c
 800dfd0:	2000d848 	.word	0x2000d848
 800dfd4:	080693a4 	.word	0x080693a4
 800dfd8:	0806953c 	.word	0x0806953c
 800dfdc:	0801335c 	.word	0x0801335c
 800dfe0:	08069568 	.word	0x08069568
 800dfe4:	2000d85c 	.word	0x2000d85c
 800dfe8:	08069594 	.word	0x08069594
 800dfec:	080695c4 	.word	0x080695c4
 800dff0:	080695ec 	.word	0x080695ec

0800dff4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dff4:	b538      	push	{r3, r4, r5, lr}
 800dff6:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dff8:	460c      	mov	r4, r1
 800dffa:	b149      	cbz	r1, 800e010 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dffc:	b185      	cbz	r5, 800e020 <tcp_pcb_remove+0x2c>

  TCP_RMV(pcblist, pcb);
 800dffe:	682b      	ldr	r3, [r5, #0]
 800e000:	429c      	cmp	r4, r3
 800e002:	d015      	beq.n	800e030 <tcp_pcb_remove+0x3c>
 800e004:	b1cb      	cbz	r3, 800e03a <tcp_pcb_remove+0x46>
 800e006:	68da      	ldr	r2, [r3, #12]
 800e008:	4294      	cmp	r4, r2
 800e00a:	d014      	beq.n	800e036 <tcp_pcb_remove+0x42>
 800e00c:	4613      	mov	r3, r2
 800e00e:	e7f9      	b.n	800e004 <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e010:	4b21      	ldr	r3, [pc, #132]	; (800e098 <tcp_pcb_remove+0xa4>)
 800e012:	f640 0283 	movw	r2, #2179	; 0x883
 800e016:	4921      	ldr	r1, [pc, #132]	; (800e09c <tcp_pcb_remove+0xa8>)
 800e018:	4821      	ldr	r0, [pc, #132]	; (800e0a0 <tcp_pcb_remove+0xac>)
 800e01a:	f004 f8a7 	bl	801216c <iprintf>
 800e01e:	e7ed      	b.n	800dffc <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e020:	4b1d      	ldr	r3, [pc, #116]	; (800e098 <tcp_pcb_remove+0xa4>)
 800e022:	f640 0284 	movw	r2, #2180	; 0x884
 800e026:	491f      	ldr	r1, [pc, #124]	; (800e0a4 <tcp_pcb_remove+0xb0>)
 800e028:	481d      	ldr	r0, [pc, #116]	; (800e0a0 <tcp_pcb_remove+0xac>)
 800e02a:	f004 f89f 	bl	801216c <iprintf>
 800e02e:	e7e6      	b.n	800dffe <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 800e030:	68db      	ldr	r3, [r3, #12]
 800e032:	602b      	str	r3, [r5, #0]
 800e034:	e001      	b.n	800e03a <tcp_pcb_remove+0x46>
 800e036:	68e2      	ldr	r2, [r4, #12]
 800e038:	60da      	str	r2, [r3, #12]
 800e03a:	2300      	movs	r3, #0
 800e03c:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 800e03e:	4620      	mov	r0, r4
 800e040:	f7ff fd6a 	bl	800db18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e044:	7d23      	ldrb	r3, [r4, #20]
 800e046:	2b0a      	cmp	r3, #10
 800e048:	d005      	beq.n	800e056 <tcp_pcb_remove+0x62>
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d003      	beq.n	800e056 <tcp_pcb_remove+0x62>
      (pcb->state != LISTEN) &&
      (pcb->flags & TF_ACK_DELAY)) {
 800e04e:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800e050:	f013 0f01 	tst.w	r3, #1
 800e054:	d118      	bne.n	800e088 <tcp_pcb_remove+0x94>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 800e056:	7d23      	ldrb	r3, [r4, #20]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d011      	beq.n	800e080 <tcp_pcb_remove+0x8c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e05c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e05e:	b133      	cbz	r3, 800e06e <tcp_pcb_remove+0x7a>
 800e060:	4b0d      	ldr	r3, [pc, #52]	; (800e098 <tcp_pcb_remove+0xa4>)
 800e062:	f640 0293 	movw	r2, #2195	; 0x893
 800e066:	4910      	ldr	r1, [pc, #64]	; (800e0a8 <tcp_pcb_remove+0xb4>)
 800e068:	480d      	ldr	r0, [pc, #52]	; (800e0a0 <tcp_pcb_remove+0xac>)
 800e06a:	f004 f87f 	bl	801216c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e06e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e070:	b133      	cbz	r3, 800e080 <tcp_pcb_remove+0x8c>
 800e072:	4b09      	ldr	r3, [pc, #36]	; (800e098 <tcp_pcb_remove+0xa4>)
 800e074:	f640 0294 	movw	r2, #2196	; 0x894
 800e078:	490c      	ldr	r1, [pc, #48]	; (800e0ac <tcp_pcb_remove+0xb8>)
 800e07a:	4809      	ldr	r0, [pc, #36]	; (800e0a0 <tcp_pcb_remove+0xac>)
 800e07c:	f004 f876 	bl	801216c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e080:	2300      	movs	r3, #0
 800e082:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e084:	82e3      	strh	r3, [r4, #22]
 800e086:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 800e088:	f043 0302 	orr.w	r3, r3, #2
 800e08c:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800e08e:	4620      	mov	r0, r4
 800e090:	f002 ff6c 	bl	8010f6c <tcp_output>
 800e094:	e7df      	b.n	800e056 <tcp_pcb_remove+0x62>
 800e096:	bf00      	nop
 800e098:	080693a4 	.word	0x080693a4
 800e09c:	08069248 	.word	0x08069248
 800e0a0:	0801335c 	.word	0x0801335c
 800e0a4:	08069264 	.word	0x08069264
 800e0a8:	08069284 	.word	0x08069284
 800e0ac:	0806929c 	.word	0x0806929c

0800e0b0 <tcp_close_shutdown>:
{
 800e0b0:	b530      	push	{r4, r5, lr}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e0b6:	4604      	mov	r4, r0
 800e0b8:	b180      	cbz	r0, 800e0dc <tcp_close_shutdown+0x2c>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e0ba:	b125      	cbz	r5, 800e0c6 <tcp_close_shutdown+0x16>
 800e0bc:	7d23      	ldrb	r3, [r4, #20]
 800e0be:	2b04      	cmp	r3, #4
 800e0c0:	d014      	beq.n	800e0ec <tcp_close_shutdown+0x3c>
 800e0c2:	2b07      	cmp	r3, #7
 800e0c4:	d012      	beq.n	800e0ec <tcp_close_shutdown+0x3c>
  switch (pcb->state) {
 800e0c6:	7d23      	ldrb	r3, [r4, #20]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d06e      	beq.n	800e1aa <tcp_close_shutdown+0xfa>
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d053      	beq.n	800e178 <tcp_close_shutdown+0xc8>
 800e0d0:	2b02      	cmp	r3, #2
 800e0d2:	d076      	beq.n	800e1c2 <tcp_close_shutdown+0x112>
      return tcp_close_shutdown_fin(pcb);
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	f7ff faa7 	bl	800d628 <tcp_close_shutdown_fin>
 800e0da:	e047      	b.n	800e16c <tcp_close_shutdown+0xbc>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e0dc:	4b3f      	ldr	r3, [pc, #252]	; (800e1dc <tcp_close_shutdown+0x12c>)
 800e0de:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e0e2:	493f      	ldr	r1, [pc, #252]	; (800e1e0 <tcp_close_shutdown+0x130>)
 800e0e4:	483f      	ldr	r0, [pc, #252]	; (800e1e4 <tcp_close_shutdown+0x134>)
 800e0e6:	f004 f841 	bl	801216c <iprintf>
 800e0ea:	e7e6      	b.n	800e0ba <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e0ec:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e0ee:	b1e3      	cbz	r3, 800e12a <tcp_close_shutdown+0x7a>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e0f0:	8b63      	ldrh	r3, [r4, #26]
 800e0f2:	f013 0f10 	tst.w	r3, #16
 800e0f6:	d01e      	beq.n	800e136 <tcp_close_shutdown+0x86>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e0f8:	1d23      	adds	r3, r4, #4
 800e0fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e0fc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800e0fe:	8b20      	ldrh	r0, [r4, #24]
 800e100:	9002      	str	r0, [sp, #8]
 800e102:	8ae0      	ldrh	r0, [r4, #22]
 800e104:	9001      	str	r0, [sp, #4]
 800e106:	9300      	str	r3, [sp, #0]
 800e108:	4623      	mov	r3, r4
 800e10a:	4620      	mov	r0, r4
 800e10c:	f002 feaa 	bl	8010e64 <tcp_rst>
      tcp_pcb_purge(pcb);
 800e110:	4620      	mov	r0, r4
 800e112:	f7ff fd01 	bl	800db18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e116:	4b34      	ldr	r3, [pc, #208]	; (800e1e8 <tcp_close_shutdown+0x138>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	429c      	cmp	r4, r3
 800e11c:	d013      	beq.n	800e146 <tcp_close_shutdown+0x96>
 800e11e:	b1c3      	cbz	r3, 800e152 <tcp_close_shutdown+0xa2>
 800e120:	68da      	ldr	r2, [r3, #12]
 800e122:	4294      	cmp	r4, r2
 800e124:	d013      	beq.n	800e14e <tcp_close_shutdown+0x9e>
 800e126:	4613      	mov	r3, r2
 800e128:	e7f9      	b.n	800e11e <tcp_close_shutdown+0x6e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e12a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800e12c:	f642 53a0 	movw	r3, #11680	; 0x2da0
 800e130:	429a      	cmp	r2, r3
 800e132:	d1dd      	bne.n	800e0f0 <tcp_close_shutdown+0x40>
 800e134:	e7c7      	b.n	800e0c6 <tcp_close_shutdown+0x16>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e136:	4b29      	ldr	r3, [pc, #164]	; (800e1dc <tcp_close_shutdown+0x12c>)
 800e138:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e13c:	492b      	ldr	r1, [pc, #172]	; (800e1ec <tcp_close_shutdown+0x13c>)
 800e13e:	4829      	ldr	r0, [pc, #164]	; (800e1e4 <tcp_close_shutdown+0x134>)
 800e140:	f004 f814 	bl	801216c <iprintf>
 800e144:	e7d8      	b.n	800e0f8 <tcp_close_shutdown+0x48>
      TCP_RMV_ACTIVE(pcb);
 800e146:	68da      	ldr	r2, [r3, #12]
 800e148:	4b27      	ldr	r3, [pc, #156]	; (800e1e8 <tcp_close_shutdown+0x138>)
 800e14a:	601a      	str	r2, [r3, #0]
 800e14c:	e001      	b.n	800e152 <tcp_close_shutdown+0xa2>
 800e14e:	68e2      	ldr	r2, [r4, #12]
 800e150:	60da      	str	r2, [r3, #12]
 800e152:	2300      	movs	r3, #0
 800e154:	60e3      	str	r3, [r4, #12]
 800e156:	2201      	movs	r2, #1
 800e158:	4b25      	ldr	r3, [pc, #148]	; (800e1f0 <tcp_close_shutdown+0x140>)
 800e15a:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 800e15c:	4b25      	ldr	r3, [pc, #148]	; (800e1f4 <tcp_close_shutdown+0x144>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	429c      	cmp	r4, r3
 800e162:	d005      	beq.n	800e170 <tcp_close_shutdown+0xc0>
        tcp_free(pcb);
 800e164:	4620      	mov	r0, r4
 800e166:	f7ff fac5 	bl	800d6f4 <tcp_free>
      return ERR_OK;
 800e16a:	2000      	movs	r0, #0
}
 800e16c:	b005      	add	sp, #20
 800e16e:	bd30      	pop	{r4, r5, pc}
        tcp_trigger_input_pcb_close();
 800e170:	f001 fe3c 	bl	800fdec <tcp_trigger_input_pcb_close>
      return ERR_OK;
 800e174:	2000      	movs	r0, #0
 800e176:	e7f9      	b.n	800e16c <tcp_close_shutdown+0xbc>
      if (pcb->local_port != 0) {
 800e178:	8ae3      	ldrh	r3, [r4, #22]
 800e17a:	b18b      	cbz	r3, 800e1a0 <tcp_close_shutdown+0xf0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e17c:	4b1e      	ldr	r3, [pc, #120]	; (800e1f8 <tcp_close_shutdown+0x148>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	429c      	cmp	r4, r3
 800e182:	d005      	beq.n	800e190 <tcp_close_shutdown+0xe0>
 800e184:	b153      	cbz	r3, 800e19c <tcp_close_shutdown+0xec>
 800e186:	68da      	ldr	r2, [r3, #12]
 800e188:	4294      	cmp	r4, r2
 800e18a:	d005      	beq.n	800e198 <tcp_close_shutdown+0xe8>
 800e18c:	4613      	mov	r3, r2
 800e18e:	e7f9      	b.n	800e184 <tcp_close_shutdown+0xd4>
 800e190:	68da      	ldr	r2, [r3, #12]
 800e192:	4b19      	ldr	r3, [pc, #100]	; (800e1f8 <tcp_close_shutdown+0x148>)
 800e194:	601a      	str	r2, [r3, #0]
 800e196:	e001      	b.n	800e19c <tcp_close_shutdown+0xec>
 800e198:	68e2      	ldr	r2, [r4, #12]
 800e19a:	60da      	str	r2, [r3, #12]
 800e19c:	2300      	movs	r3, #0
 800e19e:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f7ff faa7 	bl	800d6f4 <tcp_free>
  return ERR_OK;
 800e1a6:	2000      	movs	r0, #0
      break;
 800e1a8:	e7e0      	b.n	800e16c <tcp_close_shutdown+0xbc>
      tcp_listen_closed(pcb);
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f7ff f9f8 	bl	800d5a0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e1b0:	4621      	mov	r1, r4
 800e1b2:	4812      	ldr	r0, [pc, #72]	; (800e1fc <tcp_close_shutdown+0x14c>)
 800e1b4:	f7ff ff1e 	bl	800dff4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f7ff fa1d 	bl	800d5f8 <tcp_free_listen>
  return ERR_OK;
 800e1be:	2000      	movs	r0, #0
      break;
 800e1c0:	e7d4      	b.n	800e16c <tcp_close_shutdown+0xbc>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e1c2:	4621      	mov	r1, r4
 800e1c4:	4808      	ldr	r0, [pc, #32]	; (800e1e8 <tcp_close_shutdown+0x138>)
 800e1c6:	f7ff ff15 	bl	800dff4 <tcp_pcb_remove>
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	4b08      	ldr	r3, [pc, #32]	; (800e1f0 <tcp_close_shutdown+0x140>)
 800e1ce:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f7ff fa8f 	bl	800d6f4 <tcp_free>
  return ERR_OK;
 800e1d6:	2000      	movs	r0, #0
      break;
 800e1d8:	e7c8      	b.n	800e16c <tcp_close_shutdown+0xbc>
 800e1da:	bf00      	nop
 800e1dc:	080693a4 	.word	0x080693a4
 800e1e0:	0806900c 	.word	0x0806900c
 800e1e4:	0801335c 	.word	0x0801335c
 800e1e8:	2000d84c 	.word	0x2000d84c
 800e1ec:	0806902c 	.word	0x0806902c
 800e1f0:	2000d848 	.word	0x2000d848
 800e1f4:	2000d860 	.word	0x2000d860
 800e1f8:	2000d858 	.word	0x2000d858
 800e1fc:	2000d854 	.word	0x2000d854

0800e200 <tcp_close>:
{
 800e200:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e202:	b160      	cbz	r0, 800e21e <tcp_close+0x1e>
 800e204:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 800e206:	7d02      	ldrb	r2, [r0, #20]
 800e208:	2a01      	cmp	r2, #1
 800e20a:	d003      	beq.n	800e214 <tcp_close+0x14>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e20c:	8b42      	ldrh	r2, [r0, #26]
 800e20e:	f042 0210 	orr.w	r2, r2, #16
 800e212:	8342      	strh	r2, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800e214:	2101      	movs	r1, #1
 800e216:	4618      	mov	r0, r3
 800e218:	f7ff ff4a 	bl	800e0b0 <tcp_close_shutdown>
}
 800e21c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e21e:	4b05      	ldr	r3, [pc, #20]	; (800e234 <tcp_close+0x34>)
 800e220:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e224:	4904      	ldr	r1, [pc, #16]	; (800e238 <tcp_close+0x38>)
 800e226:	4805      	ldr	r0, [pc, #20]	; (800e23c <tcp_close+0x3c>)
 800e228:	f003 ffa0 	bl	801216c <iprintf>
 800e22c:	f06f 000f 	mvn.w	r0, #15
 800e230:	bd08      	pop	{r3, pc}
 800e232:	bf00      	nop
 800e234:	080693a4 	.word	0x080693a4
 800e238:	08068ff4 	.word	0x08068ff4
 800e23c:	0801335c 	.word	0x0801335c

0800e240 <tcp_recv_null>:
{
 800e240:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e242:	b151      	cbz	r1, 800e25a <tcp_recv_null+0x1a>
 800e244:	4614      	mov	r4, r2
 800e246:	4608      	mov	r0, r1
  if (p != NULL) {
 800e248:	b18a      	cbz	r2, 800e26e <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800e24a:	8911      	ldrh	r1, [r2, #8]
 800e24c:	f7ff fb80 	bl	800d950 <tcp_recved>
    pbuf_free(p);
 800e250:	4620      	mov	r0, r4
 800e252:	f7fe fe21 	bl	800ce98 <pbuf_free>
  return ERR_OK;
 800e256:	2000      	movs	r0, #0
 800e258:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e25a:	4b08      	ldr	r3, [pc, #32]	; (800e27c <tcp_recv_null+0x3c>)
 800e25c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e260:	4907      	ldr	r1, [pc, #28]	; (800e280 <tcp_recv_null+0x40>)
 800e262:	4808      	ldr	r0, [pc, #32]	; (800e284 <tcp_recv_null+0x44>)
 800e264:	f003 ff82 	bl	801216c <iprintf>
 800e268:	f06f 000f 	mvn.w	r0, #15
 800e26c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800e26e:	b10b      	cbz	r3, 800e274 <tcp_recv_null+0x34>
  return ERR_OK;
 800e270:	2000      	movs	r0, #0
}
 800e272:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 800e274:	f7ff ffc4 	bl	800e200 <tcp_close>
 800e278:	bd10      	pop	{r4, pc}
 800e27a:	bf00      	nop
 800e27c:	080693a4 	.word	0x080693a4
 800e280:	08069348 	.word	0x08069348
 800e284:	0801335c 	.word	0x0801335c

0800e288 <tcp_process_refused_data>:
{
 800e288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e28a:	b320      	cbz	r0, 800e2d6 <tcp_process_refused_data+0x4e>
 800e28c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800e28e:	6f46      	ldr	r6, [r0, #116]	; 0x74
 800e290:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800e292:	2300      	movs	r3, #0
 800e294:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e296:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 800e29a:	b335      	cbz	r5, 800e2ea <tcp_process_refused_data+0x62>
 800e29c:	4632      	mov	r2, r6
 800e29e:	4601      	mov	r1, r0
 800e2a0:	6900      	ldr	r0, [r0, #16]
 800e2a2:	47a8      	blx	r5
 800e2a4:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800e2a6:	bb55      	cbnz	r5, 800e2fe <tcp_process_refused_data+0x76>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e2a8:	f017 0f20 	tst.w	r7, #32
 800e2ac:	d02d      	beq.n	800e30a <tcp_process_refused_data+0x82>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e2ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800e2b0:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d001      	beq.n	800e2bc <tcp_process_refused_data+0x34>
          pcb->rcv_wnd++;
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800e2bc:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800e2c0:	b1de      	cbz	r6, 800e2fa <tcp_process_refused_data+0x72>
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	6920      	ldr	r0, [r4, #16]
 800e2ca:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800e2cc:	f110 0f0d 	cmn.w	r0, #13
 800e2d0:	d11b      	bne.n	800e30a <tcp_process_refused_data+0x82>
          return ERR_ABRT;
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	e019      	b.n	800e30a <tcp_process_refused_data+0x82>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e2d6:	4b0e      	ldr	r3, [pc, #56]	; (800e310 <tcp_process_refused_data+0x88>)
 800e2d8:	f240 6209 	movw	r2, #1545	; 0x609
 800e2dc:	490d      	ldr	r1, [pc, #52]	; (800e314 <tcp_process_refused_data+0x8c>)
 800e2de:	480e      	ldr	r0, [pc, #56]	; (800e318 <tcp_process_refused_data+0x90>)
 800e2e0:	f003 ff44 	bl	801216c <iprintf>
 800e2e4:	f06f 050f 	mvn.w	r5, #15
 800e2e8:	e00f      	b.n	800e30a <tcp_process_refused_data+0x82>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	4632      	mov	r2, r6
 800e2ee:	4601      	mov	r1, r0
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7ff ffa5 	bl	800e240 <tcp_recv_null>
 800e2f6:	4605      	mov	r5, r0
 800e2f8:	e7d5      	b.n	800e2a6 <tcp_process_refused_data+0x1e>
        TCP_EVENT_CLOSED(pcb, err);
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	e7e6      	b.n	800e2cc <tcp_process_refused_data+0x44>
    } else if (err == ERR_ABRT) {
 800e2fe:	f115 0f0d 	cmn.w	r5, #13
 800e302:	d002      	beq.n	800e30a <tcp_process_refused_data+0x82>
      pcb->refused_data = refused_data;
 800e304:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800e306:	f06f 0504 	mvn.w	r5, #4
}
 800e30a:	4628      	mov	r0, r5
 800e30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e30e:	bf00      	nop
 800e310:	080693a4 	.word	0x080693a4
 800e314:	080692f8 	.word	0x080692f8
 800e318:	0801335c 	.word	0x0801335c

0800e31c <tcp_fasttmr>:
{
 800e31c:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 800e31e:	4a1c      	ldr	r2, [pc, #112]	; (800e390 <tcp_fasttmr+0x74>)
 800e320:	7813      	ldrb	r3, [r2, #0]
 800e322:	3301      	adds	r3, #1
 800e324:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800e326:	4b1b      	ldr	r3, [pc, #108]	; (800e394 <tcp_fasttmr+0x78>)
 800e328:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800e32a:	e013      	b.n	800e354 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 800e32c:	f043 0302 	orr.w	r3, r3, #2
 800e330:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800e332:	4620      	mov	r0, r4
 800e334:	f002 fe1a 	bl	8010f6c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e338:	8b63      	ldrh	r3, [r4, #26]
 800e33a:	f023 0303 	bic.w	r3, r3, #3
 800e33e:	8363      	strh	r3, [r4, #26]
 800e340:	e013      	b.n	800e36a <tcp_fasttmr+0x4e>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e342:	f023 0308 	bic.w	r3, r3, #8
 800e346:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800e348:	4620      	mov	r0, r4
 800e34a:	f7ff f96d 	bl	800d628 <tcp_close_shutdown_fin>
 800e34e:	e010      	b.n	800e372 <tcp_fasttmr+0x56>
      pcb = pcb->next;
 800e350:	68e5      	ldr	r5, [r4, #12]
{
 800e352:	462c      	mov	r4, r5
  while (pcb != NULL) {
 800e354:	b1dc      	cbz	r4, 800e38e <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e356:	7fa2      	ldrb	r2, [r4, #30]
 800e358:	4b0d      	ldr	r3, [pc, #52]	; (800e390 <tcp_fasttmr+0x74>)
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d0f7      	beq.n	800e350 <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 800e360:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800e362:	8b63      	ldrh	r3, [r4, #26]
 800e364:	f013 0f01 	tst.w	r3, #1
 800e368:	d1e0      	bne.n	800e32c <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 800e36a:	8b63      	ldrh	r3, [r4, #26]
 800e36c:	f013 0f08 	tst.w	r3, #8
 800e370:	d1e7      	bne.n	800e342 <tcp_fasttmr+0x26>
      next = pcb->next;
 800e372:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 800e374:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e376:	2b00      	cmp	r3, #0
 800e378:	d0eb      	beq.n	800e352 <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 800e37a:	4e07      	ldr	r6, [pc, #28]	; (800e398 <tcp_fasttmr+0x7c>)
 800e37c:	2300      	movs	r3, #0
 800e37e:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 800e380:	4620      	mov	r0, r4
 800e382:	f7ff ff81 	bl	800e288 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e386:	7833      	ldrb	r3, [r6, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d0e2      	beq.n	800e352 <tcp_fasttmr+0x36>
 800e38c:	e7cb      	b.n	800e326 <tcp_fasttmr+0xa>
}
 800e38e:	bd70      	pop	{r4, r5, r6, pc}
 800e390:	20006e3e 	.word	0x20006e3e
 800e394:	2000d84c 	.word	0x2000d84c
 800e398:	2000d848 	.word	0x2000d848

0800e39c <tcp_tmr>:
{
 800e39c:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800e39e:	f7ff ffbd 	bl	800e31c <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800e3a2:	4a06      	ldr	r2, [pc, #24]	; (800e3bc <tcp_tmr+0x20>)
 800e3a4:	7813      	ldrb	r3, [r2, #0]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	7013      	strb	r3, [r2, #0]
 800e3ac:	f013 0f01 	tst.w	r3, #1
 800e3b0:	d100      	bne.n	800e3b4 <tcp_tmr+0x18>
 800e3b2:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 800e3b4:	f7ff fbdc 	bl	800db70 <tcp_slowtmr>
}
 800e3b8:	e7fb      	b.n	800e3b2 <tcp_tmr+0x16>
 800e3ba:	bf00      	nop
 800e3bc:	20006e3d 	.word	0x20006e3d

0800e3c0 <tcp_abandon>:
{
 800e3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c4:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e3c6:	b1f8      	cbz	r0, 800e408 <tcp_abandon+0x48>
 800e3c8:	460d      	mov	r5, r1
 800e3ca:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e3cc:	7d03      	ldrb	r3, [r0, #20]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d022      	beq.n	800e418 <tcp_abandon+0x58>
  if (pcb->state == TIME_WAIT) {
 800e3d2:	7d23      	ldrb	r3, [r4, #20]
 800e3d4:	2b0a      	cmp	r3, #10
 800e3d6:	d027      	beq.n	800e428 <tcp_abandon+0x68>
    seqno = pcb->snd_nxt;
 800e3d8:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800e3dc:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 800e3e0:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800e3e4:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d143      	bne.n	800e472 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800e3ea:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 800e3ee:	f1ba 0f00 	cmp.w	sl, #0
 800e3f2:	d048      	beq.n	800e486 <tcp_abandon+0xc6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e3f4:	4b2b      	ldr	r3, [pc, #172]	; (800e4a4 <tcp_abandon+0xe4>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	429c      	cmp	r4, r3
 800e3fa:	d01d      	beq.n	800e438 <tcp_abandon+0x78>
 800e3fc:	b313      	cbz	r3, 800e444 <tcp_abandon+0x84>
 800e3fe:	68da      	ldr	r2, [r3, #12]
 800e400:	4294      	cmp	r4, r2
 800e402:	d01d      	beq.n	800e440 <tcp_abandon+0x80>
 800e404:	4613      	mov	r3, r2
 800e406:	e7f9      	b.n	800e3fc <tcp_abandon+0x3c>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e408:	4b27      	ldr	r3, [pc, #156]	; (800e4a8 <tcp_abandon+0xe8>)
 800e40a:	f240 223d 	movw	r2, #573	; 0x23d
 800e40e:	4927      	ldr	r1, [pc, #156]	; (800e4ac <tcp_abandon+0xec>)
 800e410:	4827      	ldr	r0, [pc, #156]	; (800e4b0 <tcp_abandon+0xf0>)
 800e412:	f003 feab 	bl	801216c <iprintf>
 800e416:	e029      	b.n	800e46c <tcp_abandon+0xac>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e418:	4b23      	ldr	r3, [pc, #140]	; (800e4a8 <tcp_abandon+0xe8>)
 800e41a:	f240 2241 	movw	r2, #577	; 0x241
 800e41e:	4925      	ldr	r1, [pc, #148]	; (800e4b4 <tcp_abandon+0xf4>)
 800e420:	4823      	ldr	r0, [pc, #140]	; (800e4b0 <tcp_abandon+0xf0>)
 800e422:	f003 fea3 	bl	801216c <iprintf>
 800e426:	e7d4      	b.n	800e3d2 <tcp_abandon+0x12>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e428:	4621      	mov	r1, r4
 800e42a:	4823      	ldr	r0, [pc, #140]	; (800e4b8 <tcp_abandon+0xf8>)
 800e42c:	f7ff fde2 	bl	800dff4 <tcp_pcb_remove>
    tcp_free(pcb);
 800e430:	4620      	mov	r0, r4
 800e432:	f7ff f95f 	bl	800d6f4 <tcp_free>
 800e436:	e019      	b.n	800e46c <tcp_abandon+0xac>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e438:	68da      	ldr	r2, [r3, #12]
 800e43a:	4b1a      	ldr	r3, [pc, #104]	; (800e4a4 <tcp_abandon+0xe4>)
 800e43c:	601a      	str	r2, [r3, #0]
 800e43e:	e001      	b.n	800e444 <tcp_abandon+0x84>
 800e440:	68e2      	ldr	r2, [r4, #12]
 800e442:	60da      	str	r2, [r3, #12]
 800e444:	2500      	movs	r5, #0
 800e446:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 800e448:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 800e44a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800e44c:	b108      	cbz	r0, 800e452 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unacked);
 800e44e:	f7ff faca 	bl	800d9e6 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800e452:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e454:	b108      	cbz	r0, 800e45a <tcp_abandon+0x9a>
      tcp_segs_free(pcb->unsent);
 800e456:	f7ff fac6 	bl	800d9e6 <tcp_segs_free>
    if (send_rst) {
 800e45a:	b9b5      	cbnz	r5, 800e48a <tcp_abandon+0xca>
    tcp_free(pcb);
 800e45c:	4620      	mov	r0, r4
 800e45e:	f7ff f949 	bl	800d6f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e462:	b11e      	cbz	r6, 800e46c <tcp_abandon+0xac>
 800e464:	f06f 010c 	mvn.w	r1, #12
 800e468:	4638      	mov	r0, r7
 800e46a:	47b0      	blx	r6
}
 800e46c:	b004      	add	sp, #16
 800e46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 800e472:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e476:	4621      	mov	r1, r4
 800e478:	4810      	ldr	r0, [pc, #64]	; (800e4bc <tcp_abandon+0xfc>)
 800e47a:	f7ff fdbb 	bl	800dff4 <tcp_pcb_remove>
 800e47e:	2201      	movs	r2, #1
 800e480:	4b0f      	ldr	r3, [pc, #60]	; (800e4c0 <tcp_abandon+0x100>)
 800e482:	701a      	strb	r2, [r3, #0]
 800e484:	e7e1      	b.n	800e44a <tcp_abandon+0x8a>
    int send_rst = 0;
 800e486:	2500      	movs	r5, #0
 800e488:	e7df      	b.n	800e44a <tcp_abandon+0x8a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e48a:	1d23      	adds	r3, r4, #4
 800e48c:	8b22      	ldrh	r2, [r4, #24]
 800e48e:	9202      	str	r2, [sp, #8]
 800e490:	f8cd a004 	str.w	sl, [sp, #4]
 800e494:	9300      	str	r3, [sp, #0]
 800e496:	4623      	mov	r3, r4
 800e498:	464a      	mov	r2, r9
 800e49a:	4641      	mov	r1, r8
 800e49c:	4620      	mov	r0, r4
 800e49e:	f002 fce1 	bl	8010e64 <tcp_rst>
 800e4a2:	e7db      	b.n	800e45c <tcp_abandon+0x9c>
 800e4a4:	2000d858 	.word	0x2000d858
 800e4a8:	080693a4 	.word	0x080693a4
 800e4ac:	08068f34 	.word	0x08068f34
 800e4b0:	0801335c 	.word	0x0801335c
 800e4b4:	08068f50 	.word	0x08068f50
 800e4b8:	2000d85c 	.word	0x2000d85c
 800e4bc:	2000d84c 	.word	0x2000d84c
 800e4c0:	2000d848 	.word	0x2000d848

0800e4c4 <tcp_abort>:
{
 800e4c4:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	f7ff ff7a 	bl	800e3c0 <tcp_abandon>
 800e4cc:	bd08      	pop	{r3, pc}
	...

0800e4d0 <tcp_accept_null>:
{
 800e4d0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e4d2:	460c      	mov	r4, r1
 800e4d4:	b129      	cbz	r1, 800e4e2 <tcp_accept_null+0x12>
  tcp_abort(pcb);
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f7ff fff4 	bl	800e4c4 <tcp_abort>
}
 800e4dc:	f06f 000c 	mvn.w	r0, #12
 800e4e0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e4e2:	4b04      	ldr	r3, [pc, #16]	; (800e4f4 <tcp_accept_null+0x24>)
 800e4e4:	f240 320f 	movw	r2, #783	; 0x30f
 800e4e8:	4903      	ldr	r1, [pc, #12]	; (800e4f8 <tcp_accept_null+0x28>)
 800e4ea:	4804      	ldr	r0, [pc, #16]	; (800e4fc <tcp_accept_null+0x2c>)
 800e4ec:	f003 fe3e 	bl	801216c <iprintf>
 800e4f0:	e7f1      	b.n	800e4d6 <tcp_accept_null+0x6>
 800e4f2:	bf00      	nop
 800e4f4:	080693a4 	.word	0x080693a4
 800e4f8:	08068f84 	.word	0x08068f84
 800e4fc:	0801335c 	.word	0x0801335c

0800e500 <tcp_kill_timewait>:
{
 800e500:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e502:	4b0a      	ldr	r3, [pc, #40]	; (800e52c <tcp_kill_timewait+0x2c>)
 800e504:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800e506:	2400      	movs	r4, #0
  inactive = NULL;
 800e508:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e50a:	e000      	b.n	800e50e <tcp_kill_timewait+0xe>
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	b143      	cbz	r3, 800e522 <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e510:	6a19      	ldr	r1, [r3, #32]
 800e512:	4a07      	ldr	r2, [pc, #28]	; (800e530 <tcp_kill_timewait+0x30>)
 800e514:	6812      	ldr	r2, [r2, #0]
 800e516:	1a52      	subs	r2, r2, r1
 800e518:	4294      	cmp	r4, r2
 800e51a:	d8f7      	bhi.n	800e50c <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 800e51c:	4614      	mov	r4, r2
      inactive = pcb;
 800e51e:	4618      	mov	r0, r3
 800e520:	e7f4      	b.n	800e50c <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 800e522:	b108      	cbz	r0, 800e528 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 800e524:	f7ff ffce 	bl	800e4c4 <tcp_abort>
 800e528:	bd10      	pop	{r4, pc}
 800e52a:	bf00      	nop
 800e52c:	2000d85c 	.word	0x2000d85c
 800e530:	2000d850 	.word	0x2000d850

0800e534 <tcp_kill_prio>:
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e534:	f010 0f80 	tst.w	r0, #128	; 0x80
 800e538:	d000      	beq.n	800e53c <tcp_kill_prio+0x8>
 800e53a:	207f      	movs	r0, #127	; 0x7f
  if (mprio == 0) {
 800e53c:	b1e8      	cbz	r0, 800e57a <tcp_kill_prio+0x46>
{
 800e53e:	b570      	push	{r4, r5, r6, lr}
  mprio--;
 800e540:	3801      	subs	r0, #1
 800e542:	b2c3      	uxtb	r3, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e544:	4a0d      	ldr	r2, [pc, #52]	; (800e57c <tcp_kill_prio+0x48>)
 800e546:	6812      	ldr	r2, [r2, #0]
  inactivity = 0;
 800e548:	2100      	movs	r1, #0
  inactive = NULL;
 800e54a:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e54c:	b91a      	cbnz	r2, 800e556 <tcp_kill_prio+0x22>
  if (inactive != NULL) {
 800e54e:	b108      	cbz	r0, 800e554 <tcp_kill_prio+0x20>
    tcp_abort(inactive);
 800e550:	f7ff ffb8 	bl	800e4c4 <tcp_abort>
 800e554:	bd70      	pop	{r4, r5, r6, pc}
    if ((pcb->prio < mprio) ||
 800e556:	7d54      	ldrb	r4, [r2, #21]
 800e558:	42a3      	cmp	r3, r4
 800e55a:	d806      	bhi.n	800e56a <tcp_kill_prio+0x36>
 800e55c:	d10b      	bne.n	800e576 <tcp_kill_prio+0x42>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e55e:	6a16      	ldr	r6, [r2, #32]
 800e560:	4d07      	ldr	r5, [pc, #28]	; (800e580 <tcp_kill_prio+0x4c>)
 800e562:	682d      	ldr	r5, [r5, #0]
 800e564:	1bad      	subs	r5, r5, r6
 800e566:	42a9      	cmp	r1, r5
 800e568:	d805      	bhi.n	800e576 <tcp_kill_prio+0x42>
      inactivity = tcp_ticks - pcb->tmr;
 800e56a:	4b05      	ldr	r3, [pc, #20]	; (800e580 <tcp_kill_prio+0x4c>)
 800e56c:	6819      	ldr	r1, [r3, #0]
 800e56e:	6a13      	ldr	r3, [r2, #32]
 800e570:	1ac9      	subs	r1, r1, r3
      mprio      = pcb->prio;
 800e572:	4623      	mov	r3, r4
      inactive   = pcb;
 800e574:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e576:	68d2      	ldr	r2, [r2, #12]
 800e578:	e7e8      	b.n	800e54c <tcp_kill_prio+0x18>
 800e57a:	4770      	bx	lr
 800e57c:	2000d84c 	.word	0x2000d84c
 800e580:	2000d850 	.word	0x2000d850

0800e584 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e584:	b570      	push	{r4, r5, r6, lr}
 800e586:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e588:	4605      	mov	r5, r0
 800e58a:	b960      	cbnz	r0, 800e5a6 <tcp_netif_ip_addr_changed_pcblist+0x22>
 800e58c:	4b0a      	ldr	r3, [pc, #40]	; (800e5b8 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800e58e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e592:	490a      	ldr	r1, [pc, #40]	; (800e5bc <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800e594:	480a      	ldr	r0, [pc, #40]	; (800e5c0 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800e596:	f003 fde9 	bl	801216c <iprintf>
 800e59a:	e004      	b.n	800e5a6 <tcp_netif_ip_addr_changed_pcblist+0x22>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e59c:	68e6      	ldr	r6, [r4, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f7ff ff90 	bl	800e4c4 <tcp_abort>
      pcb = next;
 800e5a4:	4634      	mov	r4, r6
  while (pcb != NULL) {
 800e5a6:	b12c      	cbz	r4, 800e5b4 <tcp_netif_ip_addr_changed_pcblist+0x30>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e5a8:	6822      	ldr	r2, [r4, #0]
 800e5aa:	682b      	ldr	r3, [r5, #0]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d0f5      	beq.n	800e59c <tcp_netif_ip_addr_changed_pcblist+0x18>
    } else {
      pcb = pcb->next;
 800e5b0:	68e4      	ldr	r4, [r4, #12]
 800e5b2:	e7f8      	b.n	800e5a6 <tcp_netif_ip_addr_changed_pcblist+0x22>
    }
  }
}
 800e5b4:	bd70      	pop	{r4, r5, r6, pc}
 800e5b6:	bf00      	nop
 800e5b8:	080693a4 	.word	0x080693a4
 800e5bc:	080691cc 	.word	0x080691cc
 800e5c0:	0801335c 	.word	0x0801335c

0800e5c4 <tcp_kill_state>:
{
 800e5c4:	b538      	push	{r3, r4, r5, lr}
 800e5c6:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e5c8:	f1a0 0308 	sub.w	r3, r0, #8
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d906      	bls.n	800e5e0 <tcp_kill_state+0x1c>
 800e5d2:	4b0f      	ldr	r3, [pc, #60]	; (800e610 <tcp_kill_state+0x4c>)
 800e5d4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e5d8:	490e      	ldr	r1, [pc, #56]	; (800e614 <tcp_kill_state+0x50>)
 800e5da:	480f      	ldr	r0, [pc, #60]	; (800e618 <tcp_kill_state+0x54>)
 800e5dc:	f003 fdc6 	bl	801216c <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5e0:	4b0e      	ldr	r3, [pc, #56]	; (800e61c <tcp_kill_state+0x58>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800e5e4:	2100      	movs	r1, #0
  inactive = NULL;
 800e5e6:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5e8:	e000      	b.n	800e5ec <tcp_kill_state+0x28>
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	b15b      	cbz	r3, 800e606 <tcp_kill_state+0x42>
    if (pcb->state == state) {
 800e5ee:	7d1a      	ldrb	r2, [r3, #20]
 800e5f0:	4294      	cmp	r4, r2
 800e5f2:	d1fa      	bne.n	800e5ea <tcp_kill_state+0x26>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e5f4:	6a1d      	ldr	r5, [r3, #32]
 800e5f6:	4a0a      	ldr	r2, [pc, #40]	; (800e620 <tcp_kill_state+0x5c>)
 800e5f8:	6812      	ldr	r2, [r2, #0]
 800e5fa:	1b52      	subs	r2, r2, r5
 800e5fc:	4291      	cmp	r1, r2
 800e5fe:	d8f4      	bhi.n	800e5ea <tcp_kill_state+0x26>
        inactivity = tcp_ticks - pcb->tmr;
 800e600:	4611      	mov	r1, r2
        inactive = pcb;
 800e602:	4618      	mov	r0, r3
 800e604:	e7f1      	b.n	800e5ea <tcp_kill_state+0x26>
  if (inactive != NULL) {
 800e606:	b110      	cbz	r0, 800e60e <tcp_kill_state+0x4a>
    tcp_abandon(inactive, 0);
 800e608:	2100      	movs	r1, #0
 800e60a:	f7ff fed9 	bl	800e3c0 <tcp_abandon>
 800e60e:	bd38      	pop	{r3, r4, r5, pc}
 800e610:	080693a4 	.word	0x080693a4
 800e614:	08069130 	.word	0x08069130
 800e618:	0801335c 	.word	0x0801335c
 800e61c:	2000d84c 	.word	0x2000d84c
 800e620:	2000d850 	.word	0x2000d850

0800e624 <tcp_alloc>:
{
 800e624:	b538      	push	{r3, r4, r5, lr}
 800e626:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e628:	2001      	movs	r0, #1
 800e62a:	f7fe f92d 	bl	800c888 <memp_malloc>
  if (pcb == NULL) {
 800e62e:	4604      	mov	r4, r0
 800e630:	b368      	cbz	r0, 800e68e <tcp_alloc+0x6a>
  if (pcb != NULL) {
 800e632:	b354      	cbz	r4, 800e68a <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e634:	2298      	movs	r2, #152	; 0x98
 800e636:	2100      	movs	r1, #0
 800e638:	4620      	mov	r0, r4
 800e63a:	f003 fd8e 	bl	801215a <memset>
    pcb->prio = prio;
 800e63e:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e640:	f241 63d0 	movw	r3, #5840	; 0x16d0
 800e644:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e648:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800e64c:	8562      	strh	r2, [r4, #42]	; 0x2a
 800e64e:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e650:	22ff      	movs	r2, #255	; 0xff
 800e652:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 800e654:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e658:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e65a:	2206      	movs	r2, #6
 800e65c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e660:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 800e662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e666:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 800e668:	2201      	movs	r2, #1
 800e66a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e66e:	4a1a      	ldr	r2, [pc, #104]	; (800e6d8 <tcp_alloc+0xb4>)
 800e670:	6812      	ldr	r2, [r2, #0]
 800e672:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e674:	4a19      	ldr	r2, [pc, #100]	; (800e6dc <tcp_alloc+0xb8>)
 800e676:	7812      	ldrb	r2, [r2, #0]
 800e678:	77a2      	strb	r2, [r4, #30]
    pcb->ssthresh = TCP_SND_BUF;
 800e67a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 800e67e:	4b18      	ldr	r3, [pc, #96]	; (800e6e0 <tcp_alloc+0xbc>)
 800e680:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e684:	4b17      	ldr	r3, [pc, #92]	; (800e6e4 <tcp_alloc+0xc0>)
 800e686:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 800e68a:	4620      	mov	r0, r4
 800e68c:	bd38      	pop	{r3, r4, r5, pc}
    tcp_handle_closepend();
 800e68e:	f7ff f80f 	bl	800d6b0 <tcp_handle_closepend>
    tcp_kill_timewait();
 800e692:	f7ff ff35 	bl	800e500 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e696:	2001      	movs	r0, #1
 800e698:	f7fe f8f6 	bl	800c888 <memp_malloc>
    if (pcb == NULL) {
 800e69c:	4604      	mov	r4, r0
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	d1c7      	bne.n	800e632 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 800e6a2:	2009      	movs	r0, #9
 800e6a4:	f7ff ff8e 	bl	800e5c4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e6a8:	2001      	movs	r0, #1
 800e6aa:	f7fe f8ed 	bl	800c888 <memp_malloc>
      if (pcb == NULL) {
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d1be      	bne.n	800e632 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 800e6b4:	2008      	movs	r0, #8
 800e6b6:	f7ff ff85 	bl	800e5c4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e6ba:	2001      	movs	r0, #1
 800e6bc:	f7fe f8e4 	bl	800c888 <memp_malloc>
        if (pcb == NULL) {
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	2800      	cmp	r0, #0
 800e6c4:	d1b5      	bne.n	800e632 <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	f7ff ff34 	bl	800e534 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e6cc:	2001      	movs	r0, #1
 800e6ce:	f7fe f8db 	bl	800c888 <memp_malloc>
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	e7ad      	b.n	800e632 <tcp_alloc+0xe>
 800e6d6:	bf00      	nop
 800e6d8:	2000d850 	.word	0x2000d850
 800e6dc:	20006e3e 	.word	0x20006e3e
 800e6e0:	0800e241 	.word	0x0800e241
 800e6e4:	006ddd00 	.word	0x006ddd00

0800e6e8 <tcp_new_ip_type>:
{
 800e6e8:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e6ea:	2040      	movs	r0, #64	; 0x40
 800e6ec:	f7ff ff9a 	bl	800e624 <tcp_alloc>
}
 800e6f0:	bd08      	pop	{r3, pc}
	...

0800e6f4 <tcp_next_iss>:
{
 800e6f4:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e6f6:	b130      	cbz	r0, 800e706 <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800e6f8:	4b07      	ldr	r3, [pc, #28]	; (800e718 <tcp_next_iss+0x24>)
 800e6fa:	6818      	ldr	r0, [r3, #0]
 800e6fc:	4a07      	ldr	r2, [pc, #28]	; (800e71c <tcp_next_iss+0x28>)
 800e6fe:	6812      	ldr	r2, [r2, #0]
 800e700:	4410      	add	r0, r2
 800e702:	6018      	str	r0, [r3, #0]
}
 800e704:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e706:	4b06      	ldr	r3, [pc, #24]	; (800e720 <tcp_next_iss+0x2c>)
 800e708:	f640 02af 	movw	r2, #2223	; 0x8af
 800e70c:	4905      	ldr	r1, [pc, #20]	; (800e724 <tcp_next_iss+0x30>)
 800e70e:	4806      	ldr	r0, [pc, #24]	; (800e728 <tcp_next_iss+0x34>)
 800e710:	f003 fd2c 	bl	801216c <iprintf>
 800e714:	e7f0      	b.n	800e6f8 <tcp_next_iss+0x4>
 800e716:	bf00      	nop
 800e718:	200000e4 	.word	0x200000e4
 800e71c:	2000d850 	.word	0x2000d850
 800e720:	080693a4 	.word	0x080693a4
 800e724:	08069200 	.word	0x08069200
 800e728:	0801335c 	.word	0x0801335c

0800e72c <tcp_eff_send_mss_netif>:
{
 800e72c:	b538      	push	{r3, r4, r5, lr}
 800e72e:	4605      	mov	r5, r0
 800e730:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e732:	b152      	cbz	r2, 800e74a <tcp_eff_send_mss_netif+0x1e>
    if (outif == NULL) {
 800e734:	b19c      	cbz	r4, 800e75e <tcp_eff_send_mss_netif+0x32>
    mtu = outif->mtu;
 800e736:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  if (mtu != 0) {
 800e738:	b198      	cbz	r0, 800e762 <tcp_eff_send_mss_netif+0x36>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e73a:	2828      	cmp	r0, #40	; 0x28
 800e73c:	d90d      	bls.n	800e75a <tcp_eff_send_mss_netif+0x2e>
 800e73e:	3828      	subs	r0, #40	; 0x28
 800e740:	b280      	uxth	r0, r0
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e742:	42a8      	cmp	r0, r5
 800e744:	bf28      	it	cs
 800e746:	4628      	movcs	r0, r5
 800e748:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e74a:	4b07      	ldr	r3, [pc, #28]	; (800e768 <tcp_eff_send_mss_netif+0x3c>)
 800e74c:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e750:	4906      	ldr	r1, [pc, #24]	; (800e76c <tcp_eff_send_mss_netif+0x40>)
 800e752:	4807      	ldr	r0, [pc, #28]	; (800e770 <tcp_eff_send_mss_netif+0x44>)
 800e754:	f003 fd0a 	bl	801216c <iprintf>
 800e758:	e7ec      	b.n	800e734 <tcp_eff_send_mss_netif+0x8>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e75a:	2000      	movs	r0, #0
 800e75c:	e7f1      	b.n	800e742 <tcp_eff_send_mss_netif+0x16>
      return sendmss;
 800e75e:	4628      	mov	r0, r5
 800e760:	bd38      	pop	{r3, r4, r5, pc}
 800e762:	4628      	mov	r0, r5
}
 800e764:	bd38      	pop	{r3, r4, r5, pc}
 800e766:	bf00      	nop
 800e768:	080693a4 	.word	0x080693a4
 800e76c:	080690b0 	.word	0x080690b0
 800e770:	0801335c 	.word	0x0801335c

0800e774 <tcp_connect>:
{
 800e774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e776:	2800      	cmp	r0, #0
 800e778:	d053      	beq.n	800e822 <tcp_connect+0xae>
 800e77a:	461e      	mov	r6, r3
 800e77c:	4604      	mov	r4, r0
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e77e:	2900      	cmp	r1, #0
 800e780:	d059      	beq.n	800e836 <tcp_connect+0xc2>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e782:	7d03      	ldrb	r3, [r0, #20]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d160      	bne.n	800e84a <tcp_connect+0xd6>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e788:	680b      	ldr	r3, [r1, #0]
 800e78a:	6043      	str	r3, [r0, #4]
  pcb->remote_port = port;
 800e78c:	8302      	strh	r2, [r0, #24]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e78e:	7a00      	ldrb	r0, [r0, #8]
 800e790:	2800      	cmp	r0, #0
 800e792:	d064      	beq.n	800e85e <tcp_connect+0xea>
    netif = netif_get_by_index(pcb->netif_idx);
 800e794:	f7fe fa84 	bl	800cca0 <netif_get_by_index>
 800e798:	4605      	mov	r5, r0
  if (netif == NULL) {
 800e79a:	2d00      	cmp	r5, #0
 800e79c:	d078      	beq.n	800e890 <tcp_connect+0x11c>
  if (ip_addr_isany(&pcb->local_ip)) {
 800e79e:	b10c      	cbz	r4, 800e7a4 <tcp_connect+0x30>
 800e7a0:	6823      	ldr	r3, [r4, #0]
 800e7a2:	b923      	cbnz	r3, 800e7ae <tcp_connect+0x3a>
    if (local_ip == NULL) {
 800e7a4:	f115 0f04 	cmn.w	r5, #4
 800e7a8:	d075      	beq.n	800e896 <tcp_connect+0x122>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e7aa:	686b      	ldr	r3, [r5, #4]
 800e7ac:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 800e7ae:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 800e7b0:	b927      	cbnz	r7, 800e7bc <tcp_connect+0x48>
    pcb->local_port = tcp_new_port();
 800e7b2:	f7fe fea7 	bl	800d504 <tcp_new_port>
 800e7b6:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d06f      	beq.n	800e89c <tcp_connect+0x128>
  iss = tcp_next_iss(pcb);
 800e7bc:	4620      	mov	r0, r4
 800e7be:	f7ff ff99 	bl	800e6f4 <tcp_next_iss>
  pcb->rcv_nxt = 0;
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e7c6:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e7c8:	3801      	subs	r0, #1
 800e7ca:	6460      	str	r0, [r4, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e7cc:	65a0      	str	r0, [r4, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e7ce:	65e0      	str	r0, [r4, #92]	; 0x5c
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e7d0:	f642 53a0 	movw	r3, #11680	; 0x2da0
 800e7d4:	8563      	strh	r3, [r4, #42]	; 0x2a
 800e7d6:	8523      	strh	r3, [r4, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e7d8:	62e2      	str	r2, [r4, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e7da:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  pcb->mss = INITIAL_MSS;
 800e7de:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e7e2:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e7e4:	1d22      	adds	r2, r4, #4
 800e7e6:	4629      	mov	r1, r5
 800e7e8:	f7ff ffa0 	bl	800e72c <tcp_eff_send_mss_netif>
 800e7ec:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->cwnd = 1;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  pcb->connected = connected;
 800e7f4:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e7f8:	2102      	movs	r1, #2
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f002 f97e 	bl	8010afc <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 800e800:	4605      	mov	r5, r0
 800e802:	2800      	cmp	r0, #0
 800e804:	d142      	bne.n	800e88c <tcp_connect+0x118>
    pcb->state = SYN_SENT;
 800e806:	2302      	movs	r3, #2
 800e808:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 800e80a:	2f00      	cmp	r7, #0
 800e80c:	d032      	beq.n	800e874 <tcp_connect+0x100>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e80e:	4b25      	ldr	r3, [pc, #148]	; (800e8a4 <tcp_connect+0x130>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	429c      	cmp	r4, r3
 800e814:	d028      	beq.n	800e868 <tcp_connect+0xf4>
 800e816:	b36b      	cbz	r3, 800e874 <tcp_connect+0x100>
 800e818:	68da      	ldr	r2, [r3, #12]
 800e81a:	4294      	cmp	r4, r2
 800e81c:	d028      	beq.n	800e870 <tcp_connect+0xfc>
 800e81e:	4613      	mov	r3, r2
 800e820:	e7f9      	b.n	800e816 <tcp_connect+0xa2>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e822:	4b21      	ldr	r3, [pc, #132]	; (800e8a8 <tcp_connect+0x134>)
 800e824:	f240 4235 	movw	r2, #1077	; 0x435
 800e828:	4920      	ldr	r1, [pc, #128]	; (800e8ac <tcp_connect+0x138>)
 800e82a:	4821      	ldr	r0, [pc, #132]	; (800e8b0 <tcp_connect+0x13c>)
 800e82c:	f003 fc9e 	bl	801216c <iprintf>
 800e830:	f06f 050f 	mvn.w	r5, #15
 800e834:	e02a      	b.n	800e88c <tcp_connect+0x118>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e836:	4b1c      	ldr	r3, [pc, #112]	; (800e8a8 <tcp_connect+0x134>)
 800e838:	f240 4236 	movw	r2, #1078	; 0x436
 800e83c:	491d      	ldr	r1, [pc, #116]	; (800e8b4 <tcp_connect+0x140>)
 800e83e:	481c      	ldr	r0, [pc, #112]	; (800e8b0 <tcp_connect+0x13c>)
 800e840:	f003 fc94 	bl	801216c <iprintf>
 800e844:	f06f 050f 	mvn.w	r5, #15
 800e848:	e020      	b.n	800e88c <tcp_connect+0x118>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e84a:	4b17      	ldr	r3, [pc, #92]	; (800e8a8 <tcp_connect+0x134>)
 800e84c:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e850:	4919      	ldr	r1, [pc, #100]	; (800e8b8 <tcp_connect+0x144>)
 800e852:	4817      	ldr	r0, [pc, #92]	; (800e8b0 <tcp_connect+0x13c>)
 800e854:	f003 fc8a 	bl	801216c <iprintf>
 800e858:	f06f 0509 	mvn.w	r5, #9
 800e85c:	e016      	b.n	800e88c <tcp_connect+0x118>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e85e:	1d20      	adds	r0, r4, #4
 800e860:	f7fc fe36 	bl	800b4d0 <ip4_route>
 800e864:	4605      	mov	r5, r0
 800e866:	e798      	b.n	800e79a <tcp_connect+0x26>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e868:	68da      	ldr	r2, [r3, #12]
 800e86a:	4b0e      	ldr	r3, [pc, #56]	; (800e8a4 <tcp_connect+0x130>)
 800e86c:	601a      	str	r2, [r3, #0]
 800e86e:	e001      	b.n	800e874 <tcp_connect+0x100>
 800e870:	68e2      	ldr	r2, [r4, #12]
 800e872:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 800e874:	4b11      	ldr	r3, [pc, #68]	; (800e8bc <tcp_connect+0x148>)
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	60e2      	str	r2, [r4, #12]
 800e87a:	601c      	str	r4, [r3, #0]
 800e87c:	f002 fe26 	bl	80114cc <tcp_timer_needed>
 800e880:	2201      	movs	r2, #1
 800e882:	4b0f      	ldr	r3, [pc, #60]	; (800e8c0 <tcp_connect+0x14c>)
 800e884:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 800e886:	4620      	mov	r0, r4
 800e888:	f002 fb70 	bl	8010f6c <tcp_output>
}
 800e88c:	4628      	mov	r0, r5
 800e88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_RTE;
 800e890:	f06f 0503 	mvn.w	r5, #3
 800e894:	e7fa      	b.n	800e88c <tcp_connect+0x118>
      return ERR_RTE;
 800e896:	f06f 0503 	mvn.w	r5, #3
 800e89a:	e7f7      	b.n	800e88c <tcp_connect+0x118>
      return ERR_BUF;
 800e89c:	f06f 0501 	mvn.w	r5, #1
 800e8a0:	e7f4      	b.n	800e88c <tcp_connect+0x118>
 800e8a2:	bf00      	nop
 800e8a4:	2000d858 	.word	0x2000d858
 800e8a8:	080693a4 	.word	0x080693a4
 800e8ac:	08069048 	.word	0x08069048
 800e8b0:	0801335c 	.word	0x0801335c
 800e8b4:	08069064 	.word	0x08069064
 800e8b8:	08069080 	.word	0x08069080
 800e8bc:	2000d84c 	.word	0x2000d84c
 800e8c0:	2000d848 	.word	0x2000d848

0800e8c4 <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e8c4:	b300      	cbz	r0, 800e908 <tcp_netif_ip_addr_changed+0x44>
{
 800e8c6:	b538      	push	{r3, r4, r5, lr}
 800e8c8:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 800e8ca:	6803      	ldr	r3, [r0, #0]
 800e8cc:	b903      	cbnz	r3, 800e8d0 <tcp_netif_ip_addr_changed+0xc>
 800e8ce:	bd38      	pop	{r3, r4, r5, pc}
 800e8d0:	460d      	mov	r5, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e8d2:	4b0e      	ldr	r3, [pc, #56]	; (800e90c <tcp_netif_ip_addr_changed+0x48>)
 800e8d4:	6819      	ldr	r1, [r3, #0]
 800e8d6:	f7ff fe55 	bl	800e584 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e8da:	4b0d      	ldr	r3, [pc, #52]	; (800e910 <tcp_netif_ip_addr_changed+0x4c>)
 800e8dc:	6819      	ldr	r1, [r3, #0]
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f7ff fe50 	bl	800e584 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e8e4:	2d00      	cmp	r5, #0
 800e8e6:	d0f2      	beq.n	800e8ce <tcp_netif_ip_addr_changed+0xa>
 800e8e8:	682b      	ldr	r3, [r5, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d0ef      	beq.n	800e8ce <tcp_netif_ip_addr_changed+0xa>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e8ee:	4b09      	ldr	r3, [pc, #36]	; (800e914 <tcp_netif_ip_addr_changed+0x50>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	e000      	b.n	800e8f6 <tcp_netif_ip_addr_changed+0x32>
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d0e9      	beq.n	800e8ce <tcp_netif_ip_addr_changed+0xa>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e8fa:	6818      	ldr	r0, [r3, #0]
 800e8fc:	6822      	ldr	r2, [r4, #0]
 800e8fe:	4290      	cmp	r0, r2
 800e900:	d1f8      	bne.n	800e8f4 <tcp_netif_ip_addr_changed+0x30>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e902:	682a      	ldr	r2, [r5, #0]
 800e904:	601a      	str	r2, [r3, #0]
 800e906:	e7f5      	b.n	800e8f4 <tcp_netif_ip_addr_changed+0x30>
 800e908:	4770      	bx	lr
 800e90a:	bf00      	nop
 800e90c:	2000d84c 	.word	0x2000d84c
 800e910:	2000d858 	.word	0x2000d858
 800e914:	2000d854 	.word	0x2000d854

0800e918 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800e918:	4a0a      	ldr	r2, [pc, #40]	; (800e944 <tcp_get_next_optbyte+0x2c>)
 800e91a:	8813      	ldrh	r3, [r2, #0]
 800e91c:	1c59      	adds	r1, r3, #1
 800e91e:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e920:	4a09      	ldr	r2, [pc, #36]	; (800e948 <tcp_get_next_optbyte+0x30>)
 800e922:	6811      	ldr	r1, [r2, #0]
 800e924:	b149      	cbz	r1, 800e93a <tcp_get_next_optbyte+0x22>
 800e926:	4a09      	ldr	r2, [pc, #36]	; (800e94c <tcp_get_next_optbyte+0x34>)
 800e928:	8812      	ldrh	r2, [r2, #0]
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d305      	bcc.n	800e93a <tcp_get_next_optbyte+0x22>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	b2d2      	uxtb	r2, r2
 800e932:	1a9b      	subs	r3, r3, r2
 800e934:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 800e936:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800e938:	4770      	bx	lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e93a:	4a05      	ldr	r2, [pc, #20]	; (800e950 <tcp_get_next_optbyte+0x38>)
 800e93c:	6812      	ldr	r2, [r2, #0]
    return opts[optidx];
 800e93e:	4413      	add	r3, r2
 800e940:	7d18      	ldrb	r0, [r3, #20]
 800e942:	4770      	bx	lr
 800e944:	20006e68 	.word	0x20006e68
 800e948:	20006e74 	.word	0x20006e74
 800e94c:	20006e70 	.word	0x20006e70
 800e950:	20006e6c 	.word	0x20006e6c

0800e954 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e954:	b538      	push	{r3, r4, r5, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e956:	4605      	mov	r5, r0
 800e958:	2800      	cmp	r0, #0
 800e95a:	d032      	beq.n	800e9c2 <tcp_parseopt+0x6e>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e95c:	4b22      	ldr	r3, [pc, #136]	; (800e9e8 <tcp_parseopt+0x94>)
 800e95e:	881b      	ldrh	r3, [r3, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d040      	beq.n	800e9e6 <tcp_parseopt+0x92>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e964:	2200      	movs	r2, #0
 800e966:	4b21      	ldr	r3, [pc, #132]	; (800e9ec <tcp_parseopt+0x98>)
 800e968:	801a      	strh	r2, [r3, #0]
 800e96a:	4b20      	ldr	r3, [pc, #128]	; (800e9ec <tcp_parseopt+0x98>)
 800e96c:	881a      	ldrh	r2, [r3, #0]
 800e96e:	4b1e      	ldr	r3, [pc, #120]	; (800e9e8 <tcp_parseopt+0x94>)
 800e970:	881b      	ldrh	r3, [r3, #0]
 800e972:	429a      	cmp	r2, r3
 800e974:	d237      	bcs.n	800e9e6 <tcp_parseopt+0x92>
      u8_t opt = tcp_get_next_optbyte();
 800e976:	f7ff ffcf 	bl	800e918 <tcp_get_next_optbyte>
      switch (opt) {
 800e97a:	2801      	cmp	r0, #1
 800e97c:	d0f5      	beq.n	800e96a <tcp_parseopt+0x16>
 800e97e:	2800      	cmp	r0, #0
 800e980:	d031      	beq.n	800e9e6 <tcp_parseopt+0x92>
 800e982:	2802      	cmp	r0, #2
 800e984:	d125      	bne.n	800e9d2 <tcp_parseopt+0x7e>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e986:	f7ff ffc7 	bl	800e918 <tcp_get_next_optbyte>
 800e98a:	2804      	cmp	r0, #4
 800e98c:	d12b      	bne.n	800e9e6 <tcp_parseopt+0x92>
 800e98e:	4b17      	ldr	r3, [pc, #92]	; (800e9ec <tcp_parseopt+0x98>)
 800e990:	881b      	ldrh	r3, [r3, #0]
 800e992:	3302      	adds	r3, #2
 800e994:	4a14      	ldr	r2, [pc, #80]	; (800e9e8 <tcp_parseopt+0x94>)
 800e996:	8812      	ldrh	r2, [r2, #0]
 800e998:	4293      	cmp	r3, r2
 800e99a:	dc24      	bgt.n	800e9e6 <tcp_parseopt+0x92>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e99c:	f7ff ffbc 	bl	800e918 <tcp_get_next_optbyte>
 800e9a0:	b280      	uxth	r0, r0
 800e9a2:	0200      	lsls	r0, r0, #8
 800e9a4:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 800e9a6:	f7ff ffb7 	bl	800e918 <tcp_get_next_optbyte>
 800e9aa:	b280      	uxth	r0, r0
 800e9ac:	4320      	orrs	r0, r4
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e9ae:	1e43      	subs	r3, r0, #1
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d901      	bls.n	800e9be <tcp_parseopt+0x6a>
 800e9ba:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800e9be:	8668      	strh	r0, [r5, #50]	; 0x32
          break;
 800e9c0:	e7d3      	b.n	800e96a <tcp_parseopt+0x16>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e9c2:	4b0b      	ldr	r3, [pc, #44]	; (800e9f0 <tcp_parseopt+0x9c>)
 800e9c4:	f240 727d 	movw	r2, #1917	; 0x77d
 800e9c8:	490a      	ldr	r1, [pc, #40]	; (800e9f4 <tcp_parseopt+0xa0>)
 800e9ca:	480b      	ldr	r0, [pc, #44]	; (800e9f8 <tcp_parseopt+0xa4>)
 800e9cc:	f003 fbce 	bl	801216c <iprintf>
 800e9d0:	e7c4      	b.n	800e95c <tcp_parseopt+0x8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e9d2:	f7ff ffa1 	bl	800e918 <tcp_get_next_optbyte>
          if (data < 2) {
 800e9d6:	2801      	cmp	r0, #1
 800e9d8:	d905      	bls.n	800e9e6 <tcp_parseopt+0x92>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e9da:	4b04      	ldr	r3, [pc, #16]	; (800e9ec <tcp_parseopt+0x98>)
 800e9dc:	881a      	ldrh	r2, [r3, #0]
 800e9de:	4410      	add	r0, r2
 800e9e0:	3802      	subs	r0, #2
 800e9e2:	8018      	strh	r0, [r3, #0]
 800e9e4:	e7c1      	b.n	800e96a <tcp_parseopt+0x16>
 800e9e6:	bd38      	pop	{r3, r4, r5, pc}
 800e9e8:	20006e78 	.word	0x20006e78
 800e9ec:	20006e68 	.word	0x20006e68
 800e9f0:	08069858 	.word	0x08069858
 800e9f4:	08069894 	.word	0x08069894
 800e9f8:	0801335c 	.word	0x0801335c

0800e9fc <tcp_input_delayed_close>:
{
 800e9fc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e9fe:	4604      	mov	r4, r0
 800ea00:	b930      	cbnz	r0, 800ea10 <tcp_input_delayed_close+0x14>
 800ea02:	4b11      	ldr	r3, [pc, #68]	; (800ea48 <tcp_input_delayed_close+0x4c>)
 800ea04:	f240 225a 	movw	r2, #602	; 0x25a
 800ea08:	4910      	ldr	r1, [pc, #64]	; (800ea4c <tcp_input_delayed_close+0x50>)
 800ea0a:	4811      	ldr	r0, [pc, #68]	; (800ea50 <tcp_input_delayed_close+0x54>)
 800ea0c:	f003 fbae 	bl	801216c <iprintf>
  if (recv_flags & TF_CLOSED) {
 800ea10:	4b10      	ldr	r3, [pc, #64]	; (800ea54 <tcp_input_delayed_close+0x58>)
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	f013 0f10 	tst.w	r3, #16
 800ea18:	d013      	beq.n	800ea42 <tcp_input_delayed_close+0x46>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ea1a:	8b63      	ldrh	r3, [r4, #26]
 800ea1c:	f013 0f10 	tst.w	r3, #16
 800ea20:	d106      	bne.n	800ea30 <tcp_input_delayed_close+0x34>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ea22:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ea26:	b11b      	cbz	r3, 800ea30 <tcp_input_delayed_close+0x34>
 800ea28:	f06f 010e 	mvn.w	r1, #14
 800ea2c:	6920      	ldr	r0, [r4, #16]
 800ea2e:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ea30:	4621      	mov	r1, r4
 800ea32:	4809      	ldr	r0, [pc, #36]	; (800ea58 <tcp_input_delayed_close+0x5c>)
 800ea34:	f7ff fade 	bl	800dff4 <tcp_pcb_remove>
    tcp_free(pcb);
 800ea38:	4620      	mov	r0, r4
 800ea3a:	f7fe fe5b 	bl	800d6f4 <tcp_free>
    return 1;
 800ea3e:	2001      	movs	r0, #1
 800ea40:	bd10      	pop	{r4, pc}
  return 0;
 800ea42:	2000      	movs	r0, #0
}
 800ea44:	bd10      	pop	{r4, pc}
 800ea46:	bf00      	nop
 800ea48:	08069858 	.word	0x08069858
 800ea4c:	08069810 	.word	0x08069810
 800ea50:	0801335c 	.word	0x0801335c
 800ea54:	20006e60 	.word	0x20006e60
 800ea58:	2000d84c 	.word	0x2000d84c

0800ea5c <tcp_timewait_input>:
  if (flags & TCP_RST) {
 800ea5c:	4b22      	ldr	r3, [pc, #136]	; (800eae8 <tcp_timewait_input+0x8c>)
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	f013 0f04 	tst.w	r3, #4
 800ea64:	d13f      	bne.n	800eae6 <tcp_timewait_input+0x8a>
{
 800ea66:	b530      	push	{r4, r5, lr}
 800ea68:	b085      	sub	sp, #20
 800ea6a:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ea6c:	b930      	cbnz	r0, 800ea7c <tcp_timewait_input+0x20>
 800ea6e:	4b1f      	ldr	r3, [pc, #124]	; (800eaec <tcp_timewait_input+0x90>)
 800ea70:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ea74:	491e      	ldr	r1, [pc, #120]	; (800eaf0 <tcp_timewait_input+0x94>)
 800ea76:	481f      	ldr	r0, [pc, #124]	; (800eaf4 <tcp_timewait_input+0x98>)
 800ea78:	f003 fb78 	bl	801216c <iprintf>
  if (flags & TCP_SYN) {
 800ea7c:	4b1a      	ldr	r3, [pc, #104]	; (800eae8 <tcp_timewait_input+0x8c>)
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	f013 0f02 	tst.w	r3, #2
 800ea84:	d01d      	beq.n	800eac2 <tcp_timewait_input+0x66>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ea86:	4b1c      	ldr	r3, [pc, #112]	; (800eaf8 <tcp_timewait_input+0x9c>)
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea8c:	1ad1      	subs	r1, r2, r3
 800ea8e:	2900      	cmp	r1, #0
 800ea90:	db1d      	blt.n	800eace <tcp_timewait_input+0x72>
 800ea92:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800ea94:	440b      	add	r3, r1
 800ea96:	1ad3      	subs	r3, r2, r3
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	dc18      	bgt.n	800eace <tcp_timewait_input+0x72>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea9c:	4b17      	ldr	r3, [pc, #92]	; (800eafc <tcp_timewait_input+0xa0>)
 800ea9e:	6819      	ldr	r1, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eaa0:	4b17      	ldr	r3, [pc, #92]	; (800eb00 <tcp_timewait_input+0xa4>)
 800eaa2:	4818      	ldr	r0, [pc, #96]	; (800eb04 <tcp_timewait_input+0xa8>)
 800eaa4:	8800      	ldrh	r0, [r0, #0]
 800eaa6:	880d      	ldrh	r5, [r1, #0]
 800eaa8:	9502      	str	r5, [sp, #8]
 800eaaa:	8849      	ldrh	r1, [r1, #2]
 800eaac:	9101      	str	r1, [sp, #4]
 800eaae:	1f19      	subs	r1, r3, #4
 800eab0:	9100      	str	r1, [sp, #0]
 800eab2:	4402      	add	r2, r0
 800eab4:	4914      	ldr	r1, [pc, #80]	; (800eb08 <tcp_timewait_input+0xac>)
 800eab6:	6809      	ldr	r1, [r1, #0]
 800eab8:	4620      	mov	r0, r4
 800eaba:	f002 f9d3 	bl	8010e64 <tcp_rst>
}
 800eabe:	b005      	add	sp, #20
 800eac0:	bd30      	pop	{r4, r5, pc}
  } else if (flags & TCP_FIN) {
 800eac2:	f013 0f01 	tst.w	r3, #1
 800eac6:	d002      	beq.n	800eace <tcp_timewait_input+0x72>
    pcb->tmr = tcp_ticks;
 800eac8:	4b10      	ldr	r3, [pc, #64]	; (800eb0c <tcp_timewait_input+0xb0>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	6223      	str	r3, [r4, #32]
  if ((tcplen > 0)) {
 800eace:	4b0d      	ldr	r3, [pc, #52]	; (800eb04 <tcp_timewait_input+0xa8>)
 800ead0:	881b      	ldrh	r3, [r3, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d0f3      	beq.n	800eabe <tcp_timewait_input+0x62>
    tcp_ack_now(pcb);
 800ead6:	8b63      	ldrh	r3, [r4, #26]
 800ead8:	f043 0302 	orr.w	r3, r3, #2
 800eadc:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800eade:	4620      	mov	r0, r4
 800eae0:	f002 fa44 	bl	8010f6c <tcp_output>
 800eae4:	e7eb      	b.n	800eabe <tcp_timewait_input+0x62>
 800eae6:	4770      	bx	lr
 800eae8:	20006e44 	.word	0x20006e44
 800eaec:	08069858 	.word	0x08069858
 800eaf0:	08069a08 	.word	0x08069a08
 800eaf4:	0801335c 	.word	0x0801335c
 800eaf8:	20006e64 	.word	0x20006e64
 800eafc:	20006e6c 	.word	0x20006e6c
 800eb00:	200072f8 	.word	0x200072f8
 800eb04:	20006e7a 	.word	0x20006e7a
 800eb08:	20006e40 	.word	0x20006e40
 800eb0c:	2000d850 	.word	0x2000d850

0800eb10 <tcp_listen_input>:
  if (flags & TCP_RST) {
 800eb10:	4b45      	ldr	r3, [pc, #276]	; (800ec28 <tcp_listen_input+0x118>)
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	f013 0f04 	tst.w	r3, #4
 800eb18:	f040 8085 	bne.w	800ec26 <tcp_listen_input+0x116>
{
 800eb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb1e:	b085      	sub	sp, #20
 800eb20:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800eb22:	b930      	cbnz	r0, 800eb32 <tcp_listen_input+0x22>
 800eb24:	4b41      	ldr	r3, [pc, #260]	; (800ec2c <tcp_listen_input+0x11c>)
 800eb26:	f240 2281 	movw	r2, #641	; 0x281
 800eb2a:	4941      	ldr	r1, [pc, #260]	; (800ec30 <tcp_listen_input+0x120>)
 800eb2c:	4841      	ldr	r0, [pc, #260]	; (800ec34 <tcp_listen_input+0x124>)
 800eb2e:	f003 fb1d 	bl	801216c <iprintf>
  if (flags & TCP_ACK) {
 800eb32:	4b3d      	ldr	r3, [pc, #244]	; (800ec28 <tcp_listen_input+0x118>)
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	f013 0f10 	tst.w	r3, #16
 800eb3a:	d014      	beq.n	800eb66 <tcp_listen_input+0x56>
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb3c:	4b3e      	ldr	r3, [pc, #248]	; (800ec38 <tcp_listen_input+0x128>)
 800eb3e:	6819      	ldr	r1, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb40:	4b3e      	ldr	r3, [pc, #248]	; (800ec3c <tcp_listen_input+0x12c>)
 800eb42:	4a3f      	ldr	r2, [pc, #252]	; (800ec40 <tcp_listen_input+0x130>)
 800eb44:	8810      	ldrh	r0, [r2, #0]
 800eb46:	4a3f      	ldr	r2, [pc, #252]	; (800ec44 <tcp_listen_input+0x134>)
 800eb48:	6812      	ldr	r2, [r2, #0]
 800eb4a:	880c      	ldrh	r4, [r1, #0]
 800eb4c:	9402      	str	r4, [sp, #8]
 800eb4e:	8849      	ldrh	r1, [r1, #2]
 800eb50:	9101      	str	r1, [sp, #4]
 800eb52:	1f19      	subs	r1, r3, #4
 800eb54:	9100      	str	r1, [sp, #0]
 800eb56:	4402      	add	r2, r0
 800eb58:	493b      	ldr	r1, [pc, #236]	; (800ec48 <tcp_listen_input+0x138>)
 800eb5a:	6809      	ldr	r1, [r1, #0]
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	f002 f981 	bl	8010e64 <tcp_rst>
}
 800eb62:	b005      	add	sp, #20
 800eb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (flags & TCP_SYN) {
 800eb66:	f013 0f02 	tst.w	r3, #2
 800eb6a:	d0fa      	beq.n	800eb62 <tcp_listen_input+0x52>
    npcb = tcp_alloc(pcb->prio);
 800eb6c:	7d68      	ldrb	r0, [r5, #21]
 800eb6e:	f7ff fd59 	bl	800e624 <tcp_alloc>
    if (npcb == NULL) {
 800eb72:	4604      	mov	r4, r0
 800eb74:	b940      	cbnz	r0, 800eb88 <tcp_listen_input+0x78>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eb76:	69ab      	ldr	r3, [r5, #24]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d0f2      	beq.n	800eb62 <tcp_listen_input+0x52>
 800eb7c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb80:	2100      	movs	r1, #0
 800eb82:	6928      	ldr	r0, [r5, #16]
 800eb84:	4798      	blx	r3
 800eb86:	e7ec      	b.n	800eb62 <tcp_listen_input+0x52>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800eb88:	4b30      	ldr	r3, [pc, #192]	; (800ec4c <tcp_listen_input+0x13c>)
 800eb8a:	695a      	ldr	r2, [r3, #20]
 800eb8c:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800eb8e:	691b      	ldr	r3, [r3, #16]
 800eb90:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800eb92:	8aeb      	ldrh	r3, [r5, #22]
 800eb94:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800eb96:	4e28      	ldr	r6, [pc, #160]	; (800ec38 <tcp_listen_input+0x128>)
 800eb98:	6833      	ldr	r3, [r6, #0]
 800eb9a:	881b      	ldrh	r3, [r3, #0]
 800eb9c:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800eb9e:	2303      	movs	r3, #3
 800eba0:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800eba2:	4f28      	ldr	r7, [pc, #160]	; (800ec44 <tcp_listen_input+0x134>)
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	3301      	adds	r3, #1
 800eba8:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ebaa:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ebac:	f7ff fda2 	bl	800e6f4 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800ebb0:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ebb2:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800ebb4:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ebb6:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	3b01      	subs	r3, #1
 800ebbc:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ebbe:	692b      	ldr	r3, [r5, #16]
 800ebc0:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800ebc2:	67a5      	str	r5, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ebc4:	7a6b      	ldrb	r3, [r5, #9]
 800ebc6:	f003 030c 	and.w	r3, r3, #12
 800ebca:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ebcc:	7a2b      	ldrb	r3, [r5, #8]
 800ebce:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800ebd0:	4b1f      	ldr	r3, [pc, #124]	; (800ec50 <tcp_listen_input+0x140>)
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	60e2      	str	r2, [r4, #12]
 800ebd6:	601c      	str	r4, [r3, #0]
 800ebd8:	f002 fc78 	bl	80114cc <tcp_timer_needed>
 800ebdc:	2201      	movs	r2, #1
 800ebde:	4b1d      	ldr	r3, [pc, #116]	; (800ec54 <tcp_listen_input+0x144>)
 800ebe0:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f7ff feb6 	bl	800e954 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ebe8:	6833      	ldr	r3, [r6, #0]
 800ebea:	89db      	ldrh	r3, [r3, #14]
 800ebec:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ebf0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ebf4:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 800ebf6:	1d25      	adds	r5, r4, #4
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	f7fc fc69 	bl	800b4d0 <ip4_route>
 800ebfe:	462a      	mov	r2, r5
 800ec00:	4601      	mov	r1, r0
 800ec02:	4630      	mov	r0, r6
 800ec04:	f7ff fd92 	bl	800e72c <tcp_eff_send_mss_netif>
 800ec08:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ec0a:	2112      	movs	r1, #18
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	f001 ff75 	bl	8010afc <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800ec12:	b120      	cbz	r0, 800ec1e <tcp_listen_input+0x10e>
      tcp_abandon(npcb, 0);
 800ec14:	2100      	movs	r1, #0
 800ec16:	4620      	mov	r0, r4
 800ec18:	f7ff fbd2 	bl	800e3c0 <tcp_abandon>
      return;
 800ec1c:	e7a1      	b.n	800eb62 <tcp_listen_input+0x52>
    tcp_output(npcb);
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f002 f9a4 	bl	8010f6c <tcp_output>
 800ec24:	e79d      	b.n	800eb62 <tcp_listen_input+0x52>
 800ec26:	4770      	bx	lr
 800ec28:	20006e44 	.word	0x20006e44
 800ec2c:	08069858 	.word	0x08069858
 800ec30:	08069838 	.word	0x08069838
 800ec34:	0801335c 	.word	0x0801335c
 800ec38:	20006e6c 	.word	0x20006e6c
 800ec3c:	200072f8 	.word	0x200072f8
 800ec40:	20006e7a 	.word	0x20006e7a
 800ec44:	20006e64 	.word	0x20006e64
 800ec48:	20006e40 	.word	0x20006e40
 800ec4c:	200072e4 	.word	0x200072e4
 800ec50:	2000d84c 	.word	0x2000d84c
 800ec54:	2000d848 	.word	0x2000d848

0800ec58 <tcp_free_acked_segments>:
{
 800ec58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec5c:	4606      	mov	r6, r0
 800ec5e:	460c      	mov	r4, r1
 800ec60:	461f      	mov	r7, r3
  while (seg_list != NULL &&
 800ec62:	e008      	b.n	800ec76 <tcp_free_acked_segments+0x1e>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ec64:	4b26      	ldr	r3, [pc, #152]	; (800ed00 <tcp_free_acked_segments+0xa8>)
 800ec66:	f240 4257 	movw	r2, #1111	; 0x457
 800ec6a:	4926      	ldr	r1, [pc, #152]	; (800ed04 <tcp_free_acked_segments+0xac>)
 800ec6c:	4826      	ldr	r0, [pc, #152]	; (800ed08 <tcp_free_acked_segments+0xb0>)
 800ec6e:	f003 fa7d 	bl	801216c <iprintf>
 800ec72:	e021      	b.n	800ecb8 <tcp_free_acked_segments+0x60>
{
 800ec74:	462c      	mov	r4, r5
  while (seg_list != NULL &&
 800ec76:	2c00      	cmp	r4, #0
 800ec78:	d03e      	beq.n	800ecf8 <tcp_free_acked_segments+0xa0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ec7a:	68e3      	ldr	r3, [r4, #12]
 800ec7c:	6858      	ldr	r0, [r3, #4]
 800ec7e:	f7fa fa60 	bl	8009142 <lwip_htonl>
 800ec82:	4605      	mov	r5, r0
 800ec84:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800ec88:	68e3      	ldr	r3, [r4, #12]
 800ec8a:	8998      	ldrh	r0, [r3, #12]
 800ec8c:	f7fa fa54 	bl	8009138 <lwip_htons>
 800ec90:	f010 0f03 	tst.w	r0, #3
 800ec94:	d02e      	beq.n	800ecf4 <tcp_free_acked_segments+0x9c>
 800ec96:	2301      	movs	r3, #1
 800ec98:	4443      	add	r3, r8
 800ec9a:	441d      	add	r5, r3
 800ec9c:	4b1b      	ldr	r3, [pc, #108]	; (800ed0c <tcp_free_acked_segments+0xb4>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	1aed      	subs	r5, r5, r3
  while (seg_list != NULL &&
 800eca2:	2d00      	cmp	r5, #0
 800eca4:	dc28      	bgt.n	800ecf8 <tcp_free_acked_segments+0xa0>
    seg_list = seg_list->next;
 800eca6:	6825      	ldr	r5, [r4, #0]
    clen = pbuf_clen(next->p);
 800eca8:	6860      	ldr	r0, [r4, #4]
 800ecaa:	f7fe fa5f 	bl	800d16c <pbuf_clen>
 800ecae:	4680      	mov	r8, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ecb0:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800ecb4:	4298      	cmp	r0, r3
 800ecb6:	d8d5      	bhi.n	800ec64 <tcp_free_acked_segments+0xc>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ecb8:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
 800ecbc:	eba0 0008 	sub.w	r0, r0, r8
 800ecc0:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ecc4:	8923      	ldrh	r3, [r4, #8]
 800ecc6:	4a12      	ldr	r2, [pc, #72]	; (800ed10 <tcp_free_acked_segments+0xb8>)
 800ecc8:	8811      	ldrh	r1, [r2, #0]
 800ecca:	440b      	add	r3, r1
 800eccc:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f7fe fe7c 	bl	800d9cc <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800ecd4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d0cb      	beq.n	800ec74 <tcp_free_acked_segments+0x1c>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ecdc:	2d00      	cmp	r5, #0
 800ecde:	d1c9      	bne.n	800ec74 <tcp_free_acked_segments+0x1c>
 800ece0:	2f00      	cmp	r7, #0
 800ece2:	d1c7      	bne.n	800ec74 <tcp_free_acked_segments+0x1c>
 800ece4:	4b06      	ldr	r3, [pc, #24]	; (800ed00 <tcp_free_acked_segments+0xa8>)
 800ece6:	f240 4262 	movw	r2, #1122	; 0x462
 800ecea:	490a      	ldr	r1, [pc, #40]	; (800ed14 <tcp_free_acked_segments+0xbc>)
 800ecec:	4806      	ldr	r0, [pc, #24]	; (800ed08 <tcp_free_acked_segments+0xb0>)
 800ecee:	f003 fa3d 	bl	801216c <iprintf>
 800ecf2:	e7bf      	b.n	800ec74 <tcp_free_acked_segments+0x1c>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	e7cf      	b.n	800ec98 <tcp_free_acked_segments+0x40>
}
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecfe:	bf00      	nop
 800ed00:	08069858 	.word	0x08069858
 800ed04:	08069654 	.word	0x08069654
 800ed08:	0801335c 	.word	0x0801335c
 800ed0c:	20006e40 	.word	0x20006e40
 800ed10:	20006e58 	.word	0x20006e58
 800ed14:	0806967c 	.word	0x0806967c

0800ed18 <tcp_receive>:
{
 800ed18:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ed1a:	4604      	mov	r4, r0
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	d05a      	beq.n	800edd6 <tcp_receive+0xbe>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ed20:	7d23      	ldrb	r3, [r4, #20]
 800ed22:	2b03      	cmp	r3, #3
 800ed24:	d95f      	bls.n	800ede6 <tcp_receive+0xce>
  if (flags & TCP_ACK) {
 800ed26:	4bb0      	ldr	r3, [pc, #704]	; (800efe8 <tcp_receive+0x2d0>)
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	f013 0f10 	tst.w	r3, #16
 800ed2e:	d028      	beq.n	800ed82 <tcp_receive+0x6a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ed30:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 800ed34:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ed36:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ed38:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ed3a:	4bac      	ldr	r3, [pc, #688]	; (800efec <tcp_receive+0x2d4>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	1acd      	subs	r5, r1, r3
 800ed40:	2d00      	cmp	r5, #0
 800ed42:	db63      	blt.n	800ee0c <tcp_receive+0xf4>
 800ed44:	4299      	cmp	r1, r3
 800ed46:	d056      	beq.n	800edf6 <tcp_receive+0xde>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ed48:	49a9      	ldr	r1, [pc, #676]	; (800eff0 <tcp_receive+0x2d8>)
 800ed4a:	6809      	ldr	r1, [r1, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed4c:	428a      	cmp	r2, r1
 800ed4e:	d058      	beq.n	800ee02 <tcp_receive+0xea>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ed50:	4ba7      	ldr	r3, [pc, #668]	; (800eff0 <tcp_receive+0x2d8>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ed56:	1a5a      	subs	r2, r3, r1
 800ed58:	2a00      	cmp	r2, #0
 800ed5a:	dd68      	ble.n	800ee2e <tcp_receive+0x116>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ed5c:	2a01      	cmp	r2, #1
 800ed5e:	d404      	bmi.n	800ed6a <tcp_receive+0x52>
 800ed60:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ed62:	1a9a      	subs	r2, r3, r2
 800ed64:	2a00      	cmp	r2, #0
 800ed66:	f340 80a1 	ble.w	800eeac <tcp_receive+0x194>
      tcp_send_empty_ack(pcb);
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	f002 f8c2 	bl	8010ef4 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ed70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed72:	b133      	cbz	r3, 800ed82 <tcp_receive+0x6a>
 800ed74:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ed76:	499e      	ldr	r1, [pc, #632]	; (800eff0 <tcp_receive+0x2d8>)
 800ed78:	6809      	ldr	r1, [r1, #0]
 800ed7a:	1a52      	subs	r2, r2, r1
 800ed7c:	2a00      	cmp	r2, #0
 800ed7e:	f2c0 815a 	blt.w	800f036 <tcp_receive+0x31e>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ed82:	4b9c      	ldr	r3, [pc, #624]	; (800eff4 <tcp_receive+0x2dc>)
 800ed84:	881b      	ldrh	r3, [r3, #0]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f000 8260 	beq.w	800f24c <tcp_receive+0x534>
 800ed8c:	7d22      	ldrb	r2, [r4, #20]
 800ed8e:	2a06      	cmp	r2, #6
 800ed90:	f200 825c 	bhi.w	800f24c <tcp_receive+0x534>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ed94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ed96:	4a95      	ldr	r2, [pc, #596]	; (800efec <tcp_receive+0x2d4>)
 800ed98:	6812      	ldr	r2, [r2, #0]
 800ed9a:	1a8e      	subs	r6, r1, r2
 800ed9c:	2e01      	cmp	r6, #1
 800ed9e:	d405      	bmi.n	800edac <tcp_receive+0x94>
 800eda0:	4413      	add	r3, r2
 800eda2:	1acb      	subs	r3, r1, r3
 800eda4:	3301      	adds	r3, #1
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	f340 8168 	ble.w	800f07c <tcp_receive+0x364>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800edac:	1a52      	subs	r2, r2, r1
 800edae:	2a00      	cmp	r2, #0
 800edb0:	f2c0 81a6 	blt.w	800f100 <tcp_receive+0x3e8>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800edb4:	4b8d      	ldr	r3, [pc, #564]	; (800efec <tcp_receive+0x2d4>)
 800edb6:	6819      	ldr	r1, [r3, #0]
 800edb8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800edba:	1a8b      	subs	r3, r1, r2
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	db06      	blt.n	800edce <tcp_receive+0xb6>
 800edc0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800edc2:	4413      	add	r3, r2
 800edc4:	1acb      	subs	r3, r1, r3
 800edc6:	3301      	adds	r3, #1
 800edc8:	2b00      	cmp	r3, #0
 800edca:	f340 819e 	ble.w	800f10a <tcp_receive+0x3f2>
      tcp_send_empty_ack(pcb);
 800edce:	4620      	mov	r0, r4
 800edd0:	f002 f890 	bl	8010ef4 <tcp_send_empty_ack>
 800edd4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800edd6:	4b88      	ldr	r3, [pc, #544]	; (800eff8 <tcp_receive+0x2e0>)
 800edd8:	f240 427b 	movw	r2, #1147	; 0x47b
 800eddc:	4987      	ldr	r1, [pc, #540]	; (800effc <tcp_receive+0x2e4>)
 800edde:	4888      	ldr	r0, [pc, #544]	; (800f000 <tcp_receive+0x2e8>)
 800ede0:	f003 f9c4 	bl	801216c <iprintf>
 800ede4:	e79c      	b.n	800ed20 <tcp_receive+0x8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ede6:	4b84      	ldr	r3, [pc, #528]	; (800eff8 <tcp_receive+0x2e0>)
 800ede8:	f240 427c 	movw	r2, #1148	; 0x47c
 800edec:	4985      	ldr	r1, [pc, #532]	; (800f004 <tcp_receive+0x2ec>)
 800edee:	4884      	ldr	r0, [pc, #528]	; (800f000 <tcp_receive+0x2e8>)
 800edf0:	f003 f9bc 	bl	801216c <iprintf>
 800edf4:	e797      	b.n	800ed26 <tcp_receive+0xe>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800edf6:	497e      	ldr	r1, [pc, #504]	; (800eff0 <tcp_receive+0x2d8>)
 800edf8:	6809      	ldr	r1, [r1, #0]
 800edfa:	1a51      	subs	r1, r2, r1
 800edfc:	2900      	cmp	r1, #0
 800edfe:	daa3      	bge.n	800ed48 <tcp_receive+0x30>
 800ee00:	e004      	b.n	800ee0c <tcp_receive+0xf4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ee02:	4a81      	ldr	r2, [pc, #516]	; (800f008 <tcp_receive+0x2f0>)
 800ee04:	6812      	ldr	r2, [r2, #0]
 800ee06:	89d2      	ldrh	r2, [r2, #14]
 800ee08:	4290      	cmp	r0, r2
 800ee0a:	d2a1      	bcs.n	800ed50 <tcp_receive+0x38>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ee0c:	4a7e      	ldr	r2, [pc, #504]	; (800f008 <tcp_receive+0x2f0>)
 800ee0e:	6812      	ldr	r2, [r2, #0]
 800ee10:	89d2      	ldrh	r2, [r2, #14]
 800ee12:	b290      	uxth	r0, r2
 800ee14:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ee18:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 800ee1c:	4288      	cmp	r0, r1
 800ee1e:	d901      	bls.n	800ee24 <tcp_receive+0x10c>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ee20:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 800ee24:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ee26:	4b72      	ldr	r3, [pc, #456]	; (800eff0 <tcp_receive+0x2d8>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	65a3      	str	r3, [r4, #88]	; 0x58
 800ee2c:	e790      	b.n	800ed50 <tcp_receive+0x38>
      if (tcplen == 0) {
 800ee2e:	4a71      	ldr	r2, [pc, #452]	; (800eff4 <tcp_receive+0x2dc>)
 800ee30:	8812      	ldrh	r2, [r2, #0]
 800ee32:	bb92      	cbnz	r2, 800ee9a <tcp_receive+0x182>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ee34:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ee36:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 800ee3a:	4402      	add	r2, r0
 800ee3c:	4296      	cmp	r6, r2
 800ee3e:	d001      	beq.n	800ee44 <tcp_receive+0x12c>
  int found_dupack = 0;
 800ee40:	2300      	movs	r3, #0
 800ee42:	e02b      	b.n	800ee9c <tcp_receive+0x184>
          if (pcb->rtime >= 0) {
 800ee44:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800ee48:	2a00      	cmp	r2, #0
 800ee4a:	db2d      	blt.n	800eea8 <tcp_receive+0x190>
            if (pcb->lastack == ackno) {
 800ee4c:	428b      	cmp	r3, r1
 800ee4e:	d001      	beq.n	800ee54 <tcp_receive+0x13c>
  int found_dupack = 0;
 800ee50:	2300      	movs	r3, #0
 800ee52:	e023      	b.n	800ee9c <tcp_receive+0x184>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ee54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee58:	1c53      	adds	r3, r2, #1
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d201      	bcs.n	800ee64 <tcp_receive+0x14c>
                ++pcb->dupacks;
 800ee60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800ee64:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ee68:	2b03      	cmp	r3, #3
 800ee6a:	d908      	bls.n	800ee7e <tcp_receive+0x166>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ee6c:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 800ee70:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800ee72:	440a      	add	r2, r1
 800ee74:	b292      	uxth	r2, r2
 800ee76:	4291      	cmp	r1, r2
 800ee78:	d805      	bhi.n	800ee86 <tcp_receive+0x16e>
 800ee7a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
              if (pcb->dupacks >= 3) {
 800ee7e:	2b02      	cmp	r3, #2
 800ee80:	d806      	bhi.n	800ee90 <tcp_receive+0x178>
              found_dupack = 1;
 800ee82:	2301      	movs	r3, #1
 800ee84:	e00a      	b.n	800ee9c <tcp_receive+0x184>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ee86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee8a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 800ee8e:	e7f6      	b.n	800ee7e <tcp_receive+0x166>
                tcp_rexmit_fast(pcb);
 800ee90:	4620      	mov	r0, r4
 800ee92:	f001 ffa9 	bl	8010de8 <tcp_rexmit_fast>
              found_dupack = 1;
 800ee96:	2301      	movs	r3, #1
 800ee98:	e000      	b.n	800ee9c <tcp_receive+0x184>
  int found_dupack = 0;
 800ee9a:	2300      	movs	r3, #0
      if (!found_dupack) {
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f47f af67 	bne.w	800ed70 <tcp_receive+0x58>
        pcb->dupacks = 0;
 800eea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eea6:	e763      	b.n	800ed70 <tcp_receive+0x58>
  int found_dupack = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	e7f7      	b.n	800ee9c <tcp_receive+0x184>
      if (pcb->flags & TF_INFR) {
 800eeac:	8b62      	ldrh	r2, [r4, #26]
 800eeae:	f012 0f04 	tst.w	r2, #4
 800eeb2:	d009      	beq.n	800eec8 <tcp_receive+0x1b0>
        tcp_clear_flags(pcb, TF_INFR);
 800eeb4:	f022 0204 	bic.w	r2, r2, #4
 800eeb8:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800eeba:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800eebe:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800eec2:	2200      	movs	r2, #0
 800eec4:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->nrtx = 0;
 800eec8:	2000      	movs	r0, #0
 800eeca:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800eece:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 800eed2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800eed4:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 800eed8:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800eedc:	b29a      	uxth	r2, r3
 800eede:	b289      	uxth	r1, r1
 800eee0:	1a51      	subs	r1, r2, r1
 800eee2:	b289      	uxth	r1, r1
      pcb->dupacks = 0;
 800eee4:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 800eee8:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800eeea:	7d23      	ldrb	r3, [r4, #20]
 800eeec:	2b03      	cmp	r3, #3
 800eeee:	d918      	bls.n	800ef22 <tcp_receive+0x20a>
        if (pcb->cwnd < pcb->ssthresh) {
 800eef0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800eef4:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d24c      	bcs.n	800ef96 <tcp_receive+0x27e>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800eefc:	8b62      	ldrh	r2, [r4, #26]
 800eefe:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800ef02:	d041      	beq.n	800ef88 <tcp_receive+0x270>
 800ef04:	2201      	movs	r2, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ef06:	b292      	uxth	r2, r2
 800ef08:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800ef0a:	fb12 f200 	smulbb	r2, r2, r0
 800ef0e:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800ef10:	4291      	cmp	r1, r2
 800ef12:	bf94      	ite	ls
 800ef14:	1859      	addls	r1, r3, r1
 800ef16:	1899      	addhi	r1, r3, r2
 800ef18:	b289      	uxth	r1, r1
 800ef1a:	428b      	cmp	r3, r1
 800ef1c:	d836      	bhi.n	800ef8c <tcp_receive+0x274>
 800ef1e:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ef22:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ef24:	4a39      	ldr	r2, [pc, #228]	; (800f00c <tcp_receive+0x2f4>)
 800ef26:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f7ff fe95 	bl	800ec58 <tcp_free_acked_segments>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ef32:	4a37      	ldr	r2, [pc, #220]	; (800f010 <tcp_receive+0x2f8>)
 800ef34:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800ef36:	4620      	mov	r0, r4
 800ef38:	f7ff fe8e 	bl	800ec58 <tcp_free_acked_segments>
 800ef3c:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800ef3e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800ef40:	2a00      	cmp	r2, #0
 800ef42:	d049      	beq.n	800efd8 <tcp_receive+0x2c0>
        pcb->rtime = 0;
 800ef44:	2300      	movs	r3, #0
 800ef46:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d047      	beq.n	800efe0 <tcp_receive+0x2c8>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ef50:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800ef54:	492f      	ldr	r1, [pc, #188]	; (800f014 <tcp_receive+0x2fc>)
 800ef56:	8809      	ldrh	r1, [r1, #0]
 800ef58:	440b      	add	r3, r1
 800ef5a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800ef5e:	8b63      	ldrh	r3, [r4, #26]
 800ef60:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800ef64:	f43f af04 	beq.w	800ed70 <tcp_receive+0x58>
        if (pcb->unacked == NULL) {
 800ef68:	2a00      	cmp	r2, #0
 800ef6a:	d055      	beq.n	800f018 <tcp_receive+0x300>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ef6c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800ef6e:	68d3      	ldr	r3, [r2, #12]
 800ef70:	6858      	ldr	r0, [r3, #4]
 800ef72:	f7fa f8e6 	bl	8009142 <lwip_htonl>
 800ef76:	1a28      	subs	r0, r5, r0
 800ef78:	2800      	cmp	r0, #0
 800ef7a:	f73f aef9 	bgt.w	800ed70 <tcp_receive+0x58>
          tcp_clear_flags(pcb, TF_RTO);
 800ef7e:	8b63      	ldrh	r3, [r4, #26]
 800ef80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ef84:	8363      	strh	r3, [r4, #26]
 800ef86:	e6f3      	b.n	800ed70 <tcp_receive+0x58>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ef88:	2202      	movs	r2, #2
 800ef8a:	e7bc      	b.n	800ef06 <tcp_receive+0x1ee>
          TCP_WND_INC(pcb->cwnd, increase);
 800ef8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef90:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800ef94:	e7c5      	b.n	800ef22 <tcp_receive+0x20a>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ef96:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ef9a:	4411      	add	r1, r2
 800ef9c:	b289      	uxth	r1, r1
 800ef9e:	428a      	cmp	r2, r1
 800efa0:	d810      	bhi.n	800efc4 <tcp_receive+0x2ac>
 800efa2:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800efa6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800efaa:	4293      	cmp	r3, r2
 800efac:	d8b9      	bhi.n	800ef22 <tcp_receive+0x20a>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800efae:	1ad2      	subs	r2, r2, r3
 800efb0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800efb4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800efb6:	441a      	add	r2, r3
 800efb8:	b292      	uxth	r2, r2
 800efba:	4293      	cmp	r3, r2
 800efbc:	d807      	bhi.n	800efce <tcp_receive+0x2b6>
 800efbe:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 800efc2:	e7ae      	b.n	800ef22 <tcp_receive+0x20a>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800efc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efc8:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800efcc:	e7eb      	b.n	800efa6 <tcp_receive+0x28e>
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800efce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efd2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800efd6:	e7a4      	b.n	800ef22 <tcp_receive+0x20a>
        pcb->rtime = -1;
 800efd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efdc:	8623      	strh	r3, [r4, #48]	; 0x30
 800efde:	e7b3      	b.n	800ef48 <tcp_receive+0x230>
        pcb->unsent_oversize = 0;
 800efe0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800efe4:	e7b4      	b.n	800ef50 <tcp_receive+0x238>
 800efe6:	bf00      	nop
 800efe8:	20006e44 	.word	0x20006e44
 800efec:	20006e64 	.word	0x20006e64
 800eff0:	20006e40 	.word	0x20006e40
 800eff4:	20006e7a 	.word	0x20006e7a
 800eff8:	08069858 	.word	0x08069858
 800effc:	08069938 	.word	0x08069938
 800f000:	0801335c 	.word	0x0801335c
 800f004:	08069954 	.word	0x08069954
 800f008:	20006e6c 	.word	0x20006e6c
 800f00c:	08069970 	.word	0x08069970
 800f010:	08069978 	.word	0x08069978
 800f014:	20006e58 	.word	0x20006e58
          if ((pcb->unsent == NULL) ||
 800f018:	b140      	cbz	r0, 800f02c <tcp_receive+0x314>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f01a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800f01c:	68c3      	ldr	r3, [r0, #12]
 800f01e:	6858      	ldr	r0, [r3, #4]
 800f020:	f7fa f88f 	bl	8009142 <lwip_htonl>
 800f024:	1a28      	subs	r0, r5, r0
          if ((pcb->unsent == NULL) ||
 800f026:	2800      	cmp	r0, #0
 800f028:	f73f aea2 	bgt.w	800ed70 <tcp_receive+0x58>
            tcp_clear_flags(pcb, TF_RTO);
 800f02c:	8b63      	ldrh	r3, [r4, #26]
 800f02e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f032:	8363      	strh	r3, [r4, #26]
 800f034:	e69c      	b.n	800ed70 <tcp_receive+0x58>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f036:	4a8e      	ldr	r2, [pc, #568]	; (800f270 <tcp_receive+0x558>)
 800f038:	6812      	ldr	r2, [r2, #0]
 800f03a:	1ad2      	subs	r2, r2, r3
 800f03c:	b292      	uxth	r2, r2
      m = (s16_t)(m - (pcb->sa >> 3));
 800f03e:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800f042:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 800f046:	b292      	uxth	r2, r2
 800f048:	b213      	sxth	r3, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800f04a:	fa12 f181 	uxtah	r1, r2, r1
 800f04e:	b209      	sxth	r1, r1
 800f050:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 800f052:	2b00      	cmp	r3, #0
 800f054:	db0f      	blt.n	800f076 <tcp_receive+0x35e>
      m = (s16_t)(m - (pcb->sv >> 2));
 800f056:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 800f05a:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv = (s16_t)(pcb->sv + m);
 800f05e:	b292      	uxth	r2, r2
 800f060:	fa12 f383 	uxtah	r3, r2, r3
 800f064:	b29b      	uxth	r3, r3
 800f066:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f068:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800f06c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800f070:	2300      	movs	r3, #0
 800f072:	6363      	str	r3, [r4, #52]	; 0x34
 800f074:	e685      	b.n	800ed82 <tcp_receive+0x6a>
        m = (s16_t) - m;
 800f076:	4252      	negs	r2, r2
 800f078:	b213      	sxth	r3, r2
 800f07a:	e7ec      	b.n	800f056 <tcp_receive+0x33e>
      struct pbuf *p = inseg.p;
 800f07c:	4b7d      	ldr	r3, [pc, #500]	; (800f274 <tcp_receive+0x55c>)
 800f07e:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f080:	b195      	cbz	r5, 800f0a8 <tcp_receive+0x390>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f082:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800f086:	429e      	cmp	r6, r3
 800f088:	d816      	bhi.n	800f0b8 <tcp_receive+0x3a0>
      off = (u16_t)off32;
 800f08a:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f08c:	4b79      	ldr	r3, [pc, #484]	; (800f274 <tcp_receive+0x55c>)
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	891b      	ldrh	r3, [r3, #8]
 800f092:	429e      	cmp	r6, r3
 800f094:	d818      	bhi.n	800f0c8 <tcp_receive+0x3b0>
      inseg.len -= off;
 800f096:	4b77      	ldr	r3, [pc, #476]	; (800f274 <tcp_receive+0x55c>)
 800f098:	891a      	ldrh	r2, [r3, #8]
 800f09a:	1b92      	subs	r2, r2, r6
 800f09c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	891a      	ldrh	r2, [r3, #8]
 800f0a2:	1b92      	subs	r2, r2, r6
 800f0a4:	b292      	uxth	r2, r2
      while (p->len < off) {
 800f0a6:	e01d      	b.n	800f0e4 <tcp_receive+0x3cc>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f0a8:	4b73      	ldr	r3, [pc, #460]	; (800f278 <tcp_receive+0x560>)
 800f0aa:	f240 5294 	movw	r2, #1428	; 0x594
 800f0ae:	4973      	ldr	r1, [pc, #460]	; (800f27c <tcp_receive+0x564>)
 800f0b0:	4873      	ldr	r0, [pc, #460]	; (800f280 <tcp_receive+0x568>)
 800f0b2:	f003 f85b 	bl	801216c <iprintf>
 800f0b6:	e7e4      	b.n	800f082 <tcp_receive+0x36a>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f0b8:	4b6f      	ldr	r3, [pc, #444]	; (800f278 <tcp_receive+0x560>)
 800f0ba:	f240 5295 	movw	r2, #1429	; 0x595
 800f0be:	4971      	ldr	r1, [pc, #452]	; (800f284 <tcp_receive+0x56c>)
 800f0c0:	486f      	ldr	r0, [pc, #444]	; (800f280 <tcp_receive+0x568>)
 800f0c2:	f003 f853 	bl	801216c <iprintf>
 800f0c6:	e7e0      	b.n	800f08a <tcp_receive+0x372>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f0c8:	4b6b      	ldr	r3, [pc, #428]	; (800f278 <tcp_receive+0x560>)
 800f0ca:	f240 5297 	movw	r2, #1431	; 0x597
 800f0ce:	496e      	ldr	r1, [pc, #440]	; (800f288 <tcp_receive+0x570>)
 800f0d0:	486b      	ldr	r0, [pc, #428]	; (800f280 <tcp_receive+0x568>)
 800f0d2:	f003 f84b 	bl	801216c <iprintf>
 800f0d6:	e7de      	b.n	800f096 <tcp_receive+0x37e>
        off -= p->len;
 800f0d8:	1af3      	subs	r3, r6, r3
 800f0da:	b29e      	uxth	r6, r3
        p->tot_len = new_tot_len;
 800f0dc:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	816b      	strh	r3, [r5, #10]
        p = p->next;
 800f0e2:	682d      	ldr	r5, [r5, #0]
      while (p->len < off) {
 800f0e4:	896b      	ldrh	r3, [r5, #10]
 800f0e6:	429e      	cmp	r6, r3
 800f0e8:	d8f6      	bhi.n	800f0d8 <tcp_receive+0x3c0>
      pbuf_remove_header(p, off);
 800f0ea:	4631      	mov	r1, r6
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	f7fd fe8d 	bl	800ce0c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f0f2:	4b60      	ldr	r3, [pc, #384]	; (800f274 <tcp_receive+0x55c>)
 800f0f4:	68da      	ldr	r2, [r3, #12]
 800f0f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0f8:	4964      	ldr	r1, [pc, #400]	; (800f28c <tcp_receive+0x574>)
 800f0fa:	600b      	str	r3, [r1, #0]
 800f0fc:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f0fe:	e659      	b.n	800edb4 <tcp_receive+0x9c>
        tcp_ack_now(pcb);
 800f100:	8b63      	ldrh	r3, [r4, #26]
 800f102:	f043 0302 	orr.w	r3, r3, #2
 800f106:	8363      	strh	r3, [r4, #26]
 800f108:	e654      	b.n	800edb4 <tcp_receive+0x9c>
      if (pcb->rcv_nxt == seqno) {
 800f10a:	4291      	cmp	r1, r2
 800f10c:	d003      	beq.n	800f116 <tcp_receive+0x3fe>
        tcp_send_empty_ack(pcb);
 800f10e:	4620      	mov	r0, r4
 800f110:	f001 fef0 	bl	8010ef4 <tcp_send_empty_ack>
 800f114:	bd70      	pop	{r4, r5, r6, pc}
        tcplen = TCP_TCPLEN(&inseg);
 800f116:	4b57      	ldr	r3, [pc, #348]	; (800f274 <tcp_receive+0x55c>)
 800f118:	891d      	ldrh	r5, [r3, #8]
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	8998      	ldrh	r0, [r3, #12]
 800f11e:	f7fa f80b 	bl	8009138 <lwip_htons>
 800f122:	f010 0f03 	tst.w	r0, #3
 800f126:	d038      	beq.n	800f19a <tcp_receive+0x482>
 800f128:	2301      	movs	r3, #1
 800f12a:	442b      	add	r3, r5
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	4a58      	ldr	r2, [pc, #352]	; (800f290 <tcp_receive+0x578>)
 800f130:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 800f132:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800f134:	4293      	cmp	r3, r2
 800f136:	d832      	bhi.n	800f19e <tcp_receive+0x486>
        pcb->rcv_nxt = seqno + tcplen;
 800f138:	4b55      	ldr	r3, [pc, #340]	; (800f290 <tcp_receive+0x578>)
 800f13a:	881a      	ldrh	r2, [r3, #0]
 800f13c:	4b53      	ldr	r3, [pc, #332]	; (800f28c <tcp_receive+0x574>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4413      	add	r3, r2
 800f142:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f144:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800f146:	429a      	cmp	r2, r3
 800f148:	d874      	bhi.n	800f234 <tcp_receive+0x51c>
        pcb->rcv_wnd -= tcplen;
 800f14a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800f14c:	4a50      	ldr	r2, [pc, #320]	; (800f290 <tcp_receive+0x578>)
 800f14e:	8812      	ldrh	r2, [r2, #0]
 800f150:	1a9b      	subs	r3, r3, r2
 800f152:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800f154:	4620      	mov	r0, r4
 800f156:	f7fe fbc1 	bl	800d8dc <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800f15a:	4b46      	ldr	r3, [pc, #280]	; (800f274 <tcp_receive+0x55c>)
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	891a      	ldrh	r2, [r3, #8]
 800f160:	b122      	cbz	r2, 800f16c <tcp_receive+0x454>
          recv_data = inseg.p;
 800f162:	4a4c      	ldr	r2, [pc, #304]	; (800f294 <tcp_receive+0x57c>)
 800f164:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800f166:	2200      	movs	r2, #0
 800f168:	4b42      	ldr	r3, [pc, #264]	; (800f274 <tcp_receive+0x55c>)
 800f16a:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f16c:	4b41      	ldr	r3, [pc, #260]	; (800f274 <tcp_receive+0x55c>)
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	8998      	ldrh	r0, [r3, #12]
 800f172:	f7f9 ffe1 	bl	8009138 <lwip_htons>
 800f176:	f010 0f01 	tst.w	r0, #1
 800f17a:	d004      	beq.n	800f186 <tcp_receive+0x46e>
          recv_flags |= TF_GOT_FIN;
 800f17c:	4a46      	ldr	r2, [pc, #280]	; (800f298 <tcp_receive+0x580>)
 800f17e:	7813      	ldrb	r3, [r2, #0]
 800f180:	f043 0320 	orr.w	r3, r3, #32
 800f184:	7013      	strb	r3, [r2, #0]
        tcp_ack(pcb);
 800f186:	8b63      	ldrh	r3, [r4, #26]
 800f188:	f013 0f01 	tst.w	r3, #1
 800f18c:	d05a      	beq.n	800f244 <tcp_receive+0x52c>
 800f18e:	f023 0301 	bic.w	r3, r3, #1
 800f192:	f043 0302 	orr.w	r3, r3, #2
 800f196:	8363      	strh	r3, [r4, #26]
 800f198:	bd70      	pop	{r4, r5, r6, pc}
        tcplen = TCP_TCPLEN(&inseg);
 800f19a:	2300      	movs	r3, #0
 800f19c:	e7c5      	b.n	800f12a <tcp_receive+0x412>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f19e:	4b35      	ldr	r3, [pc, #212]	; (800f274 <tcp_receive+0x55c>)
 800f1a0:	68db      	ldr	r3, [r3, #12]
 800f1a2:	8998      	ldrh	r0, [r3, #12]
 800f1a4:	f7f9 ffc8 	bl	8009138 <lwip_htons>
 800f1a8:	f010 0f01 	tst.w	r0, #1
 800f1ac:	d12f      	bne.n	800f20e <tcp_receive+0x4f6>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f1ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800f1b0:	4b30      	ldr	r3, [pc, #192]	; (800f274 <tcp_receive+0x55c>)
 800f1b2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	8998      	ldrh	r0, [r3, #12]
 800f1b8:	f7f9 ffbe 	bl	8009138 <lwip_htons>
 800f1bc:	f010 0f02 	tst.w	r0, #2
 800f1c0:	d003      	beq.n	800f1ca <tcp_receive+0x4b2>
            inseg.len -= 1;
 800f1c2:	4a2c      	ldr	r2, [pc, #176]	; (800f274 <tcp_receive+0x55c>)
 800f1c4:	8913      	ldrh	r3, [r2, #8]
 800f1c6:	3b01      	subs	r3, #1
 800f1c8:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800f1ca:	4d2a      	ldr	r5, [pc, #168]	; (800f274 <tcp_receive+0x55c>)
 800f1cc:	8929      	ldrh	r1, [r5, #8]
 800f1ce:	6868      	ldr	r0, [r5, #4]
 800f1d0:	f7fd ff78 	bl	800d0c4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f1d4:	892e      	ldrh	r6, [r5, #8]
 800f1d6:	68eb      	ldr	r3, [r5, #12]
 800f1d8:	8998      	ldrh	r0, [r3, #12]
 800f1da:	f7f9 ffad 	bl	8009138 <lwip_htons>
 800f1de:	f010 0f03 	tst.w	r0, #3
 800f1e2:	d025      	beq.n	800f230 <tcp_receive+0x518>
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	4433      	add	r3, r6
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	4a29      	ldr	r2, [pc, #164]	; (800f290 <tcp_receive+0x578>)
 800f1ec:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f1ee:	4a27      	ldr	r2, [pc, #156]	; (800f28c <tcp_receive+0x574>)
 800f1f0:	6812      	ldr	r2, [r2, #0]
 800f1f2:	4413      	add	r3, r2
 800f1f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f1f6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800f1f8:	440a      	add	r2, r1
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d09c      	beq.n	800f138 <tcp_receive+0x420>
 800f1fe:	4b1e      	ldr	r3, [pc, #120]	; (800f278 <tcp_receive+0x560>)
 800f200:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800f204:	4925      	ldr	r1, [pc, #148]	; (800f29c <tcp_receive+0x584>)
 800f206:	481e      	ldr	r0, [pc, #120]	; (800f280 <tcp_receive+0x568>)
 800f208:	f002 ffb0 	bl	801216c <iprintf>
 800f20c:	e794      	b.n	800f138 <tcp_receive+0x420>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f20e:	4b19      	ldr	r3, [pc, #100]	; (800f274 <tcp_receive+0x55c>)
 800f210:	68de      	ldr	r6, [r3, #12]
 800f212:	89b0      	ldrh	r0, [r6, #12]
 800f214:	b205      	sxth	r5, r0
 800f216:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800f21a:	b280      	uxth	r0, r0
 800f21c:	f7f9 ff8c 	bl	8009138 <lwip_htons>
 800f220:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800f224:	f7f9 ff88 	bl	8009138 <lwip_htons>
 800f228:	b200      	sxth	r0, r0
 800f22a:	4305      	orrs	r5, r0
 800f22c:	81b5      	strh	r5, [r6, #12]
 800f22e:	e7be      	b.n	800f1ae <tcp_receive+0x496>
          tcplen = TCP_TCPLEN(&inseg);
 800f230:	2300      	movs	r3, #0
 800f232:	e7d8      	b.n	800f1e6 <tcp_receive+0x4ce>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f234:	4b10      	ldr	r3, [pc, #64]	; (800f278 <tcp_receive+0x560>)
 800f236:	f240 6207 	movw	r2, #1543	; 0x607
 800f23a:	4919      	ldr	r1, [pc, #100]	; (800f2a0 <tcp_receive+0x588>)
 800f23c:	4810      	ldr	r0, [pc, #64]	; (800f280 <tcp_receive+0x568>)
 800f23e:	f002 ff95 	bl	801216c <iprintf>
 800f242:	e782      	b.n	800f14a <tcp_receive+0x432>
        tcp_ack(pcb);
 800f244:	f043 0301 	orr.w	r3, r3, #1
 800f248:	8363      	strh	r3, [r4, #26]
 800f24a:	bd70      	pop	{r4, r5, r6, pc}
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f24c:	4b0f      	ldr	r3, [pc, #60]	; (800f28c <tcp_receive+0x574>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f252:	1a99      	subs	r1, r3, r2
 800f254:	2900      	cmp	r1, #0
 800f256:	db05      	blt.n	800f264 <tcp_receive+0x54c>
 800f258:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800f25a:	440a      	add	r2, r1
 800f25c:	1a9b      	subs	r3, r3, r2
 800f25e:	3301      	adds	r3, #1
 800f260:	2b00      	cmp	r3, #0
 800f262:	dd03      	ble.n	800f26c <tcp_receive+0x554>
      tcp_ack_now(pcb);
 800f264:	8b63      	ldrh	r3, [r4, #26]
 800f266:	f043 0302 	orr.w	r3, r3, #2
 800f26a:	8363      	strh	r3, [r4, #26]
 800f26c:	bd70      	pop	{r4, r5, r6, pc}
 800f26e:	bf00      	nop
 800f270:	2000d850 	.word	0x2000d850
 800f274:	20006e48 	.word	0x20006e48
 800f278:	08069858 	.word	0x08069858
 800f27c:	08069980 	.word	0x08069980
 800f280:	0801335c 	.word	0x0801335c
 800f284:	08069990 	.word	0x08069990
 800f288:	080699a0 	.word	0x080699a0
 800f28c:	20006e64 	.word	0x20006e64
 800f290:	20006e7a 	.word	0x20006e7a
 800f294:	20006e5c 	.word	0x20006e5c
 800f298:	20006e60 	.word	0x20006e60
 800f29c:	080699b0 	.word	0x080699b0
 800f2a0:	080699e8 	.word	0x080699e8

0800f2a4 <tcp_process>:
{
 800f2a4:	b570      	push	{r4, r5, r6, lr}
 800f2a6:	b084      	sub	sp, #16
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	b1d0      	cbz	r0, 800f2e2 <tcp_process+0x3e>
  if (flags & TCP_RST) {
 800f2ac:	4ba1      	ldr	r3, [pc, #644]	; (800f534 <tcp_process+0x290>)
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	f013 0f04 	tst.w	r3, #4
 800f2b4:	d045      	beq.n	800f342 <tcp_process+0x9e>
    if (pcb->state == SYN_SENT) {
 800f2b6:	7d21      	ldrb	r1, [r4, #20]
 800f2b8:	2902      	cmp	r1, #2
 800f2ba:	d01a      	beq.n	800f2f2 <tcp_process+0x4e>
      if (seqno == pcb->rcv_nxt) {
 800f2bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f2be:	4b9e      	ldr	r3, [pc, #632]	; (800f538 <tcp_process+0x294>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d024      	beq.n	800f310 <tcp_process+0x6c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f2c6:	1a98      	subs	r0, r3, r2
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	db23      	blt.n	800f314 <tcp_process+0x70>
 800f2cc:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800f2ce:	4402      	add	r2, r0
 800f2d0:	1a9b      	subs	r3, r3, r2
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	dd14      	ble.n	800f300 <tcp_process+0x5c>
  u8_t acceptable = 0;
 800f2d6:	2300      	movs	r3, #0
    if (acceptable) {
 800f2d8:	b9f3      	cbnz	r3, 800f318 <tcp_process+0x74>
      return ERR_OK;
 800f2da:	2500      	movs	r5, #0
}
 800f2dc:	4628      	mov	r0, r5
 800f2de:	b004      	add	sp, #16
 800f2e0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f2e2:	4b96      	ldr	r3, [pc, #600]	; (800f53c <tcp_process+0x298>)
 800f2e4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f2e8:	4995      	ldr	r1, [pc, #596]	; (800f540 <tcp_process+0x29c>)
 800f2ea:	4896      	ldr	r0, [pc, #600]	; (800f544 <tcp_process+0x2a0>)
 800f2ec:	f002 ff3e 	bl	801216c <iprintf>
 800f2f0:	e7dc      	b.n	800f2ac <tcp_process+0x8>
      if (ackno == pcb->snd_nxt) {
 800f2f2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f2f4:	4b94      	ldr	r3, [pc, #592]	; (800f548 <tcp_process+0x2a4>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d007      	beq.n	800f30c <tcp_process+0x68>
  u8_t acceptable = 0;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	e7eb      	b.n	800f2d8 <tcp_process+0x34>
        tcp_ack_now(pcb);
 800f300:	8b63      	ldrh	r3, [r4, #26]
 800f302:	f043 0302 	orr.w	r3, r3, #2
 800f306:	8363      	strh	r3, [r4, #26]
  u8_t acceptable = 0;
 800f308:	2300      	movs	r3, #0
 800f30a:	e7e5      	b.n	800f2d8 <tcp_process+0x34>
        acceptable = 1;
 800f30c:	2301      	movs	r3, #1
 800f30e:	e7e3      	b.n	800f2d8 <tcp_process+0x34>
        acceptable = 1;
 800f310:	2301      	movs	r3, #1
 800f312:	e7e1      	b.n	800f2d8 <tcp_process+0x34>
  u8_t acceptable = 0;
 800f314:	2300      	movs	r3, #0
 800f316:	e7df      	b.n	800f2d8 <tcp_process+0x34>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f318:	b159      	cbz	r1, 800f332 <tcp_process+0x8e>
      recv_flags |= TF_RESET;
 800f31a:	4a8c      	ldr	r2, [pc, #560]	; (800f54c <tcp_process+0x2a8>)
 800f31c:	7813      	ldrb	r3, [r2, #0]
 800f31e:	f043 0308 	orr.w	r3, r3, #8
 800f322:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f324:	8b63      	ldrh	r3, [r4, #26]
 800f326:	f023 0301 	bic.w	r3, r3, #1
 800f32a:	8363      	strh	r3, [r4, #26]
      return ERR_RST;
 800f32c:	f06f 050d 	mvn.w	r5, #13
 800f330:	e7d4      	b.n	800f2dc <tcp_process+0x38>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f332:	4b82      	ldr	r3, [pc, #520]	; (800f53c <tcp_process+0x298>)
 800f334:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f338:	4985      	ldr	r1, [pc, #532]	; (800f550 <tcp_process+0x2ac>)
 800f33a:	4882      	ldr	r0, [pc, #520]	; (800f544 <tcp_process+0x2a0>)
 800f33c:	f002 ff16 	bl	801216c <iprintf>
 800f340:	e7eb      	b.n	800f31a <tcp_process+0x76>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f342:	f013 0f02 	tst.w	r3, #2
 800f346:	d00a      	beq.n	800f35e <tcp_process+0xba>
 800f348:	7d23      	ldrb	r3, [r4, #20]
 800f34a:	3b02      	subs	r3, #2
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d905      	bls.n	800f35e <tcp_process+0xba>
    tcp_ack_now(pcb);
 800f352:	8b63      	ldrh	r3, [r4, #26]
 800f354:	f043 0302 	orr.w	r3, r3, #2
 800f358:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800f35a:	2500      	movs	r5, #0
 800f35c:	e7be      	b.n	800f2dc <tcp_process+0x38>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f35e:	8b63      	ldrh	r3, [r4, #26]
 800f360:	f013 0f10 	tst.w	r3, #16
 800f364:	d102      	bne.n	800f36c <tcp_process+0xc8>
    pcb->tmr = tcp_ticks;
 800f366:	4b7b      	ldr	r3, [pc, #492]	; (800f554 <tcp_process+0x2b0>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800f36c:	2300      	movs	r3, #0
 800f36e:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  pcb->persist_probe = 0;
 800f372:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800f376:	4620      	mov	r0, r4
 800f378:	f7ff faec 	bl	800e954 <tcp_parseopt>
  switch (pcb->state) {
 800f37c:	7d23      	ldrb	r3, [r4, #20]
 800f37e:	3b02      	subs	r3, #2
 800f380:	2b07      	cmp	r3, #7
 800f382:	f200 823b 	bhi.w	800f7fc <tcp_process+0x558>
 800f386:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f38a:	0008      	.short	0x0008
 800f38c:	015700b2 	.word	0x015700b2
 800f390:	01be0168 	.word	0x01be0168
 800f394:	01ec0157 	.word	0x01ec0157
 800f398:	021f      	.short	0x021f
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f39a:	4b66      	ldr	r3, [pc, #408]	; (800f534 <tcp_process+0x290>)
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	f003 0212 	and.w	r2, r3, #18
 800f3a2:	2a12      	cmp	r2, #18
 800f3a4:	d005      	beq.n	800f3b2 <tcp_process+0x10e>
      else if (flags & TCP_ACK) {
 800f3a6:	f013 0f10 	tst.w	r3, #16
 800f3aa:	f040 8081 	bne.w	800f4b0 <tcp_process+0x20c>
  return ERR_OK;
 800f3ae:	2500      	movs	r5, #0
 800f3b0:	e794      	b.n	800f2dc <tcp_process+0x38>
          && (ackno == pcb->lastack + 1)) {
 800f3b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f3b4:	3201      	adds	r2, #1
 800f3b6:	4964      	ldr	r1, [pc, #400]	; (800f548 <tcp_process+0x2a4>)
 800f3b8:	6809      	ldr	r1, [r1, #0]
 800f3ba:	428a      	cmp	r2, r1
 800f3bc:	d1f3      	bne.n	800f3a6 <tcp_process+0x102>
        pcb->rcv_nxt = seqno + 1;
 800f3be:	4b5e      	ldr	r3, [pc, #376]	; (800f538 <tcp_process+0x294>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	1c5a      	adds	r2, r3, #1
 800f3c4:	6262      	str	r2, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f3c6:	62e2      	str	r2, [r4, #44]	; 0x2c
        pcb->lastack = ackno;
 800f3c8:	6461      	str	r1, [r4, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f3ca:	4a63      	ldr	r2, [pc, #396]	; (800f558 <tcp_process+0x2b4>)
 800f3cc:	6812      	ldr	r2, [r2, #0]
 800f3ce:	89d2      	ldrh	r2, [r2, #14]
 800f3d0:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f3d4:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f3d8:	3b01      	subs	r3, #1
 800f3da:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f3dc:	2304      	movs	r3, #4
 800f3de:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f3e0:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 800f3e2:	18e5      	adds	r5, r4, r3
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	f7fc f873 	bl	800b4d0 <ip4_route>
 800f3ea:	462a      	mov	r2, r5
 800f3ec:	4601      	mov	r1, r0
 800f3ee:	4630      	mov	r0, r6
 800f3f0:	f7ff f99c 	bl	800e72c <tcp_eff_send_mss_netif>
 800f3f4:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f3f6:	0042      	lsls	r2, r0, #1
 800f3f8:	f241 131c 	movw	r3, #4380	; 0x111c
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	bf38      	it	cc
 800f400:	4613      	movcc	r3, r2
 800f402:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
 800f406:	d92e      	bls.n	800f466 <tcp_process+0x1c2>
 800f408:	0083      	lsls	r3, r0, #2
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f410:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800f414:	2b00      	cmp	r3, #0
 800f416:	d030      	beq.n	800f47a <tcp_process+0x1d6>
        --pcb->snd_queuelen;
 800f418:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800f41c:	3b01      	subs	r3, #1
 800f41e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800f422:	6f25      	ldr	r5, [r4, #112]	; 0x70
        if (rseg == NULL) {
 800f424:	2d00      	cmp	r5, #0
 800f426:	d030      	beq.n	800f48a <tcp_process+0x1e6>
          pcb->unacked = rseg->next;
 800f428:	682b      	ldr	r3, [r5, #0]
 800f42a:	6723      	str	r3, [r4, #112]	; 0x70
        tcp_seg_free(rseg);
 800f42c:	4628      	mov	r0, r5
 800f42e:	f7fe facd 	bl	800d9cc <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800f432:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f434:	2b00      	cmp	r3, #0
 800f436:	d035      	beq.n	800f4a4 <tcp_process+0x200>
          pcb->rtime = 0;
 800f438:	2300      	movs	r3, #0
 800f43a:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800f43c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f440:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800f444:	2b00      	cmp	r3, #0
 800f446:	d031      	beq.n	800f4ac <tcp_process+0x208>
 800f448:	2200      	movs	r2, #0
 800f44a:	4621      	mov	r1, r4
 800f44c:	6920      	ldr	r0, [r4, #16]
 800f44e:	4798      	blx	r3
 800f450:	4605      	mov	r5, r0
        if (err == ERR_ABRT) {
 800f452:	f115 0f0d 	cmn.w	r5, #13
 800f456:	f43f af41 	beq.w	800f2dc <tcp_process+0x38>
        tcp_ack_now(pcb);
 800f45a:	8b63      	ldrh	r3, [r4, #26]
 800f45c:	f043 0302 	orr.w	r3, r3, #2
 800f460:	8363      	strh	r3, [r4, #26]
  return ERR_OK;
 800f462:	2500      	movs	r5, #0
        tcp_ack_now(pcb);
 800f464:	e73a      	b.n	800f2dc <tcp_process+0x38>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f466:	f241 131c 	movw	r3, #4380	; 0x111c
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d902      	bls.n	800f474 <tcp_process+0x1d0>
 800f46e:	0043      	lsls	r3, r0, #1
 800f470:	b29b      	uxth	r3, r3
 800f472:	e7cb      	b.n	800f40c <tcp_process+0x168>
 800f474:	f241 131c 	movw	r3, #4380	; 0x111c
 800f478:	e7c8      	b.n	800f40c <tcp_process+0x168>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f47a:	4b30      	ldr	r3, [pc, #192]	; (800f53c <tcp_process+0x298>)
 800f47c:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f480:	4936      	ldr	r1, [pc, #216]	; (800f55c <tcp_process+0x2b8>)
 800f482:	4830      	ldr	r0, [pc, #192]	; (800f544 <tcp_process+0x2a0>)
 800f484:	f002 fe72 	bl	801216c <iprintf>
 800f488:	e7c6      	b.n	800f418 <tcp_process+0x174>
          rseg = pcb->unsent;
 800f48a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f48c:	b115      	cbz	r5, 800f494 <tcp_process+0x1f0>
          pcb->unsent = rseg->next;
 800f48e:	682b      	ldr	r3, [r5, #0]
 800f490:	66e3      	str	r3, [r4, #108]	; 0x6c
 800f492:	e7cb      	b.n	800f42c <tcp_process+0x188>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f494:	4b29      	ldr	r3, [pc, #164]	; (800f53c <tcp_process+0x298>)
 800f496:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f49a:	4931      	ldr	r1, [pc, #196]	; (800f560 <tcp_process+0x2bc>)
 800f49c:	4829      	ldr	r0, [pc, #164]	; (800f544 <tcp_process+0x2a0>)
 800f49e:	f002 fe65 	bl	801216c <iprintf>
 800f4a2:	e7f4      	b.n	800f48e <tcp_process+0x1ea>
          pcb->rtime = -1;
 800f4a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4a8:	8623      	strh	r3, [r4, #48]	; 0x30
 800f4aa:	e7c9      	b.n	800f440 <tcp_process+0x19c>
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f4ac:	2500      	movs	r5, #0
 800f4ae:	e7d0      	b.n	800f452 <tcp_process+0x1ae>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4b0:	4b29      	ldr	r3, [pc, #164]	; (800f558 <tcp_process+0x2b4>)
 800f4b2:	6818      	ldr	r0, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4b4:	4b2b      	ldr	r3, [pc, #172]	; (800f564 <tcp_process+0x2c0>)
 800f4b6:	4a2c      	ldr	r2, [pc, #176]	; (800f568 <tcp_process+0x2c4>)
 800f4b8:	8815      	ldrh	r5, [r2, #0]
 800f4ba:	4a1f      	ldr	r2, [pc, #124]	; (800f538 <tcp_process+0x294>)
 800f4bc:	6812      	ldr	r2, [r2, #0]
 800f4be:	4922      	ldr	r1, [pc, #136]	; (800f548 <tcp_process+0x2a4>)
 800f4c0:	6809      	ldr	r1, [r1, #0]
 800f4c2:	8806      	ldrh	r6, [r0, #0]
 800f4c4:	9602      	str	r6, [sp, #8]
 800f4c6:	8840      	ldrh	r0, [r0, #2]
 800f4c8:	9001      	str	r0, [sp, #4]
 800f4ca:	1f18      	subs	r0, r3, #4
 800f4cc:	9000      	str	r0, [sp, #0]
 800f4ce:	442a      	add	r2, r5
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	f001 fcc7 	bl	8010e64 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f4d6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800f4da:	2b05      	cmp	r3, #5
 800f4dc:	d901      	bls.n	800f4e2 <tcp_process+0x23e>
  return ERR_OK;
 800f4de:	2500      	movs	r5, #0
 800f4e0:	e6fc      	b.n	800f2dc <tcp_process+0x38>
          pcb->rtime = 0;
 800f4e2:	2500      	movs	r5, #0
 800f4e4:	8625      	strh	r5, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	f001 fec4 	bl	8011274 <tcp_rexmit_rto>
 800f4ec:	e6f6      	b.n	800f2dc <tcp_process+0x38>
      if (flags & TCP_ACK) {
 800f4ee:	4b11      	ldr	r3, [pc, #68]	; (800f534 <tcp_process+0x290>)
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	f013 0f10 	tst.w	r3, #16
 800f4f6:	f000 808e 	beq.w	800f616 <tcp_process+0x372>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4fa:	4b13      	ldr	r3, [pc, #76]	; (800f548 <tcp_process+0x2a4>)
 800f4fc:	6819      	ldr	r1, [r3, #0]
 800f4fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f500:	1acb      	subs	r3, r1, r3
 800f502:	2b01      	cmp	r3, #1
 800f504:	d403      	bmi.n	800f50e <tcp_process+0x26a>
 800f506:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f508:	1acb      	subs	r3, r1, r3
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	dd2e      	ble.n	800f56c <tcp_process+0x2c8>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f50e:	4b12      	ldr	r3, [pc, #72]	; (800f558 <tcp_process+0x2b4>)
 800f510:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f512:	4b14      	ldr	r3, [pc, #80]	; (800f564 <tcp_process+0x2c0>)
 800f514:	4a14      	ldr	r2, [pc, #80]	; (800f568 <tcp_process+0x2c4>)
 800f516:	8815      	ldrh	r5, [r2, #0]
 800f518:	4a07      	ldr	r2, [pc, #28]	; (800f538 <tcp_process+0x294>)
 800f51a:	6812      	ldr	r2, [r2, #0]
 800f51c:	8806      	ldrh	r6, [r0, #0]
 800f51e:	9602      	str	r6, [sp, #8]
 800f520:	8840      	ldrh	r0, [r0, #2]
 800f522:	9001      	str	r0, [sp, #4]
 800f524:	1f18      	subs	r0, r3, #4
 800f526:	9000      	str	r0, [sp, #0]
 800f528:	442a      	add	r2, r5
 800f52a:	4620      	mov	r0, r4
 800f52c:	f001 fc9a 	bl	8010e64 <tcp_rst>
  return ERR_OK;
 800f530:	2500      	movs	r5, #0
 800f532:	e6d3      	b.n	800f2dc <tcp_process+0x38>
 800f534:	20006e44 	.word	0x20006e44
 800f538:	20006e64 	.word	0x20006e64
 800f53c:	08069858 	.word	0x08069858
 800f540:	080698b0 	.word	0x080698b0
 800f544:	0801335c 	.word	0x0801335c
 800f548:	20006e40 	.word	0x20006e40
 800f54c:	20006e60 	.word	0x20006e60
 800f550:	080698cc 	.word	0x080698cc
 800f554:	2000d850 	.word	0x2000d850
 800f558:	20006e6c 	.word	0x20006e6c
 800f55c:	080698ec 	.word	0x080698ec
 800f560:	08069904 	.word	0x08069904
 800f564:	200072f8 	.word	0x200072f8
 800f568:	20006e7a 	.word	0x20006e7a
          pcb->state = ESTABLISHED;
 800f56c:	2304      	movs	r3, #4
 800f56e:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800f570:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f572:	b1e3      	cbz	r3, 800f5ae <tcp_process+0x30a>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f574:	699b      	ldr	r3, [r3, #24]
 800f576:	b193      	cbz	r3, 800f59e <tcp_process+0x2fa>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f578:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f57a:	699b      	ldr	r3, [r3, #24]
 800f57c:	b1d3      	cbz	r3, 800f5b4 <tcp_process+0x310>
 800f57e:	2200      	movs	r2, #0
 800f580:	4621      	mov	r1, r4
 800f582:	6920      	ldr	r0, [r4, #16]
 800f584:	4798      	blx	r3
 800f586:	4605      	mov	r5, r0
          if (err != ERR_OK) {
 800f588:	b1bd      	cbz	r5, 800f5ba <tcp_process+0x316>
            if (err != ERR_ABRT) {
 800f58a:	f115 0f0d 	cmn.w	r5, #13
 800f58e:	f43f aea5 	beq.w	800f2dc <tcp_process+0x38>
              tcp_abort(pcb);
 800f592:	4620      	mov	r0, r4
 800f594:	f7fe ff96 	bl	800e4c4 <tcp_abort>
            return ERR_ABRT;
 800f598:	f06f 050c 	mvn.w	r5, #12
 800f59c:	e69e      	b.n	800f2dc <tcp_process+0x38>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f59e:	4b9d      	ldr	r3, [pc, #628]	; (800f814 <tcp_process+0x570>)
 800f5a0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f5a4:	499c      	ldr	r1, [pc, #624]	; (800f818 <tcp_process+0x574>)
 800f5a6:	489d      	ldr	r0, [pc, #628]	; (800f81c <tcp_process+0x578>)
 800f5a8:	f002 fde0 	bl	801216c <iprintf>
 800f5ac:	e7e4      	b.n	800f578 <tcp_process+0x2d4>
            err = ERR_VAL;
 800f5ae:	f06f 0505 	mvn.w	r5, #5
 800f5b2:	e7e9      	b.n	800f588 <tcp_process+0x2e4>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f5b4:	f06f 050f 	mvn.w	r5, #15
 800f5b8:	e7e6      	b.n	800f588 <tcp_process+0x2e4>
          tcp_receive(pcb);
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	f7ff fbac 	bl	800ed18 <tcp_receive>
          if (recv_acked != 0) {
 800f5c0:	4b97      	ldr	r3, [pc, #604]	; (800f820 <tcp_process+0x57c>)
 800f5c2:	881b      	ldrh	r3, [r3, #0]
 800f5c4:	b113      	cbz	r3, 800f5cc <tcp_process+0x328>
            recv_acked--;
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	4a95      	ldr	r2, [pc, #596]	; (800f820 <tcp_process+0x57c>)
 800f5ca:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f5cc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800f5ce:	0059      	lsls	r1, r3, #1
 800f5d0:	f241 121c 	movw	r2, #4380	; 0x111c
 800f5d4:	428a      	cmp	r2, r1
 800f5d6:	bf38      	it	cc
 800f5d8:	460a      	movcc	r2, r1
 800f5da:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800f5de:	d910      	bls.n	800f602 <tcp_process+0x35e>
 800f5e0:	009b      	lsls	r3, r3, #2
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800f5e8:	4b8e      	ldr	r3, [pc, #568]	; (800f824 <tcp_process+0x580>)
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	f013 0f20 	tst.w	r3, #32
 800f5f0:	f43f ae74 	beq.w	800f2dc <tcp_process+0x38>
            tcp_ack_now(pcb);
 800f5f4:	8b63      	ldrh	r3, [r4, #26]
 800f5f6:	f043 0302 	orr.w	r3, r3, #2
 800f5fa:	8363      	strh	r3, [r4, #26]
            pcb->state = CLOSE_WAIT;
 800f5fc:	2307      	movs	r3, #7
 800f5fe:	7523      	strb	r3, [r4, #20]
 800f600:	e66c      	b.n	800f2dc <tcp_process+0x38>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f602:	f241 121c 	movw	r2, #4380	; 0x111c
 800f606:	4291      	cmp	r1, r2
 800f608:	d902      	bls.n	800f610 <tcp_process+0x36c>
 800f60a:	005b      	lsls	r3, r3, #1
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	e7e9      	b.n	800f5e4 <tcp_process+0x340>
 800f610:	f241 131c 	movw	r3, #4380	; 0x111c
 800f614:	e7e6      	b.n	800f5e4 <tcp_process+0x340>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f616:	f013 0f02 	tst.w	r3, #2
 800f61a:	f000 80f1 	beq.w	800f800 <tcp_process+0x55c>
 800f61e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f620:	3b01      	subs	r3, #1
 800f622:	4a81      	ldr	r2, [pc, #516]	; (800f828 <tcp_process+0x584>)
 800f624:	6812      	ldr	r2, [r2, #0]
 800f626:	4293      	cmp	r3, r2
 800f628:	d001      	beq.n	800f62e <tcp_process+0x38a>
  return ERR_OK;
 800f62a:	2500      	movs	r5, #0
 800f62c:	e656      	b.n	800f2dc <tcp_process+0x38>
        tcp_rexmit(pcb);
 800f62e:	4620      	mov	r0, r4
 800f630:	f001 fb94 	bl	8010d5c <tcp_rexmit>
  return ERR_OK;
 800f634:	2500      	movs	r5, #0
 800f636:	e651      	b.n	800f2dc <tcp_process+0x38>
      tcp_receive(pcb);
 800f638:	4620      	mov	r0, r4
 800f63a:	f7ff fb6d 	bl	800ed18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f63e:	4b79      	ldr	r3, [pc, #484]	; (800f824 <tcp_process+0x580>)
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	f013 0f20 	tst.w	r3, #32
 800f646:	f000 80dd 	beq.w	800f804 <tcp_process+0x560>
        tcp_ack_now(pcb);
 800f64a:	8b63      	ldrh	r3, [r4, #26]
 800f64c:	f043 0302 	orr.w	r3, r3, #2
 800f650:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800f652:	2307      	movs	r3, #7
 800f654:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800f656:	2500      	movs	r5, #0
 800f658:	e640      	b.n	800f2dc <tcp_process+0x38>
      tcp_receive(pcb);
 800f65a:	4620      	mov	r0, r4
 800f65c:	f7ff fb5c 	bl	800ed18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f660:	4b70      	ldr	r3, [pc, #448]	; (800f824 <tcp_process+0x580>)
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	f013 0f20 	tst.w	r3, #32
 800f668:	d038      	beq.n	800f6dc <tcp_process+0x438>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f66a:	4b70      	ldr	r3, [pc, #448]	; (800f82c <tcp_process+0x588>)
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	f013 0f10 	tst.w	r3, #16
 800f672:	d004      	beq.n	800f67e <tcp_process+0x3da>
 800f674:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f676:	4b6e      	ldr	r3, [pc, #440]	; (800f830 <tcp_process+0x58c>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d007      	beq.n	800f68e <tcp_process+0x3ea>
          tcp_ack_now(pcb);
 800f67e:	8b63      	ldrh	r3, [r4, #26]
 800f680:	f043 0302 	orr.w	r3, r3, #2
 800f684:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800f686:	2308      	movs	r3, #8
 800f688:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800f68a:	2500      	movs	r5, #0
 800f68c:	e626      	b.n	800f2dc <tcp_process+0x38>
            pcb->unsent == NULL) {
 800f68e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f690:	2b00      	cmp	r3, #0
 800f692:	d1f4      	bne.n	800f67e <tcp_process+0x3da>
          tcp_ack_now(pcb);
 800f694:	8b63      	ldrh	r3, [r4, #26]
 800f696:	f043 0302 	orr.w	r3, r3, #2
 800f69a:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800f69c:	4620      	mov	r0, r4
 800f69e:	f7fe fa3b 	bl	800db18 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f6a2:	4b64      	ldr	r3, [pc, #400]	; (800f834 <tcp_process+0x590>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	429c      	cmp	r4, r3
 800f6a8:	d005      	beq.n	800f6b6 <tcp_process+0x412>
 800f6aa:	b153      	cbz	r3, 800f6c2 <tcp_process+0x41e>
 800f6ac:	68da      	ldr	r2, [r3, #12]
 800f6ae:	4294      	cmp	r4, r2
 800f6b0:	d005      	beq.n	800f6be <tcp_process+0x41a>
 800f6b2:	4613      	mov	r3, r2
 800f6b4:	e7f9      	b.n	800f6aa <tcp_process+0x406>
 800f6b6:	68da      	ldr	r2, [r3, #12]
 800f6b8:	4b5e      	ldr	r3, [pc, #376]	; (800f834 <tcp_process+0x590>)
 800f6ba:	601a      	str	r2, [r3, #0]
 800f6bc:	e001      	b.n	800f6c2 <tcp_process+0x41e>
 800f6be:	68e2      	ldr	r2, [r4, #12]
 800f6c0:	60da      	str	r2, [r3, #12]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	4b5c      	ldr	r3, [pc, #368]	; (800f838 <tcp_process+0x594>)
 800f6c6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f6c8:	230a      	movs	r3, #10
 800f6ca:	7523      	strb	r3, [r4, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f6cc:	4b5b      	ldr	r3, [pc, #364]	; (800f83c <tcp_process+0x598>)
 800f6ce:	681a      	ldr	r2, [r3, #0]
 800f6d0:	60e2      	str	r2, [r4, #12]
 800f6d2:	601c      	str	r4, [r3, #0]
 800f6d4:	f001 fefa 	bl	80114cc <tcp_timer_needed>
  return ERR_OK;
 800f6d8:	2500      	movs	r5, #0
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f6da:	e5ff      	b.n	800f2dc <tcp_process+0x38>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f6dc:	4b53      	ldr	r3, [pc, #332]	; (800f82c <tcp_process+0x588>)
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	f013 0f10 	tst.w	r3, #16
 800f6e4:	f000 8090 	beq.w	800f808 <tcp_process+0x564>
 800f6e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f6ea:	4b51      	ldr	r3, [pc, #324]	; (800f830 <tcp_process+0x58c>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d001      	beq.n	800f6f6 <tcp_process+0x452>
  return ERR_OK;
 800f6f2:	2500      	movs	r5, #0
 800f6f4:	e5f2      	b.n	800f2dc <tcp_process+0x38>
                 pcb->unsent == NULL) {
 800f6f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f6f8:	b10b      	cbz	r3, 800f6fe <tcp_process+0x45a>
  return ERR_OK;
 800f6fa:	2500      	movs	r5, #0
 800f6fc:	e5ee      	b.n	800f2dc <tcp_process+0x38>
        pcb->state = FIN_WAIT_2;
 800f6fe:	2306      	movs	r3, #6
 800f700:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800f702:	2500      	movs	r5, #0
 800f704:	e5ea      	b.n	800f2dc <tcp_process+0x38>
      tcp_receive(pcb);
 800f706:	4620      	mov	r0, r4
 800f708:	f7ff fb06 	bl	800ed18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f70c:	4b45      	ldr	r3, [pc, #276]	; (800f824 <tcp_process+0x580>)
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	f013 0f20 	tst.w	r3, #32
 800f714:	d101      	bne.n	800f71a <tcp_process+0x476>
  return ERR_OK;
 800f716:	2500      	movs	r5, #0
 800f718:	e5e0      	b.n	800f2dc <tcp_process+0x38>
        tcp_ack_now(pcb);
 800f71a:	8b63      	ldrh	r3, [r4, #26]
 800f71c:	f043 0302 	orr.w	r3, r3, #2
 800f720:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800f722:	4620      	mov	r0, r4
 800f724:	f7fe f9f8 	bl	800db18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f728:	4b42      	ldr	r3, [pc, #264]	; (800f834 <tcp_process+0x590>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	429c      	cmp	r4, r3
 800f72e:	d005      	beq.n	800f73c <tcp_process+0x498>
 800f730:	b153      	cbz	r3, 800f748 <tcp_process+0x4a4>
 800f732:	68da      	ldr	r2, [r3, #12]
 800f734:	4294      	cmp	r4, r2
 800f736:	d005      	beq.n	800f744 <tcp_process+0x4a0>
 800f738:	4613      	mov	r3, r2
 800f73a:	e7f9      	b.n	800f730 <tcp_process+0x48c>
 800f73c:	68da      	ldr	r2, [r3, #12]
 800f73e:	4b3d      	ldr	r3, [pc, #244]	; (800f834 <tcp_process+0x590>)
 800f740:	601a      	str	r2, [r3, #0]
 800f742:	e001      	b.n	800f748 <tcp_process+0x4a4>
 800f744:	68e2      	ldr	r2, [r4, #12]
 800f746:	60da      	str	r2, [r3, #12]
 800f748:	2201      	movs	r2, #1
 800f74a:	4b3b      	ldr	r3, [pc, #236]	; (800f838 <tcp_process+0x594>)
 800f74c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f74e:	230a      	movs	r3, #10
 800f750:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f752:	4b3a      	ldr	r3, [pc, #232]	; (800f83c <tcp_process+0x598>)
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	60e2      	str	r2, [r4, #12]
 800f758:	601c      	str	r4, [r3, #0]
 800f75a:	f001 feb7 	bl	80114cc <tcp_timer_needed>
  return ERR_OK;
 800f75e:	2500      	movs	r5, #0
 800f760:	e5bc      	b.n	800f2dc <tcp_process+0x38>
      tcp_receive(pcb);
 800f762:	4620      	mov	r0, r4
 800f764:	f7ff fad8 	bl	800ed18 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f768:	4b30      	ldr	r3, [pc, #192]	; (800f82c <tcp_process+0x588>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	f013 0f10 	tst.w	r3, #16
 800f770:	d04c      	beq.n	800f80c <tcp_process+0x568>
 800f772:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f774:	4b2e      	ldr	r3, [pc, #184]	; (800f830 <tcp_process+0x58c>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d001      	beq.n	800f780 <tcp_process+0x4dc>
  return ERR_OK;
 800f77c:	2500      	movs	r5, #0
 800f77e:	e5ad      	b.n	800f2dc <tcp_process+0x38>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f780:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f782:	b10b      	cbz	r3, 800f788 <tcp_process+0x4e4>
  return ERR_OK;
 800f784:	2500      	movs	r5, #0
 800f786:	e5a9      	b.n	800f2dc <tcp_process+0x38>
        tcp_pcb_purge(pcb);
 800f788:	4620      	mov	r0, r4
 800f78a:	f7fe f9c5 	bl	800db18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f78e:	4b29      	ldr	r3, [pc, #164]	; (800f834 <tcp_process+0x590>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	429c      	cmp	r4, r3
 800f794:	d005      	beq.n	800f7a2 <tcp_process+0x4fe>
 800f796:	b153      	cbz	r3, 800f7ae <tcp_process+0x50a>
 800f798:	68da      	ldr	r2, [r3, #12]
 800f79a:	4294      	cmp	r4, r2
 800f79c:	d005      	beq.n	800f7aa <tcp_process+0x506>
 800f79e:	4613      	mov	r3, r2
 800f7a0:	e7f9      	b.n	800f796 <tcp_process+0x4f2>
 800f7a2:	68da      	ldr	r2, [r3, #12]
 800f7a4:	4b23      	ldr	r3, [pc, #140]	; (800f834 <tcp_process+0x590>)
 800f7a6:	601a      	str	r2, [r3, #0]
 800f7a8:	e001      	b.n	800f7ae <tcp_process+0x50a>
 800f7aa:	68e2      	ldr	r2, [r4, #12]
 800f7ac:	60da      	str	r2, [r3, #12]
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	4b21      	ldr	r3, [pc, #132]	; (800f838 <tcp_process+0x594>)
 800f7b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f7b4:	230a      	movs	r3, #10
 800f7b6:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f7b8:	4b20      	ldr	r3, [pc, #128]	; (800f83c <tcp_process+0x598>)
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	60e2      	str	r2, [r4, #12]
 800f7be:	601c      	str	r4, [r3, #0]
 800f7c0:	f001 fe84 	bl	80114cc <tcp_timer_needed>
  return ERR_OK;
 800f7c4:	2500      	movs	r5, #0
 800f7c6:	e589      	b.n	800f2dc <tcp_process+0x38>
      tcp_receive(pcb);
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	f7ff faa5 	bl	800ed18 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f7ce:	4b17      	ldr	r3, [pc, #92]	; (800f82c <tcp_process+0x588>)
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	f013 0f10 	tst.w	r3, #16
 800f7d6:	d01b      	beq.n	800f810 <tcp_process+0x56c>
 800f7d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f7da:	4b15      	ldr	r3, [pc, #84]	; (800f830 <tcp_process+0x58c>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d001      	beq.n	800f7e6 <tcp_process+0x542>
  return ERR_OK;
 800f7e2:	2500      	movs	r5, #0
 800f7e4:	e57a      	b.n	800f2dc <tcp_process+0x38>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f7e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f7e8:	b10b      	cbz	r3, 800f7ee <tcp_process+0x54a>
  return ERR_OK;
 800f7ea:	2500      	movs	r5, #0
 800f7ec:	e576      	b.n	800f2dc <tcp_process+0x38>
        recv_flags |= TF_CLOSED;
 800f7ee:	4a0d      	ldr	r2, [pc, #52]	; (800f824 <tcp_process+0x580>)
 800f7f0:	7813      	ldrb	r3, [r2, #0]
 800f7f2:	f043 0310 	orr.w	r3, r3, #16
 800f7f6:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800f7f8:	2500      	movs	r5, #0
 800f7fa:	e56f      	b.n	800f2dc <tcp_process+0x38>
 800f7fc:	2500      	movs	r5, #0
 800f7fe:	e56d      	b.n	800f2dc <tcp_process+0x38>
 800f800:	2500      	movs	r5, #0
 800f802:	e56b      	b.n	800f2dc <tcp_process+0x38>
 800f804:	2500      	movs	r5, #0
 800f806:	e569      	b.n	800f2dc <tcp_process+0x38>
 800f808:	2500      	movs	r5, #0
 800f80a:	e567      	b.n	800f2dc <tcp_process+0x38>
 800f80c:	2500      	movs	r5, #0
 800f80e:	e565      	b.n	800f2dc <tcp_process+0x38>
 800f810:	2500      	movs	r5, #0
 800f812:	e563      	b.n	800f2dc <tcp_process+0x38>
 800f814:	08069858 	.word	0x08069858
 800f818:	08069918 	.word	0x08069918
 800f81c:	0801335c 	.word	0x0801335c
 800f820:	20006e58 	.word	0x20006e58
 800f824:	20006e60 	.word	0x20006e60
 800f828:	20006e64 	.word	0x20006e64
 800f82c:	20006e44 	.word	0x20006e44
 800f830:	20006e40 	.word	0x20006e40
 800f834:	2000d84c 	.word	0x2000d84c
 800f838:	2000d848 	.word	0x2000d848
 800f83c:	2000d85c 	.word	0x2000d85c

0800f840 <tcp_input>:
{
 800f840:	b570      	push	{r4, r5, r6, lr}
 800f842:	b084      	sub	sp, #16
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f844:	4604      	mov	r4, r0
 800f846:	b1f8      	cbz	r0, 800f888 <tcp_input+0x48>
  tcphdr = (struct tcp_hdr *)p->payload;
 800f848:	6862      	ldr	r2, [r4, #4]
 800f84a:	4b75      	ldr	r3, [pc, #468]	; (800fa20 <tcp_input+0x1e0>)
 800f84c:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800f84e:	8963      	ldrh	r3, [r4, #10]
 800f850:	2b13      	cmp	r3, #19
 800f852:	d914      	bls.n	800f87e <tcp_input+0x3e>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f854:	4b73      	ldr	r3, [pc, #460]	; (800fa24 <tcp_input+0x1e4>)
 800f856:	6819      	ldr	r1, [r3, #0]
 800f858:	6958      	ldr	r0, [r3, #20]
 800f85a:	f7fc f838 	bl	800b8ce <ip4_addr_isbroadcast_u32>
 800f85e:	b970      	cbnz	r0, 800f87e <tcp_input+0x3e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f860:	4b70      	ldr	r3, [pc, #448]	; (800fa24 <tcp_input+0x1e4>)
 800f862:	695b      	ldr	r3, [r3, #20]
 800f864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f868:	2be0      	cmp	r3, #224	; 0xe0
 800f86a:	d008      	beq.n	800f87e <tcp_input+0x3e>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800f86c:	8922      	ldrh	r2, [r4, #8]
 800f86e:	4b6e      	ldr	r3, [pc, #440]	; (800fa28 <tcp_input+0x1e8>)
 800f870:	1d19      	adds	r1, r3, #4
 800f872:	9100      	str	r1, [sp, #0]
 800f874:	2106      	movs	r1, #6
 800f876:	4620      	mov	r0, r4
 800f878:	f7f9 fd74 	bl	8009364 <ip_chksum_pseudo>
    if (chksum != 0) {
 800f87c:	b158      	cbz	r0, 800f896 <tcp_input+0x56>
  pbuf_free(p);
 800f87e:	4620      	mov	r0, r4
 800f880:	f7fd fb0a 	bl	800ce98 <pbuf_free>
}
 800f884:	b004      	add	sp, #16
 800f886:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f888:	4b68      	ldr	r3, [pc, #416]	; (800fa2c <tcp_input+0x1ec>)
 800f88a:	2283      	movs	r2, #131	; 0x83
 800f88c:	4968      	ldr	r1, [pc, #416]	; (800fa30 <tcp_input+0x1f0>)
 800f88e:	4869      	ldr	r0, [pc, #420]	; (800fa34 <tcp_input+0x1f4>)
 800f890:	f002 fc6c 	bl	801216c <iprintf>
 800f894:	e7d8      	b.n	800f848 <tcp_input+0x8>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f896:	4b62      	ldr	r3, [pc, #392]	; (800fa20 <tcp_input+0x1e0>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	8998      	ldrh	r0, [r3, #12]
 800f89c:	f7f9 fc4c 	bl	8009138 <lwip_htons>
 800f8a0:	f3c0 3107 	ubfx	r1, r0, #12, #8
 800f8a4:	0089      	lsls	r1, r1, #2
 800f8a6:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f8a8:	2913      	cmp	r1, #19
 800f8aa:	d9e8      	bls.n	800f87e <tcp_input+0x3e>
 800f8ac:	b28b      	uxth	r3, r1
 800f8ae:	8922      	ldrh	r2, [r4, #8]
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d8e4      	bhi.n	800f87e <tcp_input+0x3e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f8b4:	f1a3 0214 	sub.w	r2, r3, #20
 800f8b8:	b292      	uxth	r2, r2
 800f8ba:	485f      	ldr	r0, [pc, #380]	; (800fa38 <tcp_input+0x1f8>)
 800f8bc:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800f8be:	2500      	movs	r5, #0
 800f8c0:	485e      	ldr	r0, [pc, #376]	; (800fa3c <tcp_input+0x1fc>)
 800f8c2:	6005      	str	r5, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 800f8c4:	8960      	ldrh	r0, [r4, #10]
 800f8c6:	4283      	cmp	r3, r0
 800f8c8:	d92c      	bls.n	800f924 <tcp_input+0xe4>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f8ca:	6823      	ldr	r3, [r4, #0]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d065      	beq.n	800f99c <tcp_input+0x15c>
    pbuf_remove_header(p, TCP_HLEN);
 800f8d0:	2114      	movs	r1, #20
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	f7fd fa9a 	bl	800ce0c <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800f8d8:	8961      	ldrh	r1, [r4, #10]
 800f8da:	4b59      	ldr	r3, [pc, #356]	; (800fa40 <tcp_input+0x200>)
 800f8dc:	8019      	strh	r1, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f8de:	4b56      	ldr	r3, [pc, #344]	; (800fa38 <tcp_input+0x1f8>)
 800f8e0:	881d      	ldrh	r5, [r3, #0]
 800f8e2:	1a6d      	subs	r5, r5, r1
 800f8e4:	b2ad      	uxth	r5, r5
    pbuf_remove_header(p, tcphdr_opt1len);
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	f7fd fa90 	bl	800ce0c <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800f8ec:	6820      	ldr	r0, [r4, #0]
 800f8ee:	8943      	ldrh	r3, [r0, #10]
 800f8f0:	429d      	cmp	r5, r3
 800f8f2:	d8c4      	bhi.n	800f87e <tcp_input+0x3e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f8f4:	6842      	ldr	r2, [r0, #4]
 800f8f6:	4b51      	ldr	r3, [pc, #324]	; (800fa3c <tcp_input+0x1fc>)
 800f8f8:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800f8fa:	4629      	mov	r1, r5
 800f8fc:	f7fd fa86 	bl	800ce0c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f900:	8923      	ldrh	r3, [r4, #8]
 800f902:	1b5d      	subs	r5, r3, r5
 800f904:	8125      	strh	r5, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f906:	8963      	ldrh	r3, [r4, #10]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d14e      	bne.n	800f9aa <tcp_input+0x16a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f90c:	8922      	ldrh	r2, [r4, #8]
 800f90e:	6823      	ldr	r3, [r4, #0]
 800f910:	891b      	ldrh	r3, [r3, #8]
 800f912:	429a      	cmp	r2, r3
 800f914:	d00b      	beq.n	800f92e <tcp_input+0xee>
 800f916:	4b45      	ldr	r3, [pc, #276]	; (800fa2c <tcp_input+0x1ec>)
 800f918:	22e0      	movs	r2, #224	; 0xe0
 800f91a:	494a      	ldr	r1, [pc, #296]	; (800fa44 <tcp_input+0x204>)
 800f91c:	4845      	ldr	r0, [pc, #276]	; (800fa34 <tcp_input+0x1f4>)
 800f91e:	f002 fc25 	bl	801216c <iprintf>
 800f922:	e004      	b.n	800f92e <tcp_input+0xee>
    tcphdr_opt1len = tcphdr_optlen;
 800f924:	4b46      	ldr	r3, [pc, #280]	; (800fa40 <tcp_input+0x200>)
 800f926:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f928:	4620      	mov	r0, r4
 800f92a:	f7fd fa6f 	bl	800ce0c <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f92e:	4d3c      	ldr	r5, [pc, #240]	; (800fa20 <tcp_input+0x1e0>)
 800f930:	682e      	ldr	r6, [r5, #0]
 800f932:	8830      	ldrh	r0, [r6, #0]
 800f934:	f7f9 fc00 	bl	8009138 <lwip_htons>
 800f938:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f93a:	682e      	ldr	r6, [r5, #0]
 800f93c:	8870      	ldrh	r0, [r6, #2]
 800f93e:	f7f9 fbfb 	bl	8009138 <lwip_htons>
 800f942:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f944:	682e      	ldr	r6, [r5, #0]
 800f946:	6870      	ldr	r0, [r6, #4]
 800f948:	f7f9 fbfb 	bl	8009142 <lwip_htonl>
 800f94c:	6070      	str	r0, [r6, #4]
 800f94e:	4b3e      	ldr	r3, [pc, #248]	; (800fa48 <tcp_input+0x208>)
 800f950:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f952:	682e      	ldr	r6, [r5, #0]
 800f954:	68b0      	ldr	r0, [r6, #8]
 800f956:	f7f9 fbf4 	bl	8009142 <lwip_htonl>
 800f95a:	60b0      	str	r0, [r6, #8]
 800f95c:	4b3b      	ldr	r3, [pc, #236]	; (800fa4c <tcp_input+0x20c>)
 800f95e:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f960:	682e      	ldr	r6, [r5, #0]
 800f962:	89f0      	ldrh	r0, [r6, #14]
 800f964:	f7f9 fbe8 	bl	8009138 <lwip_htons>
 800f968:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800f96a:	682b      	ldr	r3, [r5, #0]
 800f96c:	8998      	ldrh	r0, [r3, #12]
 800f96e:	f7f9 fbe3 	bl	8009138 <lwip_htons>
 800f972:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800f976:	4b36      	ldr	r3, [pc, #216]	; (800fa50 <tcp_input+0x210>)
 800f978:	7018      	strb	r0, [r3, #0]
  tcplen = p->tot_len;
 800f97a:	8923      	ldrh	r3, [r4, #8]
 800f97c:	4a35      	ldr	r2, [pc, #212]	; (800fa54 <tcp_input+0x214>)
 800f97e:	8013      	strh	r3, [r2, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f980:	f010 0f03 	tst.w	r0, #3
 800f984:	d006      	beq.n	800f994 <tcp_input+0x154>
    tcplen++;
 800f986:	1c5a      	adds	r2, r3, #1
 800f988:	b292      	uxth	r2, r2
 800f98a:	4932      	ldr	r1, [pc, #200]	; (800fa54 <tcp_input+0x214>)
 800f98c:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 800f98e:	4293      	cmp	r3, r2
 800f990:	f63f af75 	bhi.w	800f87e <tcp_input+0x3e>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f994:	4b30      	ldr	r3, [pc, #192]	; (800fa58 <tcp_input+0x218>)
 800f996:	681d      	ldr	r5, [r3, #0]
  prev = NULL;
 800f998:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f99a:	e02a      	b.n	800f9f2 <tcp_input+0x1b2>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f99c:	4b23      	ldr	r3, [pc, #140]	; (800fa2c <tcp_input+0x1ec>)
 800f99e:	22c2      	movs	r2, #194	; 0xc2
 800f9a0:	492e      	ldr	r1, [pc, #184]	; (800fa5c <tcp_input+0x21c>)
 800f9a2:	4824      	ldr	r0, [pc, #144]	; (800fa34 <tcp_input+0x1f4>)
 800f9a4:	f002 fbe2 	bl	801216c <iprintf>
 800f9a8:	e792      	b.n	800f8d0 <tcp_input+0x90>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f9aa:	4b20      	ldr	r3, [pc, #128]	; (800fa2c <tcp_input+0x1ec>)
 800f9ac:	22df      	movs	r2, #223	; 0xdf
 800f9ae:	492c      	ldr	r1, [pc, #176]	; (800fa60 <tcp_input+0x220>)
 800f9b0:	4820      	ldr	r0, [pc, #128]	; (800fa34 <tcp_input+0x1f4>)
 800f9b2:	f002 fbdb 	bl	801216c <iprintf>
 800f9b6:	e7a9      	b.n	800f90c <tcp_input+0xcc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f9b8:	4b1c      	ldr	r3, [pc, #112]	; (800fa2c <tcp_input+0x1ec>)
 800f9ba:	22fb      	movs	r2, #251	; 0xfb
 800f9bc:	4929      	ldr	r1, [pc, #164]	; (800fa64 <tcp_input+0x224>)
 800f9be:	481d      	ldr	r0, [pc, #116]	; (800fa34 <tcp_input+0x1f4>)
 800f9c0:	f002 fbd4 	bl	801216c <iprintf>
 800f9c4:	e01a      	b.n	800f9fc <tcp_input+0x1bc>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f9c6:	4b19      	ldr	r3, [pc, #100]	; (800fa2c <tcp_input+0x1ec>)
 800f9c8:	22fc      	movs	r2, #252	; 0xfc
 800f9ca:	4927      	ldr	r1, [pc, #156]	; (800fa68 <tcp_input+0x228>)
 800f9cc:	4819      	ldr	r0, [pc, #100]	; (800fa34 <tcp_input+0x1f4>)
 800f9ce:	f002 fbcd 	bl	801216c <iprintf>
 800f9d2:	e016      	b.n	800fa02 <tcp_input+0x1c2>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f9d4:	4b15      	ldr	r3, [pc, #84]	; (800fa2c <tcp_input+0x1ec>)
 800f9d6:	22fd      	movs	r2, #253	; 0xfd
 800f9d8:	4924      	ldr	r1, [pc, #144]	; (800fa6c <tcp_input+0x22c>)
 800f9da:	4816      	ldr	r0, [pc, #88]	; (800fa34 <tcp_input+0x1f4>)
 800f9dc:	f002 fbc6 	bl	801216c <iprintf>
 800f9e0:	e012      	b.n	800fa08 <tcp_input+0x1c8>
    if (pcb->remote_port == tcphdr->src &&
 800f9e2:	8b29      	ldrh	r1, [r5, #24]
 800f9e4:	4b0e      	ldr	r3, [pc, #56]	; (800fa20 <tcp_input+0x1e0>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	881a      	ldrh	r2, [r3, #0]
 800f9ea:	4291      	cmp	r1, r2
 800f9ec:	d040      	beq.n	800fa70 <tcp_input+0x230>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9ee:	462e      	mov	r6, r5
 800f9f0:	68ed      	ldr	r5, [r5, #12]
 800f9f2:	2d00      	cmp	r5, #0
 800f9f4:	d065      	beq.n	800fac2 <tcp_input+0x282>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f9f6:	7d2b      	ldrb	r3, [r5, #20]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d0dd      	beq.n	800f9b8 <tcp_input+0x178>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f9fc:	7d2b      	ldrb	r3, [r5, #20]
 800f9fe:	2b0a      	cmp	r3, #10
 800fa00:	d0e1      	beq.n	800f9c6 <tcp_input+0x186>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fa02:	7d2b      	ldrb	r3, [r5, #20]
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d0e5      	beq.n	800f9d4 <tcp_input+0x194>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa08:	7a2a      	ldrb	r2, [r5, #8]
 800fa0a:	2a00      	cmp	r2, #0
 800fa0c:	d0e9      	beq.n	800f9e2 <tcp_input+0x1a2>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fa0e:	4b05      	ldr	r3, [pc, #20]	; (800fa24 <tcp_input+0x1e4>)
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fa16:	3301      	adds	r3, #1
 800fa18:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d1e7      	bne.n	800f9ee <tcp_input+0x1ae>
 800fa1e:	e7e0      	b.n	800f9e2 <tcp_input+0x1a2>
 800fa20:	20006e6c 	.word	0x20006e6c
 800fa24:	200072e4 	.word	0x200072e4
 800fa28:	200072f4 	.word	0x200072f4
 800fa2c:	08069858 	.word	0x08069858
 800fa30:	0806969c 	.word	0x0806969c
 800fa34:	0801335c 	.word	0x0801335c
 800fa38:	20006e78 	.word	0x20006e78
 800fa3c:	20006e74 	.word	0x20006e74
 800fa40:	20006e70 	.word	0x20006e70
 800fa44:	080696d0 	.word	0x080696d0
 800fa48:	20006e64 	.word	0x20006e64
 800fa4c:	20006e40 	.word	0x20006e40
 800fa50:	20006e44 	.word	0x20006e44
 800fa54:	20006e7a 	.word	0x20006e7a
 800fa58:	2000d84c 	.word	0x2000d84c
 800fa5c:	080696b4 	.word	0x080696b4
 800fa60:	080696c4 	.word	0x080696c4
 800fa64:	080696f0 	.word	0x080696f0
 800fa68:	08069718 	.word	0x08069718
 800fa6c:	08069744 	.word	0x08069744
        pcb->local_port == tcphdr->dest &&
 800fa70:	8aea      	ldrh	r2, [r5, #22]
 800fa72:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d1ba      	bne.n	800f9ee <tcp_input+0x1ae>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fa78:	686a      	ldr	r2, [r5, #4]
 800fa7a:	4b8f      	ldr	r3, [pc, #572]	; (800fcb8 <tcp_input+0x478>)
 800fa7c:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d1b5      	bne.n	800f9ee <tcp_input+0x1ae>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fa82:	682a      	ldr	r2, [r5, #0]
 800fa84:	4b8c      	ldr	r3, [pc, #560]	; (800fcb8 <tcp_input+0x478>)
 800fa86:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d1b0      	bne.n	800f9ee <tcp_input+0x1ae>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fa8c:	68eb      	ldr	r3, [r5, #12]
 800fa8e:	429d      	cmp	r5, r3
 800fa90:	d106      	bne.n	800faa0 <tcp_input+0x260>
 800fa92:	4b8a      	ldr	r3, [pc, #552]	; (800fcbc <tcp_input+0x47c>)
 800fa94:	f240 120d 	movw	r2, #269	; 0x10d
 800fa98:	4989      	ldr	r1, [pc, #548]	; (800fcc0 <tcp_input+0x480>)
 800fa9a:	488a      	ldr	r0, [pc, #552]	; (800fcc4 <tcp_input+0x484>)
 800fa9c:	f002 fb66 	bl	801216c <iprintf>
      if (prev != NULL) {
 800faa0:	b12e      	cbz	r6, 800faae <tcp_input+0x26e>
        prev->next = pcb->next;
 800faa2:	68eb      	ldr	r3, [r5, #12]
 800faa4:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800faa6:	4b88      	ldr	r3, [pc, #544]	; (800fcc8 <tcp_input+0x488>)
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	60ea      	str	r2, [r5, #12]
        tcp_active_pcbs = pcb;
 800faac:	601d      	str	r5, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800faae:	68eb      	ldr	r3, [r5, #12]
 800fab0:	429d      	cmp	r5, r3
 800fab2:	d106      	bne.n	800fac2 <tcp_input+0x282>
 800fab4:	4b81      	ldr	r3, [pc, #516]	; (800fcbc <tcp_input+0x47c>)
 800fab6:	f240 1215 	movw	r2, #277	; 0x115
 800faba:	4984      	ldr	r1, [pc, #528]	; (800fccc <tcp_input+0x48c>)
 800fabc:	4881      	ldr	r0, [pc, #516]	; (800fcc4 <tcp_input+0x484>)
 800fabe:	f002 fb55 	bl	801216c <iprintf>
  if (pcb == NULL) {
 800fac2:	2d00      	cmp	r5, #0
 800fac4:	d03f      	beq.n	800fb46 <tcp_input+0x306>
  if (pcb != NULL) {
 800fac6:	2d00      	cmp	r5, #0
 800fac8:	f000 8160 	beq.w	800fd8c <tcp_input+0x54c>
    inseg.next = NULL;
 800facc:	4a80      	ldr	r2, [pc, #512]	; (800fcd0 <tcp_input+0x490>)
 800face:	2300      	movs	r3, #0
 800fad0:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800fad2:	8921      	ldrh	r1, [r4, #8]
 800fad4:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800fad6:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fad8:	497e      	ldr	r1, [pc, #504]	; (800fcd4 <tcp_input+0x494>)
 800fada:	6809      	ldr	r1, [r1, #0]
 800fadc:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800fade:	4a7e      	ldr	r2, [pc, #504]	; (800fcd8 <tcp_input+0x498>)
 800fae0:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800fae2:	4a7e      	ldr	r2, [pc, #504]	; (800fcdc <tcp_input+0x49c>)
 800fae4:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800fae6:	4a7e      	ldr	r2, [pc, #504]	; (800fce0 <tcp_input+0x4a0>)
 800fae8:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800faea:	4b7e      	ldr	r3, [pc, #504]	; (800fce4 <tcp_input+0x4a4>)
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	f013 0f08 	tst.w	r3, #8
 800faf2:	d003      	beq.n	800fafc <tcp_input+0x2bc>
      p->flags |= PBUF_FLAG_PUSH;
 800faf4:	7b63      	ldrb	r3, [r4, #13]
 800faf6:	f043 0301 	orr.w	r3, r3, #1
 800fafa:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 800fafc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	f000 808c 	beq.w	800fc1c <tcp_input+0x3dc>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fb04:	4628      	mov	r0, r5
 800fb06:	f7fe fbbf 	bl	800e288 <tcp_process_refused_data>
 800fb0a:	f110 0f0d 	cmn.w	r0, #13
 800fb0e:	d007      	beq.n	800fb20 <tcp_input+0x2e0>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fb10:	6f6b      	ldr	r3, [r5, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	f000 8082 	beq.w	800fc1c <tcp_input+0x3dc>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fb18:	4b73      	ldr	r3, [pc, #460]	; (800fce8 <tcp_input+0x4a8>)
 800fb1a:	881b      	ldrh	r3, [r3, #0]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d07d      	beq.n	800fc1c <tcp_input+0x3dc>
        if (pcb->rcv_ann_wnd == 0) {
 800fb20:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d076      	beq.n	800fc14 <tcp_input+0x3d4>
    tcp_input_pcb = NULL;
 800fb26:	2300      	movs	r3, #0
 800fb28:	4a70      	ldr	r2, [pc, #448]	; (800fcec <tcp_input+0x4ac>)
 800fb2a:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800fb2c:	4a6a      	ldr	r2, [pc, #424]	; (800fcd8 <tcp_input+0x498>)
 800fb2e:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 800fb30:	4b67      	ldr	r3, [pc, #412]	; (800fcd0 <tcp_input+0x490>)
 800fb32:	6858      	ldr	r0, [r3, #4]
 800fb34:	2800      	cmp	r0, #0
 800fb36:	f43f aea5 	beq.w	800f884 <tcp_input+0x44>
      pbuf_free(inseg.p);
 800fb3a:	f7fd f9ad 	bl	800ce98 <pbuf_free>
      inseg.p = NULL;
 800fb3e:	2200      	movs	r2, #0
 800fb40:	4b63      	ldr	r3, [pc, #396]	; (800fcd0 <tcp_input+0x490>)
 800fb42:	605a      	str	r2, [r3, #4]
 800fb44:	e69e      	b.n	800f884 <tcp_input+0x44>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb46:	4b6a      	ldr	r3, [pc, #424]	; (800fcf0 <tcp_input+0x4b0>)
 800fb48:	681d      	ldr	r5, [r3, #0]
 800fb4a:	e006      	b.n	800fb5a <tcp_input+0x31a>
      if (pcb->remote_port == tcphdr->src &&
 800fb4c:	8b29      	ldrh	r1, [r5, #24]
 800fb4e:	4b61      	ldr	r3, [pc, #388]	; (800fcd4 <tcp_input+0x494>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	881a      	ldrh	r2, [r3, #0]
 800fb54:	4291      	cmp	r1, r2
 800fb56:	d017      	beq.n	800fb88 <tcp_input+0x348>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb58:	68ed      	ldr	r5, [r5, #12]
 800fb5a:	b355      	cbz	r5, 800fbb2 <tcp_input+0x372>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fb5c:	7d2b      	ldrb	r3, [r5, #20]
 800fb5e:	2b0a      	cmp	r3, #10
 800fb60:	d006      	beq.n	800fb70 <tcp_input+0x330>
 800fb62:	4b56      	ldr	r3, [pc, #344]	; (800fcbc <tcp_input+0x47c>)
 800fb64:	f240 121f 	movw	r2, #287	; 0x11f
 800fb68:	4962      	ldr	r1, [pc, #392]	; (800fcf4 <tcp_input+0x4b4>)
 800fb6a:	4856      	ldr	r0, [pc, #344]	; (800fcc4 <tcp_input+0x484>)
 800fb6c:	f002 fafe 	bl	801216c <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fb70:	7a2a      	ldrb	r2, [r5, #8]
 800fb72:	2a00      	cmp	r2, #0
 800fb74:	d0ea      	beq.n	800fb4c <tcp_input+0x30c>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fb76:	4b50      	ldr	r3, [pc, #320]	; (800fcb8 <tcp_input+0x478>)
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fb7e:	3301      	adds	r3, #1
 800fb80:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d1e8      	bne.n	800fb58 <tcp_input+0x318>
 800fb86:	e7e1      	b.n	800fb4c <tcp_input+0x30c>
          pcb->local_port == tcphdr->dest &&
 800fb88:	8aea      	ldrh	r2, [r5, #22]
 800fb8a:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d1e3      	bne.n	800fb58 <tcp_input+0x318>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fb90:	686a      	ldr	r2, [r5, #4]
 800fb92:	4b49      	ldr	r3, [pc, #292]	; (800fcb8 <tcp_input+0x478>)
 800fb94:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d1de      	bne.n	800fb58 <tcp_input+0x318>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fb9a:	682a      	ldr	r2, [r5, #0]
 800fb9c:	4b46      	ldr	r3, [pc, #280]	; (800fcb8 <tcp_input+0x478>)
 800fb9e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d1d9      	bne.n	800fb58 <tcp_input+0x318>
          tcp_timewait_input(pcb);
 800fba4:	4628      	mov	r0, r5
 800fba6:	f7fe ff59 	bl	800ea5c <tcp_timewait_input>
        pbuf_free(p);
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f7fd f974 	bl	800ce98 <pbuf_free>
        return;
 800fbb0:	e668      	b.n	800f884 <tcp_input+0x44>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fbb2:	4b51      	ldr	r3, [pc, #324]	; (800fcf8 <tcp_input+0x4b8>)
 800fbb4:	681e      	ldr	r6, [r3, #0]
 800fbb6:	4630      	mov	r0, r6
    prev = NULL;
 800fbb8:	4629      	mov	r1, r5
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fbba:	e007      	b.n	800fbcc <tcp_input+0x38c>
      if (lpcb->local_port == tcphdr->dest) {
 800fbbc:	8ac2      	ldrh	r2, [r0, #22]
 800fbbe:	4b45      	ldr	r3, [pc, #276]	; (800fcd4 <tcp_input+0x494>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	885b      	ldrh	r3, [r3, #2]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d00e      	beq.n	800fbe6 <tcp_input+0x3a6>
 800fbc8:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fbca:	68c0      	ldr	r0, [r0, #12]
 800fbcc:	b198      	cbz	r0, 800fbf6 <tcp_input+0x3b6>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fbce:	7a02      	ldrb	r2, [r0, #8]
 800fbd0:	2a00      	cmp	r2, #0
 800fbd2:	d0f3      	beq.n	800fbbc <tcp_input+0x37c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fbd4:	4b38      	ldr	r3, [pc, #224]	; (800fcb8 <tcp_input+0x478>)
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fbdc:	3301      	adds	r3, #1
 800fbde:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d1f1      	bne.n	800fbc8 <tcp_input+0x388>
 800fbe4:	e7ea      	b.n	800fbbc <tcp_input+0x37c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fbe6:	6803      	ldr	r3, [r0, #0]
 800fbe8:	4a33      	ldr	r2, [pc, #204]	; (800fcb8 <tcp_input+0x478>)
 800fbea:	6952      	ldr	r2, [r2, #20]
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d002      	beq.n	800fbf6 <tcp_input+0x3b6>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fbf0:	b108      	cbz	r0, 800fbf6 <tcp_input+0x3b6>
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d1e8      	bne.n	800fbc8 <tcp_input+0x388>
    if (lpcb != NULL) {
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	f43f af65 	beq.w	800fac6 <tcp_input+0x286>
      if (prev != NULL) {
 800fbfc:	b121      	cbz	r1, 800fc08 <tcp_input+0x3c8>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fbfe:	68c3      	ldr	r3, [r0, #12]
 800fc00:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fc02:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fc04:	4b3c      	ldr	r3, [pc, #240]	; (800fcf8 <tcp_input+0x4b8>)
 800fc06:	6018      	str	r0, [r3, #0]
        tcp_listen_input(lpcb);
 800fc08:	f7fe ff82 	bl	800eb10 <tcp_listen_input>
      pbuf_free(p);
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	f7fd f943 	bl	800ce98 <pbuf_free>
      return;
 800fc12:	e637      	b.n	800f884 <tcp_input+0x44>
          tcp_send_empty_ack(pcb);
 800fc14:	4628      	mov	r0, r5
 800fc16:	f001 f96d 	bl	8010ef4 <tcp_send_empty_ack>
 800fc1a:	e784      	b.n	800fb26 <tcp_input+0x2e6>
    tcp_input_pcb = pcb;
 800fc1c:	4b33      	ldr	r3, [pc, #204]	; (800fcec <tcp_input+0x4ac>)
 800fc1e:	601d      	str	r5, [r3, #0]
    err = tcp_process(pcb);
 800fc20:	4628      	mov	r0, r5
 800fc22:	f7ff fb3f 	bl	800f2a4 <tcp_process>
    if (err != ERR_ABRT) {
 800fc26:	f110 0f0d 	cmn.w	r0, #13
 800fc2a:	f43f af7c 	beq.w	800fb26 <tcp_input+0x2e6>
      if (recv_flags & TF_RESET) {
 800fc2e:	4b2b      	ldr	r3, [pc, #172]	; (800fcdc <tcp_input+0x49c>)
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	f013 0f08 	tst.w	r3, #8
 800fc36:	d00e      	beq.n	800fc56 <tcp_input+0x416>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fc38:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800fc3c:	b11b      	cbz	r3, 800fc46 <tcp_input+0x406>
 800fc3e:	f06f 010d 	mvn.w	r1, #13
 800fc42:	6928      	ldr	r0, [r5, #16]
 800fc44:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fc46:	4629      	mov	r1, r5
 800fc48:	481f      	ldr	r0, [pc, #124]	; (800fcc8 <tcp_input+0x488>)
 800fc4a:	f7fe f9d3 	bl	800dff4 <tcp_pcb_remove>
        tcp_free(pcb);
 800fc4e:	4628      	mov	r0, r5
 800fc50:	f7fd fd50 	bl	800d6f4 <tcp_free>
 800fc54:	e767      	b.n	800fb26 <tcp_input+0x2e6>
        if (recv_acked > 0) {
 800fc56:	4b22      	ldr	r3, [pc, #136]	; (800fce0 <tcp_input+0x4a0>)
 800fc58:	881a      	ldrh	r2, [r3, #0]
 800fc5a:	b15a      	cbz	r2, 800fc74 <tcp_input+0x434>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fc5c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800fc5e:	b343      	cbz	r3, 800fcb2 <tcp_input+0x472>
 800fc60:	4629      	mov	r1, r5
 800fc62:	6928      	ldr	r0, [r5, #16]
 800fc64:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800fc66:	f110 0f0d 	cmn.w	r0, #13
 800fc6a:	f43f af5c 	beq.w	800fb26 <tcp_input+0x2e6>
          recv_acked = 0;
 800fc6e:	2200      	movs	r2, #0
 800fc70:	4b1b      	ldr	r3, [pc, #108]	; (800fce0 <tcp_input+0x4a0>)
 800fc72:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fc74:	4628      	mov	r0, r5
 800fc76:	f7fe fec1 	bl	800e9fc <tcp_input_delayed_close>
 800fc7a:	2800      	cmp	r0, #0
 800fc7c:	f47f af53 	bne.w	800fb26 <tcp_input+0x2e6>
        if (recv_data != NULL) {
 800fc80:	4b15      	ldr	r3, [pc, #84]	; (800fcd8 <tcp_input+0x498>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d04c      	beq.n	800fd22 <tcp_input+0x4e2>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fc88:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fc8a:	b133      	cbz	r3, 800fc9a <tcp_input+0x45a>
 800fc8c:	4b0b      	ldr	r3, [pc, #44]	; (800fcbc <tcp_input+0x47c>)
 800fc8e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fc92:	491a      	ldr	r1, [pc, #104]	; (800fcfc <tcp_input+0x4bc>)
 800fc94:	480b      	ldr	r0, [pc, #44]	; (800fcc4 <tcp_input+0x484>)
 800fc96:	f002 fa69 	bl	801216c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fc9a:	8b6b      	ldrh	r3, [r5, #26]
 800fc9c:	f013 0f10 	tst.w	r3, #16
 800fca0:	d02e      	beq.n	800fd00 <tcp_input+0x4c0>
            pbuf_free(recv_data);
 800fca2:	4b0d      	ldr	r3, [pc, #52]	; (800fcd8 <tcp_input+0x498>)
 800fca4:	6818      	ldr	r0, [r3, #0]
 800fca6:	f7fd f8f7 	bl	800ce98 <pbuf_free>
            tcp_abort(pcb);
 800fcaa:	4628      	mov	r0, r5
 800fcac:	f7fe fc0a 	bl	800e4c4 <tcp_abort>
            goto aborted;
 800fcb0:	e739      	b.n	800fb26 <tcp_input+0x2e6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fcb2:	2000      	movs	r0, #0
 800fcb4:	e7d7      	b.n	800fc66 <tcp_input+0x426>
 800fcb6:	bf00      	nop
 800fcb8:	200072e4 	.word	0x200072e4
 800fcbc:	08069858 	.word	0x08069858
 800fcc0:	0806976c 	.word	0x0806976c
 800fcc4:	0801335c 	.word	0x0801335c
 800fcc8:	2000d84c 	.word	0x2000d84c
 800fccc:	08069798 	.word	0x08069798
 800fcd0:	20006e48 	.word	0x20006e48
 800fcd4:	20006e6c 	.word	0x20006e6c
 800fcd8:	20006e5c 	.word	0x20006e5c
 800fcdc:	20006e60 	.word	0x20006e60
 800fce0:	20006e58 	.word	0x20006e58
 800fce4:	20006e44 	.word	0x20006e44
 800fce8:	20006e7a 	.word	0x20006e7a
 800fcec:	2000d860 	.word	0x2000d860
 800fcf0:	2000d85c 	.word	0x2000d85c
 800fcf4:	080697c4 	.word	0x080697c4
 800fcf8:	2000d854 	.word	0x2000d854
 800fcfc:	080697f4 	.word	0x080697f4
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fd00:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 800fd04:	b32c      	cbz	r4, 800fd52 <tcp_input+0x512>
 800fd06:	2300      	movs	r3, #0
 800fd08:	4a30      	ldr	r2, [pc, #192]	; (800fdcc <tcp_input+0x58c>)
 800fd0a:	6812      	ldr	r2, [r2, #0]
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	6928      	ldr	r0, [r5, #16]
 800fd10:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 800fd12:	f110 0f0d 	cmn.w	r0, #13
 800fd16:	f43f af06 	beq.w	800fb26 <tcp_input+0x2e6>
          if (err != ERR_OK) {
 800fd1a:	b110      	cbz	r0, 800fd22 <tcp_input+0x4e2>
            pcb->refused_data = recv_data;
 800fd1c:	4b2b      	ldr	r3, [pc, #172]	; (800fdcc <tcp_input+0x58c>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	676b      	str	r3, [r5, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800fd22:	4b2b      	ldr	r3, [pc, #172]	; (800fdd0 <tcp_input+0x590>)
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	f013 0f20 	tst.w	r3, #32
 800fd2a:	d005      	beq.n	800fd38 <tcp_input+0x4f8>
          if (pcb->refused_data != NULL) {
 800fd2c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fd2e:	b1c3      	cbz	r3, 800fd62 <tcp_input+0x522>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fd30:	7b5a      	ldrb	r2, [r3, #13]
 800fd32:	f042 0220 	orr.w	r2, r2, #32
 800fd36:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800fd38:	2200      	movs	r2, #0
 800fd3a:	4b26      	ldr	r3, [pc, #152]	; (800fdd4 <tcp_input+0x594>)
 800fd3c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fd3e:	4628      	mov	r0, r5
 800fd40:	f7fe fe5c 	bl	800e9fc <tcp_input_delayed_close>
 800fd44:	2800      	cmp	r0, #0
 800fd46:	f47f aeee 	bne.w	800fb26 <tcp_input+0x2e6>
        tcp_output(pcb);
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	f001 f90e 	bl	8010f6c <tcp_output>
 800fd50:	e6e9      	b.n	800fb26 <tcp_input+0x2e6>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fd52:	2300      	movs	r3, #0
 800fd54:	4a1d      	ldr	r2, [pc, #116]	; (800fdcc <tcp_input+0x58c>)
 800fd56:	6812      	ldr	r2, [r2, #0]
 800fd58:	4629      	mov	r1, r5
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7fe fa70 	bl	800e240 <tcp_recv_null>
 800fd60:	e7d7      	b.n	800fd12 <tcp_input+0x4d2>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fd62:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800fd64:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d001      	beq.n	800fd70 <tcp_input+0x530>
              pcb->rcv_wnd++;
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800fd70:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 800fd74:	b144      	cbz	r4, 800fd88 <tcp_input+0x548>
 800fd76:	2300      	movs	r3, #0
 800fd78:	461a      	mov	r2, r3
 800fd7a:	4629      	mov	r1, r5
 800fd7c:	6928      	ldr	r0, [r5, #16]
 800fd7e:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 800fd80:	f110 0f0d 	cmn.w	r0, #13
 800fd84:	d1d8      	bne.n	800fd38 <tcp_input+0x4f8>
 800fd86:	e6ce      	b.n	800fb26 <tcp_input+0x2e6>
            TCP_EVENT_CLOSED(pcb, err);
 800fd88:	2000      	movs	r0, #0
 800fd8a:	e7f9      	b.n	800fd80 <tcp_input+0x540>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fd8c:	4b12      	ldr	r3, [pc, #72]	; (800fdd8 <tcp_input+0x598>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	8998      	ldrh	r0, [r3, #12]
 800fd92:	f7f9 f9d1 	bl	8009138 <lwip_htons>
 800fd96:	f010 0f04 	tst.w	r0, #4
 800fd9a:	d112      	bne.n	800fdc2 <tcp_input+0x582>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd9c:	4b0e      	ldr	r3, [pc, #56]	; (800fdd8 <tcp_input+0x598>)
 800fd9e:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fda0:	4b0e      	ldr	r3, [pc, #56]	; (800fddc <tcp_input+0x59c>)
 800fda2:	4a0f      	ldr	r2, [pc, #60]	; (800fde0 <tcp_input+0x5a0>)
 800fda4:	8810      	ldrh	r0, [r2, #0]
 800fda6:	4a0f      	ldr	r2, [pc, #60]	; (800fde4 <tcp_input+0x5a4>)
 800fda8:	6812      	ldr	r2, [r2, #0]
 800fdaa:	880d      	ldrh	r5, [r1, #0]
 800fdac:	9502      	str	r5, [sp, #8]
 800fdae:	8849      	ldrh	r1, [r1, #2]
 800fdb0:	9101      	str	r1, [sp, #4]
 800fdb2:	1f19      	subs	r1, r3, #4
 800fdb4:	9100      	str	r1, [sp, #0]
 800fdb6:	4402      	add	r2, r0
 800fdb8:	490b      	ldr	r1, [pc, #44]	; (800fde8 <tcp_input+0x5a8>)
 800fdba:	6809      	ldr	r1, [r1, #0]
 800fdbc:	2000      	movs	r0, #0
 800fdbe:	f001 f851 	bl	8010e64 <tcp_rst>
    pbuf_free(p);
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	f7fd f868 	bl	800ce98 <pbuf_free>
 800fdc8:	e55c      	b.n	800f884 <tcp_input+0x44>
 800fdca:	bf00      	nop
 800fdcc:	20006e5c 	.word	0x20006e5c
 800fdd0:	20006e60 	.word	0x20006e60
 800fdd4:	2000d860 	.word	0x2000d860
 800fdd8:	20006e6c 	.word	0x20006e6c
 800fddc:	200072f8 	.word	0x200072f8
 800fde0:	20006e7a 	.word	0x20006e7a
 800fde4:	20006e64 	.word	0x20006e64
 800fde8:	20006e40 	.word	0x20006e40

0800fdec <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800fdec:	4a02      	ldr	r2, [pc, #8]	; (800fdf8 <tcp_trigger_input_pcb_close+0xc>)
 800fdee:	7813      	ldrb	r3, [r2, #0]
 800fdf0:	f043 0310 	orr.w	r3, r3, #16
 800fdf4:	7013      	strb	r3, [r2, #0]
 800fdf6:	4770      	bx	lr
 800fdf8:	20006e60 	.word	0x20006e60

0800fdfc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800fdfc:	b538      	push	{r3, r4, r5, lr}
 800fdfe:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800fe00:	4604      	mov	r4, r0
 800fe02:	b1b8      	cbz	r0, 800fe34 <tcp_write_checks+0x38>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800fe04:	7d23      	ldrb	r3, [r4, #20]
 800fe06:	2b04      	cmp	r3, #4
 800fe08:	d005      	beq.n	800fe16 <tcp_write_checks+0x1a>
 800fe0a:	2b07      	cmp	r3, #7
 800fe0c:	d003      	beq.n	800fe16 <tcp_write_checks+0x1a>
      (pcb->state != CLOSE_WAIT) &&
 800fe0e:	2b02      	cmp	r3, #2
 800fe10:	d001      	beq.n	800fe16 <tcp_write_checks+0x1a>
      (pcb->state != SYN_SENT) &&
 800fe12:	2b03      	cmp	r3, #3
 800fe14:	d141      	bne.n	800fe9a <tcp_write_checks+0x9e>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 800fe16:	2d00      	cmp	r5, #0
 800fe18:	d042      	beq.n	800fea0 <tcp_write_checks+0xa4>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800fe1a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800fe1e:	429d      	cmp	r5, r3
 800fe20:	d810      	bhi.n	800fe44 <tcp_write_checks+0x48>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800fe22:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800fe26:	2b07      	cmp	r3, #7
 800fe28:	d813      	bhi.n	800fe52 <tcp_write_checks+0x56>
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 800fe2a:	b333      	cbz	r3, 800fe7a <tcp_write_checks+0x7e>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800fe2c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fe2e:	b1bb      	cbz	r3, 800fe60 <tcp_write_checks+0x64>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800fe30:	2000      	movs	r0, #0
 800fe32:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800fe34:	4b1b      	ldr	r3, [pc, #108]	; (800fea4 <tcp_write_checks+0xa8>)
 800fe36:	f240 1233 	movw	r2, #307	; 0x133
 800fe3a:	491b      	ldr	r1, [pc, #108]	; (800fea8 <tcp_write_checks+0xac>)
 800fe3c:	481b      	ldr	r0, [pc, #108]	; (800feac <tcp_write_checks+0xb0>)
 800fe3e:	f002 f995 	bl	801216c <iprintf>
 800fe42:	e7df      	b.n	800fe04 <tcp_write_checks+0x8>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fe44:	8b63      	ldrh	r3, [r4, #26]
 800fe46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe4a:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800fe4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe50:	bd38      	pop	{r3, r4, r5, pc}
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fe52:	8b63      	ldrh	r3, [r4, #26]
 800fe54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe58:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800fe5a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe5e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800fe60:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fe62:	b10b      	cbz	r3, 800fe68 <tcp_write_checks+0x6c>
  return ERR_OK;
 800fe64:	2000      	movs	r0, #0
 800fe66:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800fe68:	4b0e      	ldr	r3, [pc, #56]	; (800fea4 <tcp_write_checks+0xa8>)
 800fe6a:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800fe6e:	4910      	ldr	r1, [pc, #64]	; (800feb0 <tcp_write_checks+0xb4>)
 800fe70:	480e      	ldr	r0, [pc, #56]	; (800feac <tcp_write_checks+0xb0>)
 800fe72:	f002 f97b 	bl	801216c <iprintf>
  return ERR_OK;
 800fe76:	2000      	movs	r0, #0
 800fe78:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800fe7a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fe7c:	b143      	cbz	r3, 800fe90 <tcp_write_checks+0x94>
 800fe7e:	4b09      	ldr	r3, [pc, #36]	; (800fea4 <tcp_write_checks+0xa8>)
 800fe80:	f240 1259 	movw	r2, #345	; 0x159
 800fe84:	490b      	ldr	r1, [pc, #44]	; (800feb4 <tcp_write_checks+0xb8>)
 800fe86:	4809      	ldr	r0, [pc, #36]	; (800feac <tcp_write_checks+0xb0>)
 800fe88:	f002 f970 	bl	801216c <iprintf>
  return ERR_OK;
 800fe8c:	2000      	movs	r0, #0
 800fe8e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800fe90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d1f3      	bne.n	800fe7e <tcp_write_checks+0x82>
  return ERR_OK;
 800fe96:	2000      	movs	r0, #0
}
 800fe98:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_CONN;
 800fe9a:	f06f 000a 	mvn.w	r0, #10
 800fe9e:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 800fea0:	2000      	movs	r0, #0
 800fea2:	bd38      	pop	{r3, r4, r5, pc}
 800fea4:	0806a134 	.word	0x0806a134
 800fea8:	0806a170 	.word	0x0806a170
 800feac:	0801335c 	.word	0x0801335c
 800feb0:	0806a190 	.word	0x0806a190
 800feb4:	0806a1cc 	.word	0x0806a1cc

0800feb8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800feb8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800feba:	4604      	mov	r4, r0
 800febc:	b128      	cbz	r0, 800feca <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800febe:	6863      	ldr	r3, [r4, #4]
 800fec0:	7b9b      	ldrb	r3, [r3, #14]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d009      	beq.n	800feda <tcp_output_segment_busy+0x22>
    /* other reference found */
    return 1;
 800fec6:	2001      	movs	r0, #1
 800fec8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800feca:	4b05      	ldr	r3, [pc, #20]	; (800fee0 <tcp_output_segment_busy+0x28>)
 800fecc:	f240 529a 	movw	r2, #1434	; 0x59a
 800fed0:	4904      	ldr	r1, [pc, #16]	; (800fee4 <tcp_output_segment_busy+0x2c>)
 800fed2:	4805      	ldr	r0, [pc, #20]	; (800fee8 <tcp_output_segment_busy+0x30>)
 800fed4:	f002 f94a 	bl	801216c <iprintf>
 800fed8:	e7f1      	b.n	800febe <tcp_output_segment_busy+0x6>
  }
  /* no other references found */
  return 0;
 800feda:	2000      	movs	r0, #0
}
 800fedc:	bd10      	pop	{r4, pc}
 800fede:	bf00      	nop
 800fee0:	0806a134 	.word	0x0806a134
 800fee4:	08069d3c 	.word	0x08069d3c
 800fee8:	0801335c 	.word	0x0801335c

0800feec <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800feec:	b538      	push	{r3, r4, r5, lr}
 800feee:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fef0:	460d      	mov	r5, r1
 800fef2:	b191      	cbz	r1, 800ff1a <tcp_output_fill_options+0x2e>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fef4:	686b      	ldr	r3, [r5, #4]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fef6:	f103 0114 	add.w	r1, r3, #20
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fefa:	f014 0f01 	tst.w	r4, #1
 800fefe:	d014      	beq.n	800ff2a <tcp_output_fill_options+0x3e>
 800ff00:	2204      	movs	r2, #4
 800ff02:	3214      	adds	r2, #20
 800ff04:	4413      	add	r3, r2
 800ff06:	4299      	cmp	r1, r3
 800ff08:	d006      	beq.n	800ff18 <tcp_output_fill_options+0x2c>
 800ff0a:	4b09      	ldr	r3, [pc, #36]	; (800ff30 <tcp_output_fill_options+0x44>)
 800ff0c:	f240 7275 	movw	r2, #1909	; 0x775
 800ff10:	4908      	ldr	r1, [pc, #32]	; (800ff34 <tcp_output_fill_options+0x48>)
 800ff12:	4809      	ldr	r0, [pc, #36]	; (800ff38 <tcp_output_fill_options+0x4c>)
 800ff14:	f002 f92a 	bl	801216c <iprintf>
 800ff18:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ff1a:	4b05      	ldr	r3, [pc, #20]	; (800ff30 <tcp_output_fill_options+0x44>)
 800ff1c:	f240 7256 	movw	r2, #1878	; 0x756
 800ff20:	4906      	ldr	r1, [pc, #24]	; (800ff3c <tcp_output_fill_options+0x50>)
 800ff22:	4805      	ldr	r0, [pc, #20]	; (800ff38 <tcp_output_fill_options+0x4c>)
 800ff24:	f002 f922 	bl	801216c <iprintf>
 800ff28:	e7e4      	b.n	800fef4 <tcp_output_fill_options+0x8>
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	e7e9      	b.n	800ff02 <tcp_output_fill_options+0x16>
 800ff2e:	bf00      	nop
 800ff30:	0806a134 	.word	0x0806a134
 800ff34:	08069cc4 	.word	0x08069cc4
 800ff38:	0801335c 	.word	0x0801335c
 800ff3c:	08069c9c 	.word	0x08069c9c

0800ff40 <tcp_pbuf_prealloc>:
{
 800ff40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff44:	4680      	mov	r8, r0
 800ff46:	460c      	mov	r4, r1
 800ff48:	4615      	mov	r5, r2
 800ff4a:	9f08      	ldr	r7, [sp, #32]
 800ff4c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ff50:	461e      	mov	r6, r3
 800ff52:	b1cb      	cbz	r3, 800ff88 <tcp_pbuf_prealloc+0x48>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ff54:	b1ff      	cbz	r7, 800ff96 <tcp_pbuf_prealloc+0x56>
  if (length < max_length) {
 800ff56:	42ac      	cmp	r4, r5
 800ff58:	d229      	bcs.n	800ffae <tcp_pbuf_prealloc+0x6e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ff5a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ff5e:	f013 0f02 	tst.w	r3, #2
 800ff62:	d108      	bne.n	800ff76 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
 800ff64:	8b7b      	ldrh	r3, [r7, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ff66:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ff6a:	d139      	bne.n	800ffe0 <tcp_pbuf_prealloc+0xa0>
        (!(pcb->flags & TF_NODELAY) &&
 800ff6c:	f1b9 0f00 	cmp.w	r9, #0
 800ff70:	d001      	beq.n	800ff76 <tcp_pbuf_prealloc+0x36>
          pcb->unsent != NULL ||
 800ff72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
         (!first_seg ||
 800ff74:	b1b3      	cbz	r3, 800ffa4 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ff76:	f204 51b7 	addw	r1, r4, #1463	; 0x5b7
 800ff7a:	f021 0103 	bic.w	r1, r1, #3
 800ff7e:	428d      	cmp	r5, r1
 800ff80:	bf28      	it	cs
 800ff82:	460d      	movcs	r5, r1
 800ff84:	b2a9      	uxth	r1, r5
 800ff86:	e013      	b.n	800ffb0 <tcp_pbuf_prealloc+0x70>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ff88:	4b16      	ldr	r3, [pc, #88]	; (800ffe4 <tcp_pbuf_prealloc+0xa4>)
 800ff8a:	22e8      	movs	r2, #232	; 0xe8
 800ff8c:	4916      	ldr	r1, [pc, #88]	; (800ffe8 <tcp_pbuf_prealloc+0xa8>)
 800ff8e:	4817      	ldr	r0, [pc, #92]	; (800ffec <tcp_pbuf_prealloc+0xac>)
 800ff90:	f002 f8ec 	bl	801216c <iprintf>
 800ff94:	e7de      	b.n	800ff54 <tcp_pbuf_prealloc+0x14>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ff96:	4b13      	ldr	r3, [pc, #76]	; (800ffe4 <tcp_pbuf_prealloc+0xa4>)
 800ff98:	22e9      	movs	r2, #233	; 0xe9
 800ff9a:	4915      	ldr	r1, [pc, #84]	; (800fff0 <tcp_pbuf_prealloc+0xb0>)
 800ff9c:	4813      	ldr	r0, [pc, #76]	; (800ffec <tcp_pbuf_prealloc+0xac>)
 800ff9e:	f002 f8e5 	bl	801216c <iprintf>
 800ffa2:	e7d8      	b.n	800ff56 <tcp_pbuf_prealloc+0x16>
          pcb->unacked != NULL))) {
 800ffa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
          pcb->unsent != NULL ||
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d1e5      	bne.n	800ff76 <tcp_pbuf_prealloc+0x36>
  u16_t alloc = length;
 800ffaa:	4621      	mov	r1, r4
 800ffac:	e000      	b.n	800ffb0 <tcp_pbuf_prealloc+0x70>
 800ffae:	4621      	mov	r1, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ffb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ffb4:	4640      	mov	r0, r8
 800ffb6:	f7fc ffd9 	bl	800cf6c <pbuf_alloc>
  if (p == NULL) {
 800ffba:	4605      	mov	r5, r0
 800ffbc:	b168      	cbz	r0, 800ffda <tcp_pbuf_prealloc+0x9a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ffbe:	6803      	ldr	r3, [r0, #0]
 800ffc0:	b133      	cbz	r3, 800ffd0 <tcp_pbuf_prealloc+0x90>
 800ffc2:	4b08      	ldr	r3, [pc, #32]	; (800ffe4 <tcp_pbuf_prealloc+0xa4>)
 800ffc4:	f240 120b 	movw	r2, #267	; 0x10b
 800ffc8:	490a      	ldr	r1, [pc, #40]	; (800fff4 <tcp_pbuf_prealloc+0xb4>)
 800ffca:	4808      	ldr	r0, [pc, #32]	; (800ffec <tcp_pbuf_prealloc+0xac>)
 800ffcc:	f002 f8ce 	bl	801216c <iprintf>
  *oversize = p->len - length;
 800ffd0:	896b      	ldrh	r3, [r5, #10]
 800ffd2:	1b1b      	subs	r3, r3, r4
 800ffd4:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800ffd6:	812c      	strh	r4, [r5, #8]
 800ffd8:	816c      	strh	r4, [r5, #10]
}
 800ffda:	4628      	mov	r0, r5
 800ffdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 800ffe0:	4621      	mov	r1, r4
 800ffe2:	e7e5      	b.n	800ffb0 <tcp_pbuf_prealloc+0x70>
 800ffe4:	0806a134 	.word	0x0806a134
 800ffe8:	08069d64 	.word	0x08069d64
 800ffec:	0801335c 	.word	0x0801335c
 800fff0:	08069d88 	.word	0x08069d88
 800fff4:	08069da8 	.word	0x08069da8

0800fff8 <tcp_create_segment>:
{
 800fff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fffc:	460e      	mov	r6, r1
 800fffe:	4617      	mov	r7, r2
 8010000:	4699      	mov	r9, r3
 8010002:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010006:	4680      	mov	r8, r0
 8010008:	2800      	cmp	r0, #0
 801000a:	d042      	beq.n	8010092 <tcp_create_segment+0x9a>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801000c:	2e00      	cmp	r6, #0
 801000e:	d047      	beq.n	80100a0 <tcp_create_segment+0xa8>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010010:	f01a 0f01 	tst.w	sl, #1
 8010014:	d04b      	beq.n	80100ae <tcp_create_segment+0xb6>
 8010016:	2504      	movs	r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010018:	2003      	movs	r0, #3
 801001a:	f7fc fc35 	bl	800c888 <memp_malloc>
 801001e:	4604      	mov	r4, r0
 8010020:	2800      	cmp	r0, #0
 8010022:	d046      	beq.n	80100b2 <tcp_create_segment+0xba>
  seg->flags = optflags;
 8010024:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8010028:	2300      	movs	r3, #0
 801002a:	6003      	str	r3, [r0, #0]
  seg->p = p;
 801002c:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801002e:	8933      	ldrh	r3, [r6, #8]
 8010030:	fa1f fa85 	uxth.w	sl, r5
 8010034:	4553      	cmp	r3, sl
 8010036:	d340      	bcc.n	80100ba <tcp_create_segment+0xc2>
  seg->len = p->tot_len - optlen;
 8010038:	8933      	ldrh	r3, [r6, #8]
 801003a:	eba3 030a 	sub.w	r3, r3, sl
 801003e:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010040:	2114      	movs	r1, #20
 8010042:	4630      	mov	r0, r6
 8010044:	f7fc fedd 	bl	800ce02 <pbuf_add_header>
 8010048:	2800      	cmp	r0, #0
 801004a:	d13d      	bne.n	80100c8 <tcp_create_segment+0xd0>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801004c:	6863      	ldr	r3, [r4, #4]
 801004e:	685e      	ldr	r6, [r3, #4]
 8010050:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010052:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 8010056:	f7f9 f86f 	bl	8009138 <lwip_htons>
 801005a:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801005c:	68e6      	ldr	r6, [r4, #12]
 801005e:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8010062:	f7f9 f869 	bl	8009138 <lwip_htons>
 8010066:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010068:	68e6      	ldr	r6, [r4, #12]
 801006a:	4648      	mov	r0, r9
 801006c:	f7f9 f869 	bl	8009142 <lwip_htonl>
 8010070:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010072:	68e6      	ldr	r6, [r4, #12]
 8010074:	08a8      	lsrs	r0, r5, #2
 8010076:	3005      	adds	r0, #5
 8010078:	0300      	lsls	r0, r0, #12
 801007a:	b280      	uxth	r0, r0
 801007c:	4338      	orrs	r0, r7
 801007e:	f7f9 f85b 	bl	8009138 <lwip_htons>
 8010082:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 8010084:	68e3      	ldr	r3, [r4, #12]
 8010086:	2200      	movs	r2, #0
 8010088:	749a      	strb	r2, [r3, #18]
 801008a:	74da      	strb	r2, [r3, #19]
}
 801008c:	4620      	mov	r0, r4
 801008e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010092:	4b10      	ldr	r3, [pc, #64]	; (80100d4 <tcp_create_segment+0xdc>)
 8010094:	22a3      	movs	r2, #163	; 0xa3
 8010096:	4910      	ldr	r1, [pc, #64]	; (80100d8 <tcp_create_segment+0xe0>)
 8010098:	4810      	ldr	r0, [pc, #64]	; (80100dc <tcp_create_segment+0xe4>)
 801009a:	f002 f867 	bl	801216c <iprintf>
 801009e:	e7b5      	b.n	801000c <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80100a0:	4b0c      	ldr	r3, [pc, #48]	; (80100d4 <tcp_create_segment+0xdc>)
 80100a2:	22a4      	movs	r2, #164	; 0xa4
 80100a4:	490e      	ldr	r1, [pc, #56]	; (80100e0 <tcp_create_segment+0xe8>)
 80100a6:	480d      	ldr	r0, [pc, #52]	; (80100dc <tcp_create_segment+0xe4>)
 80100a8:	f002 f860 	bl	801216c <iprintf>
 80100ac:	e7b0      	b.n	8010010 <tcp_create_segment+0x18>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80100ae:	2500      	movs	r5, #0
 80100b0:	e7b2      	b.n	8010018 <tcp_create_segment+0x20>
    pbuf_free(p);
 80100b2:	4630      	mov	r0, r6
 80100b4:	f7fc fef0 	bl	800ce98 <pbuf_free>
    return NULL;
 80100b8:	e7e8      	b.n	801008c <tcp_create_segment+0x94>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80100ba:	4b06      	ldr	r3, [pc, #24]	; (80100d4 <tcp_create_segment+0xdc>)
 80100bc:	22b0      	movs	r2, #176	; 0xb0
 80100be:	4909      	ldr	r1, [pc, #36]	; (80100e4 <tcp_create_segment+0xec>)
 80100c0:	4806      	ldr	r0, [pc, #24]	; (80100dc <tcp_create_segment+0xe4>)
 80100c2:	f002 f853 	bl	801216c <iprintf>
 80100c6:	e7b7      	b.n	8010038 <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 80100c8:	4620      	mov	r0, r4
 80100ca:	f7fd fc7f 	bl	800d9cc <tcp_seg_free>
    return NULL;
 80100ce:	2400      	movs	r4, #0
 80100d0:	e7dc      	b.n	801008c <tcp_create_segment+0x94>
 80100d2:	bf00      	nop
 80100d4:	0806a134 	.word	0x0806a134
 80100d8:	08069a28 	.word	0x08069a28
 80100dc:	0801335c 	.word	0x0801335c
 80100e0:	08069a48 	.word	0x08069a48
 80100e4:	08069a6c 	.word	0x08069a6c

080100e8 <tcp_output_alloc_header_common>:
{
 80100e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100ec:	4607      	mov	r7, r0
 80100ee:	460c      	mov	r4, r1
 80100f0:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80100f2:	4411      	add	r1, r2
 80100f4:	b289      	uxth	r1, r1
 80100f6:	3114      	adds	r1, #20
 80100f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80100fc:	b289      	uxth	r1, r1
 80100fe:	2022      	movs	r0, #34	; 0x22
 8010100:	f7fc ff34 	bl	800cf6c <pbuf_alloc>
  if (p != NULL) {
 8010104:	4606      	mov	r6, r0
 8010106:	b348      	cbz	r0, 801015c <tcp_output_alloc_header_common+0x74>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010108:	8942      	ldrh	r2, [r0, #10]
 801010a:	f104 0314 	add.w	r3, r4, #20
 801010e:	429a      	cmp	r2, r3
 8010110:	db27      	blt.n	8010162 <tcp_output_alloc_header_common+0x7a>
    tcphdr = (struct tcp_hdr *)p->payload;
 8010112:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
 8010114:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8010118:	f7f9 f80e 	bl	8009138 <lwip_htons>
 801011c:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801011e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8010122:	f7f9 f809 	bl	8009138 <lwip_htons>
 8010126:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 8010128:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801012c:	4638      	mov	r0, r7
 801012e:	f7f9 f808 	bl	8009142 <lwip_htonl>
 8010132:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010134:	08a4      	lsrs	r4, r4, #2
 8010136:	3405      	adds	r4, #5
 8010138:	0324      	lsls	r4, r4, #12
 801013a:	b2a4      	uxth	r4, r4
 801013c:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8010140:	4320      	orrs	r0, r4
 8010142:	f7f8 fff9 	bl	8009138 <lwip_htons>
 8010146:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010148:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 801014c:	f7f8 fff4 	bl	8009138 <lwip_htons>
 8010150:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 8010152:	2300      	movs	r3, #0
 8010154:	742b      	strb	r3, [r5, #16]
 8010156:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 8010158:	74ab      	strb	r3, [r5, #18]
 801015a:	74eb      	strb	r3, [r5, #19]
}
 801015c:	4630      	mov	r0, r6
 801015e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010162:	4b04      	ldr	r3, [pc, #16]	; (8010174 <tcp_output_alloc_header_common+0x8c>)
 8010164:	f240 7224 	movw	r2, #1828	; 0x724
 8010168:	4903      	ldr	r1, [pc, #12]	; (8010178 <tcp_output_alloc_header_common+0x90>)
 801016a:	4804      	ldr	r0, [pc, #16]	; (801017c <tcp_output_alloc_header_common+0x94>)
 801016c:	f001 fffe 	bl	801216c <iprintf>
 8010170:	e7cf      	b.n	8010112 <tcp_output_alloc_header_common+0x2a>
 8010172:	bf00      	nop
 8010174:	0806a134 	.word	0x0806a134
 8010178:	08069c40 	.word	0x08069c40
 801017c:	0801335c 	.word	0x0801335c

08010180 <tcp_output_alloc_header>:
{
 8010180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010182:	b085      	sub	sp, #20
 8010184:	460d      	mov	r5, r1
 8010186:	4616      	mov	r6, r2
 8010188:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801018a:	4604      	mov	r4, r0
 801018c:	b1b0      	cbz	r0, 80101bc <tcp_output_alloc_header+0x3c>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801018e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010190:	8ae3      	ldrh	r3, [r4, #22]
 8010192:	8b22      	ldrh	r2, [r4, #24]
 8010194:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8010196:	9103      	str	r1, [sp, #12]
 8010198:	2110      	movs	r1, #16
 801019a:	9102      	str	r1, [sp, #8]
 801019c:	9201      	str	r2, [sp, #4]
 801019e:	9300      	str	r3, [sp, #0]
 80101a0:	463b      	mov	r3, r7
 80101a2:	4632      	mov	r2, r6
 80101a4:	4629      	mov	r1, r5
 80101a6:	f7ff ff9f 	bl	80100e8 <tcp_output_alloc_header_common>
  if (p != NULL) {
 80101aa:	4602      	mov	r2, r0
 80101ac:	b118      	cbz	r0, 80101b6 <tcp_output_alloc_header+0x36>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80101ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101b0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80101b2:	440b      	add	r3, r1
 80101b4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80101b6:	4610      	mov	r0, r2
 80101b8:	b005      	add	sp, #20
 80101ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80101bc:	4b03      	ldr	r3, [pc, #12]	; (80101cc <tcp_output_alloc_header+0x4c>)
 80101be:	f240 7242 	movw	r2, #1858	; 0x742
 80101c2:	4903      	ldr	r1, [pc, #12]	; (80101d0 <tcp_output_alloc_header+0x50>)
 80101c4:	4803      	ldr	r0, [pc, #12]	; (80101d4 <tcp_output_alloc_header+0x54>)
 80101c6:	f001 ffd1 	bl	801216c <iprintf>
 80101ca:	e7e0      	b.n	801018e <tcp_output_alloc_header+0xe>
 80101cc:	0806a134 	.word	0x0806a134
 80101d0:	08069c18 	.word	0x08069c18
 80101d4:	0801335c 	.word	0x0801335c

080101d8 <tcp_route>:
{
 80101d8:	b508      	push	{r3, lr}
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80101da:	b108      	cbz	r0, 80101e0 <tcp_route+0x8>
 80101dc:	7a00      	ldrb	r0, [r0, #8]
 80101de:	b918      	cbnz	r0, 80101e8 <tcp_route+0x10>
    return ip_route(src, dst);
 80101e0:	4610      	mov	r0, r2
 80101e2:	f7fb f975 	bl	800b4d0 <ip4_route>
}
 80101e6:	bd08      	pop	{r3, pc}
    return netif_get_by_index(pcb->netif_idx);
 80101e8:	f7fc fd5a 	bl	800cca0 <netif_get_by_index>
 80101ec:	bd08      	pop	{r3, pc}
	...

080101f0 <tcp_output_segment>:
{
 80101f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f4:	b084      	sub	sp, #16
 80101f6:	460d      	mov	r5, r1
 80101f8:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80101fa:	4604      	mov	r4, r0
 80101fc:	b148      	cbz	r0, 8010212 <tcp_output_segment+0x22>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80101fe:	b185      	cbz	r5, 8010222 <tcp_output_segment+0x32>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010200:	b1be      	cbz	r6, 8010232 <tcp_output_segment+0x42>
  if (tcp_output_segment_busy(seg)) {
 8010202:	4620      	mov	r0, r4
 8010204:	f7ff fe58 	bl	800feb8 <tcp_output_segment_busy>
 8010208:	b1d8      	cbz	r0, 8010242 <tcp_output_segment+0x52>
    return ERR_OK;
 801020a:	2000      	movs	r0, #0
}
 801020c:	b004      	add	sp, #16
 801020e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010212:	4b47      	ldr	r3, [pc, #284]	; (8010330 <tcp_output_segment+0x140>)
 8010214:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010218:	4946      	ldr	r1, [pc, #280]	; (8010334 <tcp_output_segment+0x144>)
 801021a:	4847      	ldr	r0, [pc, #284]	; (8010338 <tcp_output_segment+0x148>)
 801021c:	f001 ffa6 	bl	801216c <iprintf>
 8010220:	e7ed      	b.n	80101fe <tcp_output_segment+0xe>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010222:	4b43      	ldr	r3, [pc, #268]	; (8010330 <tcp_output_segment+0x140>)
 8010224:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010228:	4944      	ldr	r1, [pc, #272]	; (801033c <tcp_output_segment+0x14c>)
 801022a:	4843      	ldr	r0, [pc, #268]	; (8010338 <tcp_output_segment+0x148>)
 801022c:	f001 ff9e 	bl	801216c <iprintf>
 8010230:	e7e6      	b.n	8010200 <tcp_output_segment+0x10>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010232:	4b3f      	ldr	r3, [pc, #252]	; (8010330 <tcp_output_segment+0x140>)
 8010234:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010238:	4941      	ldr	r1, [pc, #260]	; (8010340 <tcp_output_segment+0x150>)
 801023a:	483f      	ldr	r0, [pc, #252]	; (8010338 <tcp_output_segment+0x148>)
 801023c:	f001 ff96 	bl	801216c <iprintf>
 8010240:	e7df      	b.n	8010202 <tcp_output_segment+0x12>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010242:	68e7      	ldr	r7, [r4, #12]
 8010244:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8010246:	f7f8 ff7c 	bl	8009142 <lwip_htonl>
 801024a:	60b8      	str	r0, [r7, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801024c:	68e7      	ldr	r7, [r4, #12]
 801024e:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8010250:	f7f8 ff72 	bl	8009138 <lwip_htons>
 8010254:	81f8      	strh	r0, [r7, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010258:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 801025a:	4413      	add	r3, r2
 801025c:	62eb      	str	r3, [r5, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801025e:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8010262:	f108 0714 	add.w	r7, r8, #20
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010266:	7aa3      	ldrb	r3, [r4, #10]
 8010268:	f013 0f01 	tst.w	r3, #1
 801026c:	d142      	bne.n	80102f4 <tcp_output_segment+0x104>
  if (pcb->rtime < 0) {
 801026e:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 8010272:	2b00      	cmp	r3, #0
 8010274:	db4d      	blt.n	8010312 <tcp_output_segment+0x122>
  if (pcb->rttest == 0) {
 8010276:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010278:	2b00      	cmp	r3, #0
 801027a:	d04d      	beq.n	8010318 <tcp_output_segment+0x128>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801027c:	68e3      	ldr	r3, [r4, #12]
 801027e:	6862      	ldr	r2, [r4, #4]
 8010280:	6851      	ldr	r1, [r2, #4]
 8010282:	1a5b      	subs	r3, r3, r1
 8010284:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8010286:	8951      	ldrh	r1, [r2, #10]
 8010288:	1ac9      	subs	r1, r1, r3
 801028a:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 801028c:	6861      	ldr	r1, [r4, #4]
 801028e:	890a      	ldrh	r2, [r1, #8]
 8010290:	1ad3      	subs	r3, r2, r3
 8010292:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 8010294:	6863      	ldr	r3, [r4, #4]
 8010296:	68e2      	ldr	r2, [r4, #12]
 8010298:	605a      	str	r2, [r3, #4]
  seg->tcphdr->chksum = 0;
 801029a:	68e3      	ldr	r3, [r4, #12]
 801029c:	2200      	movs	r2, #0
 801029e:	741a      	strb	r2, [r3, #16]
 80102a0:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80102a2:	68e3      	ldr	r3, [r4, #12]
 80102a4:	7aa2      	ldrb	r2, [r4, #10]
 80102a6:	f012 0f01 	tst.w	r2, #1
 80102aa:	d03e      	beq.n	801032a <tcp_output_segment+0x13a>
 80102ac:	2204      	movs	r2, #4
 80102ae:	3214      	adds	r2, #20
 80102b0:	4413      	add	r3, r2
 80102b2:	429f      	cmp	r7, r3
 80102b4:	d006      	beq.n	80102c4 <tcp_output_segment+0xd4>
 80102b6:	4b1e      	ldr	r3, [pc, #120]	; (8010330 <tcp_output_segment+0x140>)
 80102b8:	f240 621c 	movw	r2, #1564	; 0x61c
 80102bc:	4921      	ldr	r1, [pc, #132]	; (8010344 <tcp_output_segment+0x154>)
 80102be:	481e      	ldr	r0, [pc, #120]	; (8010338 <tcp_output_segment+0x148>)
 80102c0:	f001 ff54 	bl	801216c <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80102c4:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80102c8:	6860      	ldr	r0, [r4, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80102ca:	1d2f      	adds	r7, r5, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80102cc:	8902      	ldrh	r2, [r0, #8]
 80102ce:	9700      	str	r7, [sp, #0]
 80102d0:	462b      	mov	r3, r5
 80102d2:	2106      	movs	r1, #6
 80102d4:	f7f9 f846 	bl	8009364 <ip_chksum_pseudo>
 80102d8:	f8a8 0010 	strh.w	r0, [r8, #16]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80102dc:	6860      	ldr	r0, [r4, #4]
 80102de:	7aeb      	ldrb	r3, [r5, #11]
 80102e0:	7aaa      	ldrb	r2, [r5, #10]
 80102e2:	9602      	str	r6, [sp, #8]
 80102e4:	2106      	movs	r1, #6
 80102e6:	9101      	str	r1, [sp, #4]
 80102e8:	9200      	str	r2, [sp, #0]
 80102ea:	463a      	mov	r2, r7
 80102ec:	4629      	mov	r1, r5
 80102ee:	f7fb fad9 	bl	800b8a4 <ip4_output_if>
  return err;
 80102f2:	e78b      	b.n	801020c <tcp_output_segment+0x1c>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80102f4:	1d2a      	adds	r2, r5, #4
 80102f6:	4631      	mov	r1, r6
 80102f8:	f240 50b4 	movw	r0, #1460	; 0x5b4
 80102fc:	f7fe fa16 	bl	800e72c <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010300:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8010304:	f7f8 ff1d 	bl	8009142 <lwip_htonl>
 8010308:	f8c8 0014 	str.w	r0, [r8, #20]
    opts += 1;
 801030c:	f108 0718 	add.w	r7, r8, #24
 8010310:	e7ad      	b.n	801026e <tcp_output_segment+0x7e>
    pcb->rtime = 0;
 8010312:	2300      	movs	r3, #0
 8010314:	862b      	strh	r3, [r5, #48]	; 0x30
 8010316:	e7ae      	b.n	8010276 <tcp_output_segment+0x86>
    pcb->rttest = tcp_ticks;
 8010318:	4b0b      	ldr	r3, [pc, #44]	; (8010348 <tcp_output_segment+0x158>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801031e:	68e3      	ldr	r3, [r4, #12]
 8010320:	6858      	ldr	r0, [r3, #4]
 8010322:	f7f8 ff0e 	bl	8009142 <lwip_htonl>
 8010326:	63a8      	str	r0, [r5, #56]	; 0x38
 8010328:	e7a8      	b.n	801027c <tcp_output_segment+0x8c>
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801032a:	2200      	movs	r2, #0
 801032c:	e7bf      	b.n	80102ae <tcp_output_segment+0xbe>
 801032e:	bf00      	nop
 8010330:	0806a134 	.word	0x0806a134
 8010334:	08069cd8 	.word	0x08069cd8
 8010338:	0801335c 	.word	0x0801335c
 801033c:	08069cf8 	.word	0x08069cf8
 8010340:	08069d18 	.word	0x08069d18
 8010344:	08069cc4 	.word	0x08069cc4
 8010348:	2000d850 	.word	0x2000d850

0801034c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801034c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010350:	b085      	sub	sp, #20
 8010352:	4605      	mov	r5, r0
 8010354:	4616      	mov	r6, r2
 8010356:	461f      	mov	r7, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010358:	460c      	mov	r4, r1
 801035a:	b331      	cbz	r1, 80103aa <tcp_output_control_segment+0x5e>

  netif = tcp_route(pcb, src, dst);
 801035c:	463a      	mov	r2, r7
 801035e:	4631      	mov	r1, r6
 8010360:	4628      	mov	r0, r5
 8010362:	f7ff ff39 	bl	80101d8 <tcp_route>
  if (netif == NULL) {
 8010366:	4680      	mov	r8, r0
 8010368:	b350      	cbz	r0, 80103c0 <tcp_output_control_segment+0x74>
    err = ERR_RTE;
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801036a:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801036e:	8922      	ldrh	r2, [r4, #8]
 8010370:	9700      	str	r7, [sp, #0]
 8010372:	4633      	mov	r3, r6
 8010374:	2106      	movs	r1, #6
 8010376:	4620      	mov	r0, r4
 8010378:	f7f8 fff4 	bl	8009364 <ip_chksum_pseudo>
 801037c:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010380:	b1dd      	cbz	r5, 80103ba <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010382:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 8010384:	7aaa      	ldrb	r2, [r5, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010386:	f8cd 8008 	str.w	r8, [sp, #8]
 801038a:	2106      	movs	r1, #6
 801038c:	9101      	str	r1, [sp, #4]
 801038e:	9200      	str	r2, [sp, #0]
 8010390:	463a      	mov	r2, r7
 8010392:	4631      	mov	r1, r6
 8010394:	4620      	mov	r0, r4
 8010396:	f7fb fa85 	bl	800b8a4 <ip4_output_if>
 801039a:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801039c:	4620      	mov	r0, r4
 801039e:	f7fc fd7b 	bl	800ce98 <pbuf_free>
  return err;
}
 80103a2:	4628      	mov	r0, r5
 80103a4:	b005      	add	sp, #20
 80103a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80103aa:	4b07      	ldr	r3, [pc, #28]	; (80103c8 <tcp_output_control_segment+0x7c>)
 80103ac:	f240 7287 	movw	r2, #1927	; 0x787
 80103b0:	4906      	ldr	r1, [pc, #24]	; (80103cc <tcp_output_control_segment+0x80>)
 80103b2:	4807      	ldr	r0, [pc, #28]	; (80103d0 <tcp_output_control_segment+0x84>)
 80103b4:	f001 feda 	bl	801216c <iprintf>
 80103b8:	e7d0      	b.n	801035c <tcp_output_control_segment+0x10>
      tos = 0;
 80103ba:	2200      	movs	r2, #0
      ttl = TCP_TTL;
 80103bc:	23ff      	movs	r3, #255	; 0xff
 80103be:	e7e2      	b.n	8010386 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80103c0:	f06f 0503 	mvn.w	r5, #3
 80103c4:	e7ea      	b.n	801039c <tcp_output_control_segment+0x50>
 80103c6:	bf00      	nop
 80103c8:	0806a134 	.word	0x0806a134
 80103cc:	08069c70 	.word	0x08069c70
 80103d0:	0801335c 	.word	0x0801335c

080103d4 <tcp_write>:
{
 80103d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d8:	b091      	sub	sp, #68	; 0x44
 80103da:	9108      	str	r1, [sp, #32]
 80103dc:	9306      	str	r3, [sp, #24]
  u16_t oversize = 0;
 80103de:	2300      	movs	r3, #0
 80103e0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80103e4:	b338      	cbz	r0, 8010436 <tcp_write+0x62>
 80103e6:	4692      	mov	sl, r2
 80103e8:	4681      	mov	r9, r0
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80103ea:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 80103ee:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80103f0:	9205      	str	r2, [sp, #20]
 80103f2:	085b      	lsrs	r3, r3, #1
 80103f4:	4293      	cmp	r3, r2
 80103f6:	bf28      	it	cs
 80103f8:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 80103fa:	b103      	cbz	r3, 80103fe <tcp_write+0x2a>
 80103fc:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80103fe:	9b08      	ldr	r3, [sp, #32]
 8010400:	b323      	cbz	r3, 801044c <tcp_write+0x78>
  err = tcp_write_checks(pcb, len);
 8010402:	4651      	mov	r1, sl
 8010404:	4648      	mov	r0, r9
 8010406:	f7ff fcf9 	bl	800fdfc <tcp_write_checks>
  if (err != ERR_OK) {
 801040a:	9009      	str	r0, [sp, #36]	; 0x24
 801040c:	2800      	cmp	r0, #0
 801040e:	f040 81b9 	bne.w	8010784 <tcp_write+0x3b0>
  queuelen = pcb->snd_queuelen;
 8010412:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 8010416:	f8d9 b06c 	ldr.w	fp, [r9, #108]	; 0x6c
 801041a:	f1bb 0f00 	cmp.w	fp, #0
 801041e:	d121      	bne.n	8010464 <tcp_write+0x90>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010420:	f8b9 4068 	ldrh.w	r4, [r9, #104]	; 0x68
 8010424:	2c00      	cmp	r4, #0
 8010426:	f040 80e0 	bne.w	80105ea <tcp_write+0x216>
  u16_t extendlen = 0;
 801042a:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 801042c:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801042e:	46d8      	mov	r8, fp
  struct pbuf *concat_p = NULL;
 8010430:	2300      	movs	r3, #0
 8010432:	930c      	str	r3, [sp, #48]	; 0x30
 8010434:	e0eb      	b.n	801060e <tcp_write+0x23a>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010436:	4b8f      	ldr	r3, [pc, #572]	; (8010674 <tcp_write+0x2a0>)
 8010438:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801043c:	498e      	ldr	r1, [pc, #568]	; (8010678 <tcp_write+0x2a4>)
 801043e:	488f      	ldr	r0, [pc, #572]	; (801067c <tcp_write+0x2a8>)
 8010440:	f001 fe94 	bl	801216c <iprintf>
 8010444:	f06f 030f 	mvn.w	r3, #15
 8010448:	9309      	str	r3, [sp, #36]	; 0x24
 801044a:	e19b      	b.n	8010784 <tcp_write+0x3b0>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801044c:	4b89      	ldr	r3, [pc, #548]	; (8010674 <tcp_write+0x2a0>)
 801044e:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8010452:	498b      	ldr	r1, [pc, #556]	; (8010680 <tcp_write+0x2ac>)
 8010454:	4889      	ldr	r0, [pc, #548]	; (801067c <tcp_write+0x2a8>)
 8010456:	f001 fe89 	bl	801216c <iprintf>
 801045a:	f06f 030f 	mvn.w	r3, #15
 801045e:	9309      	str	r3, [sp, #36]	; 0x24
 8010460:	e190      	b.n	8010784 <tcp_write+0x3b0>
         last_unsent = last_unsent->next);
 8010462:	46bb      	mov	fp, r7
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010464:	f8db 7000 	ldr.w	r7, [fp]
 8010468:	2f00      	cmp	r7, #0
 801046a:	d1fa      	bne.n	8010462 <tcp_write+0x8e>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801046c:	f89b 300a 	ldrb.w	r3, [fp, #10]
 8010470:	f013 0f01 	tst.w	r3, #1
 8010474:	d02a      	beq.n	80104cc <tcp_write+0xf8>
 8010476:	2404      	movs	r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010478:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801047c:	4423      	add	r3, r4
 801047e:	9a05      	ldr	r2, [sp, #20]
 8010480:	429a      	cmp	r2, r3
 8010482:	db25      	blt.n	80104d0 <tcp_write+0xfc>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010484:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8010488:	441c      	add	r4, r3
 801048a:	b2a4      	uxth	r4, r4
 801048c:	9b05      	ldr	r3, [sp, #20]
 801048e:	1b1c      	subs	r4, r3, r4
 8010490:	b2a3      	uxth	r3, r4
 8010492:	461a      	mov	r2, r3
 8010494:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 8010496:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801049a:	930a      	str	r3, [sp, #40]	; 0x28
 801049c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 80104a0:	b343      	cbz	r3, 80104f4 <tcp_write+0x120>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d31c      	bcc.n	80104e0 <tcp_write+0x10c>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80104a6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80104aa:	459a      	cmp	sl, r3
 80104ac:	d920      	bls.n	80104f0 <tcp_write+0x11c>
 80104ae:	461a      	mov	r2, r3
 80104b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80104b2:	4282      	cmp	r2, r0
 80104b4:	bfa8      	it	ge
 80104b6:	4602      	movge	r2, r0
 80104b8:	b292      	uxth	r2, r2
 80104ba:	920a      	str	r2, [sp, #40]	; 0x28
      oversize -= oversize_used;
 80104bc:	1a9b      	subs	r3, r3, r2
 80104be:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 80104c2:	1a83      	subs	r3, r0, r2
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	930b      	str	r3, [sp, #44]	; 0x2c
      seg = last_unsent;
 80104c8:	46d8      	mov	r8, fp
 80104ca:	e014      	b.n	80104f6 <tcp_write+0x122>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80104cc:	2400      	movs	r4, #0
 80104ce:	e7d3      	b.n	8010478 <tcp_write+0xa4>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80104d0:	4b68      	ldr	r3, [pc, #416]	; (8010674 <tcp_write+0x2a0>)
 80104d2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80104d6:	496b      	ldr	r1, [pc, #428]	; (8010684 <tcp_write+0x2b0>)
 80104d8:	4868      	ldr	r0, [pc, #416]	; (801067c <tcp_write+0x2a8>)
 80104da:	f001 fe47 	bl	801216c <iprintf>
 80104de:	e7d1      	b.n	8010484 <tcp_write+0xb0>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80104e0:	4b64      	ldr	r3, [pc, #400]	; (8010674 <tcp_write+0x2a0>)
 80104e2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80104e6:	4968      	ldr	r1, [pc, #416]	; (8010688 <tcp_write+0x2b4>)
 80104e8:	4864      	ldr	r0, [pc, #400]	; (801067c <tcp_write+0x2a8>)
 80104ea:	f001 fe3f 	bl	801216c <iprintf>
 80104ee:	e7da      	b.n	80104a6 <tcp_write+0xd2>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80104f0:	4652      	mov	r2, sl
 80104f2:	e7dd      	b.n	80104b0 <tcp_write+0xdc>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80104f4:	46b8      	mov	r8, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80104f6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80104fa:	b14b      	cbz	r3, 8010510 <tcp_write+0x13c>
 80104fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104fe:	4553      	cmp	r3, sl
 8010500:	d006      	beq.n	8010510 <tcp_write+0x13c>
 8010502:	4b5c      	ldr	r3, [pc, #368]	; (8010674 <tcp_write+0x2a0>)
 8010504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010508:	4960      	ldr	r1, [pc, #384]	; (801068c <tcp_write+0x2b8>)
 801050a:	485c      	ldr	r0, [pc, #368]	; (801067c <tcp_write+0x2a8>)
 801050c:	f001 fe2e 	bl	801216c <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010512:	4552      	cmp	r2, sl
 8010514:	d277      	bcs.n	8010606 <tcp_write+0x232>
 8010516:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010518:	2900      	cmp	r1, #0
 801051a:	d07d      	beq.n	8010618 <tcp_write+0x244>
 801051c:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d07d      	beq.n	8010620 <tcp_write+0x24c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010524:	ebaa 0502 	sub.w	r5, sl, r2
 8010528:	428d      	cmp	r5, r1
 801052a:	bfa8      	it	ge
 801052c:	460d      	movge	r5, r1
 801052e:	b2ac      	uxth	r4, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010530:	9b06      	ldr	r3, [sp, #24]
 8010532:	f013 0f01 	tst.w	r3, #1
 8010536:	d102      	bne.n	801053e <tcp_write+0x16a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010538:	f8db 3004 	ldr.w	r3, [fp, #4]
 801053c:	e022      	b.n	8010584 <tcp_write+0x1b0>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801053e:	2301      	movs	r3, #1
 8010540:	9302      	str	r3, [sp, #8]
 8010542:	9b06      	ldr	r3, [sp, #24]
 8010544:	9301      	str	r3, [sp, #4]
 8010546:	f8cd 9000 	str.w	r9, [sp]
 801054a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801054e:	460a      	mov	r2, r1
 8010550:	4621      	mov	r1, r4
 8010552:	2000      	movs	r0, #0
 8010554:	f7ff fcf4 	bl	800ff40 <tcp_pbuf_prealloc>
 8010558:	4603      	mov	r3, r0
 801055a:	900c      	str	r0, [sp, #48]	; 0x30
 801055c:	2800      	cmp	r0, #0
 801055e:	f000 80f0 	beq.w	8010742 <tcp_write+0x36e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010562:	4622      	mov	r2, r4
 8010564:	9908      	ldr	r1, [sp, #32]
 8010566:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010568:	4401      	add	r1, r0
 801056a:	461d      	mov	r5, r3
 801056c:	6858      	ldr	r0, [r3, #4]
 801056e:	f001 fdcf 	bl	8012110 <memcpy>
        queuelen += pbuf_clen(concat_p);
 8010572:	4628      	mov	r0, r5
 8010574:	f7fc fdfa 	bl	800d16c <pbuf_clen>
 8010578:	4406      	add	r6, r0
 801057a:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801057c:	2300      	movs	r3, #0
 801057e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010580:	e021      	b.n	80105c6 <tcp_write+0x1f2>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010582:	4613      	mov	r3, r2
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	2a00      	cmp	r2, #0
 8010588:	d1fb      	bne.n	8010582 <tcp_write+0x1ae>
 801058a:	920c      	str	r2, [sp, #48]	; 0x30
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801058c:	7b1a      	ldrb	r2, [r3, #12]
 801058e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8010592:	d105      	bne.n	80105a0 <tcp_write+0x1cc>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010594:	685a      	ldr	r2, [r3, #4]
 8010596:	895b      	ldrh	r3, [r3, #10]
 8010598:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801059a:	9a08      	ldr	r2, [sp, #32]
 801059c:	429a      	cmp	r2, r3
 801059e:	d017      	beq.n	80105d0 <tcp_write+0x1fc>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80105a0:	2201      	movs	r2, #1
 80105a2:	4621      	mov	r1, r4
 80105a4:	2000      	movs	r0, #0
 80105a6:	f7fc fce1 	bl	800cf6c <pbuf_alloc>
 80105aa:	900c      	str	r0, [sp, #48]	; 0x30
 80105ac:	2800      	cmp	r0, #0
 80105ae:	f000 80c8 	beq.w	8010742 <tcp_write+0x36e>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80105b2:	9b08      	ldr	r3, [sp, #32]
 80105b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80105b6:	440b      	add	r3, r1
 80105b8:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 80105ba:	f7fc fdd7 	bl	800d16c <pbuf_clen>
 80105be:	4406      	add	r6, r0
 80105c0:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 80105c2:	2300      	movs	r3, #0
 80105c4:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 80105c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105c8:	441c      	add	r4, r3
 80105ca:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 80105cc:	46d8      	mov	r8, fp
 80105ce:	e01e      	b.n	801060e <tcp_write+0x23a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80105d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105d2:	b90b      	cbnz	r3, 80105d8 <tcp_write+0x204>
          extendlen = seglen;
 80105d4:	940b      	str	r4, [sp, #44]	; 0x2c
 80105d6:	e7f6      	b.n	80105c6 <tcp_write+0x1f2>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80105d8:	4b26      	ldr	r3, [pc, #152]	; (8010674 <tcp_write+0x2a0>)
 80105da:	f240 2231 	movw	r2, #561	; 0x231
 80105de:	492c      	ldr	r1, [pc, #176]	; (8010690 <tcp_write+0x2bc>)
 80105e0:	4826      	ldr	r0, [pc, #152]	; (801067c <tcp_write+0x2a8>)
 80105e2:	f001 fdc3 	bl	801216c <iprintf>
          extendlen = seglen;
 80105e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80105e8:	e7ed      	b.n	80105c6 <tcp_write+0x1f2>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80105ea:	4b22      	ldr	r3, [pc, #136]	; (8010674 <tcp_write+0x2a0>)
 80105ec:	f240 224b 	movw	r2, #587	; 0x24b
 80105f0:	4928      	ldr	r1, [pc, #160]	; (8010694 <tcp_write+0x2c0>)
 80105f2:	4822      	ldr	r0, [pc, #136]	; (801067c <tcp_write+0x2a8>)
 80105f4:	f001 fdba 	bl	801216c <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80105f8:	46d8      	mov	r8, fp
  u16_t extendlen = 0;
 80105fa:	2300      	movs	r3, #0
 80105fc:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 80105fe:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
 8010600:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
 8010602:	930c      	str	r3, [sp, #48]	; 0x30
 8010604:	e003      	b.n	801060e <tcp_write+0x23a>
 8010606:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  u16_t extendlen = 0;
 8010608:	2300      	movs	r3, #0
 801060a:	930b      	str	r3, [sp, #44]	; 0x2c
  struct pbuf *concat_p = NULL;
 801060c:	930c      	str	r3, [sp, #48]	; 0x30
      queue = seg;
 801060e:	2700      	movs	r7, #0
 8010610:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8010614:	46bb      	mov	fp, r7
 8010616:	e074      	b.n	8010702 <tcp_write+0x32e>
 8010618:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 801061a:	2300      	movs	r3, #0
 801061c:	930c      	str	r3, [sp, #48]	; 0x30
 801061e:	e7f6      	b.n	801060e <tcp_write+0x23a>
  u16_t extendlen = 0;
 8010620:	930b      	str	r3, [sp, #44]	; 0x2c
 8010622:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 8010624:	2300      	movs	r3, #0
 8010626:	930c      	str	r3, [sp, #48]	; 0x30
 8010628:	e7f1      	b.n	801060e <tcp_write+0x23a>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801062a:	fab7 f387 	clz	r3, r7
 801062e:	095b      	lsrs	r3, r3, #5
 8010630:	9302      	str	r3, [sp, #8]
 8010632:	9b06      	ldr	r3, [sp, #24]
 8010634:	9301      	str	r3, [sp, #4]
 8010636:	f8cd 9000 	str.w	r9, [sp]
 801063a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801063e:	9a05      	ldr	r2, [sp, #20]
 8010640:	4629      	mov	r1, r5
 8010642:	2036      	movs	r0, #54	; 0x36
 8010644:	f7ff fc7c 	bl	800ff40 <tcp_pbuf_prealloc>
 8010648:	4680      	mov	r8, r0
 801064a:	2800      	cmp	r0, #0
 801064c:	d079      	beq.n	8010742 <tcp_write+0x36e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801064e:	8943      	ldrh	r3, [r0, #10]
 8010650:	429d      	cmp	r5, r3
 8010652:	d807      	bhi.n	8010664 <tcp_write+0x290>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010654:	462a      	mov	r2, r5
 8010656:	9b08      	ldr	r3, [sp, #32]
 8010658:	1919      	adds	r1, r3, r4
 801065a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801065e:	f001 fd57 	bl	8012110 <memcpy>
 8010662:	e032      	b.n	80106ca <tcp_write+0x2f6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010664:	4b03      	ldr	r3, [pc, #12]	; (8010674 <tcp_write+0x2a0>)
 8010666:	f240 2267 	movw	r2, #615	; 0x267
 801066a:	490b      	ldr	r1, [pc, #44]	; (8010698 <tcp_write+0x2c4>)
 801066c:	4803      	ldr	r0, [pc, #12]	; (801067c <tcp_write+0x2a8>)
 801066e:	f001 fd7d 	bl	801216c <iprintf>
 8010672:	e7ef      	b.n	8010654 <tcp_write+0x280>
 8010674:	0806a134 	.word	0x0806a134
 8010678:	08069f40 	.word	0x08069f40
 801067c:	0801335c 	.word	0x0801335c
 8010680:	08069f58 	.word	0x08069f58
 8010684:	08069f8c 	.word	0x08069f8c
 8010688:	08069fa4 	.word	0x08069fa4
 801068c:	08069fc4 	.word	0x08069fc4
 8010690:	08069fe4 	.word	0x08069fe4
 8010694:	0806a010 	.word	0x0806a010
 8010698:	0806a040 	.word	0x0806a040
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801069c:	2201      	movs	r2, #1
 801069e:	4629      	mov	r1, r5
 80106a0:	2036      	movs	r0, #54	; 0x36
 80106a2:	f7fc fc63 	bl	800cf6c <pbuf_alloc>
 80106a6:	9007      	str	r0, [sp, #28]
 80106a8:	2800      	cmp	r0, #0
 80106aa:	d04a      	beq.n	8010742 <tcp_write+0x36e>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80106ac:	9b08      	ldr	r3, [sp, #32]
 80106ae:	4423      	add	r3, r4
 80106b0:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80106b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80106b6:	2100      	movs	r1, #0
 80106b8:	2036      	movs	r0, #54	; 0x36
 80106ba:	f7fc fc57 	bl	800cf6c <pbuf_alloc>
 80106be:	4680      	mov	r8, r0
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d037      	beq.n	8010734 <tcp_write+0x360>
      pbuf_cat(p/*header*/, p2/*data*/);
 80106c4:	9907      	ldr	r1, [sp, #28]
 80106c6:	f7fc fd77 	bl	800d1b8 <pbuf_cat>
    queuelen += pbuf_clen(p);
 80106ca:	4640      	mov	r0, r8
 80106cc:	f7fc fd4e 	bl	800d16c <pbuf_clen>
 80106d0:	4406      	add	r6, r0
 80106d2:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80106d4:	2e08      	cmp	r6, #8
 80106d6:	d831      	bhi.n	801073c <tcp_write+0x368>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80106d8:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 80106dc:	2200      	movs	r2, #0
 80106de:	9200      	str	r2, [sp, #0]
 80106e0:	4423      	add	r3, r4
 80106e2:	4641      	mov	r1, r8
 80106e4:	4648      	mov	r0, r9
 80106e6:	f7ff fc87 	bl	800fff8 <tcp_create_segment>
 80106ea:	4680      	mov	r8, r0
 80106ec:	b348      	cbz	r0, 8010742 <tcp_write+0x36e>
    if (queue == NULL) {
 80106ee:	2f00      	cmp	r7, #0
 80106f0:	d054      	beq.n	801079c <tcp_write+0x3c8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80106f2:	f1bb 0f00 	cmp.w	fp, #0
 80106f6:	d049      	beq.n	801078c <tcp_write+0x3b8>
      prev_seg->next = seg;
 80106f8:	f8cb 8000 	str.w	r8, [fp]
    pos += seglen;
 80106fc:	442c      	add	r4, r5
 80106fe:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 8010700:	46c3      	mov	fp, r8
  while (pos < len) {
 8010702:	4554      	cmp	r4, sl
 8010704:	d24c      	bcs.n	80107a0 <tcp_write+0x3cc>
    u16_t left = len - pos;
 8010706:	ebaa 0504 	sub.w	r5, sl, r4
 801070a:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 801070c:	9b05      	ldr	r3, [sp, #20]
 801070e:	429d      	cmp	r5, r3
 8010710:	bf28      	it	cs
 8010712:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010714:	9b06      	ldr	r3, [sp, #24]
 8010716:	f013 0f01 	tst.w	r3, #1
 801071a:	d186      	bne.n	801062a <tcp_write+0x256>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801071c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8010720:	2b00      	cmp	r3, #0
 8010722:	d0bb      	beq.n	801069c <tcp_write+0x2c8>
 8010724:	4b78      	ldr	r3, [pc, #480]	; (8010908 <tcp_write+0x534>)
 8010726:	f240 2271 	movw	r2, #625	; 0x271
 801072a:	4978      	ldr	r1, [pc, #480]	; (801090c <tcp_write+0x538>)
 801072c:	4878      	ldr	r0, [pc, #480]	; (8010910 <tcp_write+0x53c>)
 801072e:	f001 fd1d 	bl	801216c <iprintf>
 8010732:	e7b3      	b.n	801069c <tcp_write+0x2c8>
        pbuf_free(p2);
 8010734:	9807      	ldr	r0, [sp, #28]
 8010736:	f7fc fbaf 	bl	800ce98 <pbuf_free>
        goto memerr;
 801073a:	e002      	b.n	8010742 <tcp_write+0x36e>
      pbuf_free(p);
 801073c:	4640      	mov	r0, r8
 801073e:	f7fc fbab 	bl	800ce98 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010742:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8010746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801074a:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801074e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010750:	b113      	cbz	r3, 8010758 <tcp_write+0x384>
    pbuf_free(concat_p);
 8010752:	4618      	mov	r0, r3
 8010754:	f7fc fba0 	bl	800ce98 <pbuf_free>
  if (queue != NULL) {
 8010758:	b117      	cbz	r7, 8010760 <tcp_write+0x38c>
    tcp_segs_free(queue);
 801075a:	4638      	mov	r0, r7
 801075c:	f7fd f943 	bl	800d9e6 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8010760:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 8010764:	2b00      	cmp	r3, #0
 8010766:	f000 80c6 	beq.w	80108f6 <tcp_write+0x522>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801076a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801076e:	2b00      	cmp	r3, #0
 8010770:	f040 80c5 	bne.w	80108fe <tcp_write+0x52a>
 8010774:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 8010778:	2b00      	cmp	r3, #0
 801077a:	f000 80b1 	beq.w	80108e0 <tcp_write+0x50c>
  return ERR_MEM;
 801077e:	f04f 33ff 	mov.w	r3, #4294967295
 8010782:	9309      	str	r3, [sp, #36]	; 0x24
}
 8010784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010786:	b011      	add	sp, #68	; 0x44
 8010788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801078c:	4b5e      	ldr	r3, [pc, #376]	; (8010908 <tcp_write+0x534>)
 801078e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010792:	4960      	ldr	r1, [pc, #384]	; (8010914 <tcp_write+0x540>)
 8010794:	485e      	ldr	r0, [pc, #376]	; (8010910 <tcp_write+0x53c>)
 8010796:	f001 fce9 	bl	801216c <iprintf>
 801079a:	e7ad      	b.n	80106f8 <tcp_write+0x324>
      queue = seg;
 801079c:	4607      	mov	r7, r0
 801079e:	e7ad      	b.n	80106fc <tcp_write+0x328>
 80107a0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  if (oversize_used > 0) {
 80107a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107a6:	b1e3      	cbz	r3, 80107e2 <tcp_write+0x40e>
    for (p = last_unsent->p; p; p = p->next) {
 80107a8:	f8db 4004 	ldr.w	r4, [fp, #4]
 80107ac:	461d      	mov	r5, r3
 80107ae:	e000      	b.n	80107b2 <tcp_write+0x3de>
 80107b0:	6824      	ldr	r4, [r4, #0]
 80107b2:	b184      	cbz	r4, 80107d6 <tcp_write+0x402>
      p->tot_len += oversize_used;
 80107b4:	8923      	ldrh	r3, [r4, #8]
 80107b6:	442b      	add	r3, r5
 80107b8:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 80107ba:	6823      	ldr	r3, [r4, #0]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d1f7      	bne.n	80107b0 <tcp_write+0x3dc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80107c0:	6860      	ldr	r0, [r4, #4]
 80107c2:	8963      	ldrh	r3, [r4, #10]
 80107c4:	462a      	mov	r2, r5
 80107c6:	9908      	ldr	r1, [sp, #32]
 80107c8:	4418      	add	r0, r3
 80107ca:	f001 fca1 	bl	8012110 <memcpy>
        p->len += oversize_used;
 80107ce:	8963      	ldrh	r3, [r4, #10]
 80107d0:	442b      	add	r3, r5
 80107d2:	8163      	strh	r3, [r4, #10]
 80107d4:	e7ec      	b.n	80107b0 <tcp_write+0x3dc>
    last_unsent->len += oversize_used;
 80107d6:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 80107da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107dc:	441a      	add	r2, r3
 80107de:	f8ab 2008 	strh.w	r2, [fp, #8]
  pcb->unsent_oversize = oversize;
 80107e2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80107e6:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 80107ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d03f      	beq.n	8010870 <tcp_write+0x49c>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80107f0:	f1bb 0f00 	cmp.w	fp, #0
 80107f4:	d034      	beq.n	8010860 <tcp_write+0x48c>
    pbuf_cat(last_unsent->p, concat_p);
 80107f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80107f8:	4621      	mov	r1, r4
 80107fa:	f8db 0004 	ldr.w	r0, [fp, #4]
 80107fe:	f7fc fcdb 	bl	800d1b8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010802:	8923      	ldrh	r3, [r4, #8]
 8010804:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8010808:	4413      	add	r3, r2
 801080a:	f8ab 3008 	strh.w	r3, [fp, #8]
  if (last_unsent == NULL) {
 801080e:	f1bb 0f00 	cmp.w	fp, #0
 8010812:	d056      	beq.n	80108c2 <tcp_write+0x4ee>
    last_unsent->next = queue;
 8010814:	f8cb 7000 	str.w	r7, [fp]
  pcb->snd_lbb += len;
 8010818:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801081c:	4453      	add	r3, sl
 801081e:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010822:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 8010826:	eba3 0a0a 	sub.w	sl, r3, sl
 801082a:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801082e:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8010832:	b11e      	cbz	r6, 801083c <tcp_write+0x468>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010834:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 8010838:	2b00      	cmp	r3, #0
 801083a:	d045      	beq.n	80108c8 <tcp_write+0x4f4>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801083c:	f1b8 0f00 	cmp.w	r8, #0
 8010840:	d0a0      	beq.n	8010784 <tcp_write+0x3b0>
 8010842:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8010846:	2c00      	cmp	r4, #0
 8010848:	d09c      	beq.n	8010784 <tcp_write+0x3b0>
 801084a:	9b06      	ldr	r3, [sp, #24]
 801084c:	f013 0f02 	tst.w	r3, #2
 8010850:	d198      	bne.n	8010784 <tcp_write+0x3b0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010852:	89a5      	ldrh	r5, [r4, #12]
 8010854:	2008      	movs	r0, #8
 8010856:	f7f8 fc6f 	bl	8009138 <lwip_htons>
 801085a:	4328      	orrs	r0, r5
 801085c:	81a0      	strh	r0, [r4, #12]
 801085e:	e791      	b.n	8010784 <tcp_write+0x3b0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010860:	4b29      	ldr	r3, [pc, #164]	; (8010908 <tcp_write+0x534>)
 8010862:	f240 22e1 	movw	r2, #737	; 0x2e1
 8010866:	492c      	ldr	r1, [pc, #176]	; (8010918 <tcp_write+0x544>)
 8010868:	4829      	ldr	r0, [pc, #164]	; (8010910 <tcp_write+0x53c>)
 801086a:	f001 fc7f 	bl	801216c <iprintf>
 801086e:	e7c2      	b.n	80107f6 <tcp_write+0x422>
  } else if (extendlen > 0) {
 8010870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010872:	2b00      	cmp	r3, #0
 8010874:	d0cb      	beq.n	801080e <tcp_write+0x43a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010876:	f1bb 0f00 	cmp.w	fp, #0
 801087a:	d006      	beq.n	801088a <tcp_write+0x4b6>
 801087c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8010880:	b11b      	cbz	r3, 801088a <tcp_write+0x4b6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010882:	f8db 3004 	ldr.w	r3, [fp, #4]
 8010886:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010888:	e00b      	b.n	80108a2 <tcp_write+0x4ce>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801088a:	4b1f      	ldr	r3, [pc, #124]	; (8010908 <tcp_write+0x534>)
 801088c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010890:	4922      	ldr	r1, [pc, #136]	; (801091c <tcp_write+0x548>)
 8010892:	481f      	ldr	r0, [pc, #124]	; (8010910 <tcp_write+0x53c>)
 8010894:	f001 fc6a 	bl	801216c <iprintf>
 8010898:	e7f3      	b.n	8010882 <tcp_write+0x4ae>
      p->tot_len += extendlen;
 801089a:	891a      	ldrh	r2, [r3, #8]
 801089c:	4402      	add	r2, r0
 801089e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80108a0:	460b      	mov	r3, r1
 80108a2:	6819      	ldr	r1, [r3, #0]
 80108a4:	2900      	cmp	r1, #0
 80108a6:	d1f8      	bne.n	801089a <tcp_write+0x4c6>
    p->tot_len += extendlen;
 80108a8:	891a      	ldrh	r2, [r3, #8]
 80108aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80108ac:	4402      	add	r2, r0
 80108ae:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80108b0:	895a      	ldrh	r2, [r3, #10]
 80108b2:	4402      	add	r2, r0
 80108b4:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80108b6:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 80108ba:	4403      	add	r3, r0
 80108bc:	f8ab 3008 	strh.w	r3, [fp, #8]
 80108c0:	e7a5      	b.n	801080e <tcp_write+0x43a>
    pcb->unsent = queue;
 80108c2:	f8c9 706c 	str.w	r7, [r9, #108]	; 0x6c
 80108c6:	e7a7      	b.n	8010818 <tcp_write+0x444>
    LWIP_ASSERT("tcp_write: valid queue length",
 80108c8:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d1b5      	bne.n	801083c <tcp_write+0x468>
 80108d0:	4b0d      	ldr	r3, [pc, #52]	; (8010908 <tcp_write+0x534>)
 80108d2:	f240 3213 	movw	r2, #787	; 0x313
 80108d6:	4912      	ldr	r1, [pc, #72]	; (8010920 <tcp_write+0x54c>)
 80108d8:	480d      	ldr	r0, [pc, #52]	; (8010910 <tcp_write+0x53c>)
 80108da:	f001 fc47 	bl	801216c <iprintf>
 80108de:	e7ad      	b.n	801083c <tcp_write+0x468>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80108e0:	4b09      	ldr	r3, [pc, #36]	; (8010908 <tcp_write+0x534>)
 80108e2:	f44f 724a 	mov.w	r2, #808	; 0x328
 80108e6:	490e      	ldr	r1, [pc, #56]	; (8010920 <tcp_write+0x54c>)
 80108e8:	4809      	ldr	r0, [pc, #36]	; (8010910 <tcp_write+0x53c>)
 80108ea:	f001 fc3f 	bl	801216c <iprintf>
  return ERR_MEM;
 80108ee:	f04f 33ff 	mov.w	r3, #4294967295
 80108f2:	9309      	str	r3, [sp, #36]	; 0x24
 80108f4:	e746      	b.n	8010784 <tcp_write+0x3b0>
 80108f6:	f04f 33ff 	mov.w	r3, #4294967295
 80108fa:	9309      	str	r3, [sp, #36]	; 0x24
 80108fc:	e742      	b.n	8010784 <tcp_write+0x3b0>
 80108fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010902:	9309      	str	r3, [sp, #36]	; 0x24
 8010904:	e73e      	b.n	8010784 <tcp_write+0x3b0>
 8010906:	bf00      	nop
 8010908:	0806a134 	.word	0x0806a134
 801090c:	0806a080 	.word	0x0806a080
 8010910:	0801335c 	.word	0x0801335c
 8010914:	0806a090 	.word	0x0806a090
 8010918:	0806a0a4 	.word	0x0806a0a4
 801091c:	0806a0dc 	.word	0x0806a0dc
 8010920:	0806a114 	.word	0x0806a114

08010924 <tcp_split_unsent_seg>:
{
 8010924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010928:	b083      	sub	sp, #12
 801092a:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801092c:	4607      	mov	r7, r0
 801092e:	2800      	cmp	r0, #0
 8010930:	d049      	beq.n	80109c6 <tcp_split_unsent_seg+0xa2>
  useg = pcb->unsent;
 8010932:	6efc      	ldr	r4, [r7, #108]	; 0x6c
  if (useg == NULL) {
 8010934:	2c00      	cmp	r4, #0
 8010936:	f000 80ca 	beq.w	8010ace <tcp_split_unsent_seg+0x1aa>
  if (split == 0) {
 801093a:	2d00      	cmp	r5, #0
 801093c:	d04b      	beq.n	80109d6 <tcp_split_unsent_seg+0xb2>
  if (useg->len <= split) {
 801093e:	8923      	ldrh	r3, [r4, #8]
 8010940:	429d      	cmp	r5, r3
 8010942:	f080 80c7 	bcs.w	8010ad4 <tcp_split_unsent_seg+0x1b0>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010946:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8010948:	429d      	cmp	r5, r3
 801094a:	d84e      	bhi.n	80109ea <tcp_split_unsent_seg+0xc6>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801094c:	8923      	ldrh	r3, [r4, #8]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d053      	beq.n	80109fa <tcp_split_unsent_seg+0xd6>
  optflags = useg->flags;
 8010952:	f894 a00a 	ldrb.w	sl, [r4, #10]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010956:	f01a 0f01 	tst.w	sl, #1
 801095a:	d056      	beq.n	8010a0a <tcp_split_unsent_seg+0xe6>
 801095c:	f04f 0904 	mov.w	r9, #4
  remainder = useg->len - split;
 8010960:	8926      	ldrh	r6, [r4, #8]
 8010962:	1b76      	subs	r6, r6, r5
 8010964:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010966:	eb06 0109 	add.w	r1, r6, r9
 801096a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801096e:	b289      	uxth	r1, r1
 8010970:	2036      	movs	r0, #54	; 0x36
 8010972:	f7fc fafb 	bl	800cf6c <pbuf_alloc>
  if (p == NULL) {
 8010976:	4680      	mov	r8, r0
 8010978:	2800      	cmp	r0, #0
 801097a:	f000 80a6 	beq.w	8010aca <tcp_split_unsent_seg+0x1a6>
  offset = useg->p->tot_len - useg->len + split;
 801097e:	6860      	ldr	r0, [r4, #4]
 8010980:	8903      	ldrh	r3, [r0, #8]
 8010982:	8922      	ldrh	r2, [r4, #8]
 8010984:	1a9b      	subs	r3, r3, r2
 8010986:	fa15 f383 	uxtah	r3, r5, r3
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801098a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801098e:	b29b      	uxth	r3, r3
 8010990:	4632      	mov	r2, r6
 8010992:	4449      	add	r1, r9
 8010994:	f7fc fce8 	bl	800d368 <pbuf_copy_partial>
 8010998:	4286      	cmp	r6, r0
 801099a:	d039      	beq.n	8010a10 <tcp_split_unsent_seg+0xec>
  struct tcp_seg *seg = NULL, *useg = NULL;
 801099c:	2500      	movs	r5, #0
  LWIP_ASSERT("seg == NULL", seg == NULL);
 801099e:	b135      	cbz	r5, 80109ae <tcp_split_unsent_seg+0x8a>
 80109a0:	4b4f      	ldr	r3, [pc, #316]	; (8010ae0 <tcp_split_unsent_seg+0x1bc>)
 80109a2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80109a6:	494f      	ldr	r1, [pc, #316]	; (8010ae4 <tcp_split_unsent_seg+0x1c0>)
 80109a8:	484f      	ldr	r0, [pc, #316]	; (8010ae8 <tcp_split_unsent_seg+0x1c4>)
 80109aa:	f001 fbdf 	bl	801216c <iprintf>
  if (p != NULL) {
 80109ae:	f1b8 0f00 	cmp.w	r8, #0
 80109b2:	f000 8091 	beq.w	8010ad8 <tcp_split_unsent_seg+0x1b4>
    pbuf_free(p);
 80109b6:	4640      	mov	r0, r8
 80109b8:	f7fc fa6e 	bl	800ce98 <pbuf_free>
  return ERR_MEM;
 80109bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80109c0:	b003      	add	sp, #12
 80109c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80109c6:	4b46      	ldr	r3, [pc, #280]	; (8010ae0 <tcp_split_unsent_seg+0x1bc>)
 80109c8:	f240 324b 	movw	r2, #843	; 0x34b
 80109cc:	4947      	ldr	r1, [pc, #284]	; (8010aec <tcp_split_unsent_seg+0x1c8>)
 80109ce:	4846      	ldr	r0, [pc, #280]	; (8010ae8 <tcp_split_unsent_seg+0x1c4>)
 80109d0:	f001 fbcc 	bl	801216c <iprintf>
 80109d4:	e7ad      	b.n	8010932 <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80109d6:	4b42      	ldr	r3, [pc, #264]	; (8010ae0 <tcp_split_unsent_seg+0x1bc>)
 80109d8:	f240 3253 	movw	r2, #851	; 0x353
 80109dc:	4944      	ldr	r1, [pc, #272]	; (8010af0 <tcp_split_unsent_seg+0x1cc>)
 80109de:	4842      	ldr	r0, [pc, #264]	; (8010ae8 <tcp_split_unsent_seg+0x1c4>)
 80109e0:	f001 fbc4 	bl	801216c <iprintf>
    return ERR_VAL;
 80109e4:	f06f 0005 	mvn.w	r0, #5
 80109e8:	e7ea      	b.n	80109c0 <tcp_split_unsent_seg+0x9c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80109ea:	4b3d      	ldr	r3, [pc, #244]	; (8010ae0 <tcp_split_unsent_seg+0x1bc>)
 80109ec:	f240 325b 	movw	r2, #859	; 0x35b
 80109f0:	4940      	ldr	r1, [pc, #256]	; (8010af4 <tcp_split_unsent_seg+0x1d0>)
 80109f2:	483d      	ldr	r0, [pc, #244]	; (8010ae8 <tcp_split_unsent_seg+0x1c4>)
 80109f4:	f001 fbba 	bl	801216c <iprintf>
 80109f8:	e7a8      	b.n	801094c <tcp_split_unsent_seg+0x28>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80109fa:	4b39      	ldr	r3, [pc, #228]	; (8010ae0 <tcp_split_unsent_seg+0x1bc>)
 80109fc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010a00:	493d      	ldr	r1, [pc, #244]	; (8010af8 <tcp_split_unsent_seg+0x1d4>)
 8010a02:	4839      	ldr	r0, [pc, #228]	; (8010ae8 <tcp_split_unsent_seg+0x1c4>)
 8010a04:	f001 fbb2 	bl	801216c <iprintf>
 8010a08:	e7a3      	b.n	8010952 <tcp_split_unsent_seg+0x2e>
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010a0a:	f04f 0900 	mov.w	r9, #0
 8010a0e:	e7a7      	b.n	8010960 <tcp_split_unsent_seg+0x3c>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010a10:	68e3      	ldr	r3, [r4, #12]
 8010a12:	8998      	ldrh	r0, [r3, #12]
 8010a14:	f7f8 fb90 	bl	8009138 <lwip_htons>
 8010a18:	b2c0      	uxtb	r0, r0
 8010a1a:	f000 093f 	and.w	r9, r0, #63	; 0x3f
  if (split_flags & TCP_PSH) {
 8010a1e:	f010 0f08 	tst.w	r0, #8
 8010a22:	d04b      	beq.n	8010abc <tcp_split_unsent_seg+0x198>
    split_flags &= ~TCP_PSH;
 8010a24:	f000 0937 	and.w	r9, r0, #55	; 0x37
    remainder_flags |= TCP_PSH;
 8010a28:	f04f 0b08 	mov.w	fp, #8
  if (split_flags & TCP_FIN) {
 8010a2c:	f019 0f01 	tst.w	r9, #1
 8010a30:	d003      	beq.n	8010a3a <tcp_split_unsent_seg+0x116>
    split_flags &= ~TCP_FIN;
 8010a32:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 8010a36:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010a3a:	68e3      	ldr	r3, [r4, #12]
 8010a3c:	6858      	ldr	r0, [r3, #4]
 8010a3e:	f7f8 fb80 	bl	8009142 <lwip_htonl>
 8010a42:	f8cd a000 	str.w	sl, [sp]
 8010a46:	182b      	adds	r3, r5, r0
 8010a48:	465a      	mov	r2, fp
 8010a4a:	4641      	mov	r1, r8
 8010a4c:	4638      	mov	r0, r7
 8010a4e:	f7ff fad3 	bl	800fff8 <tcp_create_segment>
  if (seg == NULL) {
 8010a52:	4605      	mov	r5, r0
 8010a54:	2800      	cmp	r0, #0
 8010a56:	d0a2      	beq.n	801099e <tcp_split_unsent_seg+0x7a>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010a58:	6860      	ldr	r0, [r4, #4]
 8010a5a:	f7fc fb87 	bl	800d16c <pbuf_clen>
 8010a5e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010a62:	1a18      	subs	r0, r3, r0
 8010a64:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010a68:	6860      	ldr	r0, [r4, #4]
 8010a6a:	8901      	ldrh	r1, [r0, #8]
 8010a6c:	1b89      	subs	r1, r1, r6
 8010a6e:	b289      	uxth	r1, r1
 8010a70:	f7fc fb28 	bl	800d0c4 <pbuf_realloc>
  useg->len -= remainder;
 8010a74:	8923      	ldrh	r3, [r4, #8]
 8010a76:	1b9e      	subs	r6, r3, r6
 8010a78:	8126      	strh	r6, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010a7a:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8010a7e:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 8010a82:	4648      	mov	r0, r9
 8010a84:	f7f8 fb58 	bl	8009138 <lwip_htons>
 8010a88:	4330      	orrs	r0, r6
 8010a8a:	f8a8 000c 	strh.w	r0, [r8, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010a8e:	6860      	ldr	r0, [r4, #4]
 8010a90:	f7fc fb6c 	bl	800d16c <pbuf_clen>
 8010a94:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010a98:	4418      	add	r0, r3
 8010a9a:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010a9e:	6868      	ldr	r0, [r5, #4]
 8010aa0:	f7fc fb64 	bl	800d16c <pbuf_clen>
 8010aa4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010aa8:	4418      	add	r0, r3
 8010aaa:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 8010aae:	6823      	ldr	r3, [r4, #0]
 8010ab0:	602b      	str	r3, [r5, #0]
  useg->next = seg;
 8010ab2:	6025      	str	r5, [r4, #0]
  if (seg->next == NULL) {
 8010ab4:	682b      	ldr	r3, [r5, #0]
 8010ab6:	b123      	cbz	r3, 8010ac2 <tcp_split_unsent_seg+0x19e>
  return ERR_OK;
 8010ab8:	2000      	movs	r0, #0
 8010aba:	e781      	b.n	80109c0 <tcp_split_unsent_seg+0x9c>
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010abc:	f04f 0b00 	mov.w	fp, #0
 8010ac0:	e7b4      	b.n	8010a2c <tcp_split_unsent_seg+0x108>
    pcb->unsent_oversize = 0;
 8010ac2:	2000      	movs	r0, #0
 8010ac4:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 8010ac8:	e77a      	b.n	80109c0 <tcp_split_unsent_seg+0x9c>
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010aca:	2500      	movs	r5, #0
 8010acc:	e767      	b.n	801099e <tcp_split_unsent_seg+0x7a>
    return ERR_MEM;
 8010ace:	f04f 30ff 	mov.w	r0, #4294967295
 8010ad2:	e775      	b.n	80109c0 <tcp_split_unsent_seg+0x9c>
    return ERR_OK;
 8010ad4:	2000      	movs	r0, #0
 8010ad6:	e773      	b.n	80109c0 <tcp_split_unsent_seg+0x9c>
  return ERR_MEM;
 8010ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8010adc:	e770      	b.n	80109c0 <tcp_split_unsent_seg+0x9c>
 8010ade:	bf00      	nop
 8010ae0:	0806a134 	.word	0x0806a134
 8010ae4:	08069f34 	.word	0x08069f34
 8010ae8:	0801335c 	.word	0x0801335c
 8010aec:	08069ecc 	.word	0x08069ecc
 8010af0:	08069ef0 	.word	0x08069ef0
 8010af4:	08069f14 	.word	0x08069f14
 8010af8:	08069f24 	.word	0x08069f24

08010afc <tcp_enqueue_flags>:
{
 8010afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b00:	b083      	sub	sp, #12
 8010b02:	4604      	mov	r4, r0
 8010b04:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010b06:	f011 0703 	ands.w	r7, r1, #3
 8010b0a:	d02e      	beq.n	8010b6a <tcp_enqueue_flags+0x6e>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010b0c:	2c00      	cmp	r4, #0
 8010b0e:	d034      	beq.n	8010b7a <tcp_enqueue_flags+0x7e>
  if (flags & TCP_SYN) {
 8010b10:	f015 0f02 	tst.w	r5, #2
 8010b14:	d139      	bne.n	8010b8a <tcp_enqueue_flags+0x8e>
  u8_t optflags = 0;
 8010b16:	f04f 0900 	mov.w	r9, #0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010b1a:	f1b9 0f00 	cmp.w	r9, #0
 8010b1e:	d037      	beq.n	8010b90 <tcp_enqueue_flags+0x94>
 8010b20:	2604      	movs	r6, #4
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010b22:	b2b6      	uxth	r6, r6
 8010b24:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b28:	4631      	mov	r1, r6
 8010b2a:	2036      	movs	r0, #54	; 0x36
 8010b2c:	f7fc fa1e 	bl	800cf6c <pbuf_alloc>
 8010b30:	4680      	mov	r8, r0
 8010b32:	2800      	cmp	r0, #0
 8010b34:	d02e      	beq.n	8010b94 <tcp_enqueue_flags+0x98>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010b36:	8943      	ldrh	r3, [r0, #10]
 8010b38:	429e      	cmp	r6, r3
 8010b3a:	d832      	bhi.n	8010ba2 <tcp_enqueue_flags+0xa6>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010b3c:	f8cd 9000 	str.w	r9, [sp]
 8010b40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8010b42:	462a      	mov	r2, r5
 8010b44:	4641      	mov	r1, r8
 8010b46:	4620      	mov	r0, r4
 8010b48:	f7ff fa56 	bl	800fff8 <tcp_create_segment>
 8010b4c:	4606      	mov	r6, r0
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	d02f      	beq.n	8010bb2 <tcp_enqueue_flags+0xb6>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010b52:	68c3      	ldr	r3, [r0, #12]
 8010b54:	f013 0f03 	tst.w	r3, #3
 8010b58:	d132      	bne.n	8010bc0 <tcp_enqueue_flags+0xc4>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010b5a:	8933      	ldrh	r3, [r6, #8]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d137      	bne.n	8010bd0 <tcp_enqueue_flags+0xd4>
  if (pcb->unsent == NULL) {
 8010b60:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8010b62:	2a00      	cmp	r2, #0
 8010b64:	d13d      	bne.n	8010be2 <tcp_enqueue_flags+0xe6>
    pcb->unsent = seg;
 8010b66:	66e6      	str	r6, [r4, #108]	; 0x6c
 8010b68:	e03f      	b.n	8010bea <tcp_enqueue_flags+0xee>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010b6a:	4b36      	ldr	r3, [pc, #216]	; (8010c44 <tcp_enqueue_flags+0x148>)
 8010b6c:	f240 4212 	movw	r2, #1042	; 0x412
 8010b70:	4935      	ldr	r1, [pc, #212]	; (8010c48 <tcp_enqueue_flags+0x14c>)
 8010b72:	4836      	ldr	r0, [pc, #216]	; (8010c4c <tcp_enqueue_flags+0x150>)
 8010b74:	f001 fafa 	bl	801216c <iprintf>
 8010b78:	e7c8      	b.n	8010b0c <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010b7a:	4b32      	ldr	r3, [pc, #200]	; (8010c44 <tcp_enqueue_flags+0x148>)
 8010b7c:	f240 4213 	movw	r2, #1043	; 0x413
 8010b80:	4933      	ldr	r1, [pc, #204]	; (8010c50 <tcp_enqueue_flags+0x154>)
 8010b82:	4832      	ldr	r0, [pc, #200]	; (8010c4c <tcp_enqueue_flags+0x150>)
 8010b84:	f001 faf2 	bl	801216c <iprintf>
 8010b88:	e7c2      	b.n	8010b10 <tcp_enqueue_flags+0x14>
    optflags = TF_SEG_OPTS_MSS;
 8010b8a:	f04f 0901 	mov.w	r9, #1
 8010b8e:	e7c4      	b.n	8010b1a <tcp_enqueue_flags+0x1e>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010b90:	2600      	movs	r6, #0
 8010b92:	e7c6      	b.n	8010b22 <tcp_enqueue_flags+0x26>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b94:	8b63      	ldrh	r3, [r4, #26]
 8010b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b9a:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 8010b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010ba0:	e03e      	b.n	8010c20 <tcp_enqueue_flags+0x124>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010ba2:	4b28      	ldr	r3, [pc, #160]	; (8010c44 <tcp_enqueue_flags+0x148>)
 8010ba4:	f240 423a 	movw	r2, #1082	; 0x43a
 8010ba8:	492a      	ldr	r1, [pc, #168]	; (8010c54 <tcp_enqueue_flags+0x158>)
 8010baa:	4828      	ldr	r0, [pc, #160]	; (8010c4c <tcp_enqueue_flags+0x150>)
 8010bac:	f001 fade 	bl	801216c <iprintf>
 8010bb0:	e7c4      	b.n	8010b3c <tcp_enqueue_flags+0x40>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010bb2:	8b63      	ldrh	r3, [r4, #26]
 8010bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bb8:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 8010bba:	f04f 30ff 	mov.w	r0, #4294967295
 8010bbe:	e02f      	b.n	8010c20 <tcp_enqueue_flags+0x124>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010bc0:	4b20      	ldr	r3, [pc, #128]	; (8010c44 <tcp_enqueue_flags+0x148>)
 8010bc2:	f240 4242 	movw	r2, #1090	; 0x442
 8010bc6:	4924      	ldr	r1, [pc, #144]	; (8010c58 <tcp_enqueue_flags+0x15c>)
 8010bc8:	4820      	ldr	r0, [pc, #128]	; (8010c4c <tcp_enqueue_flags+0x150>)
 8010bca:	f001 facf 	bl	801216c <iprintf>
 8010bce:	e7c4      	b.n	8010b5a <tcp_enqueue_flags+0x5e>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010bd0:	4b1c      	ldr	r3, [pc, #112]	; (8010c44 <tcp_enqueue_flags+0x148>)
 8010bd2:	f240 4243 	movw	r2, #1091	; 0x443
 8010bd6:	4921      	ldr	r1, [pc, #132]	; (8010c5c <tcp_enqueue_flags+0x160>)
 8010bd8:	481c      	ldr	r0, [pc, #112]	; (8010c4c <tcp_enqueue_flags+0x150>)
 8010bda:	f001 fac7 	bl	801216c <iprintf>
 8010bde:	e7bf      	b.n	8010b60 <tcp_enqueue_flags+0x64>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010be0:	461a      	mov	r2, r3
 8010be2:	6813      	ldr	r3, [r2, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d1fb      	bne.n	8010be0 <tcp_enqueue_flags+0xe4>
    useg->next = seg;
 8010be8:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 8010bea:	2300      	movs	r3, #0
 8010bec:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010bf0:	b117      	cbz	r7, 8010bf8 <tcp_enqueue_flags+0xfc>
    pcb->snd_lbb++;
 8010bf2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 8010bf8:	f015 0f01 	tst.w	r5, #1
 8010bfc:	d003      	beq.n	8010c06 <tcp_enqueue_flags+0x10a>
    tcp_set_flags(pcb, TF_FIN);
 8010bfe:	8b63      	ldrh	r3, [r4, #26]
 8010c00:	f043 0320 	orr.w	r3, r3, #32
 8010c04:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010c06:	6870      	ldr	r0, [r6, #4]
 8010c08:	f7fc fab0 	bl	800d16c <pbuf_clen>
 8010c0c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8010c10:	4418      	add	r0, r3
 8010c12:	b280      	uxth	r0, r0
 8010c14:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8010c18:	b190      	cbz	r0, 8010c40 <tcp_enqueue_flags+0x144>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010c1a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010c1c:	b11b      	cbz	r3, 8010c26 <tcp_enqueue_flags+0x12a>
  return ERR_OK;
 8010c1e:	2000      	movs	r0, #0
}
 8010c20:	b003      	add	sp, #12
 8010c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010c26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010c28:	b10b      	cbz	r3, 8010c2e <tcp_enqueue_flags+0x132>
  return ERR_OK;
 8010c2a:	2000      	movs	r0, #0
 8010c2c:	e7f8      	b.n	8010c20 <tcp_enqueue_flags+0x124>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010c2e:	4b05      	ldr	r3, [pc, #20]	; (8010c44 <tcp_enqueue_flags+0x148>)
 8010c30:	f240 4266 	movw	r2, #1126	; 0x466
 8010c34:	490a      	ldr	r1, [pc, #40]	; (8010c60 <tcp_enqueue_flags+0x164>)
 8010c36:	4805      	ldr	r0, [pc, #20]	; (8010c4c <tcp_enqueue_flags+0x150>)
 8010c38:	f001 fa98 	bl	801216c <iprintf>
  return ERR_OK;
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	e7ef      	b.n	8010c20 <tcp_enqueue_flags+0x124>
 8010c40:	2000      	movs	r0, #0
 8010c42:	e7ed      	b.n	8010c20 <tcp_enqueue_flags+0x124>
 8010c44:	0806a134 	.word	0x0806a134
 8010c48:	08069a84 	.word	0x08069a84
 8010c4c:	0801335c 	.word	0x0801335c
 8010c50:	08069adc 	.word	0x08069adc
 8010c54:	08069afc 	.word	0x08069afc
 8010c58:	08069b38 	.word	0x08069b38
 8010c5c:	08069b50 	.word	0x08069b50
 8010c60:	08069b7c 	.word	0x08069b7c

08010c64 <tcp_send_fin>:
{
 8010c64:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010c66:	4605      	mov	r5, r0
 8010c68:	b110      	cbz	r0, 8010c70 <tcp_send_fin+0xc>
  if (pcb->unsent != NULL) {
 8010c6a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8010c6c:	b94c      	cbnz	r4, 8010c82 <tcp_send_fin+0x1e>
 8010c6e:	e012      	b.n	8010c96 <tcp_send_fin+0x32>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010c70:	4b12      	ldr	r3, [pc, #72]	; (8010cbc <tcp_send_fin+0x58>)
 8010c72:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010c76:	4912      	ldr	r1, [pc, #72]	; (8010cc0 <tcp_send_fin+0x5c>)
 8010c78:	4812      	ldr	r0, [pc, #72]	; (8010cc4 <tcp_send_fin+0x60>)
 8010c7a:	f001 fa77 	bl	801216c <iprintf>
 8010c7e:	e7f4      	b.n	8010c6a <tcp_send_fin+0x6>
         last_unsent = last_unsent->next);
 8010c80:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010c82:	6823      	ldr	r3, [r4, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d1fb      	bne.n	8010c80 <tcp_send_fin+0x1c>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010c88:	68e3      	ldr	r3, [r4, #12]
 8010c8a:	8998      	ldrh	r0, [r3, #12]
 8010c8c:	f7f8 fa54 	bl	8009138 <lwip_htons>
 8010c90:	f010 0f07 	tst.w	r0, #7
 8010c94:	d004      	beq.n	8010ca0 <tcp_send_fin+0x3c>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010c96:	2101      	movs	r1, #1
 8010c98:	4628      	mov	r0, r5
 8010c9a:	f7ff ff2f 	bl	8010afc <tcp_enqueue_flags>
}
 8010c9e:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010ca0:	68e6      	ldr	r6, [r4, #12]
 8010ca2:	89b4      	ldrh	r4, [r6, #12]
 8010ca4:	2001      	movs	r0, #1
 8010ca6:	f7f8 fa47 	bl	8009138 <lwip_htons>
 8010caa:	4320      	orrs	r0, r4
 8010cac:	81b0      	strh	r0, [r6, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010cae:	8b6b      	ldrh	r3, [r5, #26]
 8010cb0:	f043 0320 	orr.w	r3, r3, #32
 8010cb4:	836b      	strh	r3, [r5, #26]
      return ERR_OK;
 8010cb6:	2000      	movs	r0, #0
 8010cb8:	bd70      	pop	{r4, r5, r6, pc}
 8010cba:	bf00      	nop
 8010cbc:	0806a134 	.word	0x0806a134
 8010cc0:	08069eb0 	.word	0x08069eb0
 8010cc4:	0801335c 	.word	0x0801335c

08010cc8 <tcp_rexmit_rto_prepare>:
{
 8010cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010cca:	4605      	mov	r5, r0
 8010ccc:	b158      	cbz	r0, 8010ce6 <tcp_rexmit_rto_prepare+0x1e>
  if (pcb->unacked == NULL) {
 8010cce:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 8010cd0:	2c00      	cmp	r4, #0
 8010cd2:	d034      	beq.n	8010d3e <tcp_rexmit_rto_prepare+0x76>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010cd4:	6823      	ldr	r3, [r4, #0]
 8010cd6:	b173      	cbz	r3, 8010cf6 <tcp_rexmit_rto_prepare+0x2e>
    if (tcp_output_segment_busy(seg)) {
 8010cd8:	4620      	mov	r0, r4
 8010cda:	f7ff f8ed 	bl	800feb8 <tcp_output_segment_busy>
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	d130      	bne.n	8010d44 <tcp_rexmit_rto_prepare+0x7c>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010ce2:	6824      	ldr	r4, [r4, #0]
 8010ce4:	e7f6      	b.n	8010cd4 <tcp_rexmit_rto_prepare+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010ce6:	4b1a      	ldr	r3, [pc, #104]	; (8010d50 <tcp_rexmit_rto_prepare+0x88>)
 8010ce8:	f240 6263 	movw	r2, #1635	; 0x663
 8010cec:	4919      	ldr	r1, [pc, #100]	; (8010d54 <tcp_rexmit_rto_prepare+0x8c>)
 8010cee:	481a      	ldr	r0, [pc, #104]	; (8010d58 <tcp_rexmit_rto_prepare+0x90>)
 8010cf0:	f001 fa3c 	bl	801216c <iprintf>
 8010cf4:	e7eb      	b.n	8010cce <tcp_rexmit_rto_prepare+0x6>
  if (tcp_output_segment_busy(seg)) {
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	f7ff f8de 	bl	800feb8 <tcp_output_segment_busy>
 8010cfc:	bb28      	cbnz	r0, 8010d4a <tcp_rexmit_rto_prepare+0x82>
  seg->next = pcb->unsent;
 8010cfe:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8010d00:	6023      	str	r3, [r4, #0]
  pcb->unsent = pcb->unacked;
 8010d02:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010d04:	66eb      	str	r3, [r5, #108]	; 0x6c
  pcb->unacked = NULL;
 8010d06:	2300      	movs	r3, #0
 8010d08:	672b      	str	r3, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 8010d0a:	8b6b      	ldrh	r3, [r5, #26]
 8010d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010d10:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010d12:	68e3      	ldr	r3, [r4, #12]
 8010d14:	6858      	ldr	r0, [r3, #4]
 8010d16:	f7f8 fa14 	bl	8009142 <lwip_htonl>
 8010d1a:	4606      	mov	r6, r0
 8010d1c:	8927      	ldrh	r7, [r4, #8]
 8010d1e:	68e3      	ldr	r3, [r4, #12]
 8010d20:	8998      	ldrh	r0, [r3, #12]
 8010d22:	f7f8 fa09 	bl	8009138 <lwip_htons>
 8010d26:	f010 0f03 	tst.w	r0, #3
 8010d2a:	d006      	beq.n	8010d3a <tcp_rexmit_rto_prepare+0x72>
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	443b      	add	r3, r7
 8010d30:	441e      	add	r6, r3
 8010d32:	64ee      	str	r6, [r5, #76]	; 0x4c
  pcb->rttest = 0;
 8010d34:	2000      	movs	r0, #0
 8010d36:	6368      	str	r0, [r5, #52]	; 0x34
  return ERR_OK;
 8010d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	e7f7      	b.n	8010d2e <tcp_rexmit_rto_prepare+0x66>
    return ERR_VAL;
 8010d3e:	f06f 0005 	mvn.w	r0, #5
 8010d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ERR_VAL;
 8010d44:	f06f 0005 	mvn.w	r0, #5
 8010d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 8010d4a:	f06f 0005 	mvn.w	r0, #5
}
 8010d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d50:	0806a134 	.word	0x0806a134
 8010d54:	08069e34 	.word	0x08069e34
 8010d58:	0801335c 	.word	0x0801335c

08010d5c <tcp_rexmit>:
{
 8010d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010d5e:	4607      	mov	r7, r0
 8010d60:	b160      	cbz	r0, 8010d7c <tcp_rexmit+0x20>
  if (pcb->unacked == NULL) {
 8010d62:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8010d64:	2e00      	cmp	r6, #0
 8010d66:	d032      	beq.n	8010dce <tcp_rexmit+0x72>
  if (tcp_output_segment_busy(seg)) {
 8010d68:	4630      	mov	r0, r6
 8010d6a:	f7ff f8a5 	bl	800feb8 <tcp_output_segment_busy>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	d130      	bne.n	8010dd4 <tcp_rexmit+0x78>
  pcb->unacked = seg->next;
 8010d72:	6833      	ldr	r3, [r6, #0]
 8010d74:	673b      	str	r3, [r7, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 8010d76:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 8010d7a:	e008      	b.n	8010d8e <tcp_rexmit+0x32>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010d7c:	4b17      	ldr	r3, [pc, #92]	; (8010ddc <tcp_rexmit+0x80>)
 8010d7e:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010d82:	4917      	ldr	r1, [pc, #92]	; (8010de0 <tcp_rexmit+0x84>)
 8010d84:	4817      	ldr	r0, [pc, #92]	; (8010de4 <tcp_rexmit+0x88>)
 8010d86:	f001 f9f1 	bl	801216c <iprintf>
 8010d8a:	e7ea      	b.n	8010d62 <tcp_rexmit+0x6>
    cur_seg = &((*cur_seg)->next );
 8010d8c:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 8010d8e:	682b      	ldr	r3, [r5, #0]
 8010d90:	b15b      	cbz	r3, 8010daa <tcp_rexmit+0x4e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	6858      	ldr	r0, [r3, #4]
 8010d96:	f7f8 f9d4 	bl	8009142 <lwip_htonl>
 8010d9a:	4604      	mov	r4, r0
 8010d9c:	68f3      	ldr	r3, [r6, #12]
 8010d9e:	6858      	ldr	r0, [r3, #4]
 8010da0:	f7f8 f9cf 	bl	8009142 <lwip_htonl>
 8010da4:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 8010da6:	2800      	cmp	r0, #0
 8010da8:	dbf0      	blt.n	8010d8c <tcp_rexmit+0x30>
  seg->next = *cur_seg;
 8010daa:	682b      	ldr	r3, [r5, #0]
 8010dac:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 8010dae:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 8010db0:	6833      	ldr	r3, [r6, #0]
 8010db2:	b14b      	cbz	r3, 8010dc8 <tcp_rexmit+0x6c>
  if (pcb->nrtx < 0xFF) {
 8010db4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8010db8:	2bff      	cmp	r3, #255	; 0xff
 8010dba:	d002      	beq.n	8010dc2 <tcp_rexmit+0x66>
    ++pcb->nrtx;
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 8010dc2:	2000      	movs	r0, #0
 8010dc4:	6378      	str	r0, [r7, #52]	; 0x34
  return ERR_OK;
 8010dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 8010dc8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8010dcc:	e7f2      	b.n	8010db4 <tcp_rexmit+0x58>
    return ERR_VAL;
 8010dce:	f06f 0005 	mvn.w	r0, #5
 8010dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 8010dd4:	f06f 0005 	mvn.w	r0, #5
}
 8010dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	0806a134 	.word	0x0806a134
 8010de0:	08069dbc 	.word	0x08069dbc
 8010de4:	0801335c 	.word	0x0801335c

08010de8 <tcp_rexmit_fast>:
{
 8010de8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010dea:	4604      	mov	r4, r0
 8010dec:	b130      	cbz	r0, 8010dfc <tcp_rexmit_fast+0x14>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010dee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010df0:	b11b      	cbz	r3, 8010dfa <tcp_rexmit_fast+0x12>
 8010df2:	8b63      	ldrh	r3, [r4, #26]
 8010df4:	f013 0f04 	tst.w	r3, #4
 8010df8:	d008      	beq.n	8010e0c <tcp_rexmit_fast+0x24>
 8010dfa:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010dfc:	4b16      	ldr	r3, [pc, #88]	; (8010e58 <tcp_rexmit_fast+0x70>)
 8010dfe:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010e02:	4916      	ldr	r1, [pc, #88]	; (8010e5c <tcp_rexmit_fast+0x74>)
 8010e04:	4816      	ldr	r0, [pc, #88]	; (8010e60 <tcp_rexmit_fast+0x78>)
 8010e06:	f001 f9b1 	bl	801216c <iprintf>
 8010e0a:	e7f0      	b.n	8010dee <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f7ff ffa5 	bl	8010d5c <tcp_rexmit>
 8010e12:	2800      	cmp	r0, #0
 8010e14:	d1f1      	bne.n	8010dfa <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010e16:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010e1a:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d218      	bcs.n	8010e54 <tcp_rexmit_fast+0x6c>
 8010e22:	085a      	lsrs	r2, r3, #1
 8010e24:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010e28:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8010e2a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8010e2e:	d202      	bcs.n	8010e36 <tcp_rexmit_fast+0x4e>
        pcb->ssthresh = 2 * pcb->mss;
 8010e30:	005a      	lsls	r2, r3, #1
 8010e32:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010e36:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8010e3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010e3e:	fa12 f383 	uxtah	r3, r2, r3
 8010e42:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010e46:	8b63      	ldrh	r3, [r4, #26]
 8010e48:	f043 0304 	orr.w	r3, r3, #4
 8010e4c:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	8623      	strh	r3, [r4, #48]	; 0x30
}
 8010e52:	e7d2      	b.n	8010dfa <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010e54:	0852      	lsrs	r2, r2, #1
 8010e56:	e7e5      	b.n	8010e24 <tcp_rexmit_fast+0x3c>
 8010e58:	0806a134 	.word	0x0806a134
 8010e5c:	08069dd4 	.word	0x08069dd4
 8010e60:	0801335c 	.word	0x0801335c

08010e64 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e68:	b084      	sub	sp, #16
 8010e6a:	4605      	mov	r5, r0
 8010e6c:	4688      	mov	r8, r1
 8010e6e:	4616      	mov	r6, r2
 8010e70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010e72:	461f      	mov	r7, r3
 8010e74:	b32b      	cbz	r3, 8010ec2 <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010e76:	b364      	cbz	r4, 8010ed2 <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010e78:	4640      	mov	r0, r8
 8010e7a:	f7f8 f962 	bl	8009142 <lwip_htonl>
 8010e7e:	f24a 032d 	movw	r3, #41005	; 0xa02d
 8010e82:	9303      	str	r3, [sp, #12]
 8010e84:	2314      	movs	r3, #20
 8010e86:	9302      	str	r3, [sp, #8]
 8010e88:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8010e8c:	9301      	str	r3, [sp, #4]
 8010e8e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8010e92:	9300      	str	r3, [sp, #0]
 8010e94:	4603      	mov	r3, r0
 8010e96:	2200      	movs	r2, #0
 8010e98:	4611      	mov	r1, r2
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	f7ff f924 	bl	80100e8 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010ea0:	4606      	mov	r6, r0
 8010ea2:	b158      	cbz	r0, 8010ebc <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	4601      	mov	r1, r0
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f7ff f81e 	bl	800feec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010eb0:	4623      	mov	r3, r4
 8010eb2:	463a      	mov	r2, r7
 8010eb4:	4631      	mov	r1, r6
 8010eb6:	4628      	mov	r0, r5
 8010eb8:	f7ff fa48 	bl	801034c <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010ebc:	b004      	add	sp, #16
 8010ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010ec2:	4b08      	ldr	r3, [pc, #32]	; (8010ee4 <tcp_rst+0x80>)
 8010ec4:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010ec8:	4907      	ldr	r1, [pc, #28]	; (8010ee8 <tcp_rst+0x84>)
 8010eca:	4808      	ldr	r0, [pc, #32]	; (8010eec <tcp_rst+0x88>)
 8010ecc:	f001 f94e 	bl	801216c <iprintf>
 8010ed0:	e7d1      	b.n	8010e76 <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010ed2:	4b04      	ldr	r3, [pc, #16]	; (8010ee4 <tcp_rst+0x80>)
 8010ed4:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010ed8:	4905      	ldr	r1, [pc, #20]	; (8010ef0 <tcp_rst+0x8c>)
 8010eda:	4804      	ldr	r0, [pc, #16]	; (8010eec <tcp_rst+0x88>)
 8010edc:	f001 f946 	bl	801216c <iprintf>
 8010ee0:	e7ca      	b.n	8010e78 <tcp_rst+0x14>
 8010ee2:	bf00      	nop
 8010ee4:	0806a134 	.word	0x0806a134
 8010ee8:	08069e58 	.word	0x08069e58
 8010eec:	0801335c 	.word	0x0801335c
 8010ef0:	08069e74 	.word	0x08069e74

08010ef4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010ef4:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010ef6:	4604      	mov	r4, r0
 8010ef8:	b1f0      	cbz	r0, 8010f38 <tcp_send_empty_ack+0x44>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010efa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010efc:	f7f8 f921 	bl	8009142 <lwip_htonl>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2200      	movs	r2, #0
 8010f04:	4611      	mov	r1, r2
 8010f06:	4620      	mov	r0, r4
 8010f08:	f7ff f93a 	bl	8010180 <tcp_output_alloc_header>
  if (p == NULL) {
 8010f0c:	4605      	mov	r5, r0
 8010f0e:	b1d8      	cbz	r0, 8010f48 <tcp_send_empty_ack+0x54>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010f10:	2300      	movs	r3, #0
 8010f12:	461a      	mov	r2, r3
 8010f14:	4601      	mov	r1, r0
 8010f16:	4620      	mov	r0, r4
 8010f18:	f7fe ffe8 	bl	800feec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010f1c:	1d23      	adds	r3, r4, #4
 8010f1e:	4622      	mov	r2, r4
 8010f20:	4629      	mov	r1, r5
 8010f22:	4620      	mov	r0, r4
 8010f24:	f7ff fa12 	bl	801034c <tcp_output_control_segment>
  if (err != ERR_OK) {
 8010f28:	4602      	mov	r2, r0
 8010f2a:	b9a0      	cbnz	r0, 8010f56 <tcp_send_empty_ack+0x62>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f2c:	8b63      	ldrh	r3, [r4, #26]
 8010f2e:	f023 0303 	bic.w	r3, r3, #3
 8010f32:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 8010f34:	4610      	mov	r0, r2
 8010f36:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010f38:	4b09      	ldr	r3, [pc, #36]	; (8010f60 <tcp_send_empty_ack+0x6c>)
 8010f3a:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010f3e:	4909      	ldr	r1, [pc, #36]	; (8010f64 <tcp_send_empty_ack+0x70>)
 8010f40:	4809      	ldr	r0, [pc, #36]	; (8010f68 <tcp_send_empty_ack+0x74>)
 8010f42:	f001 f913 	bl	801216c <iprintf>
 8010f46:	e7d8      	b.n	8010efa <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f48:	8b63      	ldrh	r3, [r4, #26]
 8010f4a:	f043 0303 	orr.w	r3, r3, #3
 8010f4e:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 8010f50:	f06f 0201 	mvn.w	r2, #1
 8010f54:	e7ee      	b.n	8010f34 <tcp_send_empty_ack+0x40>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f56:	8b63      	ldrh	r3, [r4, #26]
 8010f58:	f043 0303 	orr.w	r3, r3, #3
 8010f5c:	8363      	strh	r3, [r4, #26]
 8010f5e:	e7e9      	b.n	8010f34 <tcp_send_empty_ack+0x40>
 8010f60:	0806a134 	.word	0x0806a134
 8010f64:	08069e90 	.word	0x08069e90
 8010f68:	0801335c 	.word	0x0801335c

08010f6c <tcp_output>:
{
 8010f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010f70:	4605      	mov	r5, r0
 8010f72:	2800      	cmp	r0, #0
 8010f74:	d03e      	beq.n	8010ff4 <tcp_output+0x88>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010f76:	7d2b      	ldrb	r3, [r5, #20]
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	d043      	beq.n	8011004 <tcp_output+0x98>
  if (tcp_input_pcb == pcb) {
 8010f7c:	4ba9      	ldr	r3, [pc, #676]	; (8011224 <tcp_output+0x2b8>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	429d      	cmp	r5, r3
 8010f82:	f000 8146 	beq.w	8011212 <tcp_output+0x2a6>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010f86:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8010f8a:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 8010f8e:	42bb      	cmp	r3, r7
 8010f90:	d200      	bcs.n	8010f94 <tcp_output+0x28>
 8010f92:	461f      	mov	r7, r3
  seg = pcb->unsent;
 8010f94:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 8010f96:	2c00      	cmp	r4, #0
 8010f98:	d03c      	beq.n	8011014 <tcp_output+0xa8>
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010f9a:	1d2a      	adds	r2, r5, #4
 8010f9c:	4629      	mov	r1, r5
 8010f9e:	4628      	mov	r0, r5
 8010fa0:	f7ff f91a 	bl	80101d8 <tcp_route>
  if (netif == NULL) {
 8010fa4:	4680      	mov	r8, r0
 8010fa6:	2800      	cmp	r0, #0
 8010fa8:	f000 8135 	beq.w	8011216 <tcp_output+0x2aa>
  if (ip_addr_isany(&pcb->local_ip)) {
 8010fac:	b10d      	cbz	r5, 8010fb2 <tcp_output+0x46>
 8010fae:	682b      	ldr	r3, [r5, #0]
 8010fb0:	b933      	cbnz	r3, 8010fc0 <tcp_output+0x54>
    if (local_ip == NULL) {
 8010fb2:	f118 0f04 	cmn.w	r8, #4
 8010fb6:	f000 8131 	beq.w	801121c <tcp_output+0x2b0>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010fba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010fbe:	602b      	str	r3, [r5, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010fc0:	68e3      	ldr	r3, [r4, #12]
 8010fc2:	6858      	ldr	r0, [r3, #4]
 8010fc4:	f7f8 f8bd 	bl	8009142 <lwip_htonl>
 8010fc8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8010fca:	1ac0      	subs	r0, r0, r3
 8010fcc:	8923      	ldrh	r3, [r4, #8]
 8010fce:	4418      	add	r0, r3
 8010fd0:	4287      	cmp	r7, r0
 8010fd2:	d23c      	bcs.n	801104e <tcp_output+0xe2>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010fd4:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8010fd8:	429f      	cmp	r7, r3
 8010fda:	d024      	beq.n	8011026 <tcp_output+0xba>
    if (pcb->flags & TF_ACK_NOW) {
 8010fdc:	8b6b      	ldrh	r3, [r5, #26]
 8010fde:	f013 0f02 	tst.w	r3, #2
 8010fe2:	d12f      	bne.n	8011044 <tcp_output+0xd8>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010fe4:	8b6b      	ldrh	r3, [r5, #26]
 8010fe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010fea:	836b      	strh	r3, [r5, #26]
  return ERR_OK;
 8010fec:	2300      	movs	r3, #0
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010ff4:	4b8c      	ldr	r3, [pc, #560]	; (8011228 <tcp_output+0x2bc>)
 8010ff6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010ffa:	498c      	ldr	r1, [pc, #560]	; (801122c <tcp_output+0x2c0>)
 8010ffc:	488c      	ldr	r0, [pc, #560]	; (8011230 <tcp_output+0x2c4>)
 8010ffe:	f001 f8b5 	bl	801216c <iprintf>
 8011002:	e7b8      	b.n	8010f76 <tcp_output+0xa>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011004:	4b88      	ldr	r3, [pc, #544]	; (8011228 <tcp_output+0x2bc>)
 8011006:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801100a:	498a      	ldr	r1, [pc, #552]	; (8011234 <tcp_output+0x2c8>)
 801100c:	4888      	ldr	r0, [pc, #544]	; (8011230 <tcp_output+0x2c4>)
 801100e:	f001 f8ad 	bl	801216c <iprintf>
 8011012:	e7b3      	b.n	8010f7c <tcp_output+0x10>
    if (pcb->flags & TF_ACK_NOW) {
 8011014:	8b6b      	ldrh	r3, [r5, #26]
 8011016:	f013 0f02 	tst.w	r3, #2
 801101a:	d0e3      	beq.n	8010fe4 <tcp_output+0x78>
      return tcp_send_empty_ack(pcb);
 801101c:	4628      	mov	r0, r5
 801101e:	f7ff ff69 	bl	8010ef4 <tcp_send_empty_ack>
 8011022:	4603      	mov	r3, r0
 8011024:	e7e3      	b.n	8010fee <tcp_output+0x82>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011026:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8011028:	2b00      	cmp	r3, #0
 801102a:	d1d7      	bne.n	8010fdc <tcp_output+0x70>
 801102c:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 8011030:	2b00      	cmp	r3, #0
 8011032:	d1d3      	bne.n	8010fdc <tcp_output+0x70>
      pcb->persist_cnt = 0;
 8011034:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 8011038:	2201      	movs	r2, #1
 801103a:	f885 2095 	strb.w	r2, [r5, #149]	; 0x95
      pcb->persist_probe = 0;
 801103e:	f885 3096 	strb.w	r3, [r5, #150]	; 0x96
 8011042:	e7cb      	b.n	8010fdc <tcp_output+0x70>
      return tcp_send_empty_ack(pcb);
 8011044:	4628      	mov	r0, r5
 8011046:	f7ff ff55 	bl	8010ef4 <tcp_send_empty_ack>
 801104a:	4603      	mov	r3, r0
 801104c:	e7cf      	b.n	8010fee <tcp_output+0x82>
  pcb->persist_backoff = 0;
 801104e:	2300      	movs	r3, #0
 8011050:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
  useg = pcb->unacked;
 8011054:	6f2e      	ldr	r6, [r5, #112]	; 0x70
  if (useg != NULL) {
 8011056:	b90e      	cbnz	r6, 801105c <tcp_output+0xf0>
 8011058:	e07c      	b.n	8011154 <tcp_output+0x1e8>
    for (; useg->next != NULL; useg = useg->next);
 801105a:	461e      	mov	r6, r3
 801105c:	6833      	ldr	r3, [r6, #0]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d1fb      	bne.n	801105a <tcp_output+0xee>
 8011062:	e077      	b.n	8011154 <tcp_output+0x1e8>
    LWIP_ASSERT("RST not expected here!",
 8011064:	4b70      	ldr	r3, [pc, #448]	; (8011228 <tcp_output+0x2bc>)
 8011066:	f240 5237 	movw	r2, #1335	; 0x537
 801106a:	4973      	ldr	r1, [pc, #460]	; (8011238 <tcp_output+0x2cc>)
 801106c:	4870      	ldr	r0, [pc, #448]	; (8011230 <tcp_output+0x2c4>)
 801106e:	f001 f87d 	bl	801216c <iprintf>
 8011072:	e083      	b.n	801117c <tcp_output+0x210>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011074:	891a      	ldrh	r2, [r3, #8]
 8011076:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8011078:	429a      	cmp	r2, r3
 801107a:	f080 8090 	bcs.w	801119e <tcp_output+0x232>
 801107e:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8011082:	2b00      	cmp	r3, #0
 8011084:	f000 808d 	beq.w	80111a2 <tcp_output+0x236>
 8011088:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801108c:	2b07      	cmp	r3, #7
 801108e:	f240 808a 	bls.w	80111a6 <tcp_output+0x23a>
 8011092:	2301      	movs	r3, #1
 8011094:	e002      	b.n	801109c <tcp_output+0x130>
 8011096:	2301      	movs	r3, #1
 8011098:	e000      	b.n	801109c <tcp_output+0x130>
 801109a:	2301      	movs	r3, #1
 801109c:	b923      	cbnz	r3, 80110a8 <tcp_output+0x13c>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801109e:	8b6b      	ldrh	r3, [r5, #26]
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80110a0:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 80110a4:	f000 80ae 	beq.w	8011204 <tcp_output+0x298>
    if (pcb->state != SYN_SENT) {
 80110a8:	7d2b      	ldrb	r3, [r5, #20]
 80110aa:	2b02      	cmp	r3, #2
 80110ac:	d00a      	beq.n	80110c4 <tcp_output+0x158>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80110ae:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80110b2:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 80110b6:	2010      	movs	r0, #16
 80110b8:	f7f8 f83e 	bl	8009138 <lwip_htons>
 80110bc:	ea49 0000 	orr.w	r0, r9, r0
 80110c0:	f8aa 000c 	strh.w	r0, [sl, #12]
    err = tcp_output_segment(seg, pcb, netif);
 80110c4:	4642      	mov	r2, r8
 80110c6:	4629      	mov	r1, r5
 80110c8:	4620      	mov	r0, r4
 80110ca:	f7ff f891 	bl	80101f0 <tcp_output_segment>
    if (err != ERR_OK) {
 80110ce:	4603      	mov	r3, r0
 80110d0:	2800      	cmp	r0, #0
 80110d2:	d16a      	bne.n	80111aa <tcp_output+0x23e>
    pcb->unsent = seg->next;
 80110d4:	6823      	ldr	r3, [r4, #0]
 80110d6:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80110d8:	7d2b      	ldrb	r3, [r5, #20]
 80110da:	2b02      	cmp	r3, #2
 80110dc:	d003      	beq.n	80110e6 <tcp_output+0x17a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110de:	8b6b      	ldrh	r3, [r5, #26]
 80110e0:	f023 0303 	bic.w	r3, r3, #3
 80110e4:	836b      	strh	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80110e6:	68e3      	ldr	r3, [r4, #12]
 80110e8:	6858      	ldr	r0, [r3, #4]
 80110ea:	f7f8 f82a 	bl	8009142 <lwip_htonl>
 80110ee:	4681      	mov	r9, r0
 80110f0:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 80110f4:	68e3      	ldr	r3, [r4, #12]
 80110f6:	8998      	ldrh	r0, [r3, #12]
 80110f8:	f7f8 f81e 	bl	8009138 <lwip_htons>
 80110fc:	f010 0f03 	tst.w	r0, #3
 8011100:	d058      	beq.n	80111b4 <tcp_output+0x248>
 8011102:	2001      	movs	r0, #1
 8011104:	4450      	add	r0, sl
 8011106:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011108:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801110a:	1a1b      	subs	r3, r3, r0
 801110c:	2b00      	cmp	r3, #0
 801110e:	db53      	blt.n	80111b8 <tcp_output+0x24c>
    if (TCP_TCPLEN(seg) > 0) {
 8011110:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 8011114:	68e3      	ldr	r3, [r4, #12]
 8011116:	8998      	ldrh	r0, [r3, #12]
 8011118:	f7f8 f80e 	bl	8009138 <lwip_htons>
 801111c:	f010 0f03 	tst.w	r0, #3
 8011120:	d04c      	beq.n	80111bc <tcp_output+0x250>
 8011122:	2301      	movs	r3, #1
 8011124:	eb13 0f09 	cmn.w	r3, r9
 8011128:	d068      	beq.n	80111fc <tcp_output+0x290>
      seg->next = NULL;
 801112a:	2300      	movs	r3, #0
 801112c:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 801112e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8011130:	2b00      	cmp	r3, #0
 8011132:	d045      	beq.n	80111c0 <tcp_output+0x254>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011134:	68e3      	ldr	r3, [r4, #12]
 8011136:	6858      	ldr	r0, [r3, #4]
 8011138:	f7f8 f803 	bl	8009142 <lwip_htonl>
 801113c:	4681      	mov	r9, r0
 801113e:	68f3      	ldr	r3, [r6, #12]
 8011140:	6858      	ldr	r0, [r3, #4]
 8011142:	f7f7 fffe 	bl	8009142 <lwip_htonl>
 8011146:	eba9 0000 	sub.w	r0, r9, r0
 801114a:	2800      	cmp	r0, #0
 801114c:	db3b      	blt.n	80111c6 <tcp_output+0x25a>
          useg->next = seg;
 801114e:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 8011150:	4626      	mov	r6, r4
    seg = pcb->unsent;
 8011152:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
 8011154:	2c00      	cmp	r4, #0
 8011156:	d055      	beq.n	8011204 <tcp_output+0x298>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011158:	68e3      	ldr	r3, [r4, #12]
 801115a:	6858      	ldr	r0, [r3, #4]
 801115c:	f7f7 fff1 	bl	8009142 <lwip_htonl>
 8011160:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8011162:	1ac0      	subs	r0, r0, r3
 8011164:	8923      	ldrh	r3, [r4, #8]
 8011166:	4418      	add	r0, r3
  while (seg != NULL &&
 8011168:	4287      	cmp	r7, r0
 801116a:	d34b      	bcc.n	8011204 <tcp_output+0x298>
    LWIP_ASSERT("RST not expected here!",
 801116c:	68e3      	ldr	r3, [r4, #12]
 801116e:	8998      	ldrh	r0, [r3, #12]
 8011170:	f7f7 ffe2 	bl	8009138 <lwip_htons>
 8011174:	f010 0f04 	tst.w	r0, #4
 8011178:	f47f af74 	bne.w	8011064 <tcp_output+0xf8>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801117c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801117e:	2b00      	cmp	r3, #0
 8011180:	d089      	beq.n	8011096 <tcp_output+0x12a>
 8011182:	8b6b      	ldrh	r3, [r5, #26]
 8011184:	f013 0f44 	tst.w	r3, #68	; 0x44
 8011188:	d187      	bne.n	801109a <tcp_output+0x12e>
 801118a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801118c:	2b00      	cmp	r3, #0
 801118e:	f43f af76 	beq.w	801107e <tcp_output+0x112>
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	2a00      	cmp	r2, #0
 8011196:	f43f af6d 	beq.w	8011074 <tcp_output+0x108>
 801119a:	2301      	movs	r3, #1
 801119c:	e77e      	b.n	801109c <tcp_output+0x130>
 801119e:	2301      	movs	r3, #1
 80111a0:	e77c      	b.n	801109c <tcp_output+0x130>
 80111a2:	2301      	movs	r3, #1
 80111a4:	e77a      	b.n	801109c <tcp_output+0x130>
 80111a6:	2300      	movs	r3, #0
 80111a8:	e778      	b.n	801109c <tcp_output+0x130>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80111aa:	8b6a      	ldrh	r2, [r5, #26]
 80111ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80111b0:	836a      	strh	r2, [r5, #26]
      return err;
 80111b2:	e71c      	b.n	8010fee <tcp_output+0x82>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80111b4:	2000      	movs	r0, #0
 80111b6:	e7a5      	b.n	8011104 <tcp_output+0x198>
      pcb->snd_nxt = snd_nxt;
 80111b8:	6528      	str	r0, [r5, #80]	; 0x50
 80111ba:	e7a9      	b.n	8011110 <tcp_output+0x1a4>
    if (TCP_TCPLEN(seg) > 0) {
 80111bc:	2300      	movs	r3, #0
 80111be:	e7b1      	b.n	8011124 <tcp_output+0x1b8>
        pcb->unacked = seg;
 80111c0:	672c      	str	r4, [r5, #112]	; 0x70
        useg = seg;
 80111c2:	4626      	mov	r6, r4
 80111c4:	e7c5      	b.n	8011152 <tcp_output+0x1e6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80111c6:	f105 0a70 	add.w	sl, r5, #112	; 0x70
          while (*cur_seg &&
 80111ca:	e001      	b.n	80111d0 <tcp_output+0x264>
            cur_seg = &((*cur_seg)->next );
 80111cc:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 80111d0:	f8da 3000 	ldr.w	r3, [sl]
 80111d4:	b163      	cbz	r3, 80111f0 <tcp_output+0x284>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	6858      	ldr	r0, [r3, #4]
 80111da:	f7f7 ffb2 	bl	8009142 <lwip_htonl>
 80111de:	4681      	mov	r9, r0
 80111e0:	68e3      	ldr	r3, [r4, #12]
 80111e2:	6858      	ldr	r0, [r3, #4]
 80111e4:	f7f7 ffad 	bl	8009142 <lwip_htonl>
 80111e8:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 80111ec:	2800      	cmp	r0, #0
 80111ee:	dbed      	blt.n	80111cc <tcp_output+0x260>
          seg->next = (*cur_seg);
 80111f0:	f8da 3000 	ldr.w	r3, [sl]
 80111f4:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 80111f6:	f8ca 4000 	str.w	r4, [sl]
 80111fa:	e7aa      	b.n	8011152 <tcp_output+0x1e6>
      tcp_seg_free(seg);
 80111fc:	4620      	mov	r0, r4
 80111fe:	f7fc fbe5 	bl	800d9cc <tcp_seg_free>
 8011202:	e7a6      	b.n	8011152 <tcp_output+0x1e6>
  if (pcb->unsent == NULL) {
 8011204:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8011206:	2b00      	cmp	r3, #0
 8011208:	f47f aeec 	bne.w	8010fe4 <tcp_output+0x78>
    pcb->unsent_oversize = 0;
 801120c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8011210:	e6e8      	b.n	8010fe4 <tcp_output+0x78>
    return ERR_OK;
 8011212:	2300      	movs	r3, #0
 8011214:	e6eb      	b.n	8010fee <tcp_output+0x82>
    return ERR_RTE;
 8011216:	f06f 0303 	mvn.w	r3, #3
 801121a:	e6e8      	b.n	8010fee <tcp_output+0x82>
      return ERR_RTE;
 801121c:	f06f 0303 	mvn.w	r3, #3
 8011220:	e6e5      	b.n	8010fee <tcp_output+0x82>
 8011222:	bf00      	nop
 8011224:	2000d860 	.word	0x2000d860
 8011228:	0806a134 	.word	0x0806a134
 801122c:	08069bc0 	.word	0x08069bc0
 8011230:	0801335c 	.word	0x0801335c
 8011234:	08069bd8 	.word	0x08069bd8
 8011238:	08069c00 	.word	0x08069c00

0801123c <tcp_rexmit_rto_commit>:
{
 801123c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801123e:	4604      	mov	r4, r0
 8011240:	b150      	cbz	r0, 8011258 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 8011242:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8011246:	2bff      	cmp	r3, #255	; 0xff
 8011248:	d002      	beq.n	8011250 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801124a:	3301      	adds	r3, #1
 801124c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 8011250:	4620      	mov	r0, r4
 8011252:	f7ff fe8b 	bl	8010f6c <tcp_output>
 8011256:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011258:	4b03      	ldr	r3, [pc, #12]	; (8011268 <tcp_rexmit_rto_commit+0x2c>)
 801125a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801125e:	4903      	ldr	r1, [pc, #12]	; (801126c <tcp_rexmit_rto_commit+0x30>)
 8011260:	4803      	ldr	r0, [pc, #12]	; (8011270 <tcp_rexmit_rto_commit+0x34>)
 8011262:	f000 ff83 	bl	801216c <iprintf>
 8011266:	e7ec      	b.n	8011242 <tcp_rexmit_rto_commit+0x6>
 8011268:	0806a134 	.word	0x0806a134
 801126c:	08069e10 	.word	0x08069e10
 8011270:	0801335c 	.word	0x0801335c

08011274 <tcp_rexmit_rto>:
{
 8011274:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011276:	4604      	mov	r4, r0
 8011278:	b120      	cbz	r0, 8011284 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801127a:	4620      	mov	r0, r4
 801127c:	f7ff fd24 	bl	8010cc8 <tcp_rexmit_rto_prepare>
 8011280:	b140      	cbz	r0, 8011294 <tcp_rexmit_rto+0x20>
 8011282:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011284:	4b05      	ldr	r3, [pc, #20]	; (801129c <tcp_rexmit_rto+0x28>)
 8011286:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801128a:	4905      	ldr	r1, [pc, #20]	; (80112a0 <tcp_rexmit_rto+0x2c>)
 801128c:	4805      	ldr	r0, [pc, #20]	; (80112a4 <tcp_rexmit_rto+0x30>)
 801128e:	f000 ff6d 	bl	801216c <iprintf>
 8011292:	e7f2      	b.n	801127a <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 8011294:	4620      	mov	r0, r4
 8011296:	f7ff ffd1 	bl	801123c <tcp_rexmit_rto_commit>
}
 801129a:	e7f2      	b.n	8011282 <tcp_rexmit_rto+0xe>
 801129c:	0806a134 	.word	0x0806a134
 80112a0:	08069df4 	.word	0x08069df4
 80112a4:	0801335c 	.word	0x0801335c

080112a8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80112a8:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80112aa:	4604      	mov	r4, r0
 80112ac:	b1c0      	cbz	r0, 80112e0 <tcp_keepalive+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80112ae:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80112b0:	3801      	subs	r0, #1
 80112b2:	f7f7 ff46 	bl	8009142 <lwip_htonl>
 80112b6:	4603      	mov	r3, r0
 80112b8:	2200      	movs	r2, #0
 80112ba:	4611      	mov	r1, r2
 80112bc:	4620      	mov	r0, r4
 80112be:	f7fe ff5f 	bl	8010180 <tcp_output_alloc_header>
  if (p == NULL) {
 80112c2:	4605      	mov	r5, r0
 80112c4:	b1a0      	cbz	r0, 80112f0 <tcp_keepalive+0x48>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80112c6:	2300      	movs	r3, #0
 80112c8:	461a      	mov	r2, r3
 80112ca:	4601      	mov	r1, r0
 80112cc:	4620      	mov	r0, r4
 80112ce:	f7fe fe0d 	bl	800feec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80112d2:	1d23      	adds	r3, r4, #4
 80112d4:	4622      	mov	r2, r4
 80112d6:	4629      	mov	r1, r5
 80112d8:	4620      	mov	r0, r4
 80112da:	f7ff f837 	bl	801034c <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80112de:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80112e0:	4b05      	ldr	r3, [pc, #20]	; (80112f8 <tcp_keepalive+0x50>)
 80112e2:	f640 0224 	movw	r2, #2084	; 0x824
 80112e6:	4905      	ldr	r1, [pc, #20]	; (80112fc <tcp_keepalive+0x54>)
 80112e8:	4805      	ldr	r0, [pc, #20]	; (8011300 <tcp_keepalive+0x58>)
 80112ea:	f000 ff3f 	bl	801216c <iprintf>
 80112ee:	e7de      	b.n	80112ae <tcp_keepalive+0x6>
    return ERR_MEM;
 80112f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80112f4:	bd38      	pop	{r3, r4, r5, pc}
 80112f6:	bf00      	nop
 80112f8:	0806a134 	.word	0x0806a134
 80112fc:	08069ba4 	.word	0x08069ba4
 8011300:	0801335c 	.word	0x0801335c

08011304 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011308:	4604      	mov	r4, r0
 801130a:	b1a8      	cbz	r0, 8011338 <tcp_zero_window_probe+0x34>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801130c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801130e:	2d00      	cmp	r5, #0
 8011310:	d05b      	beq.n	80113ca <tcp_zero_window_probe+0xc6>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011312:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8011316:	2bff      	cmp	r3, #255	; 0xff
 8011318:	d002      	beq.n	8011320 <tcp_zero_window_probe+0x1c>
    ++pcb->persist_probe;
 801131a:	3301      	adds	r3, #1
 801131c:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011320:	68eb      	ldr	r3, [r5, #12]
 8011322:	8998      	ldrh	r0, [r3, #12]
 8011324:	f7f7 ff08 	bl	8009138 <lwip_htons>
 8011328:	f010 0f01 	tst.w	r0, #1
 801132c:	d00c      	beq.n	8011348 <tcp_zero_window_probe+0x44>
 801132e:	892b      	ldrh	r3, [r5, #8]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d03b      	beq.n	80113ac <tcp_zero_window_probe+0xa8>
 8011334:	2200      	movs	r2, #0
 8011336:	e008      	b.n	801134a <tcp_zero_window_probe+0x46>
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011338:	4b27      	ldr	r3, [pc, #156]	; (80113d8 <tcp_zero_window_probe+0xd4>)
 801133a:	f640 024f 	movw	r2, #2127	; 0x84f
 801133e:	4927      	ldr	r1, [pc, #156]	; (80113dc <tcp_zero_window_probe+0xd8>)
 8011340:	4827      	ldr	r0, [pc, #156]	; (80113e0 <tcp_zero_window_probe+0xdc>)
 8011342:	f000 ff13 	bl	801216c <iprintf>
 8011346:	e7e1      	b.n	801130c <tcp_zero_window_probe+0x8>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011348:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801134a:	f002 07ff 	and.w	r7, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801134e:	68eb      	ldr	r3, [r5, #12]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	f082 0201 	eor.w	r2, r2, #1
 8011356:	2100      	movs	r1, #0
 8011358:	4620      	mov	r0, r4
 801135a:	f7fe ff11 	bl	8010180 <tcp_output_alloc_header>
  if (p == NULL) {
 801135e:	4606      	mov	r6, r0
 8011360:	b3b0      	cbz	r0, 80113d0 <tcp_zero_window_probe+0xcc>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011362:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8011366:	b31f      	cbz	r7, 80113b0 <tcp_zero_window_probe+0xac>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011368:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801136c:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8011370:	2011      	movs	r0, #17
 8011372:	f7f7 fee1 	bl	8009138 <lwip_htons>
 8011376:	b200      	sxth	r0, r0
 8011378:	4307      	orrs	r7, r0
 801137a:	f8a8 700c 	strh.w	r7, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801137e:	68eb      	ldr	r3, [r5, #12]
 8011380:	6858      	ldr	r0, [r3, #4]
 8011382:	f7f7 fede 	bl	8009142 <lwip_htonl>
 8011386:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011388:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801138a:	1a1b      	subs	r3, r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	db1a      	blt.n	80113c6 <tcp_zero_window_probe+0xc2>
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011390:	2300      	movs	r3, #0
 8011392:	461a      	mov	r2, r3
 8011394:	4631      	mov	r1, r6
 8011396:	4620      	mov	r0, r4
 8011398:	f7fe fda8 	bl	800feec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801139c:	1d23      	adds	r3, r4, #4
 801139e:	4622      	mov	r2, r4
 80113a0:	4631      	mov	r1, r6
 80113a2:	4620      	mov	r0, r4
 80113a4:	f7fe ffd2 	bl	801034c <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80113a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80113ac:	2201      	movs	r2, #1
 80113ae:	e7cc      	b.n	801134a <tcp_zero_window_probe+0x46>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80113b0:	6868      	ldr	r0, [r5, #4]
 80113b2:	8903      	ldrh	r3, [r0, #8]
 80113b4:	892a      	ldrh	r2, [r5, #8]
 80113b6:	1a9b      	subs	r3, r3, r2
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	2201      	movs	r2, #1
 80113bc:	f108 0114 	add.w	r1, r8, #20
 80113c0:	f7fb ffd2 	bl	800d368 <pbuf_copy_partial>
 80113c4:	e7db      	b.n	801137e <tcp_zero_window_probe+0x7a>
    pcb->snd_nxt = snd_nxt;
 80113c6:	6520      	str	r0, [r4, #80]	; 0x50
 80113c8:	e7e2      	b.n	8011390 <tcp_zero_window_probe+0x8c>
    return ERR_OK;
 80113ca:	2000      	movs	r0, #0
 80113cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 80113d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80113d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113d8:	0806a134 	.word	0x0806a134
 80113dc:	0806a200 	.word	0x0806a200
 80113e0:	0801335c 	.word	0x0801335c

080113e4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80113e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113e6:	4604      	mov	r4, r0
 80113e8:	460f      	mov	r7, r1
 80113ea:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80113ec:	200a      	movs	r0, #10
 80113ee:	f7fb fa4b 	bl	800c888 <memp_malloc>
  if (timeout == NULL) {
 80113f2:	b1a8      	cbz	r0, 8011420 <sys_timeout_abs+0x3c>
 80113f4:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 80113f6:	2300      	movs	r3, #0
 80113f8:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 80113fa:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 80113fc:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 80113fe:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011400:	4b10      	ldr	r3, [pc, #64]	; (8011444 <sys_timeout_abs+0x60>)
 8011402:	6819      	ldr	r1, [r3, #0]
 8011404:	b199      	cbz	r1, 801142e <sys_timeout_abs+0x4a>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011406:	684b      	ldr	r3, [r1, #4]
 8011408:	1ae3      	subs	r3, r4, r3
 801140a:	2b00      	cmp	r3, #0
 801140c:	db11      	blt.n	8011432 <sys_timeout_abs+0x4e>
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801140e:	b1b9      	cbz	r1, 8011440 <sys_timeout_abs+0x5c>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011410:	680b      	ldr	r3, [r1, #0]
 8011412:	b193      	cbz	r3, 801143a <sys_timeout_abs+0x56>
 8011414:	685a      	ldr	r2, [r3, #4]
 8011416:	1aa2      	subs	r2, r4, r2
 8011418:	2a00      	cmp	r2, #0
 801141a:	db0e      	blt.n	801143a <sys_timeout_abs+0x56>
    for (t = next_timeout; t != NULL; t = t->next) {
 801141c:	4619      	mov	r1, r3
 801141e:	e7f6      	b.n	801140e <sys_timeout_abs+0x2a>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011420:	4b09      	ldr	r3, [pc, #36]	; (8011448 <sys_timeout_abs+0x64>)
 8011422:	22be      	movs	r2, #190	; 0xbe
 8011424:	4909      	ldr	r1, [pc, #36]	; (801144c <sys_timeout_abs+0x68>)
 8011426:	480a      	ldr	r0, [pc, #40]	; (8011450 <sys_timeout_abs+0x6c>)
 8011428:	f000 fea0 	bl	801216c <iprintf>
 801142c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    next_timeout = timeout;
 801142e:	6018      	str	r0, [r3, #0]
    return;
 8011430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    timeout->next = next_timeout;
 8011432:	6001      	str	r1, [r0, #0]
    next_timeout = timeout;
 8011434:	4b03      	ldr	r3, [pc, #12]	; (8011444 <sys_timeout_abs+0x60>)
 8011436:	6018      	str	r0, [r3, #0]
 8011438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        timeout->next = t->next;
 801143a:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 801143c:	600d      	str	r5, [r1, #0]
        break;
 801143e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011442:	bf00      	nop
 8011444:	20006e80 	.word	0x20006e80
 8011448:	0806a284 	.word	0x0806a284
 801144c:	0806a2c4 	.word	0x0806a2c4
 8011450:	0801335c 	.word	0x0801335c

08011454 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011454:	b538      	push	{r3, r4, r5, lr}
 8011456:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011458:	6843      	ldr	r3, [r0, #4]
 801145a:	4798      	blx	r3

  now = sys_now();
 801145c:	f7f0 f8c0 	bl	80015e0 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011460:	6825      	ldr	r5, [r4, #0]
 8011462:	4b09      	ldr	r3, [pc, #36]	; (8011488 <lwip_cyclic_timer+0x34>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011468:	1a1a      	subs	r2, r3, r0
 801146a:	2a00      	cmp	r2, #0
 801146c:	db05      	blt.n	801147a <lwip_cyclic_timer+0x26>
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801146e:	4622      	mov	r2, r4
 8011470:	4906      	ldr	r1, [pc, #24]	; (801148c <lwip_cyclic_timer+0x38>)
 8011472:	4618      	mov	r0, r3
 8011474:	f7ff ffb6 	bl	80113e4 <sys_timeout_abs>
 8011478:	bd38      	pop	{r3, r4, r5, pc}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801147a:	4622      	mov	r2, r4
 801147c:	4903      	ldr	r1, [pc, #12]	; (801148c <lwip_cyclic_timer+0x38>)
 801147e:	4428      	add	r0, r5
 8011480:	f7ff ffb0 	bl	80113e4 <sys_timeout_abs>
 8011484:	bd38      	pop	{r3, r4, r5, pc}
 8011486:	bf00      	nop
 8011488:	20006e7c 	.word	0x20006e7c
 801148c:	08011455 	.word	0x08011455

08011490 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011490:	b570      	push	{r4, r5, r6, lr}
 8011492:	4604      	mov	r4, r0
 8011494:	460d      	mov	r5, r1
 8011496:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011498:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801149c:	d207      	bcs.n	80114ae <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801149e:	f7f0 f89f 	bl	80015e0 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80114a2:	4632      	mov	r2, r6
 80114a4:	4629      	mov	r1, r5
 80114a6:	4420      	add	r0, r4
 80114a8:	f7ff ff9c 	bl	80113e4 <sys_timeout_abs>
 80114ac:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80114ae:	4b04      	ldr	r3, [pc, #16]	; (80114c0 <sys_timeout+0x30>)
 80114b0:	f240 1229 	movw	r2, #297	; 0x129
 80114b4:	4903      	ldr	r1, [pc, #12]	; (80114c4 <sys_timeout+0x34>)
 80114b6:	4804      	ldr	r0, [pc, #16]	; (80114c8 <sys_timeout+0x38>)
 80114b8:	f000 fe58 	bl	801216c <iprintf>
 80114bc:	e7ef      	b.n	801149e <sys_timeout+0xe>
 80114be:	bf00      	nop
 80114c0:	0806a284 	.word	0x0806a284
 80114c4:	0806a24c 	.word	0x0806a24c
 80114c8:	0801335c 	.word	0x0801335c

080114cc <tcp_timer_needed>:
{
 80114cc:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80114ce:	4b0a      	ldr	r3, [pc, #40]	; (80114f8 <tcp_timer_needed+0x2c>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	b953      	cbnz	r3, 80114ea <tcp_timer_needed+0x1e>
 80114d4:	4b09      	ldr	r3, [pc, #36]	; (80114fc <tcp_timer_needed+0x30>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	b143      	cbz	r3, 80114ec <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 80114da:	2201      	movs	r2, #1
 80114dc:	4b06      	ldr	r3, [pc, #24]	; (80114f8 <tcp_timer_needed+0x2c>)
 80114de:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80114e0:	2200      	movs	r2, #0
 80114e2:	4907      	ldr	r1, [pc, #28]	; (8011500 <tcp_timer_needed+0x34>)
 80114e4:	20fa      	movs	r0, #250	; 0xfa
 80114e6:	f7ff ffd3 	bl	8011490 <sys_timeout>
 80114ea:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80114ec:	4b05      	ldr	r3, [pc, #20]	; (8011504 <tcp_timer_needed+0x38>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d1f2      	bne.n	80114da <tcp_timer_needed+0xe>
 80114f4:	e7f9      	b.n	80114ea <tcp_timer_needed+0x1e>
 80114f6:	bf00      	nop
 80114f8:	20006e84 	.word	0x20006e84
 80114fc:	2000d84c 	.word	0x2000d84c
 8011500:	08011509 	.word	0x08011509
 8011504:	2000d85c 	.word	0x2000d85c

08011508 <tcpip_tcp_timer>:
{
 8011508:	b508      	push	{r3, lr}
  tcp_tmr();
 801150a:	f7fc ff47 	bl	800e39c <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801150e:	4b08      	ldr	r3, [pc, #32]	; (8011530 <tcpip_tcp_timer+0x28>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	b12b      	cbz	r3, 8011520 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011514:	2200      	movs	r2, #0
 8011516:	4907      	ldr	r1, [pc, #28]	; (8011534 <tcpip_tcp_timer+0x2c>)
 8011518:	20fa      	movs	r0, #250	; 0xfa
 801151a:	f7ff ffb9 	bl	8011490 <sys_timeout>
 801151e:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011520:	4b05      	ldr	r3, [pc, #20]	; (8011538 <tcpip_tcp_timer+0x30>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d1f5      	bne.n	8011514 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 8011528:	2200      	movs	r2, #0
 801152a:	4b04      	ldr	r3, [pc, #16]	; (801153c <tcpip_tcp_timer+0x34>)
 801152c:	601a      	str	r2, [r3, #0]
 801152e:	bd08      	pop	{r3, pc}
 8011530:	2000d84c 	.word	0x2000d84c
 8011534:	08011509 	.word	0x08011509
 8011538:	2000d85c 	.word	0x2000d85c
 801153c:	20006e84 	.word	0x20006e84

08011540 <sys_timeouts_init>:
{
 8011540:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011542:	2401      	movs	r4, #1
 8011544:	e008      	b.n	8011558 <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011546:	4b06      	ldr	r3, [pc, #24]	; (8011560 <sys_timeouts_init+0x20>)
 8011548:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 801154c:	4905      	ldr	r1, [pc, #20]	; (8011564 <sys_timeouts_init+0x24>)
 801154e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8011552:	f7ff ff9d 	bl	8011490 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011556:	3401      	adds	r4, #1
 8011558:	2c04      	cmp	r4, #4
 801155a:	d9f4      	bls.n	8011546 <sys_timeouts_init+0x6>
}
 801155c:	bd10      	pop	{r4, pc}
 801155e:	bf00      	nop
 8011560:	0806a224 	.word	0x0806a224
 8011564:	08011455 	.word	0x08011455

08011568 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011568:	b570      	push	{r4, r5, r6, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801156a:	f7f0 f839 	bl	80015e0 <sys_now>
 801156e:	4605      	mov	r5, r0
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011570:	4b0b      	ldr	r3, [pc, #44]	; (80115a0 <sys_check_timeouts+0x38>)
 8011572:	6819      	ldr	r1, [r3, #0]
    if (tmptimeout == NULL) {
 8011574:	b191      	cbz	r1, 801159c <sys_check_timeouts+0x34>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011576:	684b      	ldr	r3, [r1, #4]
 8011578:	1aea      	subs	r2, r5, r3
 801157a:	2a00      	cmp	r2, #0
 801157c:	db0e      	blt.n	801159c <sys_check_timeouts+0x34>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801157e:	6808      	ldr	r0, [r1, #0]
 8011580:	4a07      	ldr	r2, [pc, #28]	; (80115a0 <sys_check_timeouts+0x38>)
 8011582:	6010      	str	r0, [r2, #0]
    handler = tmptimeout->h;
 8011584:	688c      	ldr	r4, [r1, #8]
    arg = tmptimeout->arg;
 8011586:	68ce      	ldr	r6, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 8011588:	4a06      	ldr	r2, [pc, #24]	; (80115a4 <sys_check_timeouts+0x3c>)
 801158a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801158c:	200a      	movs	r0, #10
 801158e:	f7fb f995 	bl	800c8bc <memp_free>
    if (handler != NULL) {
 8011592:	2c00      	cmp	r4, #0
 8011594:	d0ec      	beq.n	8011570 <sys_check_timeouts+0x8>
      handler(arg);
 8011596:	4630      	mov	r0, r6
 8011598:	47a0      	blx	r4
 801159a:	e7e9      	b.n	8011570 <sys_check_timeouts+0x8>
 801159c:	bd70      	pop	{r4, r5, r6, pc}
 801159e:	bf00      	nop
 80115a0:	20006e80 	.word	0x20006e80
 80115a4:	20006e7c 	.word	0x20006e7c

080115a8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80115a8:	b508      	push	{r3, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80115aa:	4b07      	ldr	r3, [pc, #28]	; (80115c8 <sys_timeouts_sleeptime+0x20>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	b143      	cbz	r3, 80115c2 <sys_timeouts_sleeptime+0x1a>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 80115b0:	f7f0 f816 	bl	80015e0 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80115b4:	4b04      	ldr	r3, [pc, #16]	; (80115c8 <sys_timeouts_sleeptime+0x20>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	685b      	ldr	r3, [r3, #4]
 80115ba:	1a18      	subs	r0, r3, r0
 80115bc:	d503      	bpl.n	80115c6 <sys_timeouts_sleeptime+0x1e>
    return 0;
 80115be:	2000      	movs	r0, #0
 80115c0:	bd08      	pop	{r3, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80115c2:	f04f 30ff 	mov.w	r0, #4294967295
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 80115c6:	bd08      	pop	{r3, pc}
 80115c8:	20006e80 	.word	0x20006e80

080115cc <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 80115cc:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80115ce:	4a10      	ldr	r2, [pc, #64]	; (8011610 <udp_new_port+0x44>)
 80115d0:	8813      	ldrh	r3, [r2, #0]
 80115d2:	1c59      	adds	r1, r3, #1
 80115d4:	8011      	strh	r1, [r2, #0]
 80115d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115da:	4293      	cmp	r3, r2
 80115dc:	d009      	beq.n	80115f2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80115de:	4b0d      	ldr	r3, [pc, #52]	; (8011614 <udp_new_port+0x48>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	b193      	cbz	r3, 801160a <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 80115e4:	8a59      	ldrh	r1, [r3, #18]
 80115e6:	4a0a      	ldr	r2, [pc, #40]	; (8011610 <udp_new_port+0x44>)
 80115e8:	8812      	ldrh	r2, [r2, #0]
 80115ea:	4291      	cmp	r1, r2
 80115ec:	d006      	beq.n	80115fc <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	e7f7      	b.n	80115e2 <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80115f2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80115f6:	4b06      	ldr	r3, [pc, #24]	; (8011610 <udp_new_port+0x44>)
 80115f8:	801a      	strh	r2, [r3, #0]
 80115fa:	e7f0      	b.n	80115de <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80115fc:	3001      	adds	r0, #1
 80115fe:	b280      	uxth	r0, r0
 8011600:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8011604:	d3e3      	bcc.n	80115ce <udp_new_port+0x2>
        return 0;
 8011606:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 8011608:	4770      	bx	lr
  return udp_port;
 801160a:	4b01      	ldr	r3, [pc, #4]	; (8011610 <udp_new_port+0x44>)
 801160c:	8818      	ldrh	r0, [r3, #0]
 801160e:	4770      	bx	lr
 8011610:	200000ea 	.word	0x200000ea
 8011614:	2000d864 	.word	0x2000d864

08011618 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011618:	b570      	push	{r4, r5, r6, lr}
 801161a:	460d      	mov	r5, r1
 801161c:	4616      	mov	r6, r2
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801161e:	4604      	mov	r4, r0
 8011620:	b160      	cbz	r0, 801163c <udp_input_local_match+0x24>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011622:	b195      	cbz	r5, 801164a <udp_input_local_match+0x32>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011624:	7a22      	ldrb	r2, [r4, #8]
 8011626:	b1ba      	cbz	r2, 8011658 <udp_input_local_match+0x40>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011628:	4b1e      	ldr	r3, [pc, #120]	; (80116a4 <udp_input_local_match+0x8c>)
 801162a:	685b      	ldr	r3, [r3, #4]
 801162c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011630:	3301      	adds	r3, #1
 8011632:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011634:	429a      	cmp	r2, r3
 8011636:	d00f      	beq.n	8011658 <udp_input_local_match+0x40>
    return 0;
 8011638:	2000      	movs	r0, #0
 801163a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801163c:	4b1a      	ldr	r3, [pc, #104]	; (80116a8 <udp_input_local_match+0x90>)
 801163e:	2287      	movs	r2, #135	; 0x87
 8011640:	491a      	ldr	r1, [pc, #104]	; (80116ac <udp_input_local_match+0x94>)
 8011642:	481b      	ldr	r0, [pc, #108]	; (80116b0 <udp_input_local_match+0x98>)
 8011644:	f000 fd92 	bl	801216c <iprintf>
 8011648:	e7eb      	b.n	8011622 <udp_input_local_match+0xa>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801164a:	4b17      	ldr	r3, [pc, #92]	; (80116a8 <udp_input_local_match+0x90>)
 801164c:	2288      	movs	r2, #136	; 0x88
 801164e:	4919      	ldr	r1, [pc, #100]	; (80116b4 <udp_input_local_match+0x9c>)
 8011650:	4817      	ldr	r0, [pc, #92]	; (80116b0 <udp_input_local_match+0x98>)
 8011652:	f000 fd8b 	bl	801216c <iprintf>
 8011656:	e7e5      	b.n	8011624 <udp_input_local_match+0xc>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011658:	b16e      	cbz	r6, 8011676 <udp_input_local_match+0x5e>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801165a:	b1ac      	cbz	r4, 8011688 <udp_input_local_match+0x70>
 801165c:	6823      	ldr	r3, [r4, #0]
 801165e:	b1ab      	cbz	r3, 801168c <udp_input_local_match+0x74>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011660:	4a10      	ldr	r2, [pc, #64]	; (80116a4 <udp_input_local_match+0x8c>)
 8011662:	6952      	ldr	r2, [r2, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011664:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011668:	d012      	beq.n	8011690 <udp_input_local_match+0x78>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801166a:	68a9      	ldr	r1, [r5, #8]
 801166c:	4053      	eors	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801166e:	420b      	tst	r3, r1
 8011670:	d010      	beq.n	8011694 <udp_input_local_match+0x7c>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
        return 1;
      }
  }

  return 0;
 8011672:	2000      	movs	r0, #0
 8011674:	bd70      	pop	{r4, r5, r6, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011676:	b17c      	cbz	r4, 8011698 <udp_input_local_match+0x80>
 8011678:	6823      	ldr	r3, [r4, #0]
 801167a:	b17b      	cbz	r3, 801169c <udp_input_local_match+0x84>
 801167c:	4a09      	ldr	r2, [pc, #36]	; (80116a4 <udp_input_local_match+0x8c>)
 801167e:	6952      	ldr	r2, [r2, #20]
 8011680:	4293      	cmp	r3, r2
 8011682:	d00d      	beq.n	80116a0 <udp_input_local_match+0x88>
  return 0;
 8011684:	2000      	movs	r0, #0
 8011686:	bd70      	pop	{r4, r5, r6, pc}
          return 1;
 8011688:	2001      	movs	r0, #1
 801168a:	bd70      	pop	{r4, r5, r6, pc}
 801168c:	2001      	movs	r0, #1
 801168e:	bd70      	pop	{r4, r5, r6, pc}
 8011690:	2001      	movs	r0, #1
 8011692:	bd70      	pop	{r4, r5, r6, pc}
 8011694:	2001      	movs	r0, #1
 8011696:	bd70      	pop	{r4, r5, r6, pc}
        return 1;
 8011698:	2001      	movs	r0, #1
 801169a:	bd70      	pop	{r4, r5, r6, pc}
 801169c:	2001      	movs	r0, #1
 801169e:	bd70      	pop	{r4, r5, r6, pc}
 80116a0:	2001      	movs	r0, #1
}
 80116a2:	bd70      	pop	{r4, r5, r6, pc}
 80116a4:	200072e4 	.word	0x200072e4
 80116a8:	0806a3c0 	.word	0x0806a3c0
 80116ac:	0806a3f8 	.word	0x0806a3f8
 80116b0:	0801335c 	.word	0x0801335c
 80116b4:	0806a41c 	.word	0x0806a41c

080116b8 <udp_init>:
{
 80116b8:	b508      	push	{r3, lr}
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80116ba:	f000 fdd3 	bl	8012264 <rand>
 80116be:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 80116c2:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 80116c6:	4b01      	ldr	r3, [pc, #4]	; (80116cc <udp_init+0x14>)
 80116c8:	8018      	strh	r0, [r3, #0]
 80116ca:	bd08      	pop	{r3, pc}
 80116cc:	200000ea 	.word	0x200000ea

080116d0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80116d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d4:	b085      	sub	sp, #20
 80116d6:	460f      	mov	r7, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80116d8:	4680      	mov	r8, r0
 80116da:	b1e0      	cbz	r0, 8011716 <udp_input+0x46>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80116dc:	b317      	cbz	r7, 8011724 <udp_input+0x54>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80116de:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80116e2:	2b07      	cmp	r3, #7
 80116e4:	d925      	bls.n	8011732 <udp_input+0x62>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 80116e6:	f8d8 9004 	ldr.w	r9, [r8, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80116ea:	4b5e      	ldr	r3, [pc, #376]	; (8011864 <udp_input+0x194>)
 80116ec:	6819      	ldr	r1, [r3, #0]
 80116ee:	6958      	ldr	r0, [r3, #20]
 80116f0:	f7fa f8ed 	bl	800b8ce <ip4_addr_isbroadcast_u32>
 80116f4:	9003      	str	r0, [sp, #12]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80116f6:	f8b9 0000 	ldrh.w	r0, [r9]
 80116fa:	f7f7 fd1d 	bl	8009138 <lwip_htons>
 80116fe:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 8011700:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8011704:	f7f7 fd18 	bl	8009138 <lwip_htons>
 8011708:	4606      	mov	r6, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801170a:	4b57      	ldr	r3, [pc, #348]	; (8011868 <udp_input+0x198>)
 801170c:	681c      	ldr	r4, [r3, #0]
  uncon_pcb = NULL;
 801170e:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 8011712:	465d      	mov	r5, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011714:	e019      	b.n	801174a <udp_input+0x7a>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011716:	4b55      	ldr	r3, [pc, #340]	; (801186c <udp_input+0x19c>)
 8011718:	22cf      	movs	r2, #207	; 0xcf
 801171a:	4955      	ldr	r1, [pc, #340]	; (8011870 <udp_input+0x1a0>)
 801171c:	4855      	ldr	r0, [pc, #340]	; (8011874 <udp_input+0x1a4>)
 801171e:	f000 fd25 	bl	801216c <iprintf>
 8011722:	e7db      	b.n	80116dc <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011724:	4b51      	ldr	r3, [pc, #324]	; (801186c <udp_input+0x19c>)
 8011726:	22d0      	movs	r2, #208	; 0xd0
 8011728:	4953      	ldr	r1, [pc, #332]	; (8011878 <udp_input+0x1a8>)
 801172a:	4852      	ldr	r0, [pc, #328]	; (8011874 <udp_input+0x1a4>)
 801172c:	f000 fd1e 	bl	801216c <iprintf>
 8011730:	e7d5      	b.n	80116de <udp_input+0xe>
    pbuf_free(p);
 8011732:	4640      	mov	r0, r8
 8011734:	f7fb fbb0 	bl	800ce98 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011738:	b005      	add	sp, #20
 801173a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          uncon_pcb = pcb;
 801173e:	46a3      	mov	fp, r4
      if ((pcb->remote_port == src) &&
 8011740:	8aa3      	ldrh	r3, [r4, #20]
 8011742:	459a      	cmp	sl, r3
 8011744:	d026      	beq.n	8011794 <udp_input+0xc4>
    prev = pcb;
 8011746:	4625      	mov	r5, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011748:	68e4      	ldr	r4, [r4, #12]
 801174a:	2c00      	cmp	r4, #0
 801174c:	d02f      	beq.n	80117ae <udp_input+0xde>
    if ((pcb->local_port == dest) &&
 801174e:	8a63      	ldrh	r3, [r4, #18]
 8011750:	429e      	cmp	r6, r3
 8011752:	d1f8      	bne.n	8011746 <udp_input+0x76>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011754:	9a03      	ldr	r2, [sp, #12]
 8011756:	4639      	mov	r1, r7
 8011758:	4620      	mov	r0, r4
 801175a:	f7ff ff5d 	bl	8011618 <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 801175e:	2800      	cmp	r0, #0
 8011760:	d0f1      	beq.n	8011746 <udp_input+0x76>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011762:	7c23      	ldrb	r3, [r4, #16]
 8011764:	f013 0f04 	tst.w	r3, #4
 8011768:	d1ea      	bne.n	8011740 <udp_input+0x70>
        if (uncon_pcb == NULL) {
 801176a:	f1bb 0f00 	cmp.w	fp, #0
 801176e:	d0e6      	beq.n	801173e <udp_input+0x6e>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011770:	9b03      	ldr	r3, [sp, #12]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d0e4      	beq.n	8011740 <udp_input+0x70>
 8011776:	4b3b      	ldr	r3, [pc, #236]	; (8011864 <udp_input+0x194>)
 8011778:	695b      	ldr	r3, [r3, #20]
 801177a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801177e:	d1df      	bne.n	8011740 <udp_input+0x70>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011780:	f8db 2000 	ldr.w	r2, [fp]
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	429a      	cmp	r2, r3
 8011788:	d0da      	beq.n	8011740 <udp_input+0x70>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801178a:	6822      	ldr	r2, [r4, #0]
 801178c:	4293      	cmp	r3, r2
 801178e:	d1d7      	bne.n	8011740 <udp_input+0x70>
              uncon_pcb = pcb;
 8011790:	46a3      	mov	fp, r4
 8011792:	e7d5      	b.n	8011740 <udp_input+0x70>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011794:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 8011796:	b11b      	cbz	r3, 80117a0 <udp_input+0xd0>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011798:	4a32      	ldr	r2, [pc, #200]	; (8011864 <udp_input+0x194>)
 801179a:	6912      	ldr	r2, [r2, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801179c:	4293      	cmp	r3, r2
 801179e:	d1d2      	bne.n	8011746 <udp_input+0x76>
        if (prev != NULL) {
 80117a0:	b12d      	cbz	r5, 80117ae <udp_input+0xde>
          prev->next = pcb->next;
 80117a2:	68e3      	ldr	r3, [r4, #12]
 80117a4:	60eb      	str	r3, [r5, #12]
          pcb->next = udp_pcbs;
 80117a6:	4b30      	ldr	r3, [pc, #192]	; (8011868 <udp_input+0x198>)
 80117a8:	681a      	ldr	r2, [r3, #0]
 80117aa:	60e2      	str	r2, [r4, #12]
          udp_pcbs = pcb;
 80117ac:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 80117ae:	b30c      	cbz	r4, 80117f4 <udp_input+0x124>
  if (pcb != NULL) {
 80117b0:	b314      	cbz	r4, 80117f8 <udp_input+0x128>
    for_us = 1;
 80117b2:	2301      	movs	r3, #1
  if (for_us) {
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d04d      	beq.n	8011854 <udp_input+0x184>
        if (udphdr->chksum != 0) {
 80117b8:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 80117bc:	b153      	cbz	r3, 80117d4 <udp_input+0x104>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 80117be:	4b2f      	ldr	r3, [pc, #188]	; (801187c <udp_input+0x1ac>)
 80117c0:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 80117c4:	1d19      	adds	r1, r3, #4
 80117c6:	9100      	str	r1, [sp, #0]
 80117c8:	2111      	movs	r1, #17
 80117ca:	4640      	mov	r0, r8
 80117cc:	f7f7 fdca 	bl	8009364 <ip_chksum_pseudo>
 80117d0:	2800      	cmp	r0, #0
 80117d2:	d143      	bne.n	801185c <udp_input+0x18c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80117d4:	2108      	movs	r1, #8
 80117d6:	4640      	mov	r0, r8
 80117d8:	f7fb fb18 	bl	800ce0c <pbuf_remove_header>
 80117dc:	b9a0      	cbnz	r0, 8011808 <udp_input+0x138>
    if (pcb != NULL) {
 80117de:	b314      	cbz	r4, 8011826 <udp_input+0x156>
      if (pcb->recv != NULL) {
 80117e0:	69a5      	ldr	r5, [r4, #24]
 80117e2:	b1e5      	cbz	r5, 801181e <udp_input+0x14e>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80117e4:	69e0      	ldr	r0, [r4, #28]
 80117e6:	f8cd a000 	str.w	sl, [sp]
 80117ea:	4b24      	ldr	r3, [pc, #144]	; (801187c <udp_input+0x1ac>)
 80117ec:	4642      	mov	r2, r8
 80117ee:	4621      	mov	r1, r4
 80117f0:	47a8      	blx	r5
 80117f2:	e7a1      	b.n	8011738 <udp_input+0x68>
    pcb = uncon_pcb;
 80117f4:	465c      	mov	r4, fp
 80117f6:	e7db      	b.n	80117b0 <udp_input+0xe0>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	4a1a      	ldr	r2, [pc, #104]	; (8011864 <udp_input+0x194>)
 80117fc:	6952      	ldr	r2, [r2, #20]
 80117fe:	4293      	cmp	r3, r2
 8011800:	bf14      	ite	ne
 8011802:	2300      	movne	r3, #0
 8011804:	2301      	moveq	r3, #1
 8011806:	e7d5      	b.n	80117b4 <udp_input+0xe4>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011808:	4b18      	ldr	r3, [pc, #96]	; (801186c <udp_input+0x19c>)
 801180a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801180e:	491c      	ldr	r1, [pc, #112]	; (8011880 <udp_input+0x1b0>)
 8011810:	4818      	ldr	r0, [pc, #96]	; (8011874 <udp_input+0x1a4>)
 8011812:	f000 fcab 	bl	801216c <iprintf>
      pbuf_free(p);
 8011816:	4640      	mov	r0, r8
 8011818:	f7fb fb3e 	bl	800ce98 <pbuf_free>
      goto end;
 801181c:	e78c      	b.n	8011738 <udp_input+0x68>
        pbuf_free(p);
 801181e:	4640      	mov	r0, r8
 8011820:	f7fb fb3a 	bl	800ce98 <pbuf_free>
        goto end;
 8011824:	e788      	b.n	8011738 <udp_input+0x68>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011826:	9b03      	ldr	r3, [sp, #12]
 8011828:	b983      	cbnz	r3, 801184c <udp_input+0x17c>
 801182a:	4b0e      	ldr	r3, [pc, #56]	; (8011864 <udp_input+0x194>)
 801182c:	695b      	ldr	r3, [r3, #20]
 801182e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011832:	2be0      	cmp	r3, #224	; 0xe0
 8011834:	d00a      	beq.n	801184c <udp_input+0x17c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011836:	4b0b      	ldr	r3, [pc, #44]	; (8011864 <udp_input+0x194>)
 8011838:	8999      	ldrh	r1, [r3, #12]
 801183a:	3108      	adds	r1, #8
 801183c:	b209      	sxth	r1, r1
 801183e:	4640      	mov	r0, r8
 8011840:	f7fb fb24 	bl	800ce8c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011844:	2103      	movs	r1, #3
 8011846:	4640      	mov	r0, r8
 8011848:	f7f9 fe1a 	bl	800b480 <icmp_dest_unreach>
      pbuf_free(p);
 801184c:	4640      	mov	r0, r8
 801184e:	f7fb fb23 	bl	800ce98 <pbuf_free>
 8011852:	e771      	b.n	8011738 <udp_input+0x68>
    pbuf_free(p);
 8011854:	4640      	mov	r0, r8
 8011856:	f7fb fb1f 	bl	800ce98 <pbuf_free>
 801185a:	e76d      	b.n	8011738 <udp_input+0x68>
  pbuf_free(p);
 801185c:	4640      	mov	r0, r8
 801185e:	f7fb fb1b 	bl	800ce98 <pbuf_free>
 8011862:	e769      	b.n	8011738 <udp_input+0x68>
 8011864:	200072e4 	.word	0x200072e4
 8011868:	2000d864 	.word	0x2000d864
 801186c:	0806a3c0 	.word	0x0806a3c0
 8011870:	0806a370 	.word	0x0806a370
 8011874:	0801335c 	.word	0x0801335c
 8011878:	0806a388 	.word	0x0806a388
 801187c:	200072f4 	.word	0x200072f4
 8011880:	0806a3a4 	.word	0x0806a3a4

08011884 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011884:	b570      	push	{r4, r5, r6, lr}
 8011886:	4604      	mov	r4, r0

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011888:	460d      	mov	r5, r1
 801188a:	b141      	cbz	r1, 801189e <udp_bind+0x1a>
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801188c:	b14c      	cbz	r4, 80118a2 <udp_bind+0x1e>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801188e:	4b27      	ldr	r3, [pc, #156]	; (801192c <udp_bind+0xa8>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	4619      	mov	r1, r3
 8011894:	b179      	cbz	r1, 80118b6 <udp_bind+0x32>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011896:	42a1      	cmp	r1, r4
 8011898:	d01e      	beq.n	80118d8 <udp_bind+0x54>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801189a:	68c9      	ldr	r1, [r1, #12]
 801189c:	e7fa      	b.n	8011894 <udp_bind+0x10>
    ipaddr = IP4_ADDR_ANY;
 801189e:	4d24      	ldr	r5, [pc, #144]	; (8011930 <udp_bind+0xac>)
 80118a0:	e7f4      	b.n	801188c <udp_bind+0x8>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80118a2:	4b24      	ldr	r3, [pc, #144]	; (8011934 <udp_bind+0xb0>)
 80118a4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80118a8:	4923      	ldr	r1, [pc, #140]	; (8011938 <udp_bind+0xb4>)
 80118aa:	4824      	ldr	r0, [pc, #144]	; (801193c <udp_bind+0xb8>)
 80118ac:	f000 fc5e 	bl	801216c <iprintf>
 80118b0:	f06f 000f 	mvn.w	r0, #15
 80118b4:	bd70      	pop	{r4, r5, r6, pc}
  rebind = 0;
 80118b6:	2600      	movs	r6, #0
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80118b8:	b98a      	cbnz	r2, 80118de <udp_bind+0x5a>
    port = udp_new_port();
 80118ba:	f7ff fe87 	bl	80115cc <udp_new_port>
    if (port == 0) {
 80118be:	4602      	mov	r2, r0
 80118c0:	b310      	cbz	r0, 8011908 <udp_bind+0x84>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80118c2:	b1fd      	cbz	r5, 8011904 <udp_bind+0x80>
 80118c4:	682b      	ldr	r3, [r5, #0]
 80118c6:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 80118c8:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80118ca:	bb66      	cbnz	r6, 8011926 <udp_bind+0xa2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80118cc:	4b17      	ldr	r3, [pc, #92]	; (801192c <udp_bind+0xa8>)
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 80118d2:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80118d4:	2000      	movs	r0, #0
 80118d6:	bd70      	pop	{r4, r5, r6, pc}
      rebind = 1;
 80118d8:	2601      	movs	r6, #1
 80118da:	e7ed      	b.n	80118b8 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80118dc:	68db      	ldr	r3, [r3, #12]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d0ef      	beq.n	80118c2 <udp_bind+0x3e>
      if (pcb != ipcb) {
 80118e2:	42a3      	cmp	r3, r4
 80118e4:	d0fa      	beq.n	80118dc <udp_bind+0x58>
          if ((ipcb->local_port == port) &&
 80118e6:	8a59      	ldrh	r1, [r3, #18]
 80118e8:	428a      	cmp	r2, r1
 80118ea:	d1f7      	bne.n	80118dc <udp_bind+0x58>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80118ec:	6818      	ldr	r0, [r3, #0]
 80118ee:	6829      	ldr	r1, [r5, #0]
          if ((ipcb->local_port == port) &&
 80118f0:	4288      	cmp	r0, r1
 80118f2:	d00c      	beq.n	801190e <udp_bind+0x8a>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80118f4:	b175      	cbz	r5, 8011914 <udp_bind+0x90>
 80118f6:	b181      	cbz	r1, 801191a <udp_bind+0x96>
 80118f8:	b193      	cbz	r3, 8011920 <udp_bind+0x9c>
              ip_addr_isany(&ipcb->local_ip))) {
 80118fa:	2800      	cmp	r0, #0
 80118fc:	d1ee      	bne.n	80118dc <udp_bind+0x58>
            return ERR_USE;
 80118fe:	f06f 0007 	mvn.w	r0, #7
 8011902:	bd70      	pop	{r4, r5, r6, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011904:	2300      	movs	r3, #0
 8011906:	e7de      	b.n	80118c6 <udp_bind+0x42>
      return ERR_USE;
 8011908:	f06f 0007 	mvn.w	r0, #7
 801190c:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_USE;
 801190e:	f06f 0007 	mvn.w	r0, #7
 8011912:	bd70      	pop	{r4, r5, r6, pc}
 8011914:	f06f 0007 	mvn.w	r0, #7
 8011918:	bd70      	pop	{r4, r5, r6, pc}
 801191a:	f06f 0007 	mvn.w	r0, #7
 801191e:	bd70      	pop	{r4, r5, r6, pc}
 8011920:	f06f 0007 	mvn.w	r0, #7
 8011924:	bd70      	pop	{r4, r5, r6, pc}
  return ERR_OK;
 8011926:	2000      	movs	r0, #0
}
 8011928:	bd70      	pop	{r4, r5, r6, pc}
 801192a:	bf00      	nop
 801192c:	2000d864 	.word	0x2000d864
 8011930:	080684a4 	.word	0x080684a4
 8011934:	0806a3c0 	.word	0x0806a3c0
 8011938:	0806a304 	.word	0x0806a304
 801193c:	0801335c 	.word	0x0801335c

08011940 <udp_sendto_if_src>:
{
 8011940:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8011944:	b084      	sub	sp, #16
 8011946:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801194a:	2800      	cmp	r0, #0
 801194c:	d051      	beq.n	80119f2 <udp_sendto_if_src+0xb2>
 801194e:	460e      	mov	r6, r1
 8011950:	4617      	mov	r7, r2
 8011952:	469b      	mov	fp, r3
 8011954:	4605      	mov	r5, r0
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011956:	2900      	cmp	r1, #0
 8011958:	d055      	beq.n	8011a06 <udp_sendto_if_src+0xc6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801195a:	2a00      	cmp	r2, #0
 801195c:	d05d      	beq.n	8011a1a <udp_sendto_if_src+0xda>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801195e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011960:	2b00      	cmp	r3, #0
 8011962:	d064      	beq.n	8011a2e <udp_sendto_if_src+0xee>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011964:	f1ba 0f00 	cmp.w	sl, #0
 8011968:	d06b      	beq.n	8011a42 <udp_sendto_if_src+0x102>
  if (pcb->local_port == 0) {
 801196a:	8a42      	ldrh	r2, [r0, #18]
 801196c:	2a00      	cmp	r2, #0
 801196e:	d072      	beq.n	8011a56 <udp_sendto_if_src+0x116>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011970:	8932      	ldrh	r2, [r6, #8]
 8011972:	f102 0308 	add.w	r3, r2, #8
 8011976:	b29b      	uxth	r3, r3
 8011978:	429a      	cmp	r2, r3
 801197a:	f200 8098 	bhi.w	8011aae <udp_sendto_if_src+0x16e>
  if (pbuf_add_header(p, UDP_HLEN)) {
 801197e:	2108      	movs	r1, #8
 8011980:	4630      	mov	r0, r6
 8011982:	f7fb fa3e 	bl	800ce02 <pbuf_add_header>
 8011986:	2800      	cmp	r0, #0
 8011988:	d16c      	bne.n	8011a64 <udp_sendto_if_src+0x124>
    q = p;
 801198a:	4634      	mov	r4, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801198c:	8963      	ldrh	r3, [r4, #10]
 801198e:	2b07      	cmp	r3, #7
 8011990:	d977      	bls.n	8011a82 <udp_sendto_if_src+0x142>
  udphdr = (struct udp_hdr *)q->payload;
 8011992:	f8d4 8004 	ldr.w	r8, [r4, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 8011996:	8a68      	ldrh	r0, [r5, #18]
 8011998:	f7f7 fbce 	bl	8009138 <lwip_htons>
 801199c:	f8a8 0000 	strh.w	r0, [r8]
  udphdr->dest = lwip_htons(dst_port);
 80119a0:	4658      	mov	r0, fp
 80119a2:	f7f7 fbc9 	bl	8009138 <lwip_htons>
 80119a6:	f8a8 0002 	strh.w	r0, [r8, #2]
  udphdr->chksum = 0x0000;
 80119aa:	2300      	movs	r3, #0
 80119ac:	f888 3006 	strb.w	r3, [r8, #6]
 80119b0:	f888 3007 	strb.w	r3, [r8, #7]
    udphdr->len = lwip_htons(q->tot_len);
 80119b4:	8920      	ldrh	r0, [r4, #8]
 80119b6:	f7f7 fbbf 	bl	8009138 <lwip_htons>
 80119ba:	f8a8 0004 	strh.w	r0, [r8, #4]
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 80119be:	7c2b      	ldrb	r3, [r5, #16]
 80119c0:	f013 0f01 	tst.w	r3, #1
 80119c4:	d065      	beq.n	8011a92 <udp_sendto_if_src+0x152>
  ttl = pcb->ttl;
 80119c6:	7aeb      	ldrb	r3, [r5, #11]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80119c8:	7aaa      	ldrb	r2, [r5, #10]
 80119ca:	f8cd a008 	str.w	sl, [sp, #8]
 80119ce:	2111      	movs	r1, #17
 80119d0:	9101      	str	r1, [sp, #4]
 80119d2:	9200      	str	r2, [sp, #0]
 80119d4:	463a      	mov	r2, r7
 80119d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80119d8:	4620      	mov	r0, r4
 80119da:	f7f9 fec1 	bl	800b760 <ip4_output_if_src>
 80119de:	4680      	mov	r8, r0
  if (q != p) {
 80119e0:	42b4      	cmp	r4, r6
 80119e2:	d002      	beq.n	80119ea <udp_sendto_if_src+0xaa>
    pbuf_free(q);
 80119e4:	4620      	mov	r0, r4
 80119e6:	f7fb fa57 	bl	800ce98 <pbuf_free>
}
 80119ea:	4640      	mov	r0, r8
 80119ec:	b004      	add	sp, #16
 80119ee:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80119f2:	4b32      	ldr	r3, [pc, #200]	; (8011abc <udp_sendto_if_src+0x17c>)
 80119f4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80119f8:	4931      	ldr	r1, [pc, #196]	; (8011ac0 <udp_sendto_if_src+0x180>)
 80119fa:	4832      	ldr	r0, [pc, #200]	; (8011ac4 <udp_sendto_if_src+0x184>)
 80119fc:	f000 fbb6 	bl	801216c <iprintf>
 8011a00:	f06f 080f 	mvn.w	r8, #15
 8011a04:	e7f1      	b.n	80119ea <udp_sendto_if_src+0xaa>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011a06:	4b2d      	ldr	r3, [pc, #180]	; (8011abc <udp_sendto_if_src+0x17c>)
 8011a08:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011a0c:	492e      	ldr	r1, [pc, #184]	; (8011ac8 <udp_sendto_if_src+0x188>)
 8011a0e:	482d      	ldr	r0, [pc, #180]	; (8011ac4 <udp_sendto_if_src+0x184>)
 8011a10:	f000 fbac 	bl	801216c <iprintf>
 8011a14:	f06f 080f 	mvn.w	r8, #15
 8011a18:	e7e7      	b.n	80119ea <udp_sendto_if_src+0xaa>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011a1a:	4b28      	ldr	r3, [pc, #160]	; (8011abc <udp_sendto_if_src+0x17c>)
 8011a1c:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011a20:	492a      	ldr	r1, [pc, #168]	; (8011acc <udp_sendto_if_src+0x18c>)
 8011a22:	4828      	ldr	r0, [pc, #160]	; (8011ac4 <udp_sendto_if_src+0x184>)
 8011a24:	f000 fba2 	bl	801216c <iprintf>
 8011a28:	f06f 080f 	mvn.w	r8, #15
 8011a2c:	e7dd      	b.n	80119ea <udp_sendto_if_src+0xaa>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011a2e:	4b23      	ldr	r3, [pc, #140]	; (8011abc <udp_sendto_if_src+0x17c>)
 8011a30:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011a34:	4926      	ldr	r1, [pc, #152]	; (8011ad0 <udp_sendto_if_src+0x190>)
 8011a36:	4823      	ldr	r0, [pc, #140]	; (8011ac4 <udp_sendto_if_src+0x184>)
 8011a38:	f000 fb98 	bl	801216c <iprintf>
 8011a3c:	f06f 080f 	mvn.w	r8, #15
 8011a40:	e7d3      	b.n	80119ea <udp_sendto_if_src+0xaa>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011a42:	4b1e      	ldr	r3, [pc, #120]	; (8011abc <udp_sendto_if_src+0x17c>)
 8011a44:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011a48:	4922      	ldr	r1, [pc, #136]	; (8011ad4 <udp_sendto_if_src+0x194>)
 8011a4a:	481e      	ldr	r0, [pc, #120]	; (8011ac4 <udp_sendto_if_src+0x184>)
 8011a4c:	f000 fb8e 	bl	801216c <iprintf>
 8011a50:	f06f 080f 	mvn.w	r8, #15
 8011a54:	e7c9      	b.n	80119ea <udp_sendto_if_src+0xaa>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011a56:	4601      	mov	r1, r0
 8011a58:	f7ff ff14 	bl	8011884 <udp_bind>
    if (err != ERR_OK) {
 8011a5c:	4680      	mov	r8, r0
 8011a5e:	2800      	cmp	r0, #0
 8011a60:	d086      	beq.n	8011970 <udp_sendto_if_src+0x30>
 8011a62:	e7c2      	b.n	80119ea <udp_sendto_if_src+0xaa>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011a64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a68:	2108      	movs	r1, #8
 8011a6a:	2022      	movs	r0, #34	; 0x22
 8011a6c:	f7fb fa7e 	bl	800cf6c <pbuf_alloc>
    if (q == NULL) {
 8011a70:	4604      	mov	r4, r0
 8011a72:	b1f8      	cbz	r0, 8011ab4 <udp_sendto_if_src+0x174>
    if (p->tot_len != 0) {
 8011a74:	8933      	ldrh	r3, [r6, #8]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d088      	beq.n	801198c <udp_sendto_if_src+0x4c>
      pbuf_chain(q, p);
 8011a7a:	4631      	mov	r1, r6
 8011a7c:	f7fb fbd6 	bl	800d22c <pbuf_chain>
 8011a80:	e784      	b.n	801198c <udp_sendto_if_src+0x4c>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011a82:	4b0e      	ldr	r3, [pc, #56]	; (8011abc <udp_sendto_if_src+0x17c>)
 8011a84:	f240 320e 	movw	r2, #782	; 0x30e
 8011a88:	4913      	ldr	r1, [pc, #76]	; (8011ad8 <udp_sendto_if_src+0x198>)
 8011a8a:	480e      	ldr	r0, [pc, #56]	; (8011ac4 <udp_sendto_if_src+0x184>)
 8011a8c:	f000 fb6e 	bl	801216c <iprintf>
 8011a90:	e77f      	b.n	8011992 <udp_sendto_if_src+0x52>
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 8011a92:	8922      	ldrh	r2, [r4, #8]
 8011a94:	9700      	str	r7, [sp, #0]
 8011a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a98:	2111      	movs	r1, #17
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	f7f7 fc62 	bl	8009364 <ip_chksum_pseudo>
        if (udpchksum == 0x0000) {
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	b908      	cbnz	r0, 8011aa8 <udp_sendto_if_src+0x168>
          udpchksum = 0xffff;
 8011aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
        udphdr->chksum = udpchksum;
 8011aa8:	f8a8 3006 	strh.w	r3, [r8, #6]
 8011aac:	e78b      	b.n	80119c6 <udp_sendto_if_src+0x86>
    return ERR_MEM;
 8011aae:	f04f 38ff 	mov.w	r8, #4294967295
 8011ab2:	e79a      	b.n	80119ea <udp_sendto_if_src+0xaa>
      return ERR_MEM;
 8011ab4:	f04f 38ff 	mov.w	r8, #4294967295
 8011ab8:	e797      	b.n	80119ea <udp_sendto_if_src+0xaa>
 8011aba:	bf00      	nop
 8011abc:	0806a3c0 	.word	0x0806a3c0
 8011ac0:	0806a53c 	.word	0x0806a53c
 8011ac4:	0801335c 	.word	0x0801335c
 8011ac8:	0806a55c 	.word	0x0806a55c
 8011acc:	0806a57c 	.word	0x0806a57c
 8011ad0:	0806a5a0 	.word	0x0806a5a0
 8011ad4:	0806a5c4 	.word	0x0806a5c4
 8011ad8:	0806a5e8 	.word	0x0806a5e8

08011adc <udp_sendto_if>:
{
 8011adc:	b570      	push	{r4, r5, r6, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	9d06      	ldr	r5, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ae2:	b180      	cbz	r0, 8011b06 <udp_sendto_if+0x2a>
 8011ae4:	4604      	mov	r4, r0
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011ae6:	b1c1      	cbz	r1, 8011b1a <udp_sendto_if+0x3e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011ae8:	b30a      	cbz	r2, 8011b2e <udp_sendto_if+0x52>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011aea:	b355      	cbz	r5, 8011b42 <udp_sendto_if+0x66>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011aec:	2800      	cmp	r0, #0
 8011aee:	d032      	beq.n	8011b56 <udp_sendto_if+0x7a>
 8011af0:	6800      	ldr	r0, [r0, #0]
 8011af2:	b380      	cbz	r0, 8011b56 <udp_sendto_if+0x7a>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011af4:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011af8:	2ee0      	cmp	r6, #224	; 0xe0
 8011afa:	d02c      	beq.n	8011b56 <udp_sendto_if+0x7a>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011afc:	686e      	ldr	r6, [r5, #4]
 8011afe:	42b0      	cmp	r0, r6
 8011b00:	d131      	bne.n	8011b66 <udp_sendto_if+0x8a>
      src_ip = &pcb->local_ip;
 8011b02:	4620      	mov	r0, r4
 8011b04:	e028      	b.n	8011b58 <udp_sendto_if+0x7c>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b06:	4b19      	ldr	r3, [pc, #100]	; (8011b6c <udp_sendto_if+0x90>)
 8011b08:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b0c:	4918      	ldr	r1, [pc, #96]	; (8011b70 <udp_sendto_if+0x94>)
 8011b0e:	4819      	ldr	r0, [pc, #100]	; (8011b74 <udp_sendto_if+0x98>)
 8011b10:	f000 fb2c 	bl	801216c <iprintf>
 8011b14:	f06f 000f 	mvn.w	r0, #15
 8011b18:	e023      	b.n	8011b62 <udp_sendto_if+0x86>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011b1a:	4b14      	ldr	r3, [pc, #80]	; (8011b6c <udp_sendto_if+0x90>)
 8011b1c:	f240 2281 	movw	r2, #641	; 0x281
 8011b20:	4915      	ldr	r1, [pc, #84]	; (8011b78 <udp_sendto_if+0x9c>)
 8011b22:	4814      	ldr	r0, [pc, #80]	; (8011b74 <udp_sendto_if+0x98>)
 8011b24:	f000 fb22 	bl	801216c <iprintf>
 8011b28:	f06f 000f 	mvn.w	r0, #15
 8011b2c:	e019      	b.n	8011b62 <udp_sendto_if+0x86>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011b2e:	4b0f      	ldr	r3, [pc, #60]	; (8011b6c <udp_sendto_if+0x90>)
 8011b30:	f240 2282 	movw	r2, #642	; 0x282
 8011b34:	4911      	ldr	r1, [pc, #68]	; (8011b7c <udp_sendto_if+0xa0>)
 8011b36:	480f      	ldr	r0, [pc, #60]	; (8011b74 <udp_sendto_if+0x98>)
 8011b38:	f000 fb18 	bl	801216c <iprintf>
 8011b3c:	f06f 000f 	mvn.w	r0, #15
 8011b40:	e00f      	b.n	8011b62 <udp_sendto_if+0x86>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011b42:	4b0a      	ldr	r3, [pc, #40]	; (8011b6c <udp_sendto_if+0x90>)
 8011b44:	f240 2283 	movw	r2, #643	; 0x283
 8011b48:	490d      	ldr	r1, [pc, #52]	; (8011b80 <udp_sendto_if+0xa4>)
 8011b4a:	480a      	ldr	r0, [pc, #40]	; (8011b74 <udp_sendto_if+0x98>)
 8011b4c:	f000 fb0e 	bl	801216c <iprintf>
 8011b50:	f06f 000f 	mvn.w	r0, #15
 8011b54:	e005      	b.n	8011b62 <udp_sendto_if+0x86>
      src_ip = netif_ip_addr4(netif);
 8011b56:	1d28      	adds	r0, r5, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011b58:	9001      	str	r0, [sp, #4]
 8011b5a:	9500      	str	r5, [sp, #0]
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	f7ff feef 	bl	8011940 <udp_sendto_if_src>
}
 8011b62:	b002      	add	sp, #8
 8011b64:	bd70      	pop	{r4, r5, r6, pc}
        return ERR_RTE;
 8011b66:	f06f 0003 	mvn.w	r0, #3
 8011b6a:	e7fa      	b.n	8011b62 <udp_sendto_if+0x86>
 8011b6c:	0806a3c0 	.word	0x0806a3c0
 8011b70:	0806a4c4 	.word	0x0806a4c4
 8011b74:	0801335c 	.word	0x0801335c
 8011b78:	0806a4e0 	.word	0x0806a4e0
 8011b7c:	0806a4fc 	.word	0x0806a4fc
 8011b80:	0806a51c 	.word	0x0806a51c

08011b84 <udp_sendto>:
{
 8011b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b86:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b88:	b198      	cbz	r0, 8011bb2 <udp_sendto+0x2e>
 8011b8a:	460d      	mov	r5, r1
 8011b8c:	4614      	mov	r4, r2
 8011b8e:	461f      	mov	r7, r3
 8011b90:	4606      	mov	r6, r0
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011b92:	b1c1      	cbz	r1, 8011bc6 <udp_sendto+0x42>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011b94:	b30a      	cbz	r2, 8011bda <udp_sendto+0x56>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8011b96:	7a00      	ldrb	r0, [r0, #8]
 8011b98:	b348      	cbz	r0, 8011bee <udp_sendto+0x6a>
    netif = netif_get_by_index(pcb->netif_idx);
 8011b9a:	f7fb f881 	bl	800cca0 <netif_get_by_index>
  if (netif == NULL) {
 8011b9e:	b350      	cbz	r0, 8011bf6 <udp_sendto+0x72>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8011ba0:	9000      	str	r0, [sp, #0]
 8011ba2:	463b      	mov	r3, r7
 8011ba4:	4622      	mov	r2, r4
 8011ba6:	4629      	mov	r1, r5
 8011ba8:	4630      	mov	r0, r6
 8011baa:	f7ff ff97 	bl	8011adc <udp_sendto_if>
}
 8011bae:	b003      	add	sp, #12
 8011bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8011bb2:	4b12      	ldr	r3, [pc, #72]	; (8011bfc <udp_sendto+0x78>)
 8011bb4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011bb8:	4911      	ldr	r1, [pc, #68]	; (8011c00 <udp_sendto+0x7c>)
 8011bba:	4812      	ldr	r0, [pc, #72]	; (8011c04 <udp_sendto+0x80>)
 8011bbc:	f000 fad6 	bl	801216c <iprintf>
 8011bc0:	f06f 000f 	mvn.w	r0, #15
 8011bc4:	e7f3      	b.n	8011bae <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011bc6:	4b0d      	ldr	r3, [pc, #52]	; (8011bfc <udp_sendto+0x78>)
 8011bc8:	f240 2219 	movw	r2, #537	; 0x219
 8011bcc:	490e      	ldr	r1, [pc, #56]	; (8011c08 <udp_sendto+0x84>)
 8011bce:	480d      	ldr	r0, [pc, #52]	; (8011c04 <udp_sendto+0x80>)
 8011bd0:	f000 facc 	bl	801216c <iprintf>
 8011bd4:	f06f 000f 	mvn.w	r0, #15
 8011bd8:	e7e9      	b.n	8011bae <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011bda:	4b08      	ldr	r3, [pc, #32]	; (8011bfc <udp_sendto+0x78>)
 8011bdc:	f240 221a 	movw	r2, #538	; 0x21a
 8011be0:	490a      	ldr	r1, [pc, #40]	; (8011c0c <udp_sendto+0x88>)
 8011be2:	4808      	ldr	r0, [pc, #32]	; (8011c04 <udp_sendto+0x80>)
 8011be4:	f000 fac2 	bl	801216c <iprintf>
 8011be8:	f06f 000f 	mvn.w	r0, #15
 8011bec:	e7df      	b.n	8011bae <udp_sendto+0x2a>
      netif = ip_route(&pcb->local_ip, dst_ip);
 8011bee:	4610      	mov	r0, r2
 8011bf0:	f7f9 fc6e 	bl	800b4d0 <ip4_route>
 8011bf4:	e7d3      	b.n	8011b9e <udp_sendto+0x1a>
    return ERR_RTE;
 8011bf6:	f06f 0003 	mvn.w	r0, #3
 8011bfa:	e7d8      	b.n	8011bae <udp_sendto+0x2a>
 8011bfc:	0806a3c0 	.word	0x0806a3c0
 8011c00:	0806a474 	.word	0x0806a474
 8011c04:	0801335c 	.word	0x0801335c
 8011c08:	0806a48c 	.word	0x0806a48c
 8011c0c:	0806a4a8 	.word	0x0806a4a8

08011c10 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011c10:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c12:	b1a0      	cbz	r0, 8011c3e <udp_connect+0x2e>
 8011c14:	460d      	mov	r5, r1
 8011c16:	4616      	mov	r6, r2
 8011c18:	4604      	mov	r4, r0
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011c1a:	b1d1      	cbz	r1, 8011c52 <udp_connect+0x42>

  if (pcb->local_port == 0) {
 8011c1c:	8a42      	ldrh	r2, [r0, #18]
 8011c1e:	b312      	cbz	r2, 8011c66 <udp_connect+0x56>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011c20:	682b      	ldr	r3, [r5, #0]
 8011c22:	6063      	str	r3, [r4, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011c24:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011c26:	7c23      	ldrb	r3, [r4, #16]
 8011c28:	f043 0304 	orr.w	r3, r3, #4
 8011c2c:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c2e:	4b15      	ldr	r3, [pc, #84]	; (8011c84 <udp_connect+0x74>)
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	4613      	mov	r3, r2
 8011c34:	b1f3      	cbz	r3, 8011c74 <udp_connect+0x64>
    if (pcb == ipcb) {
 8011c36:	42a3      	cmp	r3, r4
 8011c38:	d022      	beq.n	8011c80 <udp_connect+0x70>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c3a:	68db      	ldr	r3, [r3, #12]
 8011c3c:	e7fa      	b.n	8011c34 <udp_connect+0x24>
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c3e:	4b12      	ldr	r3, [pc, #72]	; (8011c88 <udp_connect+0x78>)
 8011c40:	f240 4235 	movw	r2, #1077	; 0x435
 8011c44:	4911      	ldr	r1, [pc, #68]	; (8011c8c <udp_connect+0x7c>)
 8011c46:	4812      	ldr	r0, [pc, #72]	; (8011c90 <udp_connect+0x80>)
 8011c48:	f000 fa90 	bl	801216c <iprintf>
 8011c4c:	f06f 030f 	mvn.w	r3, #15
 8011c50:	e014      	b.n	8011c7c <udp_connect+0x6c>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011c52:	4b0d      	ldr	r3, [pc, #52]	; (8011c88 <udp_connect+0x78>)
 8011c54:	f240 4236 	movw	r2, #1078	; 0x436
 8011c58:	490e      	ldr	r1, [pc, #56]	; (8011c94 <udp_connect+0x84>)
 8011c5a:	480d      	ldr	r0, [pc, #52]	; (8011c90 <udp_connect+0x80>)
 8011c5c:	f000 fa86 	bl	801216c <iprintf>
 8011c60:	f06f 030f 	mvn.w	r3, #15
 8011c64:	e00a      	b.n	8011c7c <udp_connect+0x6c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011c66:	4601      	mov	r1, r0
 8011c68:	f7ff fe0c 	bl	8011884 <udp_bind>
    if (err != ERR_OK) {
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2800      	cmp	r0, #0
 8011c70:	d0d6      	beq.n	8011c20 <udp_connect+0x10>
 8011c72:	e003      	b.n	8011c7c <udp_connect+0x6c>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011c74:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 8011c76:	4b03      	ldr	r3, [pc, #12]	; (8011c84 <udp_connect+0x74>)
 8011c78:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 8011c7a:	2300      	movs	r3, #0
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 8011c80:	2300      	movs	r3, #0
 8011c82:	e7fb      	b.n	8011c7c <udp_connect+0x6c>
 8011c84:	2000d864 	.word	0x2000d864
 8011c88:	0806a3c0 	.word	0x0806a3c0
 8011c8c:	0806a31c 	.word	0x0806a31c
 8011c90:	0801335c 	.word	0x0801335c
 8011c94:	0806a338 	.word	0x0806a338

08011c98 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8011c98:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8011c9a:	b140      	cbz	r0, 8011cae <udp_disconnect+0x16>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	6042      	str	r2, [r0, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8011ca0:	8282      	strh	r2, [r0, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8011ca2:	7202      	strb	r2, [r0, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8011ca4:	7c02      	ldrb	r2, [r0, #16]
 8011ca6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8011caa:	7402      	strb	r2, [r0, #16]
 8011cac:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8011cae:	4b04      	ldr	r3, [pc, #16]	; (8011cc0 <udp_disconnect+0x28>)
 8011cb0:	f240 426a 	movw	r2, #1130	; 0x46a
 8011cb4:	4903      	ldr	r1, [pc, #12]	; (8011cc4 <udp_disconnect+0x2c>)
 8011cb6:	4804      	ldr	r0, [pc, #16]	; (8011cc8 <udp_disconnect+0x30>)
 8011cb8:	f000 fa58 	bl	801216c <iprintf>
 8011cbc:	bd08      	pop	{r3, pc}
 8011cbe:	bf00      	nop
 8011cc0:	0806a3c0 	.word	0x0806a3c0
 8011cc4:	0806a354 	.word	0x0806a354
 8011cc8:	0801335c 	.word	0x0801335c

08011ccc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011ccc:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011cce:	b110      	cbz	r0, 8011cd6 <udp_recv+0xa>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011cd0:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 8011cd2:	61c2      	str	r2, [r0, #28]
 8011cd4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011cd6:	4b04      	ldr	r3, [pc, #16]	; (8011ce8 <udp_recv+0x1c>)
 8011cd8:	f240 428a 	movw	r2, #1162	; 0x48a
 8011cdc:	4903      	ldr	r1, [pc, #12]	; (8011cec <udp_recv+0x20>)
 8011cde:	4804      	ldr	r0, [pc, #16]	; (8011cf0 <udp_recv+0x24>)
 8011ce0:	f000 fa44 	bl	801216c <iprintf>
 8011ce4:	bd08      	pop	{r3, pc}
 8011ce6:	bf00      	nop
 8011ce8:	0806a3c0 	.word	0x0806a3c0
 8011cec:	0806a444 	.word	0x0806a444
 8011cf0:	0801335c 	.word	0x0801335c

08011cf4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011cf4:	b508      	push	{r3, lr}
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011cf6:	b138      	cbz	r0, 8011d08 <udp_remove+0x14>
 8011cf8:	4601      	mov	r1, r0

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011cfa:	4b0f      	ldr	r3, [pc, #60]	; (8011d38 <udp_remove+0x44>)
 8011cfc:	681a      	ldr	r2, [r3, #0]
 8011cfe:	4290      	cmp	r0, r2
 8011d00:	d111      	bne.n	8011d26 <udp_remove+0x32>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011d02:	68d2      	ldr	r2, [r2, #12]
 8011d04:	601a      	str	r2, [r3, #0]
 8011d06:	e009      	b.n	8011d1c <udp_remove+0x28>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011d08:	4b0c      	ldr	r3, [pc, #48]	; (8011d3c <udp_remove+0x48>)
 8011d0a:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011d0e:	490c      	ldr	r1, [pc, #48]	; (8011d40 <udp_remove+0x4c>)
 8011d10:	480c      	ldr	r0, [pc, #48]	; (8011d44 <udp_remove+0x50>)
 8011d12:	f000 fa2b 	bl	801216c <iprintf>
 8011d16:	bd08      	pop	{r3, pc}
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011d18:	68cb      	ldr	r3, [r1, #12]
 8011d1a:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	f7fa fdcd 	bl	800c8bc <memp_free>
 8011d22:	bd08      	pop	{r3, pc}
 8011d24:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011d26:	2a00      	cmp	r2, #0
 8011d28:	d0f8      	beq.n	8011d1c <udp_remove+0x28>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011d2a:	68d3      	ldr	r3, [r2, #12]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d0f9      	beq.n	8011d24 <udp_remove+0x30>
 8011d30:	4299      	cmp	r1, r3
 8011d32:	d0f1      	beq.n	8011d18 <udp_remove+0x24>
 8011d34:	461a      	mov	r2, r3
 8011d36:	e7f6      	b.n	8011d26 <udp_remove+0x32>
 8011d38:	2000d864 	.word	0x2000d864
 8011d3c:	0806a3c0 	.word	0x0806a3c0
 8011d40:	0806a45c 	.word	0x0806a45c
 8011d44:	0801335c 	.word	0x0801335c

08011d48 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011d48:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011d4a:	2000      	movs	r0, #0
 8011d4c:	f7fa fd9c 	bl	800c888 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011d50:	4604      	mov	r4, r0
 8011d52:	b128      	cbz	r0, 8011d60 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011d54:	2220      	movs	r2, #32
 8011d56:	2100      	movs	r1, #0
 8011d58:	f000 f9ff 	bl	801215a <memset>
    pcb->ttl = UDP_TTL;
 8011d5c:	23ff      	movs	r3, #255	; 0xff
 8011d5e:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 8011d60:	4620      	mov	r0, r4
 8011d62:	bd10      	pop	{r4, pc}

08011d64 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011d64:	b1a0      	cbz	r0, 8011d90 <udp_netif_ip_addr_changed+0x2c>
{
 8011d66:	b410      	push	{r4}
 8011d68:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011d6a:	6803      	ldr	r3, [r0, #0]
 8011d6c:	b173      	cbz	r3, 8011d8c <udp_netif_ip_addr_changed+0x28>
 8011d6e:	b169      	cbz	r1, 8011d8c <udp_netif_ip_addr_changed+0x28>
 8011d70:	680b      	ldr	r3, [r1, #0]
 8011d72:	b15b      	cbz	r3, 8011d8c <udp_netif_ip_addr_changed+0x28>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011d74:	4b07      	ldr	r3, [pc, #28]	; (8011d94 <udp_netif_ip_addr_changed+0x30>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	e000      	b.n	8011d7c <udp_netif_ip_addr_changed+0x18>
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	b133      	cbz	r3, 8011d8c <udp_netif_ip_addr_changed+0x28>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011d7e:	6818      	ldr	r0, [r3, #0]
 8011d80:	6822      	ldr	r2, [r4, #0]
 8011d82:	4290      	cmp	r0, r2
 8011d84:	d1f9      	bne.n	8011d7a <udp_netif_ip_addr_changed+0x16>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011d86:	680a      	ldr	r2, [r1, #0]
 8011d88:	601a      	str	r2, [r3, #0]
 8011d8a:	e7f6      	b.n	8011d7a <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 8011d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d90:	4770      	bx	lr
 8011d92:	bf00      	nop
 8011d94:	2000d864 	.word	0x2000d864

08011d98 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011d98:	b570      	push	{r4, r5, r6, lr}
 8011d9a:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011d9c:	8943      	ldrh	r3, [r0, #10]
 8011d9e:	2b0e      	cmp	r3, #14
 8011da0:	d91c      	bls.n	8011ddc <ethernet_input+0x44>
 8011da2:	460e      	mov	r6, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011da4:	7bc3      	ldrb	r3, [r0, #15]
 8011da6:	b91b      	cbnz	r3, 8011db0 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8011da8:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 8011dac:	3301      	adds	r3, #1
 8011dae:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011db0:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011db2:	8985      	ldrh	r5, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011db4:	7803      	ldrb	r3, [r0, #0]
 8011db6:	f013 0f01 	tst.w	r3, #1
 8011dba:	d00a      	beq.n	8011dd2 <ethernet_input+0x3a>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011dbc:	2b01      	cmp	r3, #1
 8011dbe:	d012      	beq.n	8011de6 <ethernet_input+0x4e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011dc0:	2206      	movs	r2, #6
 8011dc2:	491e      	ldr	r1, [pc, #120]	; (8011e3c <ethernet_input+0xa4>)
 8011dc4:	f000 f995 	bl	80120f2 <memcmp>
 8011dc8:	b918      	cbnz	r0, 8011dd2 <ethernet_input+0x3a>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011dca:	7b63      	ldrb	r3, [r4, #13]
 8011dcc:	f043 0308 	orr.w	r3, r3, #8
 8011dd0:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8011dd2:	2d08      	cmp	r5, #8
 8011dd4:	d012      	beq.n	8011dfc <ethernet_input+0x64>
 8011dd6:	f5b5 6fc1 	cmp.w	r5, #1544	; 0x608
 8011dda:	d01f      	beq.n	8011e1c <ethernet_input+0x84>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8011ddc:	4620      	mov	r0, r4
 8011dde:	f7fb f85b 	bl	800ce98 <pbuf_free>
  return ERR_OK;
}
 8011de2:	2000      	movs	r0, #0
 8011de4:	bd70      	pop	{r4, r5, r6, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011de6:	7843      	ldrb	r3, [r0, #1]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d1f2      	bne.n	8011dd2 <ethernet_input+0x3a>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011dec:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011dee:	2b5e      	cmp	r3, #94	; 0x5e
 8011df0:	d1ef      	bne.n	8011dd2 <ethernet_input+0x3a>
        p->flags |= PBUF_FLAG_LLMCAST;
 8011df2:	7b63      	ldrb	r3, [r4, #13]
 8011df4:	f043 0310 	orr.w	r3, r3, #16
 8011df8:	7363      	strb	r3, [r4, #13]
 8011dfa:	e7ea      	b.n	8011dd2 <ethernet_input+0x3a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011dfc:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8011e00:	f013 0f08 	tst.w	r3, #8
 8011e04:	d0ea      	beq.n	8011ddc <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011e06:	210e      	movs	r1, #14
 8011e08:	4620      	mov	r0, r4
 8011e0a:	f7fa ffff 	bl	800ce0c <pbuf_remove_header>
 8011e0e:	2800      	cmp	r0, #0
 8011e10:	d1e4      	bne.n	8011ddc <ethernet_input+0x44>
        ip4_input(p, netif);
 8011e12:	4631      	mov	r1, r6
 8011e14:	4620      	mov	r0, r4
 8011e16:	f7f9 fbb7 	bl	800b588 <ip4_input>
      break;
 8011e1a:	e7e2      	b.n	8011de2 <ethernet_input+0x4a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011e1c:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8011e20:	f013 0f08 	tst.w	r3, #8
 8011e24:	d0da      	beq.n	8011ddc <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011e26:	210e      	movs	r1, #14
 8011e28:	4620      	mov	r0, r4
 8011e2a:	f7fa ffef 	bl	800ce0c <pbuf_remove_header>
 8011e2e:	2800      	cmp	r0, #0
 8011e30:	d1d4      	bne.n	8011ddc <ethernet_input+0x44>
        etharp_input(p, netif);
 8011e32:	4631      	mov	r1, r6
 8011e34:	4620      	mov	r0, r4
 8011e36:	f7f8 ff51 	bl	800acdc <etharp_input>
      break;
 8011e3a:	e7d2      	b.n	8011de2 <ethernet_input+0x4a>
 8011e3c:	0806a618 	.word	0x0806a618

08011e40 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e44:	4605      	mov	r5, r0
 8011e46:	460c      	mov	r4, r1
 8011e48:	4616      	mov	r6, r2
 8011e4a:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011e4c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8011e50:	f7f7 f972 	bl	8009138 <lwip_htons>
 8011e54:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011e56:	210e      	movs	r1, #14
 8011e58:	4620      	mov	r0, r4
 8011e5a:	f7fa ffd2 	bl	800ce02 <pbuf_add_header>
 8011e5e:	b9e0      	cbnz	r0, 8011e9a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011e60:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 8011e62:	f8a3 800c 	strh.w	r8, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011e66:	683a      	ldr	r2, [r7, #0]
 8011e68:	601a      	str	r2, [r3, #0]
 8011e6a:	88ba      	ldrh	r2, [r7, #4]
 8011e6c:	809a      	strh	r2, [r3, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011e6e:	6832      	ldr	r2, [r6, #0]
 8011e70:	f8c3 2006 	str.w	r2, [r3, #6]
 8011e74:	88b2      	ldrh	r2, [r6, #4]
 8011e76:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011e78:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8011e7c:	2b06      	cmp	r3, #6
 8011e7e:	d006      	beq.n	8011e8e <ethernet_output+0x4e>
 8011e80:	4b08      	ldr	r3, [pc, #32]	; (8011ea4 <ethernet_output+0x64>)
 8011e82:	f240 1233 	movw	r2, #307	; 0x133
 8011e86:	4908      	ldr	r1, [pc, #32]	; (8011ea8 <ethernet_output+0x68>)
 8011e88:	4808      	ldr	r0, [pc, #32]	; (8011eac <ethernet_output+0x6c>)
 8011e8a:	f000 f96f 	bl	801216c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011e8e:	69ab      	ldr	r3, [r5, #24]
 8011e90:	4621      	mov	r1, r4
 8011e92:	4628      	mov	r0, r5
 8011e94:	4798      	blx	r3
 8011e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011e9a:	f06f 0001 	mvn.w	r0, #1
}
 8011e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ea2:	bf00      	nop
 8011ea4:	0806a620 	.word	0x0806a620
 8011ea8:	0806a660 	.word	0x0806a660
 8011eac:	0801335c 	.word	0x0801335c

08011eb0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8011eb0:	b510      	push	{r4, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 8011eb6:	9100      	str	r1, [sp, #0]
 8011eb8:	2304      	movs	r3, #4
 8011eba:	9301      	str	r3, [sp, #4]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8011ebc:	2100      	movs	r1, #0
 8011ebe:	4668      	mov	r0, sp
 8011ec0:	f7f3 fd10 	bl	80058e4 <osMessageCreate>
 8011ec4:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 8011ec6:	b110      	cbz	r0, 8011ece <sys_mbox_new+0x1e>
  return ERR_MEM;
 
 return ERR_OK;
 8011ec8:	2000      	movs	r0, #0
}
 8011eca:	b002      	add	sp, #8
 8011ecc:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 8011ece:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed2:	e7fa      	b.n	8011eca <sys_mbox_new+0x1a>

08011ed4 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8011ed4:	b538      	push	{r3, r4, r5, lr}
 8011ed6:	4605      	mov	r5, r0
 8011ed8:	460c      	mov	r4, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8011eda:	f04f 32ff 	mov.w	r2, #4294967295
 8011ede:	4621      	mov	r1, r4
 8011ee0:	6828      	ldr	r0, [r5, #0]
 8011ee2:	f7f3 fd07 	bl	80058f4 <osMessagePut>
 8011ee6:	2800      	cmp	r0, #0
 8011ee8:	d1f7      	bne.n	8011eda <sys_mbox_post+0x6>
}
 8011eea:	bd38      	pop	{r3, r4, r5, pc}

08011eec <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8011eec:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8011eee:	2200      	movs	r2, #0
 8011ef0:	6800      	ldr	r0, [r0, #0]
 8011ef2:	f7f3 fcff 	bl	80058f4 <osMessagePut>
 8011ef6:	b900      	cbnz	r0, 8011efa <sys_mbox_trypost+0xe>
#endif /* SYS_STATS */
			
   }

   return result;
}
 8011ef8:	bd08      	pop	{r3, pc}
      result = ERR_MEM;
 8011efa:	f04f 30ff 	mov.w	r0, #4294967295
 8011efe:	e7fb      	b.n	8011ef8 <sys_mbox_trypost+0xc>

08011f00 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8011f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f02:	b089      	sub	sp, #36	; 0x24
 8011f04:	4606      	mov	r6, r0
 8011f06:	460f      	mov	r7, r1
 8011f08:	4615      	mov	r5, r2
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 8011f0a:	f7f3 fc4c 	bl	80057a6 <osKernelSysTick>
 8011f0e:	4604      	mov	r4, r0
  
  if(timeout != 0)
 8011f10:	b185      	cbz	r5, 8011f34 <sys_arch_mbox_fetch+0x34>
  { 
    event = osMessageGet (*mbox, timeout);
 8011f12:	462a      	mov	r2, r5
 8011f14:	6831      	ldr	r1, [r6, #0]
 8011f16:	a805      	add	r0, sp, #20
 8011f18:	f7f3 fd20 	bl	800595c <osMessageGet>
    
    if(event.status == osEventMessage)
 8011f1c:	9b05      	ldr	r3, [sp, #20]
 8011f1e:	2b10      	cmp	r3, #16
 8011f20:	d002      	beq.n	8011f28 <sys_arch_mbox_fetch+0x28>
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8011f22:	f04f 30ff 	mov.w	r0, #4294967295
 8011f26:	e015      	b.n	8011f54 <sys_arch_mbox_fetch+0x54>
      *msg = (void *)event.value.v;
 8011f28:	9b06      	ldr	r3, [sp, #24]
 8011f2a:	603b      	str	r3, [r7, #0]
      return (osKernelSysTick() - starttime);
 8011f2c:	f7f3 fc3b 	bl	80057a6 <osKernelSysTick>
 8011f30:	1b00      	subs	r0, r0, r4
 8011f32:	e00f      	b.n	8011f54 <sys_arch_mbox_fetch+0x54>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 8011f34:	f04f 32ff 	mov.w	r2, #4294967295
 8011f38:	6831      	ldr	r1, [r6, #0]
 8011f3a:	4668      	mov	r0, sp
 8011f3c:	f7f3 fd0e 	bl	800595c <osMessageGet>
 8011f40:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 8011f44:	ab08      	add	r3, sp, #32
 8011f46:	e903 0007 	stmdb	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8011f4a:	9b06      	ldr	r3, [sp, #24]
 8011f4c:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 8011f4e:	f7f3 fc2a 	bl	80057a6 <osKernelSysTick>
 8011f52:	1b00      	subs	r0, r0, r4
  }
}
 8011f54:	b009      	add	sp, #36	; 0x24
 8011f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011f58 <sys_mbox_valid>:
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
  if (*mbox == SYS_MBOX_NULL) 
 8011f58:	6803      	ldr	r3, [r0, #0]
 8011f5a:	b10b      	cbz	r3, 8011f60 <sys_mbox_valid+0x8>
    return 0;
  else
    return 1;
 8011f5c:	2001      	movs	r0, #1
}                                             
 8011f5e:	4770      	bx	lr
    return 0;
 8011f60:	2000      	movs	r0, #0
 8011f62:	4770      	bx	lr

08011f64 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 8011f64:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8011f66:	4803      	ldr	r0, [pc, #12]	; (8011f74 <sys_init+0x10>)
 8011f68:	f7f3 fc4f 	bl	800580a <osMutexCreate>
 8011f6c:	4b02      	ldr	r3, [pc, #8]	; (8011f78 <sys_init+0x14>)
 8011f6e:	6018      	str	r0, [r3, #0]
 8011f70:	bd08      	pop	{r3, pc}
 8011f72:	bf00      	nop
 8011f74:	0806a69c 	.word	0x0806a69c
 8011f78:	2000d868 	.word	0x2000d868

08011f7c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8011f7c:	b510      	push	{r4, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	4604      	mov	r4, r0
  
  osMutexDef(MUTEX);
 8011f82:	a802      	add	r0, sp, #8
 8011f84:	2300      	movs	r3, #0
 8011f86:	f840 3d04 	str.w	r3, [r0, #-4]!
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 8011f8a:	f7f3 fc3e 	bl	800580a <osMutexCreate>
 8011f8e:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 8011f90:	b110      	cbz	r0, 8011f98 <sys_mutex_new+0x1c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8011f92:	2000      	movs	r0, #0
}
 8011f94:	b002      	add	sp, #8
 8011f96:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 8011f98:	f04f 30ff 	mov.w	r0, #4294967295
 8011f9c:	e7fa      	b.n	8011f94 <sys_mutex_new+0x18>

08011f9e <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8011f9e:	b508      	push	{r3, lr}
  osMutexWait (*mutex, osWaitForever);
 8011fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8011fa4:	6800      	ldr	r0, [r0, #0]
 8011fa6:	f7f3 fc35 	bl	8005814 <osMutexWait>
 8011faa:	bd08      	pop	{r3, pc}

08011fac <sys_mutex_unlock>:
}

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8011fac:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 8011fae:	6800      	ldr	r0, [r0, #0]
 8011fb0:	f7f3 fc6a 	bl	8005888 <osMutexRelease>
 8011fb4:	bd08      	pop	{r3, pc}

08011fb6 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8011fb6:	b500      	push	{lr}
 8011fb8:	b087      	sub	sp, #28
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8011fba:	9001      	str	r0, [sp, #4]
 8011fbc:	9102      	str	r1, [sp, #8]
 8011fbe:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8011fc2:	f8ad 100c 	strh.w	r1, [sp, #12]
 8011fc6:	2100      	movs	r1, #0
 8011fc8:	9104      	str	r1, [sp, #16]
 8011fca:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8011fcc:	4611      	mov	r1, r2
 8011fce:	a801      	add	r0, sp, #4
 8011fd0:	f7f3 fbf3 	bl	80057ba <osThreadCreate>
}
 8011fd4:	b007      	add	sp, #28
 8011fd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011fdc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8011fdc:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8011fde:	f04f 31ff 	mov.w	r1, #4294967295
 8011fe2:	4b03      	ldr	r3, [pc, #12]	; (8011ff0 <sys_arch_protect+0x14>)
 8011fe4:	6818      	ldr	r0, [r3, #0]
 8011fe6:	f7f3 fc15 	bl	8005814 <osMutexWait>
  return (sys_prot_t)1;
}
 8011fea:	2001      	movs	r0, #1
 8011fec:	bd08      	pop	{r3, pc}
 8011fee:	bf00      	nop
 8011ff0:	2000d868 	.word	0x2000d868

08011ff4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8011ff4:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8011ff6:	4b02      	ldr	r3, [pc, #8]	; (8012000 <sys_arch_unprotect+0xc>)
 8011ff8:	6818      	ldr	r0, [r3, #0]
 8011ffa:	f7f3 fc45 	bl	8005888 <osMutexRelease>
 8011ffe:	bd08      	pop	{r3, pc}
 8012000:	2000d868 	.word	0x2000d868

08012004 <_write>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8012004:	b570      	push	{r4, r5, r6, lr}
 8012006:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012008:	2400      	movs	r4, #0
 801200a:	e005      	b.n	8012018 <_write+0x14>
	{
		__io_putchar(*ptr++);
 801200c:	1c4d      	adds	r5, r1, #1
 801200e:	7808      	ldrb	r0, [r1, #0]
 8012010:	f7f0 f864 	bl	80020dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012014:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8012016:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012018:	42b4      	cmp	r4, r6
 801201a:	dbf7      	blt.n	801200c <_write+0x8>
	}
	return len;
}
 801201c:	4630      	mov	r0, r6
 801201e:	bd70      	pop	{r4, r5, r6, pc}

08012020 <_sbrk>:
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 8012020:	4b0c      	ldr	r3, [pc, #48]	; (8012054 <_sbrk+0x34>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	b15b      	cbz	r3, 801203e <_sbrk+0x1e>
    heap_end = &end;

  prev_heap_end = heap_end;
 8012026:	4b0b      	ldr	r3, [pc, #44]	; (8012054 <_sbrk+0x34>)
 8012028:	681b      	ldr	r3, [r3, #0]
  if (heap_end + incr > max_heap)
 801202a:	4418      	add	r0, r3
 801202c:	490a      	ldr	r1, [pc, #40]	; (8012058 <_sbrk+0x38>)
 801202e:	4a0b      	ldr	r2, [pc, #44]	; (801205c <_sbrk+0x3c>)
 8012030:	440a      	add	r2, r1
 8012032:	4282      	cmp	r2, r0
 8012034:	d307      	bcc.n	8012046 <_sbrk+0x26>
//    abort();
    errno = ENOMEM;
    return (caddr_t) -1;
  }

  heap_end += incr;
 8012036:	4a07      	ldr	r2, [pc, #28]	; (8012054 <_sbrk+0x34>)
 8012038:	6010      	str	r0, [r2, #0]

  return (caddr_t) prev_heap_end;
 801203a:	4618      	mov	r0, r3
}
 801203c:	4770      	bx	lr
    heap_end = &end;
 801203e:	4a07      	ldr	r2, [pc, #28]	; (801205c <_sbrk+0x3c>)
 8012040:	4b04      	ldr	r3, [pc, #16]	; (8012054 <_sbrk+0x34>)
 8012042:	601a      	str	r2, [r3, #0]
 8012044:	e7ef      	b.n	8012026 <_sbrk+0x6>
    errno = ENOMEM;
 8012046:	220c      	movs	r2, #12
 8012048:	4b05      	ldr	r3, [pc, #20]	; (8012060 <_sbrk+0x40>)
 801204a:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 801204c:	f04f 30ff 	mov.w	r0, #4294967295
 8012050:	4770      	bx	lr
 8012052:	bf00      	nop
 8012054:	20006e88 	.word	0x20006e88
 8012058:	00004000 	.word	0x00004000
 801205c:	2000d870 	.word	0x2000d870
 8012060:	2000d86c 	.word	0x2000d86c

08012064 <_close>:

int _close(int32_t file)
{
  return -1;
}
 8012064:	f04f 30ff 	mov.w	r0, #4294967295
 8012068:	4770      	bx	lr

0801206a <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
  st->st_mode = S_IFCHR;
 801206a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801206e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8012070:	2000      	movs	r0, #0
 8012072:	4770      	bx	lr

08012074 <_isatty>:

int _isatty(int32_t file)
{
  return 1;
}
 8012074:	2001      	movs	r0, #1
 8012076:	4770      	bx	lr

08012078 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
  return 0;
}
 8012078:	2000      	movs	r0, #0
 801207a:	4770      	bx	lr

0801207c <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{

    return 0;
}
 801207c:	2000      	movs	r0, #0
 801207e:	4770      	bx	lr

08012080 <__libc_init_array>:
 8012080:	b570      	push	{r4, r5, r6, lr}
 8012082:	4e0d      	ldr	r6, [pc, #52]	; (80120b8 <__libc_init_array+0x38>)
 8012084:	4c0d      	ldr	r4, [pc, #52]	; (80120bc <__libc_init_array+0x3c>)
 8012086:	1ba4      	subs	r4, r4, r6
 8012088:	10a4      	asrs	r4, r4, #2
 801208a:	2500      	movs	r5, #0
 801208c:	42a5      	cmp	r5, r4
 801208e:	d109      	bne.n	80120a4 <__libc_init_array+0x24>
 8012090:	4e0b      	ldr	r6, [pc, #44]	; (80120c0 <__libc_init_array+0x40>)
 8012092:	4c0c      	ldr	r4, [pc, #48]	; (80120c4 <__libc_init_array+0x44>)
 8012094:	f001 f8fc 	bl	8013290 <_init>
 8012098:	1ba4      	subs	r4, r4, r6
 801209a:	10a4      	asrs	r4, r4, #2
 801209c:	2500      	movs	r5, #0
 801209e:	42a5      	cmp	r5, r4
 80120a0:	d105      	bne.n	80120ae <__libc_init_array+0x2e>
 80120a2:	bd70      	pop	{r4, r5, r6, pc}
 80120a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80120a8:	4798      	blx	r3
 80120aa:	3501      	adds	r5, #1
 80120ac:	e7ee      	b.n	801208c <__libc_init_array+0xc>
 80120ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80120b2:	4798      	blx	r3
 80120b4:	3501      	adds	r5, #1
 80120b6:	e7f2      	b.n	801209e <__libc_init_array+0x1e>
 80120b8:	0806a84c 	.word	0x0806a84c
 80120bc:	0806a84c 	.word	0x0806a84c
 80120c0:	0806a84c 	.word	0x0806a84c
 80120c4:	0806a850 	.word	0x0806a850

080120c8 <__locale_ctype_ptr_l>:
 80120c8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80120cc:	4770      	bx	lr

080120ce <__ascii_mbtowc>:
 80120ce:	b082      	sub	sp, #8
 80120d0:	b901      	cbnz	r1, 80120d4 <__ascii_mbtowc+0x6>
 80120d2:	a901      	add	r1, sp, #4
 80120d4:	b142      	cbz	r2, 80120e8 <__ascii_mbtowc+0x1a>
 80120d6:	b14b      	cbz	r3, 80120ec <__ascii_mbtowc+0x1e>
 80120d8:	7813      	ldrb	r3, [r2, #0]
 80120da:	600b      	str	r3, [r1, #0]
 80120dc:	7812      	ldrb	r2, [r2, #0]
 80120de:	1c10      	adds	r0, r2, #0
 80120e0:	bf18      	it	ne
 80120e2:	2001      	movne	r0, #1
 80120e4:	b002      	add	sp, #8
 80120e6:	4770      	bx	lr
 80120e8:	4610      	mov	r0, r2
 80120ea:	e7fb      	b.n	80120e4 <__ascii_mbtowc+0x16>
 80120ec:	f06f 0001 	mvn.w	r0, #1
 80120f0:	e7f8      	b.n	80120e4 <__ascii_mbtowc+0x16>

080120f2 <memcmp>:
 80120f2:	b510      	push	{r4, lr}
 80120f4:	3901      	subs	r1, #1
 80120f6:	4402      	add	r2, r0
 80120f8:	4290      	cmp	r0, r2
 80120fa:	d101      	bne.n	8012100 <memcmp+0xe>
 80120fc:	2000      	movs	r0, #0
 80120fe:	bd10      	pop	{r4, pc}
 8012100:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012104:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012108:	42a3      	cmp	r3, r4
 801210a:	d0f5      	beq.n	80120f8 <memcmp+0x6>
 801210c:	1b18      	subs	r0, r3, r4
 801210e:	bd10      	pop	{r4, pc}

08012110 <memcpy>:
 8012110:	b510      	push	{r4, lr}
 8012112:	1e43      	subs	r3, r0, #1
 8012114:	440a      	add	r2, r1
 8012116:	4291      	cmp	r1, r2
 8012118:	d100      	bne.n	801211c <memcpy+0xc>
 801211a:	bd10      	pop	{r4, pc}
 801211c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012120:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012124:	e7f7      	b.n	8012116 <memcpy+0x6>

08012126 <memmove>:
 8012126:	4288      	cmp	r0, r1
 8012128:	b510      	push	{r4, lr}
 801212a:	eb01 0302 	add.w	r3, r1, r2
 801212e:	d803      	bhi.n	8012138 <memmove+0x12>
 8012130:	1e42      	subs	r2, r0, #1
 8012132:	4299      	cmp	r1, r3
 8012134:	d10c      	bne.n	8012150 <memmove+0x2a>
 8012136:	bd10      	pop	{r4, pc}
 8012138:	4298      	cmp	r0, r3
 801213a:	d2f9      	bcs.n	8012130 <memmove+0xa>
 801213c:	1881      	adds	r1, r0, r2
 801213e:	1ad2      	subs	r2, r2, r3
 8012140:	42d3      	cmn	r3, r2
 8012142:	d100      	bne.n	8012146 <memmove+0x20>
 8012144:	bd10      	pop	{r4, pc}
 8012146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801214a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801214e:	e7f7      	b.n	8012140 <memmove+0x1a>
 8012150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012154:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012158:	e7eb      	b.n	8012132 <memmove+0xc>

0801215a <memset>:
 801215a:	4402      	add	r2, r0
 801215c:	4603      	mov	r3, r0
 801215e:	4293      	cmp	r3, r2
 8012160:	d100      	bne.n	8012164 <memset+0xa>
 8012162:	4770      	bx	lr
 8012164:	f803 1b01 	strb.w	r1, [r3], #1
 8012168:	e7f9      	b.n	801215e <memset+0x4>
	...

0801216c <iprintf>:
 801216c:	b40f      	push	{r0, r1, r2, r3}
 801216e:	4b0a      	ldr	r3, [pc, #40]	; (8012198 <iprintf+0x2c>)
 8012170:	b513      	push	{r0, r1, r4, lr}
 8012172:	681c      	ldr	r4, [r3, #0]
 8012174:	b124      	cbz	r4, 8012180 <iprintf+0x14>
 8012176:	69a3      	ldr	r3, [r4, #24]
 8012178:	b913      	cbnz	r3, 8012180 <iprintf+0x14>
 801217a:	4620      	mov	r0, r4
 801217c:	f000 fb52 	bl	8012824 <__sinit>
 8012180:	ab05      	add	r3, sp, #20
 8012182:	9a04      	ldr	r2, [sp, #16]
 8012184:	68a1      	ldr	r1, [r4, #8]
 8012186:	9301      	str	r3, [sp, #4]
 8012188:	4620      	mov	r0, r4
 801218a:	f000 fd17 	bl	8012bbc <_vfiprintf_r>
 801218e:	b002      	add	sp, #8
 8012190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012194:	b004      	add	sp, #16
 8012196:	4770      	bx	lr
 8012198:	20000258 	.word	0x20000258

0801219c <_puts_r>:
 801219c:	b570      	push	{r4, r5, r6, lr}
 801219e:	460e      	mov	r6, r1
 80121a0:	4605      	mov	r5, r0
 80121a2:	b118      	cbz	r0, 80121ac <_puts_r+0x10>
 80121a4:	6983      	ldr	r3, [r0, #24]
 80121a6:	b90b      	cbnz	r3, 80121ac <_puts_r+0x10>
 80121a8:	f000 fb3c 	bl	8012824 <__sinit>
 80121ac:	69ab      	ldr	r3, [r5, #24]
 80121ae:	68ac      	ldr	r4, [r5, #8]
 80121b0:	b913      	cbnz	r3, 80121b8 <_puts_r+0x1c>
 80121b2:	4628      	mov	r0, r5
 80121b4:	f000 fb36 	bl	8012824 <__sinit>
 80121b8:	4b23      	ldr	r3, [pc, #140]	; (8012248 <_puts_r+0xac>)
 80121ba:	429c      	cmp	r4, r3
 80121bc:	d117      	bne.n	80121ee <_puts_r+0x52>
 80121be:	686c      	ldr	r4, [r5, #4]
 80121c0:	89a3      	ldrh	r3, [r4, #12]
 80121c2:	071b      	lsls	r3, r3, #28
 80121c4:	d51d      	bpl.n	8012202 <_puts_r+0x66>
 80121c6:	6923      	ldr	r3, [r4, #16]
 80121c8:	b1db      	cbz	r3, 8012202 <_puts_r+0x66>
 80121ca:	3e01      	subs	r6, #1
 80121cc:	68a3      	ldr	r3, [r4, #8]
 80121ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80121d2:	3b01      	subs	r3, #1
 80121d4:	60a3      	str	r3, [r4, #8]
 80121d6:	b9e9      	cbnz	r1, 8012214 <_puts_r+0x78>
 80121d8:	2b00      	cmp	r3, #0
 80121da:	da2e      	bge.n	801223a <_puts_r+0x9e>
 80121dc:	4622      	mov	r2, r4
 80121de:	210a      	movs	r1, #10
 80121e0:	4628      	mov	r0, r5
 80121e2:	f000 f95f 	bl	80124a4 <__swbuf_r>
 80121e6:	3001      	adds	r0, #1
 80121e8:	d011      	beq.n	801220e <_puts_r+0x72>
 80121ea:	200a      	movs	r0, #10
 80121ec:	bd70      	pop	{r4, r5, r6, pc}
 80121ee:	4b17      	ldr	r3, [pc, #92]	; (801224c <_puts_r+0xb0>)
 80121f0:	429c      	cmp	r4, r3
 80121f2:	d101      	bne.n	80121f8 <_puts_r+0x5c>
 80121f4:	68ac      	ldr	r4, [r5, #8]
 80121f6:	e7e3      	b.n	80121c0 <_puts_r+0x24>
 80121f8:	4b15      	ldr	r3, [pc, #84]	; (8012250 <_puts_r+0xb4>)
 80121fa:	429c      	cmp	r4, r3
 80121fc:	bf08      	it	eq
 80121fe:	68ec      	ldreq	r4, [r5, #12]
 8012200:	e7de      	b.n	80121c0 <_puts_r+0x24>
 8012202:	4621      	mov	r1, r4
 8012204:	4628      	mov	r0, r5
 8012206:	f000 f9ad 	bl	8012564 <__swsetup_r>
 801220a:	2800      	cmp	r0, #0
 801220c:	d0dd      	beq.n	80121ca <_puts_r+0x2e>
 801220e:	f04f 30ff 	mov.w	r0, #4294967295
 8012212:	bd70      	pop	{r4, r5, r6, pc}
 8012214:	2b00      	cmp	r3, #0
 8012216:	da04      	bge.n	8012222 <_puts_r+0x86>
 8012218:	69a2      	ldr	r2, [r4, #24]
 801221a:	4293      	cmp	r3, r2
 801221c:	db06      	blt.n	801222c <_puts_r+0x90>
 801221e:	290a      	cmp	r1, #10
 8012220:	d004      	beq.n	801222c <_puts_r+0x90>
 8012222:	6823      	ldr	r3, [r4, #0]
 8012224:	1c5a      	adds	r2, r3, #1
 8012226:	6022      	str	r2, [r4, #0]
 8012228:	7019      	strb	r1, [r3, #0]
 801222a:	e7cf      	b.n	80121cc <_puts_r+0x30>
 801222c:	4622      	mov	r2, r4
 801222e:	4628      	mov	r0, r5
 8012230:	f000 f938 	bl	80124a4 <__swbuf_r>
 8012234:	3001      	adds	r0, #1
 8012236:	d1c9      	bne.n	80121cc <_puts_r+0x30>
 8012238:	e7e9      	b.n	801220e <_puts_r+0x72>
 801223a:	6823      	ldr	r3, [r4, #0]
 801223c:	200a      	movs	r0, #10
 801223e:	1c5a      	adds	r2, r3, #1
 8012240:	6022      	str	r2, [r4, #0]
 8012242:	7018      	strb	r0, [r3, #0]
 8012244:	bd70      	pop	{r4, r5, r6, pc}
 8012246:	bf00      	nop
 8012248:	0806a7cc 	.word	0x0806a7cc
 801224c:	0806a7ec 	.word	0x0806a7ec
 8012250:	0806a7ac 	.word	0x0806a7ac

08012254 <puts>:
 8012254:	4b02      	ldr	r3, [pc, #8]	; (8012260 <puts+0xc>)
 8012256:	4601      	mov	r1, r0
 8012258:	6818      	ldr	r0, [r3, #0]
 801225a:	f7ff bf9f 	b.w	801219c <_puts_r>
 801225e:	bf00      	nop
 8012260:	20000258 	.word	0x20000258

08012264 <rand>:
 8012264:	4b19      	ldr	r3, [pc, #100]	; (80122cc <rand+0x68>)
 8012266:	b510      	push	{r4, lr}
 8012268:	681c      	ldr	r4, [r3, #0]
 801226a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801226c:	b9d3      	cbnz	r3, 80122a4 <rand+0x40>
 801226e:	2018      	movs	r0, #24
 8012270:	f000 fbc6 	bl	8012a00 <malloc>
 8012274:	f243 330e 	movw	r3, #13070	; 0x330e
 8012278:	63a0      	str	r0, [r4, #56]	; 0x38
 801227a:	8003      	strh	r3, [r0, #0]
 801227c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8012280:	8043      	strh	r3, [r0, #2]
 8012282:	f241 2334 	movw	r3, #4660	; 0x1234
 8012286:	8083      	strh	r3, [r0, #4]
 8012288:	f24e 636d 	movw	r3, #58989	; 0xe66d
 801228c:	80c3      	strh	r3, [r0, #6]
 801228e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8012292:	8103      	strh	r3, [r0, #8]
 8012294:	2305      	movs	r3, #5
 8012296:	8143      	strh	r3, [r0, #10]
 8012298:	230b      	movs	r3, #11
 801229a:	8183      	strh	r3, [r0, #12]
 801229c:	2201      	movs	r2, #1
 801229e:	2300      	movs	r3, #0
 80122a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80122a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80122a6:	480a      	ldr	r0, [pc, #40]	; (80122d0 <rand+0x6c>)
 80122a8:	690a      	ldr	r2, [r1, #16]
 80122aa:	694b      	ldr	r3, [r1, #20]
 80122ac:	4c09      	ldr	r4, [pc, #36]	; (80122d4 <rand+0x70>)
 80122ae:	4350      	muls	r0, r2
 80122b0:	fb04 0003 	mla	r0, r4, r3, r0
 80122b4:	fba2 2304 	umull	r2, r3, r2, r4
 80122b8:	3201      	adds	r2, #1
 80122ba:	4403      	add	r3, r0
 80122bc:	f143 0300 	adc.w	r3, r3, #0
 80122c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80122c4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80122c8:	bd10      	pop	{r4, pc}
 80122ca:	bf00      	nop
 80122cc:	20000258 	.word	0x20000258
 80122d0:	5851f42d 	.word	0x5851f42d
 80122d4:	4c957f2d 	.word	0x4c957f2d

080122d8 <strcat>:
 80122d8:	b510      	push	{r4, lr}
 80122da:	4602      	mov	r2, r0
 80122dc:	4613      	mov	r3, r2
 80122de:	3201      	adds	r2, #1
 80122e0:	781c      	ldrb	r4, [r3, #0]
 80122e2:	2c00      	cmp	r4, #0
 80122e4:	d1fa      	bne.n	80122dc <strcat+0x4>
 80122e6:	3b01      	subs	r3, #1
 80122e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122f0:	2a00      	cmp	r2, #0
 80122f2:	d1f9      	bne.n	80122e8 <strcat+0x10>
 80122f4:	bd10      	pop	{r4, pc}

080122f6 <strchr>:
 80122f6:	b2c9      	uxtb	r1, r1
 80122f8:	4603      	mov	r3, r0
 80122fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122fe:	b11a      	cbz	r2, 8012308 <strchr+0x12>
 8012300:	4291      	cmp	r1, r2
 8012302:	d1f9      	bne.n	80122f8 <strchr+0x2>
 8012304:	4618      	mov	r0, r3
 8012306:	4770      	bx	lr
 8012308:	2900      	cmp	r1, #0
 801230a:	bf0c      	ite	eq
 801230c:	4618      	moveq	r0, r3
 801230e:	2000      	movne	r0, #0
 8012310:	4770      	bx	lr

08012312 <strcpy>:
 8012312:	4603      	mov	r3, r0
 8012314:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012318:	f803 2b01 	strb.w	r2, [r3], #1
 801231c:	2a00      	cmp	r2, #0
 801231e:	d1f9      	bne.n	8012314 <strcpy+0x2>
 8012320:	4770      	bx	lr

08012322 <strncmp>:
 8012322:	b510      	push	{r4, lr}
 8012324:	b16a      	cbz	r2, 8012342 <strncmp+0x20>
 8012326:	3901      	subs	r1, #1
 8012328:	1884      	adds	r4, r0, r2
 801232a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801232e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012332:	4293      	cmp	r3, r2
 8012334:	d103      	bne.n	801233e <strncmp+0x1c>
 8012336:	42a0      	cmp	r0, r4
 8012338:	d001      	beq.n	801233e <strncmp+0x1c>
 801233a:	2b00      	cmp	r3, #0
 801233c:	d1f5      	bne.n	801232a <strncmp+0x8>
 801233e:	1a98      	subs	r0, r3, r2
 8012340:	bd10      	pop	{r4, pc}
 8012342:	4610      	mov	r0, r2
 8012344:	bd10      	pop	{r4, pc}

08012346 <strstr>:
 8012346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012348:	7803      	ldrb	r3, [r0, #0]
 801234a:	b133      	cbz	r3, 801235a <strstr+0x14>
 801234c:	4603      	mov	r3, r0
 801234e:	4618      	mov	r0, r3
 8012350:	1c5e      	adds	r6, r3, #1
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	b933      	cbnz	r3, 8012364 <strstr+0x1e>
 8012356:	4618      	mov	r0, r3
 8012358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801235a:	780b      	ldrb	r3, [r1, #0]
 801235c:	2b00      	cmp	r3, #0
 801235e:	bf18      	it	ne
 8012360:	2000      	movne	r0, #0
 8012362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012364:	1e4d      	subs	r5, r1, #1
 8012366:	1e44      	subs	r4, r0, #1
 8012368:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801236c:	2a00      	cmp	r2, #0
 801236e:	d0f3      	beq.n	8012358 <strstr+0x12>
 8012370:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8012374:	4297      	cmp	r7, r2
 8012376:	4633      	mov	r3, r6
 8012378:	d0f6      	beq.n	8012368 <strstr+0x22>
 801237a:	e7e8      	b.n	801234e <strstr+0x8>

0801237c <_strtoul_l.isra.0>:
 801237c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012380:	4680      	mov	r8, r0
 8012382:	4689      	mov	r9, r1
 8012384:	4692      	mov	sl, r2
 8012386:	461e      	mov	r6, r3
 8012388:	460f      	mov	r7, r1
 801238a:	463d      	mov	r5, r7
 801238c:	9808      	ldr	r0, [sp, #32]
 801238e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012392:	f7ff fe99 	bl	80120c8 <__locale_ctype_ptr_l>
 8012396:	4420      	add	r0, r4
 8012398:	7843      	ldrb	r3, [r0, #1]
 801239a:	f013 0308 	ands.w	r3, r3, #8
 801239e:	d10a      	bne.n	80123b6 <_strtoul_l.isra.0+0x3a>
 80123a0:	2c2d      	cmp	r4, #45	; 0x2d
 80123a2:	d10a      	bne.n	80123ba <_strtoul_l.isra.0+0x3e>
 80123a4:	782c      	ldrb	r4, [r5, #0]
 80123a6:	2301      	movs	r3, #1
 80123a8:	1cbd      	adds	r5, r7, #2
 80123aa:	b15e      	cbz	r6, 80123c4 <_strtoul_l.isra.0+0x48>
 80123ac:	2e10      	cmp	r6, #16
 80123ae:	d113      	bne.n	80123d8 <_strtoul_l.isra.0+0x5c>
 80123b0:	2c30      	cmp	r4, #48	; 0x30
 80123b2:	d009      	beq.n	80123c8 <_strtoul_l.isra.0+0x4c>
 80123b4:	e010      	b.n	80123d8 <_strtoul_l.isra.0+0x5c>
 80123b6:	462f      	mov	r7, r5
 80123b8:	e7e7      	b.n	801238a <_strtoul_l.isra.0+0xe>
 80123ba:	2c2b      	cmp	r4, #43	; 0x2b
 80123bc:	bf04      	itt	eq
 80123be:	782c      	ldrbeq	r4, [r5, #0]
 80123c0:	1cbd      	addeq	r5, r7, #2
 80123c2:	e7f2      	b.n	80123aa <_strtoul_l.isra.0+0x2e>
 80123c4:	2c30      	cmp	r4, #48	; 0x30
 80123c6:	d125      	bne.n	8012414 <_strtoul_l.isra.0+0x98>
 80123c8:	782a      	ldrb	r2, [r5, #0]
 80123ca:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80123ce:	2a58      	cmp	r2, #88	; 0x58
 80123d0:	d14a      	bne.n	8012468 <_strtoul_l.isra.0+0xec>
 80123d2:	786c      	ldrb	r4, [r5, #1]
 80123d4:	2610      	movs	r6, #16
 80123d6:	3502      	adds	r5, #2
 80123d8:	f04f 31ff 	mov.w	r1, #4294967295
 80123dc:	2700      	movs	r7, #0
 80123de:	fbb1 f1f6 	udiv	r1, r1, r6
 80123e2:	fb06 fe01 	mul.w	lr, r6, r1
 80123e6:	ea6f 0e0e 	mvn.w	lr, lr
 80123ea:	4638      	mov	r0, r7
 80123ec:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80123f0:	2a09      	cmp	r2, #9
 80123f2:	d811      	bhi.n	8012418 <_strtoul_l.isra.0+0x9c>
 80123f4:	4614      	mov	r4, r2
 80123f6:	42a6      	cmp	r6, r4
 80123f8:	dd1d      	ble.n	8012436 <_strtoul_l.isra.0+0xba>
 80123fa:	2f00      	cmp	r7, #0
 80123fc:	db18      	blt.n	8012430 <_strtoul_l.isra.0+0xb4>
 80123fe:	4281      	cmp	r1, r0
 8012400:	d316      	bcc.n	8012430 <_strtoul_l.isra.0+0xb4>
 8012402:	d101      	bne.n	8012408 <_strtoul_l.isra.0+0x8c>
 8012404:	45a6      	cmp	lr, r4
 8012406:	db13      	blt.n	8012430 <_strtoul_l.isra.0+0xb4>
 8012408:	fb00 4006 	mla	r0, r0, r6, r4
 801240c:	2701      	movs	r7, #1
 801240e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012412:	e7eb      	b.n	80123ec <_strtoul_l.isra.0+0x70>
 8012414:	260a      	movs	r6, #10
 8012416:	e7df      	b.n	80123d8 <_strtoul_l.isra.0+0x5c>
 8012418:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 801241c:	2a19      	cmp	r2, #25
 801241e:	d801      	bhi.n	8012424 <_strtoul_l.isra.0+0xa8>
 8012420:	3c37      	subs	r4, #55	; 0x37
 8012422:	e7e8      	b.n	80123f6 <_strtoul_l.isra.0+0x7a>
 8012424:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8012428:	2a19      	cmp	r2, #25
 801242a:	d804      	bhi.n	8012436 <_strtoul_l.isra.0+0xba>
 801242c:	3c57      	subs	r4, #87	; 0x57
 801242e:	e7e2      	b.n	80123f6 <_strtoul_l.isra.0+0x7a>
 8012430:	f04f 37ff 	mov.w	r7, #4294967295
 8012434:	e7eb      	b.n	801240e <_strtoul_l.isra.0+0x92>
 8012436:	2f00      	cmp	r7, #0
 8012438:	da09      	bge.n	801244e <_strtoul_l.isra.0+0xd2>
 801243a:	2322      	movs	r3, #34	; 0x22
 801243c:	f8c8 3000 	str.w	r3, [r8]
 8012440:	f04f 30ff 	mov.w	r0, #4294967295
 8012444:	f1ba 0f00 	cmp.w	sl, #0
 8012448:	d107      	bne.n	801245a <_strtoul_l.isra.0+0xde>
 801244a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801244e:	b103      	cbz	r3, 8012452 <_strtoul_l.isra.0+0xd6>
 8012450:	4240      	negs	r0, r0
 8012452:	f1ba 0f00 	cmp.w	sl, #0
 8012456:	d00c      	beq.n	8012472 <_strtoul_l.isra.0+0xf6>
 8012458:	b127      	cbz	r7, 8012464 <_strtoul_l.isra.0+0xe8>
 801245a:	3d01      	subs	r5, #1
 801245c:	f8ca 5000 	str.w	r5, [sl]
 8012460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012464:	464d      	mov	r5, r9
 8012466:	e7f9      	b.n	801245c <_strtoul_l.isra.0+0xe0>
 8012468:	2430      	movs	r4, #48	; 0x30
 801246a:	2e00      	cmp	r6, #0
 801246c:	d1b4      	bne.n	80123d8 <_strtoul_l.isra.0+0x5c>
 801246e:	2608      	movs	r6, #8
 8012470:	e7b2      	b.n	80123d8 <_strtoul_l.isra.0+0x5c>
 8012472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08012478 <strtoul>:
 8012478:	4b08      	ldr	r3, [pc, #32]	; (801249c <strtoul+0x24>)
 801247a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801247c:	681c      	ldr	r4, [r3, #0]
 801247e:	4d08      	ldr	r5, [pc, #32]	; (80124a0 <strtoul+0x28>)
 8012480:	6a23      	ldr	r3, [r4, #32]
 8012482:	2b00      	cmp	r3, #0
 8012484:	bf08      	it	eq
 8012486:	462b      	moveq	r3, r5
 8012488:	9300      	str	r3, [sp, #0]
 801248a:	4613      	mov	r3, r2
 801248c:	460a      	mov	r2, r1
 801248e:	4601      	mov	r1, r0
 8012490:	4620      	mov	r0, r4
 8012492:	f7ff ff73 	bl	801237c <_strtoul_l.isra.0>
 8012496:	b003      	add	sp, #12
 8012498:	bd30      	pop	{r4, r5, pc}
 801249a:	bf00      	nop
 801249c:	20000258 	.word	0x20000258
 80124a0:	200000ec 	.word	0x200000ec

080124a4 <__swbuf_r>:
 80124a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124a6:	460e      	mov	r6, r1
 80124a8:	4614      	mov	r4, r2
 80124aa:	4605      	mov	r5, r0
 80124ac:	b118      	cbz	r0, 80124b6 <__swbuf_r+0x12>
 80124ae:	6983      	ldr	r3, [r0, #24]
 80124b0:	b90b      	cbnz	r3, 80124b6 <__swbuf_r+0x12>
 80124b2:	f000 f9b7 	bl	8012824 <__sinit>
 80124b6:	4b21      	ldr	r3, [pc, #132]	; (801253c <__swbuf_r+0x98>)
 80124b8:	429c      	cmp	r4, r3
 80124ba:	d12a      	bne.n	8012512 <__swbuf_r+0x6e>
 80124bc:	686c      	ldr	r4, [r5, #4]
 80124be:	69a3      	ldr	r3, [r4, #24]
 80124c0:	60a3      	str	r3, [r4, #8]
 80124c2:	89a3      	ldrh	r3, [r4, #12]
 80124c4:	071a      	lsls	r2, r3, #28
 80124c6:	d52e      	bpl.n	8012526 <__swbuf_r+0x82>
 80124c8:	6923      	ldr	r3, [r4, #16]
 80124ca:	b363      	cbz	r3, 8012526 <__swbuf_r+0x82>
 80124cc:	6923      	ldr	r3, [r4, #16]
 80124ce:	6820      	ldr	r0, [r4, #0]
 80124d0:	1ac0      	subs	r0, r0, r3
 80124d2:	6963      	ldr	r3, [r4, #20]
 80124d4:	b2f6      	uxtb	r6, r6
 80124d6:	4298      	cmp	r0, r3
 80124d8:	4637      	mov	r7, r6
 80124da:	db04      	blt.n	80124e6 <__swbuf_r+0x42>
 80124dc:	4621      	mov	r1, r4
 80124de:	4628      	mov	r0, r5
 80124e0:	f000 f936 	bl	8012750 <_fflush_r>
 80124e4:	bb28      	cbnz	r0, 8012532 <__swbuf_r+0x8e>
 80124e6:	68a3      	ldr	r3, [r4, #8]
 80124e8:	3b01      	subs	r3, #1
 80124ea:	60a3      	str	r3, [r4, #8]
 80124ec:	6823      	ldr	r3, [r4, #0]
 80124ee:	1c5a      	adds	r2, r3, #1
 80124f0:	6022      	str	r2, [r4, #0]
 80124f2:	701e      	strb	r6, [r3, #0]
 80124f4:	6963      	ldr	r3, [r4, #20]
 80124f6:	3001      	adds	r0, #1
 80124f8:	4298      	cmp	r0, r3
 80124fa:	d004      	beq.n	8012506 <__swbuf_r+0x62>
 80124fc:	89a3      	ldrh	r3, [r4, #12]
 80124fe:	07db      	lsls	r3, r3, #31
 8012500:	d519      	bpl.n	8012536 <__swbuf_r+0x92>
 8012502:	2e0a      	cmp	r6, #10
 8012504:	d117      	bne.n	8012536 <__swbuf_r+0x92>
 8012506:	4621      	mov	r1, r4
 8012508:	4628      	mov	r0, r5
 801250a:	f000 f921 	bl	8012750 <_fflush_r>
 801250e:	b190      	cbz	r0, 8012536 <__swbuf_r+0x92>
 8012510:	e00f      	b.n	8012532 <__swbuf_r+0x8e>
 8012512:	4b0b      	ldr	r3, [pc, #44]	; (8012540 <__swbuf_r+0x9c>)
 8012514:	429c      	cmp	r4, r3
 8012516:	d101      	bne.n	801251c <__swbuf_r+0x78>
 8012518:	68ac      	ldr	r4, [r5, #8]
 801251a:	e7d0      	b.n	80124be <__swbuf_r+0x1a>
 801251c:	4b09      	ldr	r3, [pc, #36]	; (8012544 <__swbuf_r+0xa0>)
 801251e:	429c      	cmp	r4, r3
 8012520:	bf08      	it	eq
 8012522:	68ec      	ldreq	r4, [r5, #12]
 8012524:	e7cb      	b.n	80124be <__swbuf_r+0x1a>
 8012526:	4621      	mov	r1, r4
 8012528:	4628      	mov	r0, r5
 801252a:	f000 f81b 	bl	8012564 <__swsetup_r>
 801252e:	2800      	cmp	r0, #0
 8012530:	d0cc      	beq.n	80124cc <__swbuf_r+0x28>
 8012532:	f04f 37ff 	mov.w	r7, #4294967295
 8012536:	4638      	mov	r0, r7
 8012538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801253a:	bf00      	nop
 801253c:	0806a7cc 	.word	0x0806a7cc
 8012540:	0806a7ec 	.word	0x0806a7ec
 8012544:	0806a7ac 	.word	0x0806a7ac

08012548 <__ascii_wctomb>:
 8012548:	b149      	cbz	r1, 801255e <__ascii_wctomb+0x16>
 801254a:	2aff      	cmp	r2, #255	; 0xff
 801254c:	bf85      	ittet	hi
 801254e:	238a      	movhi	r3, #138	; 0x8a
 8012550:	6003      	strhi	r3, [r0, #0]
 8012552:	700a      	strbls	r2, [r1, #0]
 8012554:	f04f 30ff 	movhi.w	r0, #4294967295
 8012558:	bf98      	it	ls
 801255a:	2001      	movls	r0, #1
 801255c:	4770      	bx	lr
 801255e:	4608      	mov	r0, r1
 8012560:	4770      	bx	lr
	...

08012564 <__swsetup_r>:
 8012564:	4b32      	ldr	r3, [pc, #200]	; (8012630 <__swsetup_r+0xcc>)
 8012566:	b570      	push	{r4, r5, r6, lr}
 8012568:	681d      	ldr	r5, [r3, #0]
 801256a:	4606      	mov	r6, r0
 801256c:	460c      	mov	r4, r1
 801256e:	b125      	cbz	r5, 801257a <__swsetup_r+0x16>
 8012570:	69ab      	ldr	r3, [r5, #24]
 8012572:	b913      	cbnz	r3, 801257a <__swsetup_r+0x16>
 8012574:	4628      	mov	r0, r5
 8012576:	f000 f955 	bl	8012824 <__sinit>
 801257a:	4b2e      	ldr	r3, [pc, #184]	; (8012634 <__swsetup_r+0xd0>)
 801257c:	429c      	cmp	r4, r3
 801257e:	d10f      	bne.n	80125a0 <__swsetup_r+0x3c>
 8012580:	686c      	ldr	r4, [r5, #4]
 8012582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012586:	b29a      	uxth	r2, r3
 8012588:	0715      	lsls	r5, r2, #28
 801258a:	d42c      	bmi.n	80125e6 <__swsetup_r+0x82>
 801258c:	06d0      	lsls	r0, r2, #27
 801258e:	d411      	bmi.n	80125b4 <__swsetup_r+0x50>
 8012590:	2209      	movs	r2, #9
 8012592:	6032      	str	r2, [r6, #0]
 8012594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012598:	81a3      	strh	r3, [r4, #12]
 801259a:	f04f 30ff 	mov.w	r0, #4294967295
 801259e:	bd70      	pop	{r4, r5, r6, pc}
 80125a0:	4b25      	ldr	r3, [pc, #148]	; (8012638 <__swsetup_r+0xd4>)
 80125a2:	429c      	cmp	r4, r3
 80125a4:	d101      	bne.n	80125aa <__swsetup_r+0x46>
 80125a6:	68ac      	ldr	r4, [r5, #8]
 80125a8:	e7eb      	b.n	8012582 <__swsetup_r+0x1e>
 80125aa:	4b24      	ldr	r3, [pc, #144]	; (801263c <__swsetup_r+0xd8>)
 80125ac:	429c      	cmp	r4, r3
 80125ae:	bf08      	it	eq
 80125b0:	68ec      	ldreq	r4, [r5, #12]
 80125b2:	e7e6      	b.n	8012582 <__swsetup_r+0x1e>
 80125b4:	0751      	lsls	r1, r2, #29
 80125b6:	d512      	bpl.n	80125de <__swsetup_r+0x7a>
 80125b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80125ba:	b141      	cbz	r1, 80125ce <__swsetup_r+0x6a>
 80125bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80125c0:	4299      	cmp	r1, r3
 80125c2:	d002      	beq.n	80125ca <__swsetup_r+0x66>
 80125c4:	4630      	mov	r0, r6
 80125c6:	f000 fa23 	bl	8012a10 <_free_r>
 80125ca:	2300      	movs	r3, #0
 80125cc:	6363      	str	r3, [r4, #52]	; 0x34
 80125ce:	89a3      	ldrh	r3, [r4, #12]
 80125d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80125d4:	81a3      	strh	r3, [r4, #12]
 80125d6:	2300      	movs	r3, #0
 80125d8:	6063      	str	r3, [r4, #4]
 80125da:	6923      	ldr	r3, [r4, #16]
 80125dc:	6023      	str	r3, [r4, #0]
 80125de:	89a3      	ldrh	r3, [r4, #12]
 80125e0:	f043 0308 	orr.w	r3, r3, #8
 80125e4:	81a3      	strh	r3, [r4, #12]
 80125e6:	6923      	ldr	r3, [r4, #16]
 80125e8:	b94b      	cbnz	r3, 80125fe <__swsetup_r+0x9a>
 80125ea:	89a3      	ldrh	r3, [r4, #12]
 80125ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80125f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80125f4:	d003      	beq.n	80125fe <__swsetup_r+0x9a>
 80125f6:	4621      	mov	r1, r4
 80125f8:	4630      	mov	r0, r6
 80125fa:	f000 f9c1 	bl	8012980 <__smakebuf_r>
 80125fe:	89a2      	ldrh	r2, [r4, #12]
 8012600:	f012 0301 	ands.w	r3, r2, #1
 8012604:	d00c      	beq.n	8012620 <__swsetup_r+0xbc>
 8012606:	2300      	movs	r3, #0
 8012608:	60a3      	str	r3, [r4, #8]
 801260a:	6963      	ldr	r3, [r4, #20]
 801260c:	425b      	negs	r3, r3
 801260e:	61a3      	str	r3, [r4, #24]
 8012610:	6923      	ldr	r3, [r4, #16]
 8012612:	b953      	cbnz	r3, 801262a <__swsetup_r+0xc6>
 8012614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012618:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801261c:	d1ba      	bne.n	8012594 <__swsetup_r+0x30>
 801261e:	bd70      	pop	{r4, r5, r6, pc}
 8012620:	0792      	lsls	r2, r2, #30
 8012622:	bf58      	it	pl
 8012624:	6963      	ldrpl	r3, [r4, #20]
 8012626:	60a3      	str	r3, [r4, #8]
 8012628:	e7f2      	b.n	8012610 <__swsetup_r+0xac>
 801262a:	2000      	movs	r0, #0
 801262c:	e7f7      	b.n	801261e <__swsetup_r+0xba>
 801262e:	bf00      	nop
 8012630:	20000258 	.word	0x20000258
 8012634:	0806a7cc 	.word	0x0806a7cc
 8012638:	0806a7ec 	.word	0x0806a7ec
 801263c:	0806a7ac 	.word	0x0806a7ac

08012640 <__sflush_r>:
 8012640:	898a      	ldrh	r2, [r1, #12]
 8012642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012646:	4605      	mov	r5, r0
 8012648:	0710      	lsls	r0, r2, #28
 801264a:	460c      	mov	r4, r1
 801264c:	d45a      	bmi.n	8012704 <__sflush_r+0xc4>
 801264e:	684b      	ldr	r3, [r1, #4]
 8012650:	2b00      	cmp	r3, #0
 8012652:	dc05      	bgt.n	8012660 <__sflush_r+0x20>
 8012654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012656:	2b00      	cmp	r3, #0
 8012658:	dc02      	bgt.n	8012660 <__sflush_r+0x20>
 801265a:	2000      	movs	r0, #0
 801265c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012662:	2e00      	cmp	r6, #0
 8012664:	d0f9      	beq.n	801265a <__sflush_r+0x1a>
 8012666:	2300      	movs	r3, #0
 8012668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801266c:	682f      	ldr	r7, [r5, #0]
 801266e:	602b      	str	r3, [r5, #0]
 8012670:	d033      	beq.n	80126da <__sflush_r+0x9a>
 8012672:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012674:	89a3      	ldrh	r3, [r4, #12]
 8012676:	075a      	lsls	r2, r3, #29
 8012678:	d505      	bpl.n	8012686 <__sflush_r+0x46>
 801267a:	6863      	ldr	r3, [r4, #4]
 801267c:	1ac0      	subs	r0, r0, r3
 801267e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012680:	b10b      	cbz	r3, 8012686 <__sflush_r+0x46>
 8012682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012684:	1ac0      	subs	r0, r0, r3
 8012686:	2300      	movs	r3, #0
 8012688:	4602      	mov	r2, r0
 801268a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801268c:	6a21      	ldr	r1, [r4, #32]
 801268e:	4628      	mov	r0, r5
 8012690:	47b0      	blx	r6
 8012692:	1c43      	adds	r3, r0, #1
 8012694:	89a3      	ldrh	r3, [r4, #12]
 8012696:	d106      	bne.n	80126a6 <__sflush_r+0x66>
 8012698:	6829      	ldr	r1, [r5, #0]
 801269a:	291d      	cmp	r1, #29
 801269c:	d84b      	bhi.n	8012736 <__sflush_r+0xf6>
 801269e:	4a2b      	ldr	r2, [pc, #172]	; (801274c <__sflush_r+0x10c>)
 80126a0:	40ca      	lsrs	r2, r1
 80126a2:	07d6      	lsls	r6, r2, #31
 80126a4:	d547      	bpl.n	8012736 <__sflush_r+0xf6>
 80126a6:	2200      	movs	r2, #0
 80126a8:	6062      	str	r2, [r4, #4]
 80126aa:	04d9      	lsls	r1, r3, #19
 80126ac:	6922      	ldr	r2, [r4, #16]
 80126ae:	6022      	str	r2, [r4, #0]
 80126b0:	d504      	bpl.n	80126bc <__sflush_r+0x7c>
 80126b2:	1c42      	adds	r2, r0, #1
 80126b4:	d101      	bne.n	80126ba <__sflush_r+0x7a>
 80126b6:	682b      	ldr	r3, [r5, #0]
 80126b8:	b903      	cbnz	r3, 80126bc <__sflush_r+0x7c>
 80126ba:	6560      	str	r0, [r4, #84]	; 0x54
 80126bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126be:	602f      	str	r7, [r5, #0]
 80126c0:	2900      	cmp	r1, #0
 80126c2:	d0ca      	beq.n	801265a <__sflush_r+0x1a>
 80126c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126c8:	4299      	cmp	r1, r3
 80126ca:	d002      	beq.n	80126d2 <__sflush_r+0x92>
 80126cc:	4628      	mov	r0, r5
 80126ce:	f000 f99f 	bl	8012a10 <_free_r>
 80126d2:	2000      	movs	r0, #0
 80126d4:	6360      	str	r0, [r4, #52]	; 0x34
 80126d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126da:	6a21      	ldr	r1, [r4, #32]
 80126dc:	2301      	movs	r3, #1
 80126de:	4628      	mov	r0, r5
 80126e0:	47b0      	blx	r6
 80126e2:	1c41      	adds	r1, r0, #1
 80126e4:	d1c6      	bne.n	8012674 <__sflush_r+0x34>
 80126e6:	682b      	ldr	r3, [r5, #0]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d0c3      	beq.n	8012674 <__sflush_r+0x34>
 80126ec:	2b1d      	cmp	r3, #29
 80126ee:	d001      	beq.n	80126f4 <__sflush_r+0xb4>
 80126f0:	2b16      	cmp	r3, #22
 80126f2:	d101      	bne.n	80126f8 <__sflush_r+0xb8>
 80126f4:	602f      	str	r7, [r5, #0]
 80126f6:	e7b0      	b.n	801265a <__sflush_r+0x1a>
 80126f8:	89a3      	ldrh	r3, [r4, #12]
 80126fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126fe:	81a3      	strh	r3, [r4, #12]
 8012700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012704:	690f      	ldr	r7, [r1, #16]
 8012706:	2f00      	cmp	r7, #0
 8012708:	d0a7      	beq.n	801265a <__sflush_r+0x1a>
 801270a:	0793      	lsls	r3, r2, #30
 801270c:	680e      	ldr	r6, [r1, #0]
 801270e:	bf08      	it	eq
 8012710:	694b      	ldreq	r3, [r1, #20]
 8012712:	600f      	str	r7, [r1, #0]
 8012714:	bf18      	it	ne
 8012716:	2300      	movne	r3, #0
 8012718:	eba6 0807 	sub.w	r8, r6, r7
 801271c:	608b      	str	r3, [r1, #8]
 801271e:	f1b8 0f00 	cmp.w	r8, #0
 8012722:	dd9a      	ble.n	801265a <__sflush_r+0x1a>
 8012724:	4643      	mov	r3, r8
 8012726:	463a      	mov	r2, r7
 8012728:	6a21      	ldr	r1, [r4, #32]
 801272a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801272c:	4628      	mov	r0, r5
 801272e:	47b0      	blx	r6
 8012730:	2800      	cmp	r0, #0
 8012732:	dc07      	bgt.n	8012744 <__sflush_r+0x104>
 8012734:	89a3      	ldrh	r3, [r4, #12]
 8012736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801273a:	81a3      	strh	r3, [r4, #12]
 801273c:	f04f 30ff 	mov.w	r0, #4294967295
 8012740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012744:	4407      	add	r7, r0
 8012746:	eba8 0800 	sub.w	r8, r8, r0
 801274a:	e7e8      	b.n	801271e <__sflush_r+0xde>
 801274c:	20400001 	.word	0x20400001

08012750 <_fflush_r>:
 8012750:	b538      	push	{r3, r4, r5, lr}
 8012752:	690b      	ldr	r3, [r1, #16]
 8012754:	4605      	mov	r5, r0
 8012756:	460c      	mov	r4, r1
 8012758:	b1db      	cbz	r3, 8012792 <_fflush_r+0x42>
 801275a:	b118      	cbz	r0, 8012764 <_fflush_r+0x14>
 801275c:	6983      	ldr	r3, [r0, #24]
 801275e:	b90b      	cbnz	r3, 8012764 <_fflush_r+0x14>
 8012760:	f000 f860 	bl	8012824 <__sinit>
 8012764:	4b0c      	ldr	r3, [pc, #48]	; (8012798 <_fflush_r+0x48>)
 8012766:	429c      	cmp	r4, r3
 8012768:	d109      	bne.n	801277e <_fflush_r+0x2e>
 801276a:	686c      	ldr	r4, [r5, #4]
 801276c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012770:	b17b      	cbz	r3, 8012792 <_fflush_r+0x42>
 8012772:	4621      	mov	r1, r4
 8012774:	4628      	mov	r0, r5
 8012776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801277a:	f7ff bf61 	b.w	8012640 <__sflush_r>
 801277e:	4b07      	ldr	r3, [pc, #28]	; (801279c <_fflush_r+0x4c>)
 8012780:	429c      	cmp	r4, r3
 8012782:	d101      	bne.n	8012788 <_fflush_r+0x38>
 8012784:	68ac      	ldr	r4, [r5, #8]
 8012786:	e7f1      	b.n	801276c <_fflush_r+0x1c>
 8012788:	4b05      	ldr	r3, [pc, #20]	; (80127a0 <_fflush_r+0x50>)
 801278a:	429c      	cmp	r4, r3
 801278c:	bf08      	it	eq
 801278e:	68ec      	ldreq	r4, [r5, #12]
 8012790:	e7ec      	b.n	801276c <_fflush_r+0x1c>
 8012792:	2000      	movs	r0, #0
 8012794:	bd38      	pop	{r3, r4, r5, pc}
 8012796:	bf00      	nop
 8012798:	0806a7cc 	.word	0x0806a7cc
 801279c:	0806a7ec 	.word	0x0806a7ec
 80127a0:	0806a7ac 	.word	0x0806a7ac

080127a4 <_cleanup_r>:
 80127a4:	4901      	ldr	r1, [pc, #4]	; (80127ac <_cleanup_r+0x8>)
 80127a6:	f000 b8a9 	b.w	80128fc <_fwalk_reent>
 80127aa:	bf00      	nop
 80127ac:	08012751 	.word	0x08012751

080127b0 <std.isra.0>:
 80127b0:	2300      	movs	r3, #0
 80127b2:	b510      	push	{r4, lr}
 80127b4:	4604      	mov	r4, r0
 80127b6:	6003      	str	r3, [r0, #0]
 80127b8:	6043      	str	r3, [r0, #4]
 80127ba:	6083      	str	r3, [r0, #8]
 80127bc:	8181      	strh	r1, [r0, #12]
 80127be:	6643      	str	r3, [r0, #100]	; 0x64
 80127c0:	81c2      	strh	r2, [r0, #14]
 80127c2:	6103      	str	r3, [r0, #16]
 80127c4:	6143      	str	r3, [r0, #20]
 80127c6:	6183      	str	r3, [r0, #24]
 80127c8:	4619      	mov	r1, r3
 80127ca:	2208      	movs	r2, #8
 80127cc:	305c      	adds	r0, #92	; 0x5c
 80127ce:	f7ff fcc4 	bl	801215a <memset>
 80127d2:	4b05      	ldr	r3, [pc, #20]	; (80127e8 <std.isra.0+0x38>)
 80127d4:	6263      	str	r3, [r4, #36]	; 0x24
 80127d6:	4b05      	ldr	r3, [pc, #20]	; (80127ec <std.isra.0+0x3c>)
 80127d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80127da:	4b05      	ldr	r3, [pc, #20]	; (80127f0 <std.isra.0+0x40>)
 80127dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80127de:	4b05      	ldr	r3, [pc, #20]	; (80127f4 <std.isra.0+0x44>)
 80127e0:	6224      	str	r4, [r4, #32]
 80127e2:	6323      	str	r3, [r4, #48]	; 0x30
 80127e4:	bd10      	pop	{r4, pc}
 80127e6:	bf00      	nop
 80127e8:	08013135 	.word	0x08013135
 80127ec:	08013157 	.word	0x08013157
 80127f0:	0801318f 	.word	0x0801318f
 80127f4:	080131b3 	.word	0x080131b3

080127f8 <__sfmoreglue>:
 80127f8:	b570      	push	{r4, r5, r6, lr}
 80127fa:	1e4a      	subs	r2, r1, #1
 80127fc:	2568      	movs	r5, #104	; 0x68
 80127fe:	4355      	muls	r5, r2
 8012800:	460e      	mov	r6, r1
 8012802:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012806:	f000 f951 	bl	8012aac <_malloc_r>
 801280a:	4604      	mov	r4, r0
 801280c:	b140      	cbz	r0, 8012820 <__sfmoreglue+0x28>
 801280e:	2100      	movs	r1, #0
 8012810:	e880 0042 	stmia.w	r0, {r1, r6}
 8012814:	300c      	adds	r0, #12
 8012816:	60a0      	str	r0, [r4, #8]
 8012818:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801281c:	f7ff fc9d 	bl	801215a <memset>
 8012820:	4620      	mov	r0, r4
 8012822:	bd70      	pop	{r4, r5, r6, pc}

08012824 <__sinit>:
 8012824:	6983      	ldr	r3, [r0, #24]
 8012826:	b510      	push	{r4, lr}
 8012828:	4604      	mov	r4, r0
 801282a:	bb33      	cbnz	r3, 801287a <__sinit+0x56>
 801282c:	6483      	str	r3, [r0, #72]	; 0x48
 801282e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012830:	6503      	str	r3, [r0, #80]	; 0x50
 8012832:	4b12      	ldr	r3, [pc, #72]	; (801287c <__sinit+0x58>)
 8012834:	4a12      	ldr	r2, [pc, #72]	; (8012880 <__sinit+0x5c>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	6282      	str	r2, [r0, #40]	; 0x28
 801283a:	4298      	cmp	r0, r3
 801283c:	bf04      	itt	eq
 801283e:	2301      	moveq	r3, #1
 8012840:	6183      	streq	r3, [r0, #24]
 8012842:	f000 f81f 	bl	8012884 <__sfp>
 8012846:	6060      	str	r0, [r4, #4]
 8012848:	4620      	mov	r0, r4
 801284a:	f000 f81b 	bl	8012884 <__sfp>
 801284e:	60a0      	str	r0, [r4, #8]
 8012850:	4620      	mov	r0, r4
 8012852:	f000 f817 	bl	8012884 <__sfp>
 8012856:	2200      	movs	r2, #0
 8012858:	60e0      	str	r0, [r4, #12]
 801285a:	2104      	movs	r1, #4
 801285c:	6860      	ldr	r0, [r4, #4]
 801285e:	f7ff ffa7 	bl	80127b0 <std.isra.0>
 8012862:	2201      	movs	r2, #1
 8012864:	2109      	movs	r1, #9
 8012866:	68a0      	ldr	r0, [r4, #8]
 8012868:	f7ff ffa2 	bl	80127b0 <std.isra.0>
 801286c:	2202      	movs	r2, #2
 801286e:	2112      	movs	r1, #18
 8012870:	68e0      	ldr	r0, [r4, #12]
 8012872:	f7ff ff9d 	bl	80127b0 <std.isra.0>
 8012876:	2301      	movs	r3, #1
 8012878:	61a3      	str	r3, [r4, #24]
 801287a:	bd10      	pop	{r4, pc}
 801287c:	0806a80c 	.word	0x0806a80c
 8012880:	080127a5 	.word	0x080127a5

08012884 <__sfp>:
 8012884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012886:	4b1c      	ldr	r3, [pc, #112]	; (80128f8 <__sfp+0x74>)
 8012888:	681e      	ldr	r6, [r3, #0]
 801288a:	69b3      	ldr	r3, [r6, #24]
 801288c:	4607      	mov	r7, r0
 801288e:	b913      	cbnz	r3, 8012896 <__sfp+0x12>
 8012890:	4630      	mov	r0, r6
 8012892:	f7ff ffc7 	bl	8012824 <__sinit>
 8012896:	3648      	adds	r6, #72	; 0x48
 8012898:	68b4      	ldr	r4, [r6, #8]
 801289a:	6873      	ldr	r3, [r6, #4]
 801289c:	3b01      	subs	r3, #1
 801289e:	d503      	bpl.n	80128a8 <__sfp+0x24>
 80128a0:	6833      	ldr	r3, [r6, #0]
 80128a2:	b133      	cbz	r3, 80128b2 <__sfp+0x2e>
 80128a4:	6836      	ldr	r6, [r6, #0]
 80128a6:	e7f7      	b.n	8012898 <__sfp+0x14>
 80128a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80128ac:	b16d      	cbz	r5, 80128ca <__sfp+0x46>
 80128ae:	3468      	adds	r4, #104	; 0x68
 80128b0:	e7f4      	b.n	801289c <__sfp+0x18>
 80128b2:	2104      	movs	r1, #4
 80128b4:	4638      	mov	r0, r7
 80128b6:	f7ff ff9f 	bl	80127f8 <__sfmoreglue>
 80128ba:	6030      	str	r0, [r6, #0]
 80128bc:	2800      	cmp	r0, #0
 80128be:	d1f1      	bne.n	80128a4 <__sfp+0x20>
 80128c0:	230c      	movs	r3, #12
 80128c2:	603b      	str	r3, [r7, #0]
 80128c4:	4604      	mov	r4, r0
 80128c6:	4620      	mov	r0, r4
 80128c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80128ce:	81e3      	strh	r3, [r4, #14]
 80128d0:	2301      	movs	r3, #1
 80128d2:	81a3      	strh	r3, [r4, #12]
 80128d4:	6665      	str	r5, [r4, #100]	; 0x64
 80128d6:	6025      	str	r5, [r4, #0]
 80128d8:	60a5      	str	r5, [r4, #8]
 80128da:	6065      	str	r5, [r4, #4]
 80128dc:	6125      	str	r5, [r4, #16]
 80128de:	6165      	str	r5, [r4, #20]
 80128e0:	61a5      	str	r5, [r4, #24]
 80128e2:	2208      	movs	r2, #8
 80128e4:	4629      	mov	r1, r5
 80128e6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80128ea:	f7ff fc36 	bl	801215a <memset>
 80128ee:	6365      	str	r5, [r4, #52]	; 0x34
 80128f0:	63a5      	str	r5, [r4, #56]	; 0x38
 80128f2:	64a5      	str	r5, [r4, #72]	; 0x48
 80128f4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80128f6:	e7e6      	b.n	80128c6 <__sfp+0x42>
 80128f8:	0806a80c 	.word	0x0806a80c

080128fc <_fwalk_reent>:
 80128fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012900:	4680      	mov	r8, r0
 8012902:	4689      	mov	r9, r1
 8012904:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012908:	2600      	movs	r6, #0
 801290a:	b914      	cbnz	r4, 8012912 <_fwalk_reent+0x16>
 801290c:	4630      	mov	r0, r6
 801290e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012912:	68a5      	ldr	r5, [r4, #8]
 8012914:	6867      	ldr	r7, [r4, #4]
 8012916:	3f01      	subs	r7, #1
 8012918:	d501      	bpl.n	801291e <_fwalk_reent+0x22>
 801291a:	6824      	ldr	r4, [r4, #0]
 801291c:	e7f5      	b.n	801290a <_fwalk_reent+0xe>
 801291e:	89ab      	ldrh	r3, [r5, #12]
 8012920:	2b01      	cmp	r3, #1
 8012922:	d907      	bls.n	8012934 <_fwalk_reent+0x38>
 8012924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012928:	3301      	adds	r3, #1
 801292a:	d003      	beq.n	8012934 <_fwalk_reent+0x38>
 801292c:	4629      	mov	r1, r5
 801292e:	4640      	mov	r0, r8
 8012930:	47c8      	blx	r9
 8012932:	4306      	orrs	r6, r0
 8012934:	3568      	adds	r5, #104	; 0x68
 8012936:	e7ee      	b.n	8012916 <_fwalk_reent+0x1a>

08012938 <__swhatbuf_r>:
 8012938:	b570      	push	{r4, r5, r6, lr}
 801293a:	460e      	mov	r6, r1
 801293c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012940:	2900      	cmp	r1, #0
 8012942:	b090      	sub	sp, #64	; 0x40
 8012944:	4614      	mov	r4, r2
 8012946:	461d      	mov	r5, r3
 8012948:	da07      	bge.n	801295a <__swhatbuf_r+0x22>
 801294a:	2300      	movs	r3, #0
 801294c:	602b      	str	r3, [r5, #0]
 801294e:	89b3      	ldrh	r3, [r6, #12]
 8012950:	061a      	lsls	r2, r3, #24
 8012952:	d410      	bmi.n	8012976 <__swhatbuf_r+0x3e>
 8012954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012958:	e00e      	b.n	8012978 <__swhatbuf_r+0x40>
 801295a:	aa01      	add	r2, sp, #4
 801295c:	f000 fc50 	bl	8013200 <_fstat_r>
 8012960:	2800      	cmp	r0, #0
 8012962:	dbf2      	blt.n	801294a <__swhatbuf_r+0x12>
 8012964:	9a02      	ldr	r2, [sp, #8]
 8012966:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801296a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801296e:	425a      	negs	r2, r3
 8012970:	415a      	adcs	r2, r3
 8012972:	602a      	str	r2, [r5, #0]
 8012974:	e7ee      	b.n	8012954 <__swhatbuf_r+0x1c>
 8012976:	2340      	movs	r3, #64	; 0x40
 8012978:	2000      	movs	r0, #0
 801297a:	6023      	str	r3, [r4, #0]
 801297c:	b010      	add	sp, #64	; 0x40
 801297e:	bd70      	pop	{r4, r5, r6, pc}

08012980 <__smakebuf_r>:
 8012980:	898b      	ldrh	r3, [r1, #12]
 8012982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012984:	079d      	lsls	r5, r3, #30
 8012986:	4606      	mov	r6, r0
 8012988:	460c      	mov	r4, r1
 801298a:	d507      	bpl.n	801299c <__smakebuf_r+0x1c>
 801298c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012990:	6023      	str	r3, [r4, #0]
 8012992:	6123      	str	r3, [r4, #16]
 8012994:	2301      	movs	r3, #1
 8012996:	6163      	str	r3, [r4, #20]
 8012998:	b002      	add	sp, #8
 801299a:	bd70      	pop	{r4, r5, r6, pc}
 801299c:	ab01      	add	r3, sp, #4
 801299e:	466a      	mov	r2, sp
 80129a0:	f7ff ffca 	bl	8012938 <__swhatbuf_r>
 80129a4:	9900      	ldr	r1, [sp, #0]
 80129a6:	4605      	mov	r5, r0
 80129a8:	4630      	mov	r0, r6
 80129aa:	f000 f87f 	bl	8012aac <_malloc_r>
 80129ae:	b948      	cbnz	r0, 80129c4 <__smakebuf_r+0x44>
 80129b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129b4:	059a      	lsls	r2, r3, #22
 80129b6:	d4ef      	bmi.n	8012998 <__smakebuf_r+0x18>
 80129b8:	f023 0303 	bic.w	r3, r3, #3
 80129bc:	f043 0302 	orr.w	r3, r3, #2
 80129c0:	81a3      	strh	r3, [r4, #12]
 80129c2:	e7e3      	b.n	801298c <__smakebuf_r+0xc>
 80129c4:	4b0d      	ldr	r3, [pc, #52]	; (80129fc <__smakebuf_r+0x7c>)
 80129c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80129c8:	89a3      	ldrh	r3, [r4, #12]
 80129ca:	6020      	str	r0, [r4, #0]
 80129cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129d0:	81a3      	strh	r3, [r4, #12]
 80129d2:	9b00      	ldr	r3, [sp, #0]
 80129d4:	6163      	str	r3, [r4, #20]
 80129d6:	9b01      	ldr	r3, [sp, #4]
 80129d8:	6120      	str	r0, [r4, #16]
 80129da:	b15b      	cbz	r3, 80129f4 <__smakebuf_r+0x74>
 80129dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129e0:	4630      	mov	r0, r6
 80129e2:	f000 fc1f 	bl	8013224 <_isatty_r>
 80129e6:	b128      	cbz	r0, 80129f4 <__smakebuf_r+0x74>
 80129e8:	89a3      	ldrh	r3, [r4, #12]
 80129ea:	f023 0303 	bic.w	r3, r3, #3
 80129ee:	f043 0301 	orr.w	r3, r3, #1
 80129f2:	81a3      	strh	r3, [r4, #12]
 80129f4:	89a3      	ldrh	r3, [r4, #12]
 80129f6:	431d      	orrs	r5, r3
 80129f8:	81a5      	strh	r5, [r4, #12]
 80129fa:	e7cd      	b.n	8012998 <__smakebuf_r+0x18>
 80129fc:	080127a5 	.word	0x080127a5

08012a00 <malloc>:
 8012a00:	4b02      	ldr	r3, [pc, #8]	; (8012a0c <malloc+0xc>)
 8012a02:	4601      	mov	r1, r0
 8012a04:	6818      	ldr	r0, [r3, #0]
 8012a06:	f000 b851 	b.w	8012aac <_malloc_r>
 8012a0a:	bf00      	nop
 8012a0c:	20000258 	.word	0x20000258

08012a10 <_free_r>:
 8012a10:	b538      	push	{r3, r4, r5, lr}
 8012a12:	4605      	mov	r5, r0
 8012a14:	2900      	cmp	r1, #0
 8012a16:	d045      	beq.n	8012aa4 <_free_r+0x94>
 8012a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a1c:	1f0c      	subs	r4, r1, #4
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	bfb8      	it	lt
 8012a22:	18e4      	addlt	r4, r4, r3
 8012a24:	f000 fc20 	bl	8013268 <__malloc_lock>
 8012a28:	4a1f      	ldr	r2, [pc, #124]	; (8012aa8 <_free_r+0x98>)
 8012a2a:	6813      	ldr	r3, [r2, #0]
 8012a2c:	4610      	mov	r0, r2
 8012a2e:	b933      	cbnz	r3, 8012a3e <_free_r+0x2e>
 8012a30:	6063      	str	r3, [r4, #4]
 8012a32:	6014      	str	r4, [r2, #0]
 8012a34:	4628      	mov	r0, r5
 8012a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a3a:	f000 bc16 	b.w	801326a <__malloc_unlock>
 8012a3e:	42a3      	cmp	r3, r4
 8012a40:	d90c      	bls.n	8012a5c <_free_r+0x4c>
 8012a42:	6821      	ldr	r1, [r4, #0]
 8012a44:	1862      	adds	r2, r4, r1
 8012a46:	4293      	cmp	r3, r2
 8012a48:	bf04      	itt	eq
 8012a4a:	681a      	ldreq	r2, [r3, #0]
 8012a4c:	685b      	ldreq	r3, [r3, #4]
 8012a4e:	6063      	str	r3, [r4, #4]
 8012a50:	bf04      	itt	eq
 8012a52:	1852      	addeq	r2, r2, r1
 8012a54:	6022      	streq	r2, [r4, #0]
 8012a56:	6004      	str	r4, [r0, #0]
 8012a58:	e7ec      	b.n	8012a34 <_free_r+0x24>
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	685a      	ldr	r2, [r3, #4]
 8012a5e:	b10a      	cbz	r2, 8012a64 <_free_r+0x54>
 8012a60:	42a2      	cmp	r2, r4
 8012a62:	d9fa      	bls.n	8012a5a <_free_r+0x4a>
 8012a64:	6819      	ldr	r1, [r3, #0]
 8012a66:	1858      	adds	r0, r3, r1
 8012a68:	42a0      	cmp	r0, r4
 8012a6a:	d10b      	bne.n	8012a84 <_free_r+0x74>
 8012a6c:	6820      	ldr	r0, [r4, #0]
 8012a6e:	4401      	add	r1, r0
 8012a70:	1858      	adds	r0, r3, r1
 8012a72:	4282      	cmp	r2, r0
 8012a74:	6019      	str	r1, [r3, #0]
 8012a76:	d1dd      	bne.n	8012a34 <_free_r+0x24>
 8012a78:	6810      	ldr	r0, [r2, #0]
 8012a7a:	6852      	ldr	r2, [r2, #4]
 8012a7c:	605a      	str	r2, [r3, #4]
 8012a7e:	4401      	add	r1, r0
 8012a80:	6019      	str	r1, [r3, #0]
 8012a82:	e7d7      	b.n	8012a34 <_free_r+0x24>
 8012a84:	d902      	bls.n	8012a8c <_free_r+0x7c>
 8012a86:	230c      	movs	r3, #12
 8012a88:	602b      	str	r3, [r5, #0]
 8012a8a:	e7d3      	b.n	8012a34 <_free_r+0x24>
 8012a8c:	6820      	ldr	r0, [r4, #0]
 8012a8e:	1821      	adds	r1, r4, r0
 8012a90:	428a      	cmp	r2, r1
 8012a92:	bf04      	itt	eq
 8012a94:	6811      	ldreq	r1, [r2, #0]
 8012a96:	6852      	ldreq	r2, [r2, #4]
 8012a98:	6062      	str	r2, [r4, #4]
 8012a9a:	bf04      	itt	eq
 8012a9c:	1809      	addeq	r1, r1, r0
 8012a9e:	6021      	streq	r1, [r4, #0]
 8012aa0:	605c      	str	r4, [r3, #4]
 8012aa2:	e7c7      	b.n	8012a34 <_free_r+0x24>
 8012aa4:	bd38      	pop	{r3, r4, r5, pc}
 8012aa6:	bf00      	nop
 8012aa8:	20006e8c 	.word	0x20006e8c

08012aac <_malloc_r>:
 8012aac:	b570      	push	{r4, r5, r6, lr}
 8012aae:	1ccd      	adds	r5, r1, #3
 8012ab0:	f025 0503 	bic.w	r5, r5, #3
 8012ab4:	3508      	adds	r5, #8
 8012ab6:	2d0c      	cmp	r5, #12
 8012ab8:	bf38      	it	cc
 8012aba:	250c      	movcc	r5, #12
 8012abc:	2d00      	cmp	r5, #0
 8012abe:	4606      	mov	r6, r0
 8012ac0:	db01      	blt.n	8012ac6 <_malloc_r+0x1a>
 8012ac2:	42a9      	cmp	r1, r5
 8012ac4:	d903      	bls.n	8012ace <_malloc_r+0x22>
 8012ac6:	230c      	movs	r3, #12
 8012ac8:	6033      	str	r3, [r6, #0]
 8012aca:	2000      	movs	r0, #0
 8012acc:	bd70      	pop	{r4, r5, r6, pc}
 8012ace:	f000 fbcb 	bl	8013268 <__malloc_lock>
 8012ad2:	4a23      	ldr	r2, [pc, #140]	; (8012b60 <_malloc_r+0xb4>)
 8012ad4:	6814      	ldr	r4, [r2, #0]
 8012ad6:	4621      	mov	r1, r4
 8012ad8:	b991      	cbnz	r1, 8012b00 <_malloc_r+0x54>
 8012ada:	4c22      	ldr	r4, [pc, #136]	; (8012b64 <_malloc_r+0xb8>)
 8012adc:	6823      	ldr	r3, [r4, #0]
 8012ade:	b91b      	cbnz	r3, 8012ae8 <_malloc_r+0x3c>
 8012ae0:	4630      	mov	r0, r6
 8012ae2:	f000 fb17 	bl	8013114 <_sbrk_r>
 8012ae6:	6020      	str	r0, [r4, #0]
 8012ae8:	4629      	mov	r1, r5
 8012aea:	4630      	mov	r0, r6
 8012aec:	f000 fb12 	bl	8013114 <_sbrk_r>
 8012af0:	1c43      	adds	r3, r0, #1
 8012af2:	d126      	bne.n	8012b42 <_malloc_r+0x96>
 8012af4:	230c      	movs	r3, #12
 8012af6:	6033      	str	r3, [r6, #0]
 8012af8:	4630      	mov	r0, r6
 8012afa:	f000 fbb6 	bl	801326a <__malloc_unlock>
 8012afe:	e7e4      	b.n	8012aca <_malloc_r+0x1e>
 8012b00:	680b      	ldr	r3, [r1, #0]
 8012b02:	1b5b      	subs	r3, r3, r5
 8012b04:	d41a      	bmi.n	8012b3c <_malloc_r+0x90>
 8012b06:	2b0b      	cmp	r3, #11
 8012b08:	d90f      	bls.n	8012b2a <_malloc_r+0x7e>
 8012b0a:	600b      	str	r3, [r1, #0]
 8012b0c:	50cd      	str	r5, [r1, r3]
 8012b0e:	18cc      	adds	r4, r1, r3
 8012b10:	4630      	mov	r0, r6
 8012b12:	f000 fbaa 	bl	801326a <__malloc_unlock>
 8012b16:	f104 000b 	add.w	r0, r4, #11
 8012b1a:	1d23      	adds	r3, r4, #4
 8012b1c:	f020 0007 	bic.w	r0, r0, #7
 8012b20:	1ac3      	subs	r3, r0, r3
 8012b22:	d01b      	beq.n	8012b5c <_malloc_r+0xb0>
 8012b24:	425a      	negs	r2, r3
 8012b26:	50e2      	str	r2, [r4, r3]
 8012b28:	bd70      	pop	{r4, r5, r6, pc}
 8012b2a:	428c      	cmp	r4, r1
 8012b2c:	bf0d      	iteet	eq
 8012b2e:	6863      	ldreq	r3, [r4, #4]
 8012b30:	684b      	ldrne	r3, [r1, #4]
 8012b32:	6063      	strne	r3, [r4, #4]
 8012b34:	6013      	streq	r3, [r2, #0]
 8012b36:	bf18      	it	ne
 8012b38:	460c      	movne	r4, r1
 8012b3a:	e7e9      	b.n	8012b10 <_malloc_r+0x64>
 8012b3c:	460c      	mov	r4, r1
 8012b3e:	6849      	ldr	r1, [r1, #4]
 8012b40:	e7ca      	b.n	8012ad8 <_malloc_r+0x2c>
 8012b42:	1cc4      	adds	r4, r0, #3
 8012b44:	f024 0403 	bic.w	r4, r4, #3
 8012b48:	42a0      	cmp	r0, r4
 8012b4a:	d005      	beq.n	8012b58 <_malloc_r+0xac>
 8012b4c:	1a21      	subs	r1, r4, r0
 8012b4e:	4630      	mov	r0, r6
 8012b50:	f000 fae0 	bl	8013114 <_sbrk_r>
 8012b54:	3001      	adds	r0, #1
 8012b56:	d0cd      	beq.n	8012af4 <_malloc_r+0x48>
 8012b58:	6025      	str	r5, [r4, #0]
 8012b5a:	e7d9      	b.n	8012b10 <_malloc_r+0x64>
 8012b5c:	bd70      	pop	{r4, r5, r6, pc}
 8012b5e:	bf00      	nop
 8012b60:	20006e8c 	.word	0x20006e8c
 8012b64:	20006e90 	.word	0x20006e90

08012b68 <__sfputc_r>:
 8012b68:	6893      	ldr	r3, [r2, #8]
 8012b6a:	3b01      	subs	r3, #1
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	b410      	push	{r4}
 8012b70:	6093      	str	r3, [r2, #8]
 8012b72:	da09      	bge.n	8012b88 <__sfputc_r+0x20>
 8012b74:	6994      	ldr	r4, [r2, #24]
 8012b76:	42a3      	cmp	r3, r4
 8012b78:	db02      	blt.n	8012b80 <__sfputc_r+0x18>
 8012b7a:	b2cb      	uxtb	r3, r1
 8012b7c:	2b0a      	cmp	r3, #10
 8012b7e:	d103      	bne.n	8012b88 <__sfputc_r+0x20>
 8012b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b84:	f7ff bc8e 	b.w	80124a4 <__swbuf_r>
 8012b88:	6813      	ldr	r3, [r2, #0]
 8012b8a:	1c58      	adds	r0, r3, #1
 8012b8c:	6010      	str	r0, [r2, #0]
 8012b8e:	7019      	strb	r1, [r3, #0]
 8012b90:	b2c8      	uxtb	r0, r1
 8012b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b96:	4770      	bx	lr

08012b98 <__sfputs_r>:
 8012b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b9a:	4606      	mov	r6, r0
 8012b9c:	460f      	mov	r7, r1
 8012b9e:	4614      	mov	r4, r2
 8012ba0:	18d5      	adds	r5, r2, r3
 8012ba2:	42ac      	cmp	r4, r5
 8012ba4:	d101      	bne.n	8012baa <__sfputs_r+0x12>
 8012ba6:	2000      	movs	r0, #0
 8012ba8:	e007      	b.n	8012bba <__sfputs_r+0x22>
 8012baa:	463a      	mov	r2, r7
 8012bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bb0:	4630      	mov	r0, r6
 8012bb2:	f7ff ffd9 	bl	8012b68 <__sfputc_r>
 8012bb6:	1c43      	adds	r3, r0, #1
 8012bb8:	d1f3      	bne.n	8012ba2 <__sfputs_r+0xa>
 8012bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012bbc <_vfiprintf_r>:
 8012bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bc0:	b09d      	sub	sp, #116	; 0x74
 8012bc2:	460c      	mov	r4, r1
 8012bc4:	4617      	mov	r7, r2
 8012bc6:	9303      	str	r3, [sp, #12]
 8012bc8:	4606      	mov	r6, r0
 8012bca:	b118      	cbz	r0, 8012bd4 <_vfiprintf_r+0x18>
 8012bcc:	6983      	ldr	r3, [r0, #24]
 8012bce:	b90b      	cbnz	r3, 8012bd4 <_vfiprintf_r+0x18>
 8012bd0:	f7ff fe28 	bl	8012824 <__sinit>
 8012bd4:	4b7c      	ldr	r3, [pc, #496]	; (8012dc8 <_vfiprintf_r+0x20c>)
 8012bd6:	429c      	cmp	r4, r3
 8012bd8:	d157      	bne.n	8012c8a <_vfiprintf_r+0xce>
 8012bda:	6874      	ldr	r4, [r6, #4]
 8012bdc:	89a3      	ldrh	r3, [r4, #12]
 8012bde:	0718      	lsls	r0, r3, #28
 8012be0:	d55d      	bpl.n	8012c9e <_vfiprintf_r+0xe2>
 8012be2:	6923      	ldr	r3, [r4, #16]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d05a      	beq.n	8012c9e <_vfiprintf_r+0xe2>
 8012be8:	2300      	movs	r3, #0
 8012bea:	9309      	str	r3, [sp, #36]	; 0x24
 8012bec:	2320      	movs	r3, #32
 8012bee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012bf2:	2330      	movs	r3, #48	; 0x30
 8012bf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012bf8:	f04f 0b01 	mov.w	fp, #1
 8012bfc:	46b8      	mov	r8, r7
 8012bfe:	4645      	mov	r5, r8
 8012c00:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d155      	bne.n	8012cb4 <_vfiprintf_r+0xf8>
 8012c08:	ebb8 0a07 	subs.w	sl, r8, r7
 8012c0c:	d00b      	beq.n	8012c26 <_vfiprintf_r+0x6a>
 8012c0e:	4653      	mov	r3, sl
 8012c10:	463a      	mov	r2, r7
 8012c12:	4621      	mov	r1, r4
 8012c14:	4630      	mov	r0, r6
 8012c16:	f7ff ffbf 	bl	8012b98 <__sfputs_r>
 8012c1a:	3001      	adds	r0, #1
 8012c1c:	f000 80c4 	beq.w	8012da8 <_vfiprintf_r+0x1ec>
 8012c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c22:	4453      	add	r3, sl
 8012c24:	9309      	str	r3, [sp, #36]	; 0x24
 8012c26:	f898 3000 	ldrb.w	r3, [r8]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	f000 80bc 	beq.w	8012da8 <_vfiprintf_r+0x1ec>
 8012c30:	2300      	movs	r3, #0
 8012c32:	f04f 32ff 	mov.w	r2, #4294967295
 8012c36:	9304      	str	r3, [sp, #16]
 8012c38:	9307      	str	r3, [sp, #28]
 8012c3a:	9205      	str	r2, [sp, #20]
 8012c3c:	9306      	str	r3, [sp, #24]
 8012c3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c42:	931a      	str	r3, [sp, #104]	; 0x68
 8012c44:	2205      	movs	r2, #5
 8012c46:	7829      	ldrb	r1, [r5, #0]
 8012c48:	4860      	ldr	r0, [pc, #384]	; (8012dcc <_vfiprintf_r+0x210>)
 8012c4a:	f7ed fae9 	bl	8000220 <memchr>
 8012c4e:	f105 0801 	add.w	r8, r5, #1
 8012c52:	9b04      	ldr	r3, [sp, #16]
 8012c54:	2800      	cmp	r0, #0
 8012c56:	d131      	bne.n	8012cbc <_vfiprintf_r+0x100>
 8012c58:	06d9      	lsls	r1, r3, #27
 8012c5a:	bf44      	itt	mi
 8012c5c:	2220      	movmi	r2, #32
 8012c5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012c62:	071a      	lsls	r2, r3, #28
 8012c64:	bf44      	itt	mi
 8012c66:	222b      	movmi	r2, #43	; 0x2b
 8012c68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012c6c:	782a      	ldrb	r2, [r5, #0]
 8012c6e:	2a2a      	cmp	r2, #42	; 0x2a
 8012c70:	d02c      	beq.n	8012ccc <_vfiprintf_r+0x110>
 8012c72:	9a07      	ldr	r2, [sp, #28]
 8012c74:	2100      	movs	r1, #0
 8012c76:	200a      	movs	r0, #10
 8012c78:	46a8      	mov	r8, r5
 8012c7a:	3501      	adds	r5, #1
 8012c7c:	f898 3000 	ldrb.w	r3, [r8]
 8012c80:	3b30      	subs	r3, #48	; 0x30
 8012c82:	2b09      	cmp	r3, #9
 8012c84:	d96d      	bls.n	8012d62 <_vfiprintf_r+0x1a6>
 8012c86:	b371      	cbz	r1, 8012ce6 <_vfiprintf_r+0x12a>
 8012c88:	e026      	b.n	8012cd8 <_vfiprintf_r+0x11c>
 8012c8a:	4b51      	ldr	r3, [pc, #324]	; (8012dd0 <_vfiprintf_r+0x214>)
 8012c8c:	429c      	cmp	r4, r3
 8012c8e:	d101      	bne.n	8012c94 <_vfiprintf_r+0xd8>
 8012c90:	68b4      	ldr	r4, [r6, #8]
 8012c92:	e7a3      	b.n	8012bdc <_vfiprintf_r+0x20>
 8012c94:	4b4f      	ldr	r3, [pc, #316]	; (8012dd4 <_vfiprintf_r+0x218>)
 8012c96:	429c      	cmp	r4, r3
 8012c98:	bf08      	it	eq
 8012c9a:	68f4      	ldreq	r4, [r6, #12]
 8012c9c:	e79e      	b.n	8012bdc <_vfiprintf_r+0x20>
 8012c9e:	4621      	mov	r1, r4
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	f7ff fc5f 	bl	8012564 <__swsetup_r>
 8012ca6:	2800      	cmp	r0, #0
 8012ca8:	d09e      	beq.n	8012be8 <_vfiprintf_r+0x2c>
 8012caa:	f04f 30ff 	mov.w	r0, #4294967295
 8012cae:	b01d      	add	sp, #116	; 0x74
 8012cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb4:	2b25      	cmp	r3, #37	; 0x25
 8012cb6:	d0a7      	beq.n	8012c08 <_vfiprintf_r+0x4c>
 8012cb8:	46a8      	mov	r8, r5
 8012cba:	e7a0      	b.n	8012bfe <_vfiprintf_r+0x42>
 8012cbc:	4a43      	ldr	r2, [pc, #268]	; (8012dcc <_vfiprintf_r+0x210>)
 8012cbe:	1a80      	subs	r0, r0, r2
 8012cc0:	fa0b f000 	lsl.w	r0, fp, r0
 8012cc4:	4318      	orrs	r0, r3
 8012cc6:	9004      	str	r0, [sp, #16]
 8012cc8:	4645      	mov	r5, r8
 8012cca:	e7bb      	b.n	8012c44 <_vfiprintf_r+0x88>
 8012ccc:	9a03      	ldr	r2, [sp, #12]
 8012cce:	1d11      	adds	r1, r2, #4
 8012cd0:	6812      	ldr	r2, [r2, #0]
 8012cd2:	9103      	str	r1, [sp, #12]
 8012cd4:	2a00      	cmp	r2, #0
 8012cd6:	db01      	blt.n	8012cdc <_vfiprintf_r+0x120>
 8012cd8:	9207      	str	r2, [sp, #28]
 8012cda:	e004      	b.n	8012ce6 <_vfiprintf_r+0x12a>
 8012cdc:	4252      	negs	r2, r2
 8012cde:	f043 0302 	orr.w	r3, r3, #2
 8012ce2:	9207      	str	r2, [sp, #28]
 8012ce4:	9304      	str	r3, [sp, #16]
 8012ce6:	f898 3000 	ldrb.w	r3, [r8]
 8012cea:	2b2e      	cmp	r3, #46	; 0x2e
 8012cec:	d110      	bne.n	8012d10 <_vfiprintf_r+0x154>
 8012cee:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8012cf4:	f108 0101 	add.w	r1, r8, #1
 8012cf8:	d137      	bne.n	8012d6a <_vfiprintf_r+0x1ae>
 8012cfa:	9b03      	ldr	r3, [sp, #12]
 8012cfc:	1d1a      	adds	r2, r3, #4
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	9203      	str	r2, [sp, #12]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	bfb8      	it	lt
 8012d06:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d0a:	f108 0802 	add.w	r8, r8, #2
 8012d0e:	9305      	str	r3, [sp, #20]
 8012d10:	4d31      	ldr	r5, [pc, #196]	; (8012dd8 <_vfiprintf_r+0x21c>)
 8012d12:	f898 1000 	ldrb.w	r1, [r8]
 8012d16:	2203      	movs	r2, #3
 8012d18:	4628      	mov	r0, r5
 8012d1a:	f7ed fa81 	bl	8000220 <memchr>
 8012d1e:	b140      	cbz	r0, 8012d32 <_vfiprintf_r+0x176>
 8012d20:	2340      	movs	r3, #64	; 0x40
 8012d22:	1b40      	subs	r0, r0, r5
 8012d24:	fa03 f000 	lsl.w	r0, r3, r0
 8012d28:	9b04      	ldr	r3, [sp, #16]
 8012d2a:	4303      	orrs	r3, r0
 8012d2c:	9304      	str	r3, [sp, #16]
 8012d2e:	f108 0801 	add.w	r8, r8, #1
 8012d32:	f898 1000 	ldrb.w	r1, [r8]
 8012d36:	4829      	ldr	r0, [pc, #164]	; (8012ddc <_vfiprintf_r+0x220>)
 8012d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d3c:	2206      	movs	r2, #6
 8012d3e:	f108 0701 	add.w	r7, r8, #1
 8012d42:	f7ed fa6d 	bl	8000220 <memchr>
 8012d46:	2800      	cmp	r0, #0
 8012d48:	d034      	beq.n	8012db4 <_vfiprintf_r+0x1f8>
 8012d4a:	4b25      	ldr	r3, [pc, #148]	; (8012de0 <_vfiprintf_r+0x224>)
 8012d4c:	bb03      	cbnz	r3, 8012d90 <_vfiprintf_r+0x1d4>
 8012d4e:	9b03      	ldr	r3, [sp, #12]
 8012d50:	3307      	adds	r3, #7
 8012d52:	f023 0307 	bic.w	r3, r3, #7
 8012d56:	3308      	adds	r3, #8
 8012d58:	9303      	str	r3, [sp, #12]
 8012d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d5c:	444b      	add	r3, r9
 8012d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8012d60:	e74c      	b.n	8012bfc <_vfiprintf_r+0x40>
 8012d62:	fb00 3202 	mla	r2, r0, r2, r3
 8012d66:	2101      	movs	r1, #1
 8012d68:	e786      	b.n	8012c78 <_vfiprintf_r+0xbc>
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	9305      	str	r3, [sp, #20]
 8012d6e:	4618      	mov	r0, r3
 8012d70:	250a      	movs	r5, #10
 8012d72:	4688      	mov	r8, r1
 8012d74:	3101      	adds	r1, #1
 8012d76:	f898 2000 	ldrb.w	r2, [r8]
 8012d7a:	3a30      	subs	r2, #48	; 0x30
 8012d7c:	2a09      	cmp	r2, #9
 8012d7e:	d903      	bls.n	8012d88 <_vfiprintf_r+0x1cc>
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d0c5      	beq.n	8012d10 <_vfiprintf_r+0x154>
 8012d84:	9005      	str	r0, [sp, #20]
 8012d86:	e7c3      	b.n	8012d10 <_vfiprintf_r+0x154>
 8012d88:	fb05 2000 	mla	r0, r5, r0, r2
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	e7f0      	b.n	8012d72 <_vfiprintf_r+0x1b6>
 8012d90:	ab03      	add	r3, sp, #12
 8012d92:	9300      	str	r3, [sp, #0]
 8012d94:	4622      	mov	r2, r4
 8012d96:	4b13      	ldr	r3, [pc, #76]	; (8012de4 <_vfiprintf_r+0x228>)
 8012d98:	a904      	add	r1, sp, #16
 8012d9a:	4630      	mov	r0, r6
 8012d9c:	f3af 8000 	nop.w
 8012da0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012da4:	4681      	mov	r9, r0
 8012da6:	d1d8      	bne.n	8012d5a <_vfiprintf_r+0x19e>
 8012da8:	89a3      	ldrh	r3, [r4, #12]
 8012daa:	065b      	lsls	r3, r3, #25
 8012dac:	f53f af7d 	bmi.w	8012caa <_vfiprintf_r+0xee>
 8012db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012db2:	e77c      	b.n	8012cae <_vfiprintf_r+0xf2>
 8012db4:	ab03      	add	r3, sp, #12
 8012db6:	9300      	str	r3, [sp, #0]
 8012db8:	4622      	mov	r2, r4
 8012dba:	4b0a      	ldr	r3, [pc, #40]	; (8012de4 <_vfiprintf_r+0x228>)
 8012dbc:	a904      	add	r1, sp, #16
 8012dbe:	4630      	mov	r0, r6
 8012dc0:	f000 f888 	bl	8012ed4 <_printf_i>
 8012dc4:	e7ec      	b.n	8012da0 <_vfiprintf_r+0x1e4>
 8012dc6:	bf00      	nop
 8012dc8:	0806a7cc 	.word	0x0806a7cc
 8012dcc:	0806a810 	.word	0x0806a810
 8012dd0:	0806a7ec 	.word	0x0806a7ec
 8012dd4:	0806a7ac 	.word	0x0806a7ac
 8012dd8:	0806a816 	.word	0x0806a816
 8012ddc:	0806a81a 	.word	0x0806a81a
 8012de0:	00000000 	.word	0x00000000
 8012de4:	08012b99 	.word	0x08012b99

08012de8 <_printf_common>:
 8012de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dec:	4691      	mov	r9, r2
 8012dee:	461f      	mov	r7, r3
 8012df0:	688a      	ldr	r2, [r1, #8]
 8012df2:	690b      	ldr	r3, [r1, #16]
 8012df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	bfb8      	it	lt
 8012dfc:	4613      	movlt	r3, r2
 8012dfe:	f8c9 3000 	str.w	r3, [r9]
 8012e02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e06:	4606      	mov	r6, r0
 8012e08:	460c      	mov	r4, r1
 8012e0a:	b112      	cbz	r2, 8012e12 <_printf_common+0x2a>
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	f8c9 3000 	str.w	r3, [r9]
 8012e12:	6823      	ldr	r3, [r4, #0]
 8012e14:	0699      	lsls	r1, r3, #26
 8012e16:	bf42      	ittt	mi
 8012e18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012e1c:	3302      	addmi	r3, #2
 8012e1e:	f8c9 3000 	strmi.w	r3, [r9]
 8012e22:	6825      	ldr	r5, [r4, #0]
 8012e24:	f015 0506 	ands.w	r5, r5, #6
 8012e28:	d107      	bne.n	8012e3a <_printf_common+0x52>
 8012e2a:	f104 0a19 	add.w	sl, r4, #25
 8012e2e:	68e3      	ldr	r3, [r4, #12]
 8012e30:	f8d9 2000 	ldr.w	r2, [r9]
 8012e34:	1a9b      	subs	r3, r3, r2
 8012e36:	429d      	cmp	r5, r3
 8012e38:	db29      	blt.n	8012e8e <_printf_common+0xa6>
 8012e3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012e3e:	6822      	ldr	r2, [r4, #0]
 8012e40:	3300      	adds	r3, #0
 8012e42:	bf18      	it	ne
 8012e44:	2301      	movne	r3, #1
 8012e46:	0692      	lsls	r2, r2, #26
 8012e48:	d42e      	bmi.n	8012ea8 <_printf_common+0xc0>
 8012e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e4e:	4639      	mov	r1, r7
 8012e50:	4630      	mov	r0, r6
 8012e52:	47c0      	blx	r8
 8012e54:	3001      	adds	r0, #1
 8012e56:	d021      	beq.n	8012e9c <_printf_common+0xb4>
 8012e58:	6823      	ldr	r3, [r4, #0]
 8012e5a:	68e5      	ldr	r5, [r4, #12]
 8012e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8012e60:	f003 0306 	and.w	r3, r3, #6
 8012e64:	2b04      	cmp	r3, #4
 8012e66:	bf08      	it	eq
 8012e68:	1aad      	subeq	r5, r5, r2
 8012e6a:	68a3      	ldr	r3, [r4, #8]
 8012e6c:	6922      	ldr	r2, [r4, #16]
 8012e6e:	bf0c      	ite	eq
 8012e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e74:	2500      	movne	r5, #0
 8012e76:	4293      	cmp	r3, r2
 8012e78:	bfc4      	itt	gt
 8012e7a:	1a9b      	subgt	r3, r3, r2
 8012e7c:	18ed      	addgt	r5, r5, r3
 8012e7e:	f04f 0900 	mov.w	r9, #0
 8012e82:	341a      	adds	r4, #26
 8012e84:	454d      	cmp	r5, r9
 8012e86:	d11b      	bne.n	8012ec0 <_printf_common+0xd8>
 8012e88:	2000      	movs	r0, #0
 8012e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e8e:	2301      	movs	r3, #1
 8012e90:	4652      	mov	r2, sl
 8012e92:	4639      	mov	r1, r7
 8012e94:	4630      	mov	r0, r6
 8012e96:	47c0      	blx	r8
 8012e98:	3001      	adds	r0, #1
 8012e9a:	d103      	bne.n	8012ea4 <_printf_common+0xbc>
 8012e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ea4:	3501      	adds	r5, #1
 8012ea6:	e7c2      	b.n	8012e2e <_printf_common+0x46>
 8012ea8:	18e1      	adds	r1, r4, r3
 8012eaa:	1c5a      	adds	r2, r3, #1
 8012eac:	2030      	movs	r0, #48	; 0x30
 8012eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012eb2:	4422      	add	r2, r4
 8012eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ebc:	3302      	adds	r3, #2
 8012ebe:	e7c4      	b.n	8012e4a <_printf_common+0x62>
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	4622      	mov	r2, r4
 8012ec4:	4639      	mov	r1, r7
 8012ec6:	4630      	mov	r0, r6
 8012ec8:	47c0      	blx	r8
 8012eca:	3001      	adds	r0, #1
 8012ecc:	d0e6      	beq.n	8012e9c <_printf_common+0xb4>
 8012ece:	f109 0901 	add.w	r9, r9, #1
 8012ed2:	e7d7      	b.n	8012e84 <_printf_common+0x9c>

08012ed4 <_printf_i>:
 8012ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ed8:	4617      	mov	r7, r2
 8012eda:	7e0a      	ldrb	r2, [r1, #24]
 8012edc:	b085      	sub	sp, #20
 8012ede:	2a6e      	cmp	r2, #110	; 0x6e
 8012ee0:	4698      	mov	r8, r3
 8012ee2:	4606      	mov	r6, r0
 8012ee4:	460c      	mov	r4, r1
 8012ee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ee8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8012eec:	f000 80bc 	beq.w	8013068 <_printf_i+0x194>
 8012ef0:	d81a      	bhi.n	8012f28 <_printf_i+0x54>
 8012ef2:	2a63      	cmp	r2, #99	; 0x63
 8012ef4:	d02e      	beq.n	8012f54 <_printf_i+0x80>
 8012ef6:	d80a      	bhi.n	8012f0e <_printf_i+0x3a>
 8012ef8:	2a00      	cmp	r2, #0
 8012efa:	f000 80c8 	beq.w	801308e <_printf_i+0x1ba>
 8012efe:	2a58      	cmp	r2, #88	; 0x58
 8012f00:	f000 808a 	beq.w	8013018 <_printf_i+0x144>
 8012f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f08:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8012f0c:	e02a      	b.n	8012f64 <_printf_i+0x90>
 8012f0e:	2a64      	cmp	r2, #100	; 0x64
 8012f10:	d001      	beq.n	8012f16 <_printf_i+0x42>
 8012f12:	2a69      	cmp	r2, #105	; 0x69
 8012f14:	d1f6      	bne.n	8012f04 <_printf_i+0x30>
 8012f16:	6821      	ldr	r1, [r4, #0]
 8012f18:	681a      	ldr	r2, [r3, #0]
 8012f1a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8012f1e:	d023      	beq.n	8012f68 <_printf_i+0x94>
 8012f20:	1d11      	adds	r1, r2, #4
 8012f22:	6019      	str	r1, [r3, #0]
 8012f24:	6813      	ldr	r3, [r2, #0]
 8012f26:	e027      	b.n	8012f78 <_printf_i+0xa4>
 8012f28:	2a73      	cmp	r2, #115	; 0x73
 8012f2a:	f000 80b4 	beq.w	8013096 <_printf_i+0x1c2>
 8012f2e:	d808      	bhi.n	8012f42 <_printf_i+0x6e>
 8012f30:	2a6f      	cmp	r2, #111	; 0x6f
 8012f32:	d02a      	beq.n	8012f8a <_printf_i+0xb6>
 8012f34:	2a70      	cmp	r2, #112	; 0x70
 8012f36:	d1e5      	bne.n	8012f04 <_printf_i+0x30>
 8012f38:	680a      	ldr	r2, [r1, #0]
 8012f3a:	f042 0220 	orr.w	r2, r2, #32
 8012f3e:	600a      	str	r2, [r1, #0]
 8012f40:	e003      	b.n	8012f4a <_printf_i+0x76>
 8012f42:	2a75      	cmp	r2, #117	; 0x75
 8012f44:	d021      	beq.n	8012f8a <_printf_i+0xb6>
 8012f46:	2a78      	cmp	r2, #120	; 0x78
 8012f48:	d1dc      	bne.n	8012f04 <_printf_i+0x30>
 8012f4a:	2278      	movs	r2, #120	; 0x78
 8012f4c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8012f50:	496e      	ldr	r1, [pc, #440]	; (801310c <_printf_i+0x238>)
 8012f52:	e064      	b.n	801301e <_printf_i+0x14a>
 8012f54:	681a      	ldr	r2, [r3, #0]
 8012f56:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8012f5a:	1d11      	adds	r1, r2, #4
 8012f5c:	6019      	str	r1, [r3, #0]
 8012f5e:	6813      	ldr	r3, [r2, #0]
 8012f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f64:	2301      	movs	r3, #1
 8012f66:	e0a3      	b.n	80130b0 <_printf_i+0x1dc>
 8012f68:	f011 0f40 	tst.w	r1, #64	; 0x40
 8012f6c:	f102 0104 	add.w	r1, r2, #4
 8012f70:	6019      	str	r1, [r3, #0]
 8012f72:	d0d7      	beq.n	8012f24 <_printf_i+0x50>
 8012f74:	f9b2 3000 	ldrsh.w	r3, [r2]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	da03      	bge.n	8012f84 <_printf_i+0xb0>
 8012f7c:	222d      	movs	r2, #45	; 0x2d
 8012f7e:	425b      	negs	r3, r3
 8012f80:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012f84:	4962      	ldr	r1, [pc, #392]	; (8013110 <_printf_i+0x23c>)
 8012f86:	220a      	movs	r2, #10
 8012f88:	e017      	b.n	8012fba <_printf_i+0xe6>
 8012f8a:	6820      	ldr	r0, [r4, #0]
 8012f8c:	6819      	ldr	r1, [r3, #0]
 8012f8e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012f92:	d003      	beq.n	8012f9c <_printf_i+0xc8>
 8012f94:	1d08      	adds	r0, r1, #4
 8012f96:	6018      	str	r0, [r3, #0]
 8012f98:	680b      	ldr	r3, [r1, #0]
 8012f9a:	e006      	b.n	8012faa <_printf_i+0xd6>
 8012f9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012fa0:	f101 0004 	add.w	r0, r1, #4
 8012fa4:	6018      	str	r0, [r3, #0]
 8012fa6:	d0f7      	beq.n	8012f98 <_printf_i+0xc4>
 8012fa8:	880b      	ldrh	r3, [r1, #0]
 8012faa:	4959      	ldr	r1, [pc, #356]	; (8013110 <_printf_i+0x23c>)
 8012fac:	2a6f      	cmp	r2, #111	; 0x6f
 8012fae:	bf14      	ite	ne
 8012fb0:	220a      	movne	r2, #10
 8012fb2:	2208      	moveq	r2, #8
 8012fb4:	2000      	movs	r0, #0
 8012fb6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8012fba:	6865      	ldr	r5, [r4, #4]
 8012fbc:	60a5      	str	r5, [r4, #8]
 8012fbe:	2d00      	cmp	r5, #0
 8012fc0:	f2c0 809c 	blt.w	80130fc <_printf_i+0x228>
 8012fc4:	6820      	ldr	r0, [r4, #0]
 8012fc6:	f020 0004 	bic.w	r0, r0, #4
 8012fca:	6020      	str	r0, [r4, #0]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d13f      	bne.n	8013050 <_printf_i+0x17c>
 8012fd0:	2d00      	cmp	r5, #0
 8012fd2:	f040 8095 	bne.w	8013100 <_printf_i+0x22c>
 8012fd6:	4675      	mov	r5, lr
 8012fd8:	2a08      	cmp	r2, #8
 8012fda:	d10b      	bne.n	8012ff4 <_printf_i+0x120>
 8012fdc:	6823      	ldr	r3, [r4, #0]
 8012fde:	07da      	lsls	r2, r3, #31
 8012fe0:	d508      	bpl.n	8012ff4 <_printf_i+0x120>
 8012fe2:	6923      	ldr	r3, [r4, #16]
 8012fe4:	6862      	ldr	r2, [r4, #4]
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	bfde      	ittt	le
 8012fea:	2330      	movle	r3, #48	; 0x30
 8012fec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012ff0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012ff4:	ebae 0305 	sub.w	r3, lr, r5
 8012ff8:	6123      	str	r3, [r4, #16]
 8012ffa:	f8cd 8000 	str.w	r8, [sp]
 8012ffe:	463b      	mov	r3, r7
 8013000:	aa03      	add	r2, sp, #12
 8013002:	4621      	mov	r1, r4
 8013004:	4630      	mov	r0, r6
 8013006:	f7ff feef 	bl	8012de8 <_printf_common>
 801300a:	3001      	adds	r0, #1
 801300c:	d155      	bne.n	80130ba <_printf_i+0x1e6>
 801300e:	f04f 30ff 	mov.w	r0, #4294967295
 8013012:	b005      	add	sp, #20
 8013014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013018:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 801301c:	493c      	ldr	r1, [pc, #240]	; (8013110 <_printf_i+0x23c>)
 801301e:	6822      	ldr	r2, [r4, #0]
 8013020:	6818      	ldr	r0, [r3, #0]
 8013022:	f012 0f80 	tst.w	r2, #128	; 0x80
 8013026:	f100 0504 	add.w	r5, r0, #4
 801302a:	601d      	str	r5, [r3, #0]
 801302c:	d001      	beq.n	8013032 <_printf_i+0x15e>
 801302e:	6803      	ldr	r3, [r0, #0]
 8013030:	e002      	b.n	8013038 <_printf_i+0x164>
 8013032:	0655      	lsls	r5, r2, #25
 8013034:	d5fb      	bpl.n	801302e <_printf_i+0x15a>
 8013036:	8803      	ldrh	r3, [r0, #0]
 8013038:	07d0      	lsls	r0, r2, #31
 801303a:	bf44      	itt	mi
 801303c:	f042 0220 	orrmi.w	r2, r2, #32
 8013040:	6022      	strmi	r2, [r4, #0]
 8013042:	b91b      	cbnz	r3, 801304c <_printf_i+0x178>
 8013044:	6822      	ldr	r2, [r4, #0]
 8013046:	f022 0220 	bic.w	r2, r2, #32
 801304a:	6022      	str	r2, [r4, #0]
 801304c:	2210      	movs	r2, #16
 801304e:	e7b1      	b.n	8012fb4 <_printf_i+0xe0>
 8013050:	4675      	mov	r5, lr
 8013052:	fbb3 f0f2 	udiv	r0, r3, r2
 8013056:	fb02 3310 	mls	r3, r2, r0, r3
 801305a:	5ccb      	ldrb	r3, [r1, r3]
 801305c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013060:	4603      	mov	r3, r0
 8013062:	2800      	cmp	r0, #0
 8013064:	d1f5      	bne.n	8013052 <_printf_i+0x17e>
 8013066:	e7b7      	b.n	8012fd8 <_printf_i+0x104>
 8013068:	6808      	ldr	r0, [r1, #0]
 801306a:	681a      	ldr	r2, [r3, #0]
 801306c:	6949      	ldr	r1, [r1, #20]
 801306e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8013072:	d004      	beq.n	801307e <_printf_i+0x1aa>
 8013074:	1d10      	adds	r0, r2, #4
 8013076:	6018      	str	r0, [r3, #0]
 8013078:	6813      	ldr	r3, [r2, #0]
 801307a:	6019      	str	r1, [r3, #0]
 801307c:	e007      	b.n	801308e <_printf_i+0x1ba>
 801307e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013082:	f102 0004 	add.w	r0, r2, #4
 8013086:	6018      	str	r0, [r3, #0]
 8013088:	6813      	ldr	r3, [r2, #0]
 801308a:	d0f6      	beq.n	801307a <_printf_i+0x1a6>
 801308c:	8019      	strh	r1, [r3, #0]
 801308e:	2300      	movs	r3, #0
 8013090:	6123      	str	r3, [r4, #16]
 8013092:	4675      	mov	r5, lr
 8013094:	e7b1      	b.n	8012ffa <_printf_i+0x126>
 8013096:	681a      	ldr	r2, [r3, #0]
 8013098:	1d11      	adds	r1, r2, #4
 801309a:	6019      	str	r1, [r3, #0]
 801309c:	6815      	ldr	r5, [r2, #0]
 801309e:	6862      	ldr	r2, [r4, #4]
 80130a0:	2100      	movs	r1, #0
 80130a2:	4628      	mov	r0, r5
 80130a4:	f7ed f8bc 	bl	8000220 <memchr>
 80130a8:	b108      	cbz	r0, 80130ae <_printf_i+0x1da>
 80130aa:	1b40      	subs	r0, r0, r5
 80130ac:	6060      	str	r0, [r4, #4]
 80130ae:	6863      	ldr	r3, [r4, #4]
 80130b0:	6123      	str	r3, [r4, #16]
 80130b2:	2300      	movs	r3, #0
 80130b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130b8:	e79f      	b.n	8012ffa <_printf_i+0x126>
 80130ba:	6923      	ldr	r3, [r4, #16]
 80130bc:	462a      	mov	r2, r5
 80130be:	4639      	mov	r1, r7
 80130c0:	4630      	mov	r0, r6
 80130c2:	47c0      	blx	r8
 80130c4:	3001      	adds	r0, #1
 80130c6:	d0a2      	beq.n	801300e <_printf_i+0x13a>
 80130c8:	6823      	ldr	r3, [r4, #0]
 80130ca:	079b      	lsls	r3, r3, #30
 80130cc:	d507      	bpl.n	80130de <_printf_i+0x20a>
 80130ce:	2500      	movs	r5, #0
 80130d0:	f104 0919 	add.w	r9, r4, #25
 80130d4:	68e3      	ldr	r3, [r4, #12]
 80130d6:	9a03      	ldr	r2, [sp, #12]
 80130d8:	1a9b      	subs	r3, r3, r2
 80130da:	429d      	cmp	r5, r3
 80130dc:	db05      	blt.n	80130ea <_printf_i+0x216>
 80130de:	68e0      	ldr	r0, [r4, #12]
 80130e0:	9b03      	ldr	r3, [sp, #12]
 80130e2:	4298      	cmp	r0, r3
 80130e4:	bfb8      	it	lt
 80130e6:	4618      	movlt	r0, r3
 80130e8:	e793      	b.n	8013012 <_printf_i+0x13e>
 80130ea:	2301      	movs	r3, #1
 80130ec:	464a      	mov	r2, r9
 80130ee:	4639      	mov	r1, r7
 80130f0:	4630      	mov	r0, r6
 80130f2:	47c0      	blx	r8
 80130f4:	3001      	adds	r0, #1
 80130f6:	d08a      	beq.n	801300e <_printf_i+0x13a>
 80130f8:	3501      	adds	r5, #1
 80130fa:	e7eb      	b.n	80130d4 <_printf_i+0x200>
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d1a7      	bne.n	8013050 <_printf_i+0x17c>
 8013100:	780b      	ldrb	r3, [r1, #0]
 8013102:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013106:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801310a:	e765      	b.n	8012fd8 <_printf_i+0x104>
 801310c:	0806a832 	.word	0x0806a832
 8013110:	0806a821 	.word	0x0806a821

08013114 <_sbrk_r>:
 8013114:	b538      	push	{r3, r4, r5, lr}
 8013116:	4c06      	ldr	r4, [pc, #24]	; (8013130 <_sbrk_r+0x1c>)
 8013118:	2300      	movs	r3, #0
 801311a:	4605      	mov	r5, r0
 801311c:	4608      	mov	r0, r1
 801311e:	6023      	str	r3, [r4, #0]
 8013120:	f7fe ff7e 	bl	8012020 <_sbrk>
 8013124:	1c43      	adds	r3, r0, #1
 8013126:	d102      	bne.n	801312e <_sbrk_r+0x1a>
 8013128:	6823      	ldr	r3, [r4, #0]
 801312a:	b103      	cbz	r3, 801312e <_sbrk_r+0x1a>
 801312c:	602b      	str	r3, [r5, #0]
 801312e:	bd38      	pop	{r3, r4, r5, pc}
 8013130:	2000d86c 	.word	0x2000d86c

08013134 <__sread>:
 8013134:	b510      	push	{r4, lr}
 8013136:	460c      	mov	r4, r1
 8013138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801313c:	f000 f896 	bl	801326c <_read_r>
 8013140:	2800      	cmp	r0, #0
 8013142:	bfab      	itete	ge
 8013144:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013146:	89a3      	ldrhlt	r3, [r4, #12]
 8013148:	181b      	addge	r3, r3, r0
 801314a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801314e:	bfac      	ite	ge
 8013150:	6563      	strge	r3, [r4, #84]	; 0x54
 8013152:	81a3      	strhlt	r3, [r4, #12]
 8013154:	bd10      	pop	{r4, pc}

08013156 <__swrite>:
 8013156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801315a:	461f      	mov	r7, r3
 801315c:	898b      	ldrh	r3, [r1, #12]
 801315e:	05db      	lsls	r3, r3, #23
 8013160:	4605      	mov	r5, r0
 8013162:	460c      	mov	r4, r1
 8013164:	4616      	mov	r6, r2
 8013166:	d505      	bpl.n	8013174 <__swrite+0x1e>
 8013168:	2302      	movs	r3, #2
 801316a:	2200      	movs	r2, #0
 801316c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013170:	f000 f868 	bl	8013244 <_lseek_r>
 8013174:	89a3      	ldrh	r3, [r4, #12]
 8013176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801317a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801317e:	81a3      	strh	r3, [r4, #12]
 8013180:	4632      	mov	r2, r6
 8013182:	463b      	mov	r3, r7
 8013184:	4628      	mov	r0, r5
 8013186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801318a:	f000 b817 	b.w	80131bc <_write_r>

0801318e <__sseek>:
 801318e:	b510      	push	{r4, lr}
 8013190:	460c      	mov	r4, r1
 8013192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013196:	f000 f855 	bl	8013244 <_lseek_r>
 801319a:	1c43      	adds	r3, r0, #1
 801319c:	89a3      	ldrh	r3, [r4, #12]
 801319e:	bf15      	itete	ne
 80131a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80131a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80131a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80131aa:	81a3      	strheq	r3, [r4, #12]
 80131ac:	bf18      	it	ne
 80131ae:	81a3      	strhne	r3, [r4, #12]
 80131b0:	bd10      	pop	{r4, pc}

080131b2 <__sclose>:
 80131b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131b6:	f000 b813 	b.w	80131e0 <_close_r>
	...

080131bc <_write_r>:
 80131bc:	b538      	push	{r3, r4, r5, lr}
 80131be:	4c07      	ldr	r4, [pc, #28]	; (80131dc <_write_r+0x20>)
 80131c0:	4605      	mov	r5, r0
 80131c2:	4608      	mov	r0, r1
 80131c4:	4611      	mov	r1, r2
 80131c6:	2200      	movs	r2, #0
 80131c8:	6022      	str	r2, [r4, #0]
 80131ca:	461a      	mov	r2, r3
 80131cc:	f7fe ff1a 	bl	8012004 <_write>
 80131d0:	1c43      	adds	r3, r0, #1
 80131d2:	d102      	bne.n	80131da <_write_r+0x1e>
 80131d4:	6823      	ldr	r3, [r4, #0]
 80131d6:	b103      	cbz	r3, 80131da <_write_r+0x1e>
 80131d8:	602b      	str	r3, [r5, #0]
 80131da:	bd38      	pop	{r3, r4, r5, pc}
 80131dc:	2000d86c 	.word	0x2000d86c

080131e0 <_close_r>:
 80131e0:	b538      	push	{r3, r4, r5, lr}
 80131e2:	4c06      	ldr	r4, [pc, #24]	; (80131fc <_close_r+0x1c>)
 80131e4:	2300      	movs	r3, #0
 80131e6:	4605      	mov	r5, r0
 80131e8:	4608      	mov	r0, r1
 80131ea:	6023      	str	r3, [r4, #0]
 80131ec:	f7fe ff3a 	bl	8012064 <_close>
 80131f0:	1c43      	adds	r3, r0, #1
 80131f2:	d102      	bne.n	80131fa <_close_r+0x1a>
 80131f4:	6823      	ldr	r3, [r4, #0]
 80131f6:	b103      	cbz	r3, 80131fa <_close_r+0x1a>
 80131f8:	602b      	str	r3, [r5, #0]
 80131fa:	bd38      	pop	{r3, r4, r5, pc}
 80131fc:	2000d86c 	.word	0x2000d86c

08013200 <_fstat_r>:
 8013200:	b538      	push	{r3, r4, r5, lr}
 8013202:	4c07      	ldr	r4, [pc, #28]	; (8013220 <_fstat_r+0x20>)
 8013204:	2300      	movs	r3, #0
 8013206:	4605      	mov	r5, r0
 8013208:	4608      	mov	r0, r1
 801320a:	4611      	mov	r1, r2
 801320c:	6023      	str	r3, [r4, #0]
 801320e:	f7fe ff2c 	bl	801206a <_fstat>
 8013212:	1c43      	adds	r3, r0, #1
 8013214:	d102      	bne.n	801321c <_fstat_r+0x1c>
 8013216:	6823      	ldr	r3, [r4, #0]
 8013218:	b103      	cbz	r3, 801321c <_fstat_r+0x1c>
 801321a:	602b      	str	r3, [r5, #0]
 801321c:	bd38      	pop	{r3, r4, r5, pc}
 801321e:	bf00      	nop
 8013220:	2000d86c 	.word	0x2000d86c

08013224 <_isatty_r>:
 8013224:	b538      	push	{r3, r4, r5, lr}
 8013226:	4c06      	ldr	r4, [pc, #24]	; (8013240 <_isatty_r+0x1c>)
 8013228:	2300      	movs	r3, #0
 801322a:	4605      	mov	r5, r0
 801322c:	4608      	mov	r0, r1
 801322e:	6023      	str	r3, [r4, #0]
 8013230:	f7fe ff20 	bl	8012074 <_isatty>
 8013234:	1c43      	adds	r3, r0, #1
 8013236:	d102      	bne.n	801323e <_isatty_r+0x1a>
 8013238:	6823      	ldr	r3, [r4, #0]
 801323a:	b103      	cbz	r3, 801323e <_isatty_r+0x1a>
 801323c:	602b      	str	r3, [r5, #0]
 801323e:	bd38      	pop	{r3, r4, r5, pc}
 8013240:	2000d86c 	.word	0x2000d86c

08013244 <_lseek_r>:
 8013244:	b538      	push	{r3, r4, r5, lr}
 8013246:	4c07      	ldr	r4, [pc, #28]	; (8013264 <_lseek_r+0x20>)
 8013248:	4605      	mov	r5, r0
 801324a:	4608      	mov	r0, r1
 801324c:	4611      	mov	r1, r2
 801324e:	2200      	movs	r2, #0
 8013250:	6022      	str	r2, [r4, #0]
 8013252:	461a      	mov	r2, r3
 8013254:	f7fe ff10 	bl	8012078 <_lseek>
 8013258:	1c43      	adds	r3, r0, #1
 801325a:	d102      	bne.n	8013262 <_lseek_r+0x1e>
 801325c:	6823      	ldr	r3, [r4, #0]
 801325e:	b103      	cbz	r3, 8013262 <_lseek_r+0x1e>
 8013260:	602b      	str	r3, [r5, #0]
 8013262:	bd38      	pop	{r3, r4, r5, pc}
 8013264:	2000d86c 	.word	0x2000d86c

08013268 <__malloc_lock>:
 8013268:	4770      	bx	lr

0801326a <__malloc_unlock>:
 801326a:	4770      	bx	lr

0801326c <_read_r>:
 801326c:	b538      	push	{r3, r4, r5, lr}
 801326e:	4c07      	ldr	r4, [pc, #28]	; (801328c <_read_r+0x20>)
 8013270:	4605      	mov	r5, r0
 8013272:	4608      	mov	r0, r1
 8013274:	4611      	mov	r1, r2
 8013276:	2200      	movs	r2, #0
 8013278:	6022      	str	r2, [r4, #0]
 801327a:	461a      	mov	r2, r3
 801327c:	f7fe fefe 	bl	801207c <_read>
 8013280:	1c43      	adds	r3, r0, #1
 8013282:	d102      	bne.n	801328a <_read_r+0x1e>
 8013284:	6823      	ldr	r3, [r4, #0]
 8013286:	b103      	cbz	r3, 801328a <_read_r+0x1e>
 8013288:	602b      	str	r3, [r5, #0]
 801328a:	bd38      	pop	{r3, r4, r5, pc}
 801328c:	2000d86c 	.word	0x2000d86c

08013290 <_init>:
 8013290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013292:	bf00      	nop
 8013294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013296:	bc08      	pop	{r3}
 8013298:	469e      	mov	lr, r3
 801329a:	4770      	bx	lr

0801329c <_fini>:
 801329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801329e:	bf00      	nop
 80132a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132a2:	bc08      	pop	{r3}
 80132a4:	469e      	mov	lr, r3
 80132a6:	4770      	bx	lr
