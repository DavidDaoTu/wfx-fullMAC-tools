/*
* Silicon Laboratories Confidential
* Copyright 2008-2013 Silicon Laboratories, Inc.
*
* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT!
*/

#ifndef _WFX_FM_H_
#define _WFX_FM_H_

#include <stdint.h>
#include <stdbool.h>

/************************************************************/
/* WARNING : the message parameters has to be sent          */
/* to the firmware in Litte Endian                          */
/************************************************************/

extern int umac_is_used;

#define HI_MSG_TYPE_MASK			                    0x80
#define HI_UL_MAC_MASK				                    0x40

#ifndef HI_GENERIC_API

#define HI_CONTROL_GPIO_REQ_ID                          0x26
#define HI_CONTROL_GPIO_CNF_ID                          0x26
#define HI_SHUT_DOWN_REQ_ID                             0x32
#define HI_SHUT_DOWN_CNF_ID                             0x32
#define HI_EXCEPTION_IND_ID                             0xe0
#define HI_ERROR_IND_ID                                 0xe4
#define HI_STARTUP_IND_ID                               0xe1
#define HI_GENERIC_IND_ID                               0xe3
#define HI_CONFIGURATION_REQ_ID                         0x09
#define HI_CONFIGURATION_CNF_ID                         0x09
#define HI_SET_SL_MAC_KEY_REQ_ID                        0x27
#define HI_SET_SL_MAC_KEY_CNF_ID                        0x27
#define HI_SL_EXCHANGE_PUB_KEYS_REQ_ID                  0x28
#define HI_SL_EXCHANGE_PUB_KEYS_CNF_ID                  0x28
#define HI_SL_CONFIGURE_REQ_ID                          0x29
#define HI_SL_CONFIGURE_CNF_ID                          0x29

/**************************************************/

#define API_FILENAME_SIZE                               48        
#define API_DATA_SIZE_124                               124       
#define API_OPN_SIZE                                    14        
#define API_UID_SIZE                                    8         
#define API_MAC_ADDR0_SIZE                              6         
#define API_MAC_ADDR1_SIZE                              6         
#define API_DISABLED_CHANNEL_LIST_SIZE                  2         
#define API_RESERVED2_SIZE                              6         
#define API_FIRMWARE_LABEL_SIZE                         128       
#define API_PDS_DATA_SIZE                               1         
#define API_KEY_VALUE_SIZE                              32        
#define API_HOST_PUB_KEY_SIZE                           32        
#define API_HOST_PUB_KEY_MAC_SIZE                       64        
#define API_NCP_PUB_KEY_SIZE                            32        
#define API_NCP_PUB_KEY_MAC_SIZE                        64        
#define API_ENCR_BMP_SIZE                               32        
#define API_NCP_ENCR_BMP_SIZE                           32        
#define API_NB_RX_BY_RATE_SIZE                          22        
#define API_PER_SIZE                                    22        
#define API_SNR_SIZE                                    22        
#define API_RSSI_SIZE                                   22        
#define API_CFO_SIZE                                    22        
#define API_RAWDATA_SIZE                                1         

/**************************************************/

typedef enum hi_generic_indication_id_e {
        HI_GENERIC_INDICATION_ID_RAW               = 0x0,         /*Byte stream type*/
        HI_GENERIC_INDICATION_ID_STRING            = 0x1,         /*String*/        
        HI_GENERIC_INDICATION_ID_RX_STATS          = 0x2          /*Rx statistics structure*/
} hi_generic_indication_id;

typedef enum hi_fw_type_e {
        HI_FW_TYPE_ETF                             = 0x0,         /*ETF Firmware*/  
        HI_FW_TYPE_WFM                             = 0x1,         /*WLAN Full MAC (WFM)*/
        HI_FW_TYPE_WSM                             = 0x2,         /*WLAN Split MAC (WSM)*/
        HI_FW_TYPE_HI_TEST                         = 0x3,         /*HI Test Firmware*/
        HI_FW_TYPE_PLATFORM_TEST                   = 0x4          /*Platform Test Firmware */
} hi_fw_type;

typedef enum hi_gen_req_e {
        HI_GEN_REQ_TRACE_CONTROL_REQ_ID            = 0x0,
        HI_GEN_REQ_HI_LOOPBACK_TEST_REQ_ID         = 0x1
} hi_gen_req;

typedef enum hi_gpio_error_e {
        HI_GPIO_ERROR_0                            = 0x0,         /*Undefined GPIO_ID*/
        HI_GPIO_ERROR_1                            = 0x1,         /*GPIO_ID not configured in gpio mode (gpio_enabled =0)*/
        HI_GPIO_ERROR_2                            = 0x2          /*Toggle not possible while in tristate*/
} hi_gpio_error;

typedef enum hi_gpio_mode_e {
        HI_GPIO_MODE_D0                            = 0x0,         /*drive 0*/       
        HI_GPIO_MODE_D1                            = 0x1,         /*drive 1*/       
        HI_GPIO_MODE_OD0                           = 0x2,         /*open drain 0*/  
        HI_GPIO_MODE_OD1                           = 0x3,         /*open drain 1*/  
        HI_GPIO_MODE_TRISTATE                      = 0x4,         /*Tristate*/      
        HI_GPIO_MODE_TOGGLE                        = 0x5,         /*Toggle*/        
        HI_GPIO_MODE_READ                          = 0x6          /*Read*/          
} hi_gpio_mode;

typedef enum hi_gpio_status_e {
        HI_GPIO_STATUS_OK                          = 0x0,         /*command is OK*/ 
        HI_GPIO_STATUS_WARN                        = 0x1,         /*Warning*/       
        HI_GPIO_STATUS_ERR                         = 0x2          /*Error*/         
} hi_gpio_status;

typedef enum sl_configure_ind_status_e {
        SL_CONFIGURE_IND_STATUS_PUB_KEY_RDY        = 0x2d         /*Force invalidating session key */
} sl_configure_ind_status;

typedef enum sl_configure_skey_invld_e {
        SL_CONFIGURE_SKEY_INVLD_INVALIDATE         = 0x87         /*Force invalidating session key */
} sl_configure_skey_invld;

typedef enum sl_mac_key_dest_e {
        SL_MAC_KEY_DEST_OTP                        = 0x78,        /*Key will be stored in OTP*/
        SL_MAC_KEY_DEST_RAM                        = 0x87         /*Key will be stored in RAM*/
} sl_mac_key_dest;

typedef enum sl_mac_key_status_e {
        SL_MAC_KEY_STATUS_SUCCESS                  = 0x5a,        /*Key has been correctly written*/
        SL_MAC_KEY_STATUS_FAILED_KEY_ALREADY_BURNED = 0x1,        /*Key already exists in OTP*/
        SL_MAC_KEY_STATUS_FAILED_RAM_MODE_NOT_ALLOWED = 0x2,      /*RAM mode is not allowed*/
        SL_MAC_KEY_STATUS_FAILED_UNKNOWN_MODE      = 0x3          /*Unknown mode (should be RAM or OTP)*/
} sl_mac_key_status;

typedef enum sl_pub_key_exchange_status_e {
        SL_PUB_KEY_EXCHANGE_STATUS_SUCCESS         = 0x78,        /*Host Public Key authenticated*/
        SL_PUB_KEY_EXCHANGE_STATUS_FAILED          = 0x1          /*Host Public Key authentication failed*/
} sl_pub_key_exchange_status;

/**************************************************/

typedef struct __attribute__((__packed__)) HiCapabilities_s {
        uint8_t  LinkMode : 2;                     /*Bit 0-1 : reg OTPCTRL_FB_STATUS_fb_secure_link_mode type: WsmHiError*/
        uint8_t  Reserved : 6;                     /*Bit 2-7 : Reserved type: HiGpioError*/
        uint8_t  Reserved2;                        /*Bit 8-15 : Reserved*/
        uint8_t  Reserved3;                        /*Bit 16-23 : Reserved*/
        uint8_t  Reserved4;                        /*Bit 24-31 : Reserved*/
} HiCapabilities_t;

typedef struct __attribute__((__packed__)) HiRxStats_s {
        uint32_t NbRxFrame;                        /*Total number of frame received*/
        uint32_t NbCrcFrame;                       /*Number of frame received with bad CRC*/
        uint32_t PerTotal;                         /*PER on the total number of frame*/
        uint32_t Throughput;                       /*Throughput calculated on correct frames received*/
        uint32_t NbRxByRate[API_NB_RX_BY_RATE_SIZE];   /*Number of frame received by rate*/
        uint16_t Per[API_PER_SIZE];                /*PER*10000 by frame rate*/
        int16_t  Snr[API_SNR_SIZE];                /*SNR in Db*100 by frame rate*/
        int16_t  Rssi[API_RSSI_SIZE];              /*RSSI in Dbm*100 by frame rate*/
        int16_t  Cfo[API_CFO_SIZE];                /*CFO in kHz by frame rate*/
        uint32_t Date;                             /*This message transmission date in firmware database (microsecond)*/
        uint32_t PwrClkFreq;                       /*Frequency of the power clock in Hz*/
        uint8_t  IsExtPwrClk;                      /*Indicate if the power clock is external*/
} HiRxStats_t;

/**************************************************/

typedef union hi_indication_data_u {
        HiRxStats_t                                   RxStats;                        /* Element :0*/   
        uint8_t                                       RawData[API_RAWDATA_SIZE];      /* Element :1*/   
} HiIndicationData_t;

/**************************************************/

#endif /*HI_GENERIC_API*/

#define WFM_HI_SET_MAC_ADDRESS_REQ_ID                   0x42
#define WFM_HI_SET_MAC_ADDRESS_CNF_ID                   0x42
#define WFM_HI_CONNECT_REQ_ID                           0x43
#define WFM_HI_CONNECT_CNF_ID                           0x43
#define WFM_HI_CONNECT_IND_ID                           0xc3
#define WFM_HI_DISCONNECT_REQ_ID                        0x44
#define WFM_HI_DISCONNECT_CNF_ID                        0x44
#define WFM_HI_DISCONNECT_IND_ID                        0xc4
#define WFM_HI_START_AP_REQ_ID                          0x45
#define WFM_HI_START_AP_CNF_ID                          0x45
#define WFM_HI_START_AP_IND_ID                          0xc5
#define WFM_HI_UPDATE_AP_REQ_ID                         0x46
#define WFM_HI_UPDATE_AP_CNF_ID                         0x46
#define WFM_HI_STOP_AP_REQ_ID                           0x47
#define WFM_HI_STOP_AP_CNF_ID                           0x47
#define WFM_HI_STOP_AP_IND_ID                           0xc7
#define WFM_HI_SEND_FRAME_REQ_ID                        0x4a
#define WFM_HI_SEND_FRAME_CNF_ID                        0x4a
#define WFM_HI_RECEIVED_IND_ID                          0xca
#define WFM_HI_START_SCAN_REQ_ID                        0x4b
#define WFM_HI_START_SCAN_CNF_ID                        0x4b
#define WFM_HI_STOP_SCAN_REQ_ID                         0x4c
#define WFM_HI_STOP_SCAN_CNF_ID                         0x4c
#define WFM_HI_SCAN_RESULT_IND_ID                       0xcb
#define WFM_HI_SCAN_COMPLETE_IND_ID                     0xcc
#define WFM_HI_GET_SIGNAL_STRENGTH_REQ_ID               0x4e
#define WFM_HI_GET_SIGNAL_STRENGTH_CNF_ID               0x4e
#define WFM_HI_AP_CLIENT_CONNECTED_IND_ID               0xcd
#define WFM_HI_AP_CLIENT_REJECTED_IND_ID                0xce
#define WFM_HI_DISCONNECT_AP_CLIENT_REQ_ID              0x4f
#define WFM_HI_DISCONNECT_AP_CLIENT_CNF_ID              0x4f
#define WFM_HI_AP_CLIENT_DISCONNECTED_IND_ID            0xcf
#define WFM_HI_JOIN_IBSS_REQ_ID                         0x50
#define WFM_HI_JOIN_IBSS_CNF_ID                         0x50
#define WFM_HI_JOIN_IBSS_IND_ID                         0xd0
#define WFM_HI_LEAVE_IBSS_REQ_ID                        0x51
#define WFM_HI_LEAVE_IBSS_CNF_ID                        0x51
#define WFM_HI_LEAVE_IBSS_IND_ID                        0xd1
#define WFM_HI_SET_PM_MODE_REQ_ID                       0x52
#define WFM_HI_SET_PM_MODE_CNF_ID                       0x52
#define WFM_HI_ADD_MULTICAST_ADDR_REQ_ID                0x53
#define WFM_HI_ADD_MULTICAST_ADDR_CNF_ID                0x53
#define WFM_HI_REMOVE_MULTICAST_ADDR_REQ_ID             0x54
#define WFM_HI_REMOVE_MULTICAST_ADDR_CNF_ID             0x54
#define WFM_HI_SET_MAX_AP_CLIENT_COUNT_REQ_ID           0x55
#define WFM_HI_SET_MAX_AP_CLIENT_COUNT_CNF_ID           0x55
#define WFM_HI_SET_MAX_AP_CLIENT_INACTIVITY_REQ_ID      0x56
#define WFM_HI_SET_MAX_AP_CLIENT_INACTIVITY_CNF_ID      0x56
#define WFM_HI_SET_ROAM_PARAMETERS_REQ_ID               0x57
#define WFM_HI_SET_ROAM_PARAMETERS_CNF_ID               0x57
#define WFM_HI_SET_TX_RATE_PARAMETERS_REQ_ID            0x58
#define WFM_HI_SET_TX_RATE_PARAMETERS_CNF_ID            0x58

/**************************************************/

#define WFM_API_MAC_ADDR0_SIZE                          6         
#define WFM_API_MAC_ADDR1_SIZE                          6         
#define WFM_API_BSSID_SIZE                              6         
#define WFM_API_PASSWORD_SIZE                           64        
#define WFM_API_MAC_SIZE                                6         
#define WFM_API_CHANNEL_NUMBER_SIZE                     14        
#define WFM_API_SSID_DEF_SIZE                           2         
#define WFM_API_SSID_SIZE                               32        

/**************************************************/

typedef enum wfm_client_isolation_e {
        WFM_CLIENT_ISOLATION_DISABLED              = 0x0,
        WFM_CLIENT_ISOLATION_ENABLED               = 0x1
} wfm_client_isolation;

typedef enum wfm_frame_type_e {
        WFM_FRAME_TYPE_MGMT                        = 0x0,
        WFM_FRAME_TYPE_ACTION                      = 0x4,
        WFM_FRAME_TYPE_DATA                        = 0x8
} wfm_frame_type;

typedef enum wfm_hidden_ssid_e {
        WFM_HIDDEN_SSID_FALSE                      = 0x0,
        WFM_HIDDEN_SSID_TRUE                       = 0x1
} wfm_hidden_ssid;

typedef enum wfm_max_phy_rate_e {
        WFM_MAX_PHY_RATE_B_1MBPS                   = 0x0,         /*11b 1Mb/s rate*/
        WFM_MAX_PHY_RATE_B_2MBPS                   = 0x1,         /*11b 2Mb/s rate*/
        WFM_MAX_PHY_RATE_B_5P5MBPS                 = 0x2,         /*11b 5.5Mb/s rate*/
        WFM_MAX_PHY_RATE_B_11MBPS                  = 0x3,         /*11b 11Mb/s rate*/
        WFM_MAX_PHY_RATE_G_6MBPS                   = 0x6,         /*11g 6Mb/s rate*/
        WFM_MAX_PHY_RATE_G_12MBPS                  = 0x7,         /*11g 12Mb/s rate*/
        WFM_MAX_PHY_RATE_G_18MBPS                  = 0x8,         /*11g 18Mb/s rate*/
        WFM_MAX_PHY_RATE_G_24MBPS                  = 0x9,         /*11g 24Mb/s rate*/
        WFM_MAX_PHY_RATE_G_36MBPS                  = 0xa,         /*11g 36Mb/s rate*/
        WFM_MAX_PHY_RATE_G_42MBPS                  = 0xb,         /*11g 42Mb/s rate*/
        WFM_MAX_PHY_RATE_G_48MBPS                  = 0xc,         /*11g 48Mb/s rate*/
        WFM_MAX_PHY_RATE_G_54MBPS                  = 0xd,         /*11g 54Mb/s rate*/
        WFM_MAX_PHY_RATE_N_6P5MBPS                 = 0xe,         /*11n 6.5Mb/s rate*/
        WFM_MAX_PHY_RATE_N_13MBPS                  = 0xf,         /*11n 13Mb/s rate*/
        WFM_MAX_PHY_RATE_N_19P5MBPS                = 0x10,        /*11n 19.5Mb/s rate*/
        WFM_MAX_PHY_RATE_N_26MBPS                  = 0x11,        /*11n 26Mb/s rate*/
        WFM_MAX_PHY_RATE_N_39MBPS                  = 0x12,        /*11n 39Mb/s rate*/
        WFM_MAX_PHY_RATE_N_52MBPS                  = 0x13,        /*11n 52Mb/s rate*/
        WFM_MAX_PHY_RATE_N_58P5MBPS                = 0x14,        /*11n 58.5Mb/s rate*/
        WFM_MAX_PHY_RATE_N_65MBPS                  = 0x15         /*11n 65Mb/s rate*/
} wfm_max_phy_rate;

typedef enum wfm_mgmt_frame_protection_e {
        WFM_MGMT_FRAME_PROTECTION_DISABLED         = 0x0,
        WFM_MGMT_FRAME_PROTECTION_OPTIONAL         = 0x1,
        WFM_MGMT_FRAME_PROTECTION_MANDATORY        = 0x2
} wfm_mgmt_frame_protection;

typedef enum wfm_pm_mode_e {
        WFM_PM_MODE_ACTIVE                         = 0x0,
        WFM_PM_MODE_PS                             = 0x1,
        WFM_PM_MODE_AUTO                           = 0x2
} wfm_pm_mode;

typedef enum wfm_priority_e {
        WFM_PRIORITY_BE                            = 0x0,         /*Best Effort*/   
        WFM_PRIORITY_BK                            = 0x1,         /*Background*/    
        WFM_PRIORITY_VI                            = 0x2,         /*Video*/         
        WFM_PRIORITY_VO                            = 0x3          /*Voice*/         
} wfm_priority;

typedef enum wfm_reason_e {
        WFM_REASON_UNSPECIFIED                     = 0x0,
        WFM_REASON_TIMEOUT                         = 0x1,
        WFM_REASON_LEAVING_BSS                     = 0x2,
        WFM_REASON_UNKNOWN_STA                     = 0x3,
        WFM_REASON_AP_FULL                         = 0x4
} wfm_reason;

typedef enum wfm_scan_mode_e {
        WFM_SCAN_MODE_PASSIVE                      = 0x0,
        WFM_SCAN_MODE_ACTIVE                       = 0x1
} wfm_scan_mode;

typedef enum wfm_security_mode_e {
        WFM_SECURITY_MODE_OPEN                     = 0x0,
        WFM_SECURITY_MODE_WEP                      = 0x1,
        WFM_SECURITY_MODE_WPA2_WPA1_PSK            = 0x2,
        WFM_SECURITY_MODE_WPA2_PSK                 = 0x4
} wfm_security_mode;

typedef enum wfm_status_e {
        WFM_STATUS_SUCCESS                         = 0x0,         /*The firmware has successfully completed a request.*/
        WFM_STATUS_INVALID_PARAMETER               = 0x1,         /*A request contains one or more invalid parameters.*/
        WFM_STATUS_WRONG_STATE                     = 0x2,         /*The request cannot be performed because the device is in an inappropriate state.*/
        WFM_STATUS_GENERAL_FAILURE                 = 0x3
} wfm_status;

/**************************************************/

typedef struct __attribute__((__packed__)) WfmHiSsidDef_s {
        uint32_t SsidLength;                       /* type: WfmStatus*/
        uint8_t  Ssid[WFM_API_SSID_SIZE];          /* type: HiGenericIndicationId*/
} WfmHiSsidDef_t;

typedef struct __attribute__((__packed__)) WfmHiRateSetBitmask_s {
        uint8_t  B1Mbps : 1;                       /*Set to 1 to enable 11b 1Mb/s type: WfmStatus*/
        uint8_t  B2Mbps : 1;                       /*Set to 1 to enable 11b 2Mb/s type: WfmPmMode*/
        uint8_t  B5P5Mbps : 1;                     /*Set to 1 to enable 11b 5.5Mb/s type: WfmStatus*/
        uint8_t  B11Mbps : 1;                      /*Set to 1 to enable 11b 11Mb/s type: WfmSecurityMode*/
        uint8_t  Unused : 4;                       /*Unused type: WfmMgmtFrameProtection*/
        uint8_t  G6Mbps : 1;                       /*Set to 1 to enable 11g 6Mb/s type: WfmMgmtFrameProtection*/
        uint8_t  G9Mbps : 1;                       /*Set to 1 to enable 11g 9Mb/s*/
        uint8_t  G12Mbps : 1;                      /*Set to 1 to enable 11g 12Mb/s*/
        uint8_t  G18Mbps : 1;                      /*Set to 1 to enable 11g 18Mb/s*/
        uint8_t  G24Mbps : 1;                      /*Set to 1 to enable 11g 24Mb/s*/
        uint8_t  G36Mbps : 1;                      /*Set to 1 to enable 11g 36Mb/s*/
        uint8_t  G48Mbps : 1;                      /*Set to 1 to enable 11g 48Mb/s*/
        uint8_t  G54Mbps : 1;                      /*Set to 1 to enable 11g 54Mb/s*/
        uint8_t  Mcs0 : 1;                         /*Set to 1 to enable 11n 6.5Mb/s*/
        uint8_t  Mcs1 : 1;                         /*Set to 1 to enable 11n 13Mb/s*/
        uint8_t  Mcs2 : 1;                         /*Set to 1 to enable 11n 19.5Mb/s*/
        uint8_t  Mcs3 : 1;                         /*Set to 1 to enable 11n 26Mb/s*/
        uint8_t  Mcs4 : 1;                         /*Set to 1 to enable 11n 39Mb/s*/
        uint8_t  Mcs5 : 1;                         /*Set to 1 to enable 11n 52Mb/s*/
        uint8_t  Mcs6 : 1;                         /*Set to 1 to enable 11n 58.5Mb/s*/
        uint8_t  Mcs7 : 1;                         /*Set to 1 to enable 11n 65Mb/s*/
        uint8_t  Unused2;                          /*Unused*/        
} WfmHiRateSetBitmask_t;

/**************************************************/

/**************************************************/

/**************************************************/

#ifndef DEF_HDR_MSG
#define DEF_HDR_MSG

typedef struct __attribute__((__packed__)) HiMsgHdr_s {
        uint16_t    MsgLen;
        union 
        {
            uint16_t    U16MsgInfo;
            struct 
            {
                uint8_t     MsgId;
                uint8_t     MsgInfo;
            } t;
            struct 
            {
                uint8_t     Id : 6;
                uint8_t     ULMac : 1;
                uint8_t     MesgType : 1;
                uint8_t     Reserved : 1;
                uint8_t     IntId : 2;
                uint8_t     HostCount : 3;
                uint8_t     SecLink : 2;
            } b;
        } s;
} HiMsgHdr_t ;

#endif

/**************************************************/

typedef struct __attribute__((__packed__)) WfmHiGenericCnf_s {
        HiMsgHdr_t Header;
        uint32_t    Status;
} WfmHiGenericCnf_t ;

/**************************************************/

#ifndef HI_GENERIC_API
#define HI_GENERIC_API

/* request HI_CONTROL_GPIO */
/* Send a request to read and write a gpio */
typedef struct __attribute__((__packed__)) HiControlGpioReqBody_s {
        uint8_t  GpioLabel;                        /*Identify the gpio by its label*/
        uint8_t  GpioMode;                         /*define how to set or read the gpio*/
} HiControlGpioReqBody_t;

typedef struct __attribute__((__packed__)) HiControlGpioReq_s {
        HiMsgHdr_t Header;             
        HiControlGpioReqBody_t Body;               
} HiControlGpioReq_t;

/* confirmation HI_CONTROL_GPIO */
/* Send a request to read and write a gpio */
typedef struct __attribute__((__packed__)) HiControlGpioCnfBody_s {
        uint8_t  Status;                           /*A value of zero indicates the request is completed successfully.*/
        uint8_t  Value;                            /*the value of the gpio or the error*/
} HiControlGpioCnfBody_t;

typedef struct __attribute__((__packed__)) HiControlGpioCnf_s {
        HiMsgHdr_t Header;             
        HiControlGpioCnfBody_t Body;               
} HiControlGpioCnf_t;

/* request HI_SHUT_DOWN */
/* Send a request to shut down the internal power supplies */
typedef HiMsgHdr_t HiShutDownReq_t; 

/* indication HI_EXCEPTION */
/* Send an exception */
typedef struct __attribute__((__packed__)) HiExceptionIndBody_s {
        uint32_t Reason;             
        uint32_t Reserved_0;         
        uint32_t Reserved_1;         
        uint32_t Reserved_2;         
        uint32_t Reserved_3;         
        uint32_t Reserved_4;         
        uint32_t Reserved_5;         
        uint32_t Reserved_6;         
        uint32_t Reserved_7;         
        uint32_t Reserved_8;         
        uint32_t Reserved_9;         
        uint32_t Reserved_10;        
        uint32_t Reserved_11;        
        uint32_t Reserved_12;        
        uint32_t Reserved_13;        
        uint32_t Lr;                               /*ARM register lr.*/
        uint32_t Pc;                               /*ARM register pc.*/
        uint32_t Reserved_14;        
        uint32_t Reserved_15;        
        uint8_t  Reserved_16[48];    
} HiExceptionIndBody_t;

typedef struct __attribute__((__packed__)) HiExceptionInd_s {
        HiMsgHdr_t Header;             
        HiExceptionIndBody_t Body;               
} HiExceptionInd_t;

/* indication HI_ERROR_IND */
/* Send an Error indication to the Host */
typedef struct __attribute__((__packed__)) HiErrorIndBody_s {
        uint32_t Type;               
        uint8_t  Data[API_DATA_SIZE_124];          /*Generic data buffer - contents depends on the error type.*/
} HiErrorIndBody_t;

typedef struct __attribute__((__packed__)) HiErrorInd_s {
        HiMsgHdr_t Header;             
        HiErrorIndBody_t Body;               
} HiErrorInd_t;

/* indication HI_STARTUP */
/* Send an indication during startup */
typedef struct __attribute__((__packed__)) HiStartupIndBody_s {
        uint32_t Status;                           /*Initialization status. same as all indication and confirmation msg*/
        uint16_t HardwareId;                       /*=misc_read_reg7 register*/
        uint8_t  OPN[API_OPN_SIZE];                /*=OTP part_OPN*/ 
        uint8_t  UID[API_UID_SIZE];                /*=OTP UID*/      
        uint16_t NumInpChBufs;                     /*Number of buffers in the input channel 0.*/
        uint16_t SizeInpChBuf;                     /*Buffer size in bytes for the input channel 0.*/
        uint8_t  NumLinksAP;                       /*number of STA that we support in AP mode (currently 16-2)*/
        uint8_t  NumInterfaces;                    /*number of interfaces free to use by the customer (currently 3-1)*/
        uint8_t  MacAddr0[API_MAC_ADDR0_SIZE];     /*1st MAC address derived from OTP*/
        uint8_t  MacAddr1[API_MAC_ADDR1_SIZE];     /*2d MAC address derived from OTP*/
        uint8_t  ApiVersion;         
        uint8_t  Reserved;           
        HiCapabilities_t Capabilities;       
        uint8_t  FirmwareBuild;      
        uint8_t  FirmwareMinor;      
        uint8_t  FirmwareMajor;      
        uint8_t  FirmwareType;                     /*ETF, WFM, WSM*/ 
        uint8_t  DisabledChannelList[API_DISABLED_CHANNEL_LIST_SIZE];   /*=OTP Disabled channel list info*/
        uint8_t  Reserved2[API_RESERVED2_SIZE];
        uint8_t  FirmwareLabel[API_FIRMWARE_LABEL_SIZE];   /*Null terminated text string.*/
} HiStartupIndBody_t;

typedef struct __attribute__((__packed__)) HiStartupInd_s {
        HiMsgHdr_t Header;             
        HiStartupIndBody_t Body;               
} HiStartupInd_t;

/* indication HI_GENERIC_IND */
/* Send a generic indication */
typedef struct __attribute__((__packed__)) HiGenericIndBody_s {
        uint32_t IndicationId;                     /*Identify the indication data.*/
        HiIndicationData_t IndicationData;         /*Indication data.*/
} HiGenericIndBody_t;

typedef struct __attribute__((__packed__)) HiGenericInd_s {
        HiMsgHdr_t Header;             
        HiGenericIndBody_t Body;               
} HiGenericInd_t;

/* request HI_CONFIGURATION */
/* Configure the device and set MAC parameters */
typedef struct __attribute__((__packed__)) HiConfigurationReqBody_s {
        uint16_t Length;                           /*PdsData length in bytes*/
        uint8_t  PdsData[API_PDS_DATA_SIZE];       /*PDS data*/      
} HiConfigurationReqBody_t;

typedef struct __attribute__((__packed__)) HiConfigurationReq_s {
        HiMsgHdr_t Header;             
        HiConfigurationReqBody_t Body;               
} HiConfigurationReq_t;

/* confirmation HI_CONFIGURATION */
/* Configure the device and set MAC parameters */
typedef struct __attribute__((__packed__)) HiConfigurationCnfBody_s {
        uint32_t Status;                           /*Status. The following data is only valid if the confirmation returns STATUS_SUCCESS.*/
        uint32_t SupportedRateMask;                /*This indicates which rates are supported by the PHY. Bits are defined according to rate definition in Section 2.8.*/
        int32_t  Reserved_0;         
        int32_t  Reserved_1;         
        uint32_t Reserved_2;         
} HiConfigurationCnfBody_t;

typedef struct __attribute__((__packed__)) HiConfigurationCnf_s {
        HiMsgHdr_t Header;             
        HiConfigurationCnfBody_t Body;               
} HiConfigurationCnf_t;

/* request HI_SET_SL_MAC_KEY */
/* Set the Secure Link MAC key */
typedef struct __attribute__((__packed__)) HiSetSlMacKeyReqBody_s {
        uint8_t  OtpOrRam;                         /*Key destination - OTP or RAM*/
        uint8_t  KeyValue[API_KEY_VALUE_SIZE];     /*Secure Link MAC Key value*/
} HiSetSlMacKeyReqBody_t;

typedef struct __attribute__((__packed__)) HiSetSlMacKeyReq_s {
        HiMsgHdr_t Header;             
        HiSetSlMacKeyReqBody_t Body;               
} HiSetSlMacKeyReq_t;

/* confirmation HI_SET_SL_MAC_KEY */
/* Set the Secure Link MAC key */
typedef struct __attribute__((__packed__)) HiSetSlMacKeyCnfBody_s {
        uint8_t  Status;                           /*Key upload status*/
} HiSetSlMacKeyCnfBody_t;

typedef struct __attribute__((__packed__)) HiSetSlMacKeyCnf_s {
        HiMsgHdr_t Header;             
        HiSetSlMacKeyCnfBody_t Body;               
} HiSetSlMacKeyCnf_t;

/* request HI_SL_EXCHANGE_PUB_KEYS */
/* Exchange Secure Link Public Keys */
typedef struct __attribute__((__packed__)) HiSlExchangePubKeysReqBody_s {
        uint8_t  HostPubKey[API_HOST_PUB_KEY_SIZE];   /*Host Public Key*/
        uint8_t  HostPubKeyMac[API_HOST_PUB_KEY_MAC_SIZE];   /*Host Public Key MAC*/
} HiSlExchangePubKeysReqBody_t;

typedef struct __attribute__((__packed__)) HiSlExchangePubKeysReq_s {
        HiMsgHdr_t Header;             
        HiSlExchangePubKeysReqBody_t Body;               
} HiSlExchangePubKeysReq_t;

/* confirmation HI_SL_EXCHANGE_PUB_KEYS */
/* Exchange Secure Link Public Keys */
typedef struct __attribute__((__packed__)) HiSlExchangePubKeysCnfBody_s {
        uint8_t  Status;                           /*Request status*/
        uint8_t  NcpPubKey[API_NCP_PUB_KEY_SIZE];   /*NCP Public Key*/
        uint8_t  NcpPubKeyMac[API_NCP_PUB_KEY_MAC_SIZE];   /*NCP Public Key MAC*/
} HiSlExchangePubKeysCnfBody_t;

typedef struct __attribute__((__packed__)) HiSlExchangePubKeysCnf_s {
        HiMsgHdr_t Header;             
        HiSlExchangePubKeysCnfBody_t Body;               
} HiSlExchangePubKeysCnf_t;

/* request HI_SL_CONFIGURE */
/* Configure Secure Link Layer */
typedef struct __attribute__((__packed__)) HiSlConfigureReqBody_s {
        uint8_t  EncrBmp[API_ENCR_BMP_SIZE];       /*Encryption bitmap*/
        uint8_t  SkeyInvld;                        /*Invalidate Session Key*/
} HiSlConfigureReqBody_t;

typedef struct __attribute__((__packed__)) HiSlConfigureReq_s {
        HiMsgHdr_t Header;             
        HiSlConfigureReqBody_t Body;               
} HiSlConfigureReq_t;

/* confirmation HI_SL_CONFIGURE */
/* Configure Secure Link Layer */
typedef struct __attribute__((__packed__)) HiSlConfigureCnfBody_s {
        uint8_t  NcpEncrBmp[API_NCP_ENCR_BMP_SIZE];   /*NCP Encryption Bitmap*/
} HiSlConfigureCnfBody_t;

typedef struct __attribute__((__packed__)) HiSlConfigureCnf_s {
        HiMsgHdr_t Header;             
        HiSlConfigureCnfBody_t Body;               
} HiSlConfigureCnf_t;

/**************************************************/

#endif /*HI_GENERIC_API*/

/* request WFM_HI_SET_MAC_ADDRESS */
/* Set a MAC address for each interface */
typedef struct __attribute__((__packed__)) WfmHiSetMacAddressReqBody_s {
        uint8_t  MacAddr0[WFM_API_MAC_ADDR0_SIZE];   /*MAC address for Interface 0*/
        uint8_t  MacAddr1[WFM_API_MAC_ADDR1_SIZE];   /*MAC address for Interface 1*/
} WfmHiSetMacAddressReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiSetMacAddressReq_s {
        HiMsgHdr_t Header;             
        WfmHiSetMacAddressReqBody_t Body;               
} WfmHiSetMacAddressReq_t;

/* confirmation WFM_HI_SET_MAC_ADDRESS */
/* Set a MAC address for each interface */
typedef struct __attribute__((__packed__)) WfmHiSetMacAddressCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiSetMacAddressCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiSetMacAddressCnf_s {
        HiMsgHdr_t Header;             
        WfmHiSetMacAddressCnfBody_t Body;               
} WfmHiSetMacAddressCnf_t;

/* request WFM_HI_CONNECT */
/* Connect to a network */
typedef struct __attribute__((__packed__)) WfmHiConnectReqBody_s {
        WfmHiSsidDef_t SsidDef;            
        uint8_t  BSSID[WFM_API_BSSID_SIZE];        /*BSSID to connect to.    Broadcast MAC : connect to any matching network.    Other MAC : use a specific BSSID, automatic roaming within SSID disabled.*/
        uint16_t Channel;                          /*Channel to use. 0 - Automatically determined by scanning all channels.    1 to 13 - use a specific channel.*/
        uint8_t  SecurityMode;                     /*Security mode : 0 - open, will only connect to open networks    1 - WEP, will only connect to WEP networks    2 - WPA2/WPA1 PSK : will connect to any WPA Personal network    4 - WPA2 PSK : will only connect to WPA2 Personal networks*/
        uint8_t  PreventRoaming;                   /*Set to 1 to disable automatic roaming*/
        uint16_t MgmtFrameProtection;              /*Protected Management Frames mode :    0 - disabled, PMF not used even if supported by the network    1 - optional, PMF used if supported by the network    2 - mandatory, PMF support required from the network*/
        uint16_t PasswordLength;                   /*The length of the password in bytes.*/
        uint8_t  Password[WFM_API_PASSWORD_SIZE];   /*Password to use : 64-bit WEP key, 128-bit WEP key, WPA passphrase or WPA-PSK (hashed passphrase)*/
        uint16_t IeDataLength;                     /*length of IE data*/
        /* uint32_t IeData;              */        /*IE data added to association request; can contain multiple concatenated IEs; only vendor-specific IEs*/
} WfmHiConnectReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiConnectReq_s {
        HiMsgHdr_t Header;             
        WfmHiConnectReqBody_t Body;               
} WfmHiConnectReq_t;

/* confirmation WFM_HI_CONNECT */
/* Connect to a network */
typedef struct __attribute__((__packed__)) WfmHiConnectCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiConnectCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiConnectCnf_s {
        HiMsgHdr_t Header;             
        WfmHiConnectCnfBody_t Body;               
} WfmHiConnectCnf_t;

/* indication WFM_HI_CONNECT_IND */
/* Connection to a network complete */
typedef struct __attribute__((__packed__)) WfmHiConnectIndBody_s {
        uint8_t  Mac[WFM_API_MAC_SIZE];            /*MAC address of the device*/
        uint16_t Channel;                          /*Channel of the AP*/
        uint16_t DtimPeriod;                       /*DTIM period of the AP*/
        uint16_t MaxPhyRate;                       /*Maximum rate that can be used*/
        uint32_t Status;                           /*Status of the request*/
} WfmHiConnectIndBody_t;

typedef struct __attribute__((__packed__)) WfmHiConnectInd_s {
        HiMsgHdr_t Header;             
        WfmHiConnectIndBody_t Body;               
} WfmHiConnectInd_t;

/* request WFM_HI_DISCONNECT */
/* Disconnect from a network */
typedef HiMsgHdr_t WfmHiDisconnectReq_t; 

/* confirmation WFM_HI_DISCONNECT */
/* Disconnect from a network */
typedef struct __attribute__((__packed__)) WfmHiDisconnectCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiDisconnectCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiDisconnectCnf_s {
        HiMsgHdr_t Header;             
        WfmHiDisconnectCnfBody_t Body;               
} WfmHiDisconnectCnf_t;

/* indication WFM_HI_DISCONNECT_IND */
/* Disconnection from a network complete */
typedef struct __attribute__((__packed__)) WfmHiDisconnectIndBody_s {
        uint8_t  Mac[WFM_API_MAC_SIZE];            /*MAC address of the device*/
        uint16_t Reason;                           /*Status of the request*/
} WfmHiDisconnectIndBody_t;

typedef struct __attribute__((__packed__)) WfmHiDisconnectInd_s {
        HiMsgHdr_t Header;             
        WfmHiDisconnectIndBody_t Body;               
} WfmHiDisconnectInd_t;

/* request WFM_HI_START_AP */
/* Start AP mode */
typedef struct __attribute__((__packed__)) WfmHiStartApReqBody_s {
        WfmHiSsidDef_t SsidDef;            
        uint8_t  HiddenSsid;                       /*Whether SSID is hidden*/
        uint8_t  ClientIsolation;                  /*Whether client isolation is enabled*/
        uint8_t  SecurityMode;                     /*Security mode : 0 - open, will only connect to open networks    1 - WEP, will only connect to WEP networks    2 - WPA2/WPA1 PSK : will connect to any WPA Personal network    4 - WPA2 PSK : will only connect to WPA2 Personal networks*/
        uint8_t  MgmtFrameProtection;              /*PMF: disabled, optional, mandatory*/
        uint16_t Channel;                          /*Channel to use*/
        uint16_t PasswordLength;                   /*The length of the password in bytes.*/
        uint8_t  Password[WFM_API_PASSWORD_SIZE];   /*Password to use : 64-bit WEP key, 128-bit WEP key, WPA passphrase or WPA-PSK (hashed passphrase)*/
        uint16_t BeaconIeDataLength;               /*Length of IE data in beacons*/
        uint16_t ProbeRespIeDataLength;            /*Length of IE data in probe responses*/
        /* uint32_t BeaconIeData;        */        /*IE data added to beacon; only vendor-specific Ies*/
        /* uint32_t ProbeRespIeData;     */        /*IE data added to probe response; only vendor-specific IEs*/
} WfmHiStartApReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiStartApReq_s {
        HiMsgHdr_t Header;             
        WfmHiStartApReqBody_t Body;               
} WfmHiStartApReq_t;

/* confirmation WFM_HI_START_AP */
/* Start AP mode */
typedef struct __attribute__((__packed__)) WfmHiStartApCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiStartApCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiStartApCnf_s {
        HiMsgHdr_t Header;             
        WfmHiStartApCnfBody_t Body;               
} WfmHiStartApCnf_t;

/* indication WFM_HI_START_AP_IND */
/* Started AP mode */
typedef struct __attribute__((__packed__)) WfmHiStartApIndBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiStartApIndBody_t;

typedef struct __attribute__((__packed__)) WfmHiStartApInd_s {
        HiMsgHdr_t Header;             
        WfmHiStartApIndBody_t Body;               
} WfmHiStartApInd_t;

/* request WFM_HI_UPDATE_AP */
/* Update AP mode parameters */
typedef struct __attribute__((__packed__)) WfmHiUpdateApReqBody_s {
        uint16_t BeaconIeDataLength;               /*Length of IE data in beacons*/
        uint16_t ProbeRespIeDataLength;            /*Length of IE data in probe responses*/
        /* uint32_t BeaconIeData;        */        /*IE data added to beacon; only vendor-specific Ies*/
        /* uint32_t ProbeRespIeData;     */        /*IE data added to probe response; only vendor-specific IEs*/
} WfmHiUpdateApReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiUpdateApReq_s {
        HiMsgHdr_t Header;             
        WfmHiUpdateApReqBody_t Body;               
} WfmHiUpdateApReq_t;

/* confirmation WFM_HI_UPDATE_AP */
/* Update AP mode parameters */
typedef struct __attribute__((__packed__)) WfmHiUpdateApCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiUpdateApCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiUpdateApCnf_s {
        HiMsgHdr_t Header;             
        WfmHiUpdateApCnfBody_t Body;               
} WfmHiUpdateApCnf_t;

/* request WFM_HI_STOP_AP */
/* Stop AP mode */
typedef HiMsgHdr_t WfmHiStopApReq_t; 

/* confirmation WFM_HI_STOP_AP */
/* Stop AP mode */
typedef struct __attribute__((__packed__)) WfmHiStopApCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiStopApCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiStopApCnf_s {
        HiMsgHdr_t Header;             
        WfmHiStopApCnfBody_t Body;               
} WfmHiStopApCnf_t;

/* indication WFM_HI_STOP_AP_IND */
/* Stopped AP mode */
typedef HiMsgHdr_t WfmHiStopApInd_t; 

/* request WFM_HI_SEND_FRAME */
/* Send a frame */
typedef struct __attribute__((__packed__)) WfmHiSendFrameReqBody_s {
        uint8_t  FrameType;                        /*Data, management or action*/
        uint8_t  Priority;                         /*Priority of the frame*/
        uint16_t PacketId;                         /*A value allocated by the host that will be returned in the corresponding complete indication*/
        uint32_t PacketDataLength;                 /*Length of the packet data*/
        /* uint32_t PacketData;          */        /*The packet data*/
} WfmHiSendFrameReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiSendFrameReq_s {
        HiMsgHdr_t Header;             
        WfmHiSendFrameReqBody_t Body;               
} WfmHiSendFrameReq_t;

/* confirmation WFM_HI_SEND_FRAME */
/* Send a frame */
typedef struct __attribute__((__packed__)) WfmHiSendFrameCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
        uint16_t PacketId;                         /*Packet identifier*/
        uint16_t Reserved;                         /*reserved*/      
} WfmHiSendFrameCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiSendFrameCnf_s {
        HiMsgHdr_t Header;             
        WfmHiSendFrameCnfBody_t Body;               
} WfmHiSendFrameCnf_t;

/* indication WFM_HI_RECEIVED_IND */
/* Frame received */
typedef struct __attribute__((__packed__)) WfmHiReceivedIndBody_s {
        uint8_t  FrameType;                        /*Data, management or action*/
        uint8_t  FramePadding;                     /*The amount of bytes before frame data*/
        uint16_t FrameLength;                      /*The length of the frame in bytes*/
        /* uint32_t PaddingBytes;        */
        /* uint32_t Frame;               */        /*The received frame*/
} WfmHiReceivedIndBody_t;

typedef struct __attribute__((__packed__)) WfmHiReceivedInd_s {
        HiMsgHdr_t Header;             
        WfmHiReceivedIndBody_t Body;               
} WfmHiReceivedInd_t;

/* request WFM_HI_START_SCAN */
/* Perform a scan */
typedef struct __attribute__((__packed__)) WfmHiStartScanReqBody_s {
        uint16_t ScanMode;                         /*scan mode: active, passive*/
        uint16_t ChannelListCount;                 /*Number of channels to scan*/
        uint16_t SsidListCount;                    /*Number of SSIDs to scan*/
        uint16_t IeDataLength;                     /*Length of the IE data*/
        /* uint8_t  ChannelNumber[WFM_API_CHANNEL_NUMBER_SIZE]; */   /*Channel to scan*/
        /* WfmHiSsidDef_t SsidDef[WFM_API_SSID_DEF_SIZE]; */
        /* uint32_t IeData;              */        /*IE data added to association request; only vendor-specific IEs*/
} WfmHiStartScanReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiStartScanReq_s {
        HiMsgHdr_t Header;             
        WfmHiStartScanReqBody_t Body;               
} WfmHiStartScanReq_t;

/* confirmation WFM_HI_START_SCAN */
/* Perform a scan */
typedef struct __attribute__((__packed__)) WfmHiStartScanCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiStartScanCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiStartScanCnf_s {
        HiMsgHdr_t Header;             
        WfmHiStartScanCnfBody_t Body;               
} WfmHiStartScanCnf_t;

/* request WFM_HI_STOP_SCAN */
/* Stop an ongoing scan */
typedef HiMsgHdr_t WfmHiStopScanReq_t; 

/* confirmation WFM_HI_STOP_SCAN */
/* Stop an ongoing scan */
typedef struct __attribute__((__packed__)) WfmHiStopScanCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiStopScanCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiStopScanCnf_s {
        HiMsgHdr_t Header;             
        WfmHiStopScanCnfBody_t Body;               
} WfmHiStopScanCnf_t;

/* indication WFM_HI_SCAN_RESULT_IND */
/* Scan result */
typedef struct __attribute__((__packed__)) WfmHiScanResultIndBody_s {
        WfmHiSsidDef_t SsidDef;            
        uint8_t  Mac[WFM_API_MAC_SIZE];            /*MAC address*/   
        uint16_t Channel;                          /*Channel*/       
        uint32_t Flags;                            /*Scan result flags*/
        uint16_t Rcpi;                             /*RCPI*/          
        uint16_t IeDataLength;                     /*Length of the IE data*/
        /* uint32_t IeData;              */        /*IE data added to association request; only vendor-specific IEs*/
} WfmHiScanResultIndBody_t;

typedef struct __attribute__((__packed__)) WfmHiScanResultInd_s {
        HiMsgHdr_t Header;             
        WfmHiScanResultIndBody_t Body;               
} WfmHiScanResultInd_t;

/* indication WFM_HI_SCAN_COMPLETE_IND */
/* Scan complete */
typedef struct __attribute__((__packed__)) WfmHiScanCompleteIndBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiScanCompleteIndBody_t;

typedef struct __attribute__((__packed__)) WfmHiScanCompleteInd_s {
        HiMsgHdr_t Header;             
        WfmHiScanCompleteIndBody_t Body;               
} WfmHiScanCompleteInd_t;

/* request WFM_HI_GET_SIGNAL_STRENGTH */
/* Get signal strength */
typedef HiMsgHdr_t WfmHiGetSignalStrengthReq_t; 

/* confirmation WFM_HI_GET_SIGNAL_STRENGTH */
/* Get signal strength */
typedef struct __attribute__((__packed__)) WfmHiGetSignalStrengthCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
        uint32_t Rcpi;                             /*Rcpi measurement*/
} WfmHiGetSignalStrengthCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiGetSignalStrengthCnf_s {
        HiMsgHdr_t Header;             
        WfmHiGetSignalStrengthCnfBody_t Body;               
} WfmHiGetSignalStrengthCnf_t;

/* indication WFM_HI_AP_CLIENT_CONNECTED_IND */
/* AP Client connected */
typedef struct __attribute__((__packed__)) WfmHiApClientConnectedIndBody_s {
        uint8_t  Mac[WFM_API_MAC_SIZE];            /*MAC address the request applies to*/
} WfmHiApClientConnectedIndBody_t;

typedef struct __attribute__((__packed__)) WfmHiApClientConnectedInd_s {
        HiMsgHdr_t Header;             
        WfmHiApClientConnectedIndBody_t Body;               
} WfmHiApClientConnectedInd_t;

/* indication WFM_HI_AP_CLIENT_REJECTED_IND */
/* AP Client rejected */
typedef struct __attribute__((__packed__)) WfmHiApClientRejectedIndBody_s {
        uint8_t  Mac[WFM_API_MAC_SIZE];            /*MAC address the request applies to*/
        uint16_t Reason;                           /*Status of the request*/
} WfmHiApClientRejectedIndBody_t;

typedef struct __attribute__((__packed__)) WfmHiApClientRejectedInd_s {
        HiMsgHdr_t Header;             
        WfmHiApClientRejectedIndBody_t Body;               
} WfmHiApClientRejectedInd_t;

/* request WFM_HI_DISCONNECT_AP_CLIENT */
/* Disconnect AP client */
typedef struct __attribute__((__packed__)) WfmHiDisconnectApClientReqBody_s {
        uint8_t  Mac[WFM_API_MAC_SIZE];            /*MAC address the request applies to*/
} WfmHiDisconnectApClientReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiDisconnectApClientReq_s {
        HiMsgHdr_t Header;             
        WfmHiDisconnectApClientReqBody_t Body;               
} WfmHiDisconnectApClientReq_t;

/* confirmation WFM_HI_DISCONNECT_AP_CLIENT */
/* Disconnect AP client */
typedef struct __attribute__((__packed__)) WfmHiDisconnectApClientCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiDisconnectApClientCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiDisconnectApClientCnf_s {
        HiMsgHdr_t Header;             
        WfmHiDisconnectApClientCnfBody_t Body;               
} WfmHiDisconnectApClientCnf_t;

/* indication WFM_HI_AP_CLIENT_DISCONNECTED_IND */
/* AP Client disconnected */
typedef struct __attribute__((__packed__)) WfmHiApClientDisconnectedIndBody_s {
        uint8_t  Mac[WFM_API_MAC_SIZE];            /*MAC address the request applies to*/
        uint16_t Reason;                           /*Status of the request*/
} WfmHiApClientDisconnectedIndBody_t;

typedef struct __attribute__((__packed__)) WfmHiApClientDisconnectedInd_s {
        HiMsgHdr_t Header;             
        WfmHiApClientDisconnectedIndBody_t Body;               
} WfmHiApClientDisconnectedInd_t;

/* request WFM_HI_JOIN_IBSS */
/* Join or create an IBSS */
typedef struct __attribute__((__packed__)) WfmHiJoinIbssReqBody_s {
        WfmHiSsidDef_t SsidDef;            
        uint32_t Channel;                          /*Channel*/       
        uint16_t SecurityMode;                     /*Security mode : 0 - open, will only connect to open networks    1 - WEP, will only connect to WEP networks*/
        uint16_t PasswordLength;                   /*The length of the password in bytes.*/
        uint8_t  Password[WFM_API_PASSWORD_SIZE];   /*Password to use : 64-bit WEP key or 128-bit WEP key*/
} WfmHiJoinIbssReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiJoinIbssReq_s {
        HiMsgHdr_t Header;             
        WfmHiJoinIbssReqBody_t Body;               
} WfmHiJoinIbssReq_t;

/* confirmation WFM_HI_JOIN_IBSS */
/* Join or create an IBSS */
typedef struct __attribute__((__packed__)) WfmHiJoinIbssCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiJoinIbssCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiJoinIbssCnf_s {
        HiMsgHdr_t Header;             
        WfmHiJoinIbssCnfBody_t Body;               
} WfmHiJoinIbssCnf_t;

/* indication WFM_HI_JOIN_IBSS_IND */
/* Connection to an IBSS complete */
typedef struct __attribute__((__packed__)) WfmHiJoinIbssIndBody_s {
        uint8_t  Bssid[WFM_API_BSSID_SIZE];        /*BSSID of the network*/
        uint16_t Reserved;                         /*Reserved*/      
        uint32_t Status;                           /*Status of the request*/
} WfmHiJoinIbssIndBody_t;

typedef struct __attribute__((__packed__)) WfmHiJoinIbssInd_s {
        HiMsgHdr_t Header;             
        WfmHiJoinIbssIndBody_t Body;               
} WfmHiJoinIbssInd_t;

/* request WFM_HI_LEAVE_IBSS */
/* Leave an IBSS */
typedef HiMsgHdr_t WfmHiLeaveIbssReq_t; 

/* confirmation WFM_HI_LEAVE_IBSS */
/* Leave an IBSS */
typedef struct __attribute__((__packed__)) WfmHiLeaveIbssCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiLeaveIbssCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiLeaveIbssCnf_s {
        HiMsgHdr_t Header;             
        WfmHiLeaveIbssCnfBody_t Body;               
} WfmHiLeaveIbssCnf_t;

/* indication WFM_HI_LEAVE_IBSS_IND */
/* Left IBSS */
typedef HiMsgHdr_t WfmHiLeaveIbssInd_t; 

/* request WFM_HI_SET_PM_MODE */
/* Set pm mode */
typedef struct __attribute__((__packed__)) WfmHiSetPmModeReqBody_s {
        uint16_t PowerMode;                        /*802.11 PS mode, 0: active, 1: wake-up on beacons, 2: wake-up on DTIMs*/
        uint16_t ListenInterval;                   /*Number of beacons/DTIMs to sleep, 0: wake-up on every beacon/DTIM*/
} WfmHiSetPmModeReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiSetPmModeReq_s {
        HiMsgHdr_t Header;             
        WfmHiSetPmModeReqBody_t Body;               
} WfmHiSetPmModeReq_t;

/* confirmation WFM_HI_SET_PM_MODE */
/* Set pm mode */
typedef struct __attribute__((__packed__)) WfmHiSetPmModeCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiSetPmModeCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiSetPmModeCnf_s {
        HiMsgHdr_t Header;             
        WfmHiSetPmModeCnfBody_t Body;               
} WfmHiSetPmModeCnf_t;

/* request WFM_HI_ADD_MULTICAST_ADDR */
/* Add multicast address */
typedef struct __attribute__((__packed__)) WfmHiAddMulticastAddrReqBody_s {
        uint8_t  Mac[WFM_API_MAC_SIZE];            /*MAC address the request applies to*/
} WfmHiAddMulticastAddrReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiAddMulticastAddrReq_s {
        HiMsgHdr_t Header;             
        WfmHiAddMulticastAddrReqBody_t Body;               
} WfmHiAddMulticastAddrReq_t;

/* confirmation WFM_HI_ADD_MULTICAST_ADDR */
/* Add multicast address */
typedef struct __attribute__((__packed__)) WfmHiAddMulticastAddrCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiAddMulticastAddrCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiAddMulticastAddrCnf_s {
        HiMsgHdr_t Header;             
        WfmHiAddMulticastAddrCnfBody_t Body;               
} WfmHiAddMulticastAddrCnf_t;

/* request WFM_HI_REMOVE_MULTICAST_ADDR */
/* Remove multicast address */
typedef struct __attribute__((__packed__)) WfmHiRemoveMulticastAddrReqBody_s {
        uint8_t  Mac[WFM_API_MAC_SIZE];            /*MAC address the request applies to*/
} WfmHiRemoveMulticastAddrReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiRemoveMulticastAddrReq_s {
        HiMsgHdr_t Header;             
        WfmHiRemoveMulticastAddrReqBody_t Body;               
} WfmHiRemoveMulticastAddrReq_t;

/* confirmation WFM_HI_REMOVE_MULTICAST_ADDR */
/* Remove multicast address */
typedef struct __attribute__((__packed__)) WfmHiRemoveMulticastAddrCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiRemoveMulticastAddrCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiRemoveMulticastAddrCnf_s {
        HiMsgHdr_t Header;             
        WfmHiRemoveMulticastAddrCnfBody_t Body;               
} WfmHiRemoveMulticastAddrCnf_t;

/* request WFM_HI_SET_MAX_AP_CLIENT_COUNT */
/* Set maximum AP client count */
typedef struct __attribute__((__packed__)) WfmHiSetMaxApClientCountReqBody_s {
        uint32_t Count;                            /*Maximum amount of AP clients, 0 for default*/
} WfmHiSetMaxApClientCountReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiSetMaxApClientCountReq_s {
        HiMsgHdr_t Header;             
        WfmHiSetMaxApClientCountReqBody_t Body;               
} WfmHiSetMaxApClientCountReq_t;

/* confirmation WFM_HI_SET_MAX_AP_CLIENT_COUNT */
/* Set maximum AP client count */
typedef struct __attribute__((__packed__)) WfmHiSetMaxApClientCountCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiSetMaxApClientCountCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiSetMaxApClientCountCnf_s {
        HiMsgHdr_t Header;             
        WfmHiSetMaxApClientCountCnfBody_t Body;               
} WfmHiSetMaxApClientCountCnf_t;

/* request WFM_HI_SET_MAX_AP_CLIENT_INACTIVITY */
/* Set maximum AP client inactivity */
typedef struct __attribute__((__packed__)) WfmHiSetMaxApClientInactivityReqBody_s {
        uint32_t InactivityTimeout;                /*Inactivity timeout in seconds, 0 for default*/
} WfmHiSetMaxApClientInactivityReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiSetMaxApClientInactivityReq_s {
        HiMsgHdr_t Header;             
        WfmHiSetMaxApClientInactivityReqBody_t Body;               
} WfmHiSetMaxApClientInactivityReq_t;

/* confirmation WFM_HI_SET_MAX_AP_CLIENT_INACTIVITY */
/* Set maximum AP client inactivity */
typedef struct __attribute__((__packed__)) WfmHiSetMaxApClientInactivityCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiSetMaxApClientInactivityCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiSetMaxApClientInactivityCnf_s {
        HiMsgHdr_t Header;             
        WfmHiSetMaxApClientInactivityCnfBody_t Body;               
} WfmHiSetMaxApClientInactivityCnf_t;

/* request WFM_HI_SET_ROAM_PARAMETERS */
/* Set roam parameters */
typedef struct __attribute__((__packed__)) WfmHiSetRoamParametersReqBody_s {
        uint8_t  RcpiThreshold;                    /*0 for FW default, 1 to 255 means -109.5 to 17.5 by 0.5dBm steps.    For example RCPI_threshold=80 equals -70dBm, and RCPI_threshold=120 equals -50dBm*/
        uint8_t  RcpiHysteresis;                   /*0 for FW default, 1 to 255.    Must be greater than RCPI_threshold*/
        uint8_t  BeaconLostCount;                  /*0 for FW default, 1 - 50*/
        uint8_t  ChannelListCount;                 /*Number of channels to scan : 0 for all channels, 1 - 13*/
        /* uint8_t  ChannelNumber[WFM_API_CHANNEL_NUMBER_SIZE]; */   /*Channel to scan, empty for all channels*/
} WfmHiSetRoamParametersReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiSetRoamParametersReq_s {
        HiMsgHdr_t Header;             
        WfmHiSetRoamParametersReqBody_t Body;               
} WfmHiSetRoamParametersReq_t;

/* confirmation WFM_HI_SET_ROAM_PARAMETERS */
/* Set roam parameters */
typedef struct __attribute__((__packed__)) WfmHiSetRoamParametersCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiSetRoamParametersCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiSetRoamParametersCnf_s {
        HiMsgHdr_t Header;             
        WfmHiSetRoamParametersCnfBody_t Body;               
} WfmHiSetRoamParametersCnf_t;

/* request WFM_HI_SET_TX_RATE_PARAMETERS */
/* Set tx rate parameters */
typedef struct __attribute__((__packed__)) WfmHiSetTxRateParametersReqBody_s {
        uint32_t Reserved;                         /*Reserved*/      
        WfmHiRateSetBitmask_t RateSetBitmask;     
} WfmHiSetTxRateParametersReqBody_t;

typedef struct __attribute__((__packed__)) WfmHiSetTxRateParametersReq_s {
        HiMsgHdr_t Header;             
        WfmHiSetTxRateParametersReqBody_t Body;               
} WfmHiSetTxRateParametersReq_t;

/* confirmation WFM_HI_SET_TX_RATE_PARAMETERS */
/* Set tx rate parameters */
typedef struct __attribute__((__packed__)) WfmHiSetTxRateParametersCnfBody_s {
        uint32_t Status;                           /*Status of the request*/
} WfmHiSetTxRateParametersCnfBody_t;

typedef struct __attribute__((__packed__)) WfmHiSetTxRateParametersCnf_s {
        HiMsgHdr_t Header;             
        WfmHiSetTxRateParametersCnfBody_t Body;               
} WfmHiSetTxRateParametersCnf_t;

/**************************************************/

#endif  /* _WFX_FM_H_ */
